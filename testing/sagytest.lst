     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 11                      	db T_rational	; 121
    84 00000007 790000000000000001-     	dq 121, 1
    84 00000010 00000000000000     
    85 00000017 11                      	db T_rational	; 212
    86 00000018 D40000000000000001-     	dq 212, 1
    86 00000021 00000000000000     
    87                                  
    88                                  section .bss
    89                                  free_var_0:	; location of null?
    90 00000000 <res 00000008>          	resq 1
    91                                  free_var_1:	; location of pair?
    92 00000008 <res 00000008>          	resq 1
    93                                  free_var_2:	; location of void?
    94 00000010 <res 00000008>          	resq 1
    95                                  free_var_3:	; location of char?
    96 00000018 <res 00000008>          	resq 1
    97                                  free_var_4:	; location of string?
    98 00000020 <res 00000008>          	resq 1
    99                                  free_var_5:	; location of symbol?
   100 00000028 <res 00000008>          	resq 1
   101                                  free_var_6:	; location of vector?
   102 00000030 <res 00000008>          	resq 1
   103                                  free_var_7:	; location of procedure?
   104 00000038 <res 00000008>          	resq 1
   105                                  free_var_8:	; location of real?
   106 00000040 <res 00000008>          	resq 1
   107                                  free_var_9:	; location of rational?
   108 00000048 <res 00000008>          	resq 1
   109                                  free_var_10:	; location of boolean?
   110 00000050 <res 00000008>          	resq 1
   111                                  free_var_11:	; location of number?
   112 00000058 <res 00000008>          	resq 1
   113                                  free_var_12:	; location of collection?
   114 00000060 <res 00000008>          	resq 1
   115                                  free_var_13:	; location of cons
   116 00000068 <res 00000008>          	resq 1
   117                                  free_var_14:	; location of display-sexpr
   118 00000070 <res 00000008>          	resq 1
   119                                  free_var_15:	; location of write-char
   120 00000078 <res 00000008>          	resq 1
   121                                  free_var_16:	; location of car
   122 00000080 <res 00000008>          	resq 1
   123                                  free_var_17:	; location of cdr
   124 00000088 <res 00000008>          	resq 1
   125                                  free_var_18:	; location of string-length
   126 00000090 <res 00000008>          	resq 1
   127                                  free_var_19:	; location of vector-length
   128 00000098 <res 00000008>          	resq 1
   129                                  free_var_20:	; location of real->integer
   130 000000A0 <res 00000008>          	resq 1
   131                                  free_var_21:	; location of exit
   132 000000A8 <res 00000008>          	resq 1
   133                                  free_var_22:	; location of integer->real
   134 000000B0 <res 00000008>          	resq 1
   135                                  free_var_23:	; location of rational->real
   136 000000B8 <res 00000008>          	resq 1
   137                                  free_var_24:	; location of char->integer
   138 000000C0 <res 00000008>          	resq 1
   139                                  free_var_25:	; location of integer->char
   140 000000C8 <res 00000008>          	resq 1
   141                                  free_var_26:	; location of trng
   142 000000D0 <res 00000008>          	resq 1
   143                                  free_var_27:	; location of zero?
   144 000000D8 <res 00000008>          	resq 1
   145                                  free_var_28:	; location of integer?
   146 000000E0 <res 00000008>          	resq 1
   147                                  free_var_29:	; location of __bin-apply
   148 000000E8 <res 00000008>          	resq 1
   149                                  free_var_30:	; location of __bin-add-rr
   150 000000F0 <res 00000008>          	resq 1
   151                                  free_var_31:	; location of __bin-sub-rr
   152 000000F8 <res 00000008>          	resq 1
   153                                  free_var_32:	; location of __bin-mul-rr
   154 00000100 <res 00000008>          	resq 1
   155                                  free_var_33:	; location of __bin-div-rr
   156 00000108 <res 00000008>          	resq 1
   157                                  free_var_34:	; location of __bin-add-qq
   158 00000110 <res 00000008>          	resq 1
   159                                  free_var_35:	; location of __bin-sub-qq
   160 00000118 <res 00000008>          	resq 1
   161                                  free_var_36:	; location of __bin-mul-qq
   162 00000120 <res 00000008>          	resq 1
   163                                  free_var_37:	; location of __bin-div-qq
   164 00000128 <res 00000008>          	resq 1
   165                                  free_var_38:	; location of error
   166 00000130 <res 00000008>          	resq 1
   167                                  free_var_39:	; location of __bin-less-than-rr
   168 00000138 <res 00000008>          	resq 1
   169                                  free_var_40:	; location of __bin-less-than-qq
   170 00000140 <res 00000008>          	resq 1
   171                                  free_var_41:	; location of __bin-equal-rr
   172 00000148 <res 00000008>          	resq 1
   173                                  free_var_42:	; location of __bin-equal-qq
   174 00000150 <res 00000008>          	resq 1
   175                                  free_var_43:	; location of quotient
   176 00000158 <res 00000008>          	resq 1
   177                                  free_var_44:	; location of remainder
   178 00000160 <res 00000008>          	resq 1
   179                                  free_var_45:	; location of set-car!
   180 00000168 <res 00000008>          	resq 1
   181                                  free_var_46:	; location of set-cdr!
   182 00000170 <res 00000008>          	resq 1
   183                                  free_var_47:	; location of string-ref
   184 00000178 <res 00000008>          	resq 1
   185                                  free_var_48:	; location of vector-ref
   186 00000180 <res 00000008>          	resq 1
   187                                  free_var_49:	; location of vector-set!
   188 00000188 <res 00000008>          	resq 1
   189                                  free_var_50:	; location of string-set!
   190 00000190 <res 00000008>          	resq 1
   191                                  free_var_51:	; location of make-vector
   192 00000198 <res 00000008>          	resq 1
   193                                  free_var_52:	; location of make-string
   194 000001A0 <res 00000008>          	resq 1
   195                                  free_var_53:	; location of numerator
   196 000001A8 <res 00000008>          	resq 1
   197                                  free_var_54:	; location of denominator
   198 000001B0 <res 00000008>          	resq 1
   199                                  free_var_55:	; location of eq?
   200 000001B8 <res 00000008>          	resq 1
   201                                  free_var_56:	; location of apply
   202 000001C0 <res 00000008>          	resq 1
   203                                  
   204                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   205                                  global main
   206                                  section .text
   207                                  main:
   208 00000000 C8000000                        enter 0, 0
   209                                          
   210                                  	; building closure for null?
   211 00000004 48BF-                   	mov rdi, free_var_0
   211 00000006 [0000000000000000] 
   212 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   212 00000010 [390C000000000000] 
   213 00000018 E8AF0B0000              	call bind_primitive
   214                                  
   215                                  	; building closure for pair?
   216 0000001D 48BF-                   	mov rdi, free_var_1
   216 0000001F [0800000000000000] 
   217 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   217 00000029 [6F0C000000000000] 
   218 00000031 E8960B0000              	call bind_primitive
   219                                  
   220                                  	; building closure for void?
   221 00000036 48BF-                   	mov rdi, free_var_2
   221 00000038 [1000000000000000] 
   222 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   222 00000042 [A50C000000000000] 
   223 0000004A E87D0B0000              	call bind_primitive
   224                                  
   225                                  	; building closure for char?
   226 0000004F 48BF-                   	mov rdi, free_var_3
   226 00000051 [1800000000000000] 
   227 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   227 0000005B [DB0C000000000000] 
   228 00000063 E8640B0000              	call bind_primitive
   229                                  
   230                                  	; building closure for string?
   231 00000068 48BF-                   	mov rdi, free_var_4
   231 0000006A [2000000000000000] 
   232 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   232 00000074 [110D000000000000] 
   233 0000007C E84B0B0000              	call bind_primitive
   234                                  
   235                                  	; building closure for symbol?
   236 00000081 48BF-                   	mov rdi, free_var_5
   236 00000083 [2800000000000000] 
   237 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   237 0000008D [470D000000000000] 
   238 00000095 E8320B0000              	call bind_primitive
   239                                  
   240                                  	; building closure for vector?
   241 0000009A 48BF-                   	mov rdi, free_var_6
   241 0000009C [3000000000000000] 
   242 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   242 000000A6 [7D0D000000000000] 
   243 000000AE E8190B0000              	call bind_primitive
   244                                  
   245                                  	; building closure for procedure?
   246 000000B3 48BF-                   	mov rdi, free_var_7
   246 000000B5 [3800000000000000] 
   247 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   247 000000BF [B30D000000000000] 
   248 000000C7 E8000B0000              	call bind_primitive
   249                                  
   250                                  	; building closure for real?
   251 000000CC 48BF-                   	mov rdi, free_var_8
   251 000000CE [4000000000000000] 
   252 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   252 000000D8 [E90D000000000000] 
   253 000000E0 E8E70A0000              	call bind_primitive
   254                                  
   255                                  	; building closure for rational?
   256 000000E5 48BF-                   	mov rdi, free_var_9
   256 000000E7 [4800000000000000] 
   257 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   257 000000F1 [1F0E000000000000] 
   258 000000F9 E8CE0A0000              	call bind_primitive
   259                                  
   260                                  	; building closure for boolean?
   261 000000FE 48BF-                   	mov rdi, free_var_10
   261 00000100 [5000000000000000] 
   262 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   262 0000010A [550E000000000000] 
   263 00000112 E8B50A0000              	call bind_primitive
   264                                  
   265                                  	; building closure for number?
   266 00000117 48BF-                   	mov rdi, free_var_11
   266 00000119 [5800000000000000] 
   267 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   267 00000123 [8D0E000000000000] 
   268 0000012B E89C0A0000              	call bind_primitive
   269                                  
   270                                  	; building closure for collection?
   271 00000130 48BF-                   	mov rdi, free_var_12
   271 00000132 [6000000000000000] 
   272 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   272 0000013C [C50E000000000000] 
   273 00000144 E8830A0000              	call bind_primitive
   274                                  
   275                                  	; building closure for cons
   276 00000149 48BF-                   	mov rdi, free_var_13
   276 0000014B [6800000000000000] 
   277 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   277 00000155 [FD0E000000000000] 
   278 0000015D E86A0A0000              	call bind_primitive
   279                                  
   280                                  	; building closure for display-sexpr
   281 00000162 48BF-                   	mov rdi, free_var_14
   281 00000164 [7000000000000000] 
   282 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   282 0000016E [310F000000000000] 
   283 00000176 E8510A0000              	call bind_primitive
   284                                  
   285                                  	; building closure for write-char
   286 0000017B 48BF-                   	mov rdi, free_var_15
   286 0000017D [7800000000000000] 
   287 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   287 00000187 [5B0F000000000000] 
   288 0000018F E8380A0000              	call bind_primitive
   289                                  
   290                                  	; building closure for car
   291 00000194 48BF-                   	mov rdi, free_var_16
   291 00000196 [8000000000000000] 
   292 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   292 000001A0 [A90F000000000000] 
   293 000001A8 E81F0A0000              	call bind_primitive
   294                                  
   295                                  	; building closure for cdr
   296 000001AD 48BF-                   	mov rdi, free_var_17
   296 000001AF [8800000000000000] 
   297 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   297 000001B9 [D10F000000000000] 
   298 000001C1 E8060A0000              	call bind_primitive
   299                                  
   300                                  	; building closure for string-length
   301 000001C6 48BF-                   	mov rdi, free_var_18
   301 000001C8 [9000000000000000] 
   302 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   302 000001D2 [F90F000000000000] 
   303 000001DA E8ED090000              	call bind_primitive
   304                                  
   305                                  	; building closure for vector-length
   306 000001DF 48BF-                   	mov rdi, free_var_19
   306 000001E1 [9800000000000000] 
   307 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   307 000001EB [2610000000000000] 
   308 000001F3 E8D4090000              	call bind_primitive
   309                                  
   310                                  	; building closure for real->integer
   311 000001F8 48BF-                   	mov rdi, free_var_20
   311 000001FA [A000000000000000] 
   312 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   312 00000204 [5310000000000000] 
   313 0000020C E8BB090000              	call bind_primitive
   314                                  
   315                                  	; building closure for exit
   316 00000211 48BF-                   	mov rdi, free_var_21
   316 00000213 [A800000000000000] 
   317 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   317 0000021D [8610000000000000] 
   318 00000225 E8A2090000              	call bind_primitive
   319                                  
   320                                  	; building closure for integer->real
   321 0000022A 48BF-                   	mov rdi, free_var_22
   321 0000022C [B000000000000000] 
   322 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   322 00000236 [A310000000000000] 
   323 0000023E E889090000              	call bind_primitive
   324                                  
   325                                  	; building closure for rational->real
   326 00000243 48BF-                   	mov rdi, free_var_23
   326 00000245 [B800000000000000] 
   327 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   327 0000024F [E010000000000000] 
   328 00000257 E870090000              	call bind_primitive
   329                                  
   330                                  	; building closure for char->integer
   331 0000025C 48BF-                   	mov rdi, free_var_24
   331 0000025E [C000000000000000] 
   332 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   332 00000268 [1F11000000000000] 
   333 00000270 E857090000              	call bind_primitive
   334                                  
   335                                  	; building closure for integer->char
   336 00000275 48BF-                   	mov rdi, free_var_25
   336 00000277 [C800000000000000] 
   337 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   337 00000281 [5411000000000000] 
   338 00000289 E83E090000              	call bind_primitive
   339                                  
   340                                  	; building closure for trng
   341 0000028E 48BF-                   	mov rdi, free_var_26
   341 00000290 [D000000000000000] 
   342 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   342 0000029A [AE11000000000000] 
   343 000002A2 E825090000              	call bind_primitive
   344                                  
   345                                  	; building closure for zero?
   346 000002A7 48BF-                   	mov rdi, free_var_27
   346 000002A9 [D800000000000000] 
   347 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   347 000002B3 [D111000000000000] 
   348 000002BB E80C090000              	call bind_primitive
   349                                  
   350                                  	; building closure for integer?
   351 000002C0 48BF-                   	mov rdi, free_var_28
   351 000002C2 [E000000000000000] 
   352 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   352 000002CC [2C12000000000000] 
   353 000002D4 E8F3080000              	call bind_primitive
   354                                  
   355                                  	; building closure for __bin-apply
   356 000002D9 48BF-                   	mov rdi, free_var_29
   356 000002DB [E800000000000000] 
   357 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   357 000002E5 [F40B000000000000] 
   358 000002ED E8DA080000              	call bind_primitive
   359                                  
   360                                  	; building closure for __bin-add-rr
   361 000002F2 48BF-                   	mov rdi, free_var_30
   361 000002F4 [F000000000000000] 
   362 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   362 000002FE [6912000000000000] 
   363 00000306 E8C1080000              	call bind_primitive
   364                                  
   365                                  	; building closure for __bin-sub-rr
   366 0000030B 48BF-                   	mov rdi, free_var_31
   366 0000030D [F800000000000000] 
   367 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   367 00000317 [AD12000000000000] 
   368 0000031F E8A8080000              	call bind_primitive
   369                                  
   370                                  	; building closure for __bin-mul-rr
   371 00000324 48BF-                   	mov rdi, free_var_32
   371 00000326 [0001000000000000] 
   372 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   372 00000330 [F112000000000000] 
   373 00000338 E88F080000              	call bind_primitive
   374                                  
   375                                  	; building closure for __bin-div-rr
   376 0000033D 48BF-                   	mov rdi, free_var_33
   376 0000033F [0801000000000000] 
   377 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   377 00000349 [3513000000000000] 
   378 00000351 E876080000              	call bind_primitive
   379                                  
   380                                  	; building closure for __bin-add-qq
   381 00000356 48BF-                   	mov rdi, free_var_34
   381 00000358 [1001000000000000] 
   382 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   382 00000362 [8713000000000000] 
   383 0000036A E85D080000              	call bind_primitive
   384                                  
   385                                  	; building closure for __bin-sub-qq
   386 0000036F 48BF-                   	mov rdi, free_var_35
   386 00000371 [1801000000000000] 
   387 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   387 0000037B [EF13000000000000] 
   388 00000383 E844080000              	call bind_primitive
   389                                  
   390                                  	; building closure for __bin-mul-qq
   391 00000388 48BF-                   	mov rdi, free_var_36
   391 0000038A [2001000000000000] 
   392 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   392 00000394 [5714000000000000] 
   393 0000039C E82B080000              	call bind_primitive
   394                                  
   395                                  	; building closure for __bin-div-qq
   396 000003A1 48BF-                   	mov rdi, free_var_37
   396 000003A3 [2801000000000000] 
   397 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   397 000003AD [AF14000000000000] 
   398 000003B5 E812080000              	call bind_primitive
   399                                  
   400                                  	; building closure for error
   401 000003BA 48BF-                   	mov rdi, free_var_38
   401 000003BC [3001000000000000] 
   402 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   402 000003C6 [7D15000000000000] 
   403 000003CE E8F9070000              	call bind_primitive
   404                                  
   405                                  	; building closure for __bin-less-than-rr
   406 000003D3 48BF-                   	mov rdi, free_var_39
   406 000003D5 [3801000000000000] 
   407 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   407 000003DF [1916000000000000] 
   408 000003E7 E8E0070000              	call bind_primitive
   409                                  
   410                                  	; building closure for __bin-less-than-qq
   411 000003EC 48BF-                   	mov rdi, free_var_40
   411 000003EE [4001000000000000] 
   412 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   412 000003F8 [7016000000000000] 
   413 00000400 E8C7070000              	call bind_primitive
   414                                  
   415                                  	; building closure for __bin-equal-rr
   416 00000405 48BF-                   	mov rdi, free_var_41
   416 00000407 [4801000000000000] 
   417 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   417 00000411 [D316000000000000] 
   418 00000419 E8AE070000              	call bind_primitive
   419                                  
   420                                  	; building closure for __bin-equal-qq
   421 0000041E 48BF-                   	mov rdi, free_var_42
   421 00000420 [5001000000000000] 
   422 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   422 0000042A [2A17000000000000] 
   423 00000432 E895070000              	call bind_primitive
   424                                  
   425                                  	; building closure for quotient
   426 00000437 48BF-                   	mov rdi, free_var_43
   426 00000439 [5801000000000000] 
   427 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   427 00000443 [8D17000000000000] 
   428 0000044B E87C070000              	call bind_primitive
   429                                  
   430                                  	; building closure for remainder
   431 00000450 48BF-                   	mov rdi, free_var_44
   431 00000452 [6001000000000000] 
   432 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   432 0000045C [F317000000000000] 
   433 00000464 E863070000              	call bind_primitive
   434                                  
   435                                  	; building closure for set-car!
   436 00000469 48BF-                   	mov rdi, free_var_45
   436 0000046B [6801000000000000] 
   437 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   437 00000475 [5918000000000000] 
   438 0000047D E84A070000              	call bind_primitive
   439                                  
   440                                  	; building closure for set-cdr!
   441 00000482 48BF-                   	mov rdi, free_var_46
   441 00000484 [7001000000000000] 
   442 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   442 0000048E [8F18000000000000] 
   443 00000496 E831070000              	call bind_primitive
   444                                  
   445                                  	; building closure for string-ref
   446 0000049B 48BF-                   	mov rdi, free_var_47
   446 0000049D [7801000000000000] 
   447 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   447 000004A7 [C518000000000000] 
   448 000004AF E818070000              	call bind_primitive
   449                                  
   450                                  	; building closure for vector-ref
   451 000004B4 48BF-                   	mov rdi, free_var_48
   451 000004B6 [8001000000000000] 
   452 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   452 000004C0 [3019000000000000] 
   453 000004C8 E8FF060000              	call bind_primitive
   454                                  
   455                                  	; building closure for vector-set!
   456 000004CD 48BF-                   	mov rdi, free_var_49
   456 000004CF [8801000000000000] 
   457 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   457 000004D9 [8C19000000000000] 
   458 000004E1 E8E6060000              	call bind_primitive
   459                                  
   460                                  	; building closure for string-set!
   461 000004E6 48BF-                   	mov rdi, free_var_50
   461 000004E8 [9001000000000000] 
   462 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   462 000004F2 [F619000000000000] 
   463 000004FA E8CD060000              	call bind_primitive
   464                                  
   465                                  	; building closure for make-vector
   466 000004FF 48BF-                   	mov rdi, free_var_51
   466 00000501 [9801000000000000] 
   467 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   467 0000050B [6B1A000000000000] 
   468 00000513 E8B4060000              	call bind_primitive
   469                                  
   470                                  	; building closure for make-string
   471 00000518 48BF-                   	mov rdi, free_var_52
   471 0000051A [A001000000000000] 
   472 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   472 00000524 [D51A000000000000] 
   473 0000052C E89B060000              	call bind_primitive
   474                                  
   475                                  	; building closure for numerator
   476 00000531 48BF-                   	mov rdi, free_var_53
   476 00000533 [A801000000000000] 
   477 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   477 0000053D [471B000000000000] 
   478 00000545 E882060000              	call bind_primitive
   479                                  
   480                                  	; building closure for denominator
   481 0000054A 48BF-                   	mov rdi, free_var_54
   481 0000054C [B001000000000000] 
   482 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   482 00000556 [741B000000000000] 
   483 0000055E E869060000              	call bind_primitive
   484                                  
   485                                  	; building closure for eq?
   486 00000563 48BF-                   	mov rdi, free_var_55
   486 00000565 [B801000000000000] 
   487 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   487 0000056F [A11B000000000000] 
   488 00000577 E850060000              	call bind_primitive
   489                                  
   490                                  	; building closure for apply
   491 0000057C 48BF-                   	mov rdi, free_var_56
   491 0000057E [C001000000000000] 
   492 00000586 48BE-                   	mov rsi, L_code_ptr_bin_apply
   492 00000588 [F40B000000000000] 
   493 00000590 E837060000              	call bind_primitive
   494                                  
   495 00000595 48B8-                   	mov rax, qword (L_constants + 23)
   495 00000597 [1700000000000000] 
   496 0000059F 50                      	push rax
   497 000005A0 48B8-                   	mov rax, qword (L_constants + 6)
   497 000005A2 [0600000000000000] 
   498 000005AA 50                      	push rax
   499 000005AB 488B0425[68000000]      	mov rax, qword [free_var_13]
   500 000005B3 50                      	push rax
   501 000005B4 6A03                    	push 3
   502 000005B6 488B0425[C0010000]      	mov rax, qword [free_var_56]
   503 000005BE 803805                  	cmp byte [rax], T_closure 
   504 000005C1 0F85B60F0000                    jne L_code_ptr_error
   505                                  
   506 000005C7 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
   507                                  
   508 000005CB 53                              push rbx
   509                                  
   510 000005CC FF5009                          call SOB_CLOSURE_CODE(rax)
   511                                  
   512                                          
   513 000005CF 4889C7                  	mov rdi, rax
   514 000005D2 E8C4000000              	call print_sexpr_if_not_void
   515                                  
   516 000005D7 48BF-                           mov rdi, fmt_memory_usage
   516 000005D9 [8700000000000000] 
   517 000005E1 488B3425[0E010000]              mov rsi, qword [top_of_memory]
   518 000005E9 4881EE[C8010000]                sub rsi, memory
   519 000005F0 B800000000                      mov rax, 0
   520 000005F5 E8(00000000)                    call printf
   521 000005FA C9                      	leave
   522 000005FB C3                      	ret
   523                                  
   524                                  L_error_non_closure:
   525 000005FC 488B3C25[00000000]              mov rdi, qword [stderr]
   526 00000604 48BE-                           mov rsi, fmt_non_closure
   526 00000606 [BE00000000000000] 
   527 0000060E B800000000                      mov rax, 0
   528 00000613 E8(00000000)                    call fprintf
   529 00000618 48C7C0FEFFFFFF                  mov rax, -2
   530 0000061F E8(00000000)                    call exit
   531                                  
   532                                  L_error_improper_list:
   533 00000624 488B3C25[00000000]      	mov rdi, qword [stderr]
   534 0000062C 48BE-                   	mov rsi, fmt_error_improper_list
   534 0000062E [E600000000000000] 
   535 00000636 B800000000              	mov rax, 0
   536 0000063B E8(00000000)            	call fprintf
   537 00000640 48C7C0F9FFFFFF          	mov rax, -7
   538 00000647 E8(00000000)            	call exit
   539                                  
   540                                  L_error_incorrect_arity_simple:
   541 0000064C 488B3C25[00000000]              mov rdi, qword [stderr]
   542 00000654 48BE-                           mov rsi, fmt_incorrect_arity_simple
   542 00000656 [2800000000000000] 
   543 0000065E EB12                            jmp L_error_incorrect_arity_common
   544                                  L_error_incorrect_arity_opt:
   545 00000660 488B3C25[00000000]              mov rdi, qword [stderr]
   546 00000668 48BE-                           mov rsi, fmt_incorrect_arity_opt
   546 0000066A [5300000000000000] 
   547                                  L_error_incorrect_arity_common:
   548 00000672 5A                              pop rdx
   549 00000673 59                              pop rcx
   550 00000674 B800000000                      mov rax, 0
   551 00000679 E8(00000000)                    call fprintf
   552 0000067E 48C7C0FAFFFFFF                  mov rax, -6
   553 00000685 E8(00000000)                    call exit
   554                                  
   555                                  section .data
   556                                  fmt_incorrect_arity_simple:
   557 00000028 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   557 00000031 74656420256C642061-
   557 0000003A 7267756D656E74732C-
   557 00000043 206275742067697665-
   557 0000004C 6E20256C640A00     
   558                                  fmt_incorrect_arity_opt:
   559 00000053 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   559 0000005C 746564206174206C65-
   559 00000065 61737420256C642061-
   559 0000006E 7267756D656E74732C-
   559 00000077 206275742067697665-
   559 00000080 6E20256C640A00     
   560                                  fmt_memory_usage:
   561 00000087 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   561 00000090 6420256C6420627974-
   561 00000099 6573206F662064796E-
   561 000000A2 616D6963616C6C792D-
   561 000000AB 616C6C6F6361746564-
   561 000000B4 206D656D6F72790A0A-
   561 000000BD 00                 
   562                                  fmt_non_closure:
   563 000000BE 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   563 000000C7 7074696E6720746F20-
   563 000000D0 6170706C792061206E-
   563 000000D9 6F6E2D636C6F737572-
   563 000000E2 65210A00           
   564                                  fmt_error_improper_list:
   565 000000E6 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   565 000000EF 7267756D656E742069-
   565 000000F8 73206E6F7420612070-
   565 00000101 726F706572206C6973-
   565 0000010A 74210A00           
   566                                  
   567                                  section .bss
   568                                  memory:
   569 000001C8 <res 40000000>          	resb gbytes(1)
   570                                  
   571                                  section .data
   572                                  top_of_memory:
   573 0000010E [C801000000000000]              dq memory
   574                                  
   575                                  section .text
   576                                  malloc:
   577 0000068A 488B0425[0E010000]              mov rax, qword [top_of_memory]
   578 00000692 48013C25[0E010000]              add qword [top_of_memory], rdi
   579 0000069A C3                              ret
   580                                          
   581                                  print_sexpr_if_not_void:
   582 0000069B 4881FF[00000000]        	cmp rdi, sob_void
   583 000006A2 7501                    	jne print_sexpr
   584 000006A4 C3                      	ret
   585                                  
   586                                  section .data
   587                                  fmt_void:
   588 00000116 233C766F69643E00        	db `#<void>\0`
   589                                  fmt_nil:
   590 0000011E 282900                  	db `()\0`
   591                                  fmt_boolean_false:
   592 00000121 236600                  	db `#f\0`
   593                                  fmt_boolean_true:
   594 00000124 237400                  	db `#t\0`
   595                                  fmt_char_backslash:
   596 00000127 235C5C00                	db `#\\\\\0`
   597                                  fmt_char_dquote:
   598 0000012B 235C2200                	db `#\\"\0`
   599                                  fmt_char_simple:
   600 0000012F 235C256300              	db `#\\%c\0`
   601                                  fmt_char_null:
   602 00000134 235C6E756C00            	db `#\\nul\0`
   603                                  fmt_char_bell:
   604 0000013A 235C62656C6C00          	db `#\\bell\0`
   605                                  fmt_char_backspace:
   606 00000141 235C6261636B737061-     	db `#\\backspace\0`
   606 0000014A 636500             
   607                                  fmt_char_tab:
   608 0000014D 235C74616200            	db `#\\tab\0`
   609                                  fmt_char_newline:
   610 00000153 235C6E65776C696E65-     	db `#\\newline\0`
   610 0000015C 00                 
   611                                  fmt_char_formfeed:
   612 0000015D 235C7061676500          	db `#\\page\0`
   613                                  fmt_char_return:
   614 00000164 235C72657475726E00      	db `#\\return\0`
   615                                  fmt_char_escape:
   616 0000016D 235C65736300            	db `#\\esc\0`
   617                                  fmt_char_space:
   618 00000173 235C737061636500        	db `#\\space\0`
   619                                  fmt_char_hex:
   620 0000017B 235C782530325800        	db `#\\x%02X\0`
   621                                  fmt_closure:
   622 00000183 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   622 0000018C 206174203078253038-
   622 00000195 5820656E763D307825-
   622 0000019E 30385820636F64653D-
   622 000001A7 3078253038583E00   
   623                                  fmt_lparen:
   624 000001AF 2800                    	db `(\0`
   625                                  fmt_dotted_pair:
   626 000001B1 202E2000                	db ` . \0`
   627                                  fmt_rparen:
   628 000001B5 2900                    	db `)\0`
   629                                  fmt_space:
   630 000001B7 2000                    	db ` \0`
   631                                  fmt_empty_vector:
   632 000001B9 23282900                	db `#()\0`
   633                                  fmt_vector:
   634 000001BD 232800                  	db `#(\0`
   635                                  fmt_real:
   636 000001C0 256600                  	db `%f\0`
   637                                  fmt_fraction:
   638 000001C3 256C642F256C6400        	db `%ld/%ld\0`
   639                                  fmt_zero:
   640 000001CB 3000                    	db `0\0`
   641                                  fmt_int:
   642 000001CD 256C6400                	db `%ld\0`
   643                                  fmt_unknown_sexpr_error:
   644 000001D1 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   644 000001DA 6F723A20556E6B6E6F-
   644 000001E3 776E2074797065206F-
   644 000001EC 662073657870722028-
   644 000001F5 3078253032582920   
   645 000001FD 617420616464726573-     	db `at address 0x%08X\n\n\0`
   645 00000206 73203078253038580A-
   645 0000020F 0A00               
   646                                  fmt_dquote:
   647 00000211 2200                    	db `\"\0`
   648                                  fmt_string_char:
   649 00000213 256300                          db `%c\0`
   650                                  fmt_string_char_7:
   651 00000216 5C6100                          db `\\a\0`
   652                                  fmt_string_char_8:
   653 00000219 5C6200                          db `\\b\0`
   654                                  fmt_string_char_9:
   655 0000021C 5C7400                          db `\\t\0`
   656                                  fmt_string_char_10:
   657 0000021F 5C6E00                          db `\\n\0`
   658                                  fmt_string_char_11:
   659 00000222 5C7600                          db `\\v\0`
   660                                  fmt_string_char_12:
   661 00000225 5C6600                          db `\\f\0`
   662                                  fmt_string_char_13:
   663 00000228 5C7200                          db `\\r\0`
   664                                  fmt_string_char_34:
   665 0000022B 5C2200                          db `\\"\0`
   666                                  fmt_string_char_92:
   667 0000022E 5C5C00                          db `\\\\\0`
   668                                  fmt_string_char_hex:
   669 00000231 5C7825583B00                    db `\\x%X;\0`
   670                                  
   671                                  section .text
   672                                  
   673                                  print_sexpr:
   674                                  	ENTER
   674 000006A5 C8000000            <1>  enter 0, 0
   674 000006A9 4883E4F0            <1>  and rsp, ~15
   675 000006AD 8A07                    	mov al, byte [rdi]
   676 000006AF 3C00                    	cmp al, T_void
   677 000006B1 744D                    	je .Lvoid
   678 000006B3 3C01                    	cmp al, T_nil
   679 000006B5 7458                    	je .Lnil
   680 000006B7 3C09                    	cmp al, T_boolean_false
   681 000006B9 7463                    	je .Lboolean_false
   682 000006BB 3C0A                    	cmp al, T_boolean_true
   683 000006BD 746E                    	je .Lboolean_true
   684 000006BF 3C02                    	cmp al, T_char
   685 000006C1 7479                    	je .Lchar
   686 000006C3 3C04                    	cmp al, T_symbol
   687 000006C5 0F84BB010000            	je .Lsymbol
   688 000006CB 3C21                    	cmp al, T_pair
   689 000006CD 0F84D6010000            	je .Lpair
   690 000006D3 3C22                    	cmp al, T_vector
   691 000006D5 0F8478020000            	je .Lvector
   692 000006DB 3C05                    	cmp al, T_closure
   693 000006DD 0F8489010000            	je .Lclosure
   694 000006E3 3C12                    	cmp al, T_real
   695 000006E5 0F84F3020000            	je .Lreal
   696 000006EB 3C11                    	cmp al, T_rational
   697 000006ED 0F8419030000            	je .Lrational
   698 000006F3 3C03                    	cmp al, T_string
   699 000006F5 0F8452030000            	je .Lstring
   700                                  
   701 000006FB E98A040000              	jmp .Lunknown_sexpr_type
   702                                  
   703                                  .Lvoid:
   704 00000700 48BF-                   	mov rdi, fmt_void
   704 00000702 [1601000000000000] 
   705 0000070A E9AF040000              	jmp .Lemit
   706                                  
   707                                  .Lnil:
   708 0000070F 48BF-                   	mov rdi, fmt_nil
   708 00000711 [1E01000000000000] 
   709 00000719 E9A0040000              	jmp .Lemit
   710                                  
   711                                  .Lboolean_false:
   712 0000071E 48BF-                   	mov rdi, fmt_boolean_false
   712 00000720 [2101000000000000] 
   713 00000728 E991040000              	jmp .Lemit
   714                                  
   715                                  .Lboolean_true:
   716 0000072D 48BF-                   	mov rdi, fmt_boolean_true
   716 0000072F [2401000000000000] 
   717 00000737 E982040000              	jmp .Lemit
   718                                  
   719                                  .Lchar:
   720 0000073C 8A4701                  	mov al, byte [rdi + 1]
   721 0000073F 3C20                    	cmp al, ' '
   722 00000741 7E28                    	jle .Lchar_whitespace
   723 00000743 3C5C                    	cmp al, 92 		; backslash
   724 00000745 0F847C000000            	je .Lchar_backslash
   725 0000074B 3C22                    	cmp al, '"'
   726 0000074D 0F8483000000            	je .Lchar_dquote
   727 00000753 4825FF000000            	and rax, 255
   728 00000759 48BF-                   	mov rdi, fmt_char_simple
   728 0000075B [2F01000000000000] 
   729 00000763 4889C6                  	mov rsi, rax
   730 00000766 E953040000              	jmp .Lemit
   731                                  
   732                                  .Lchar_whitespace:
   733 0000076B 3C00                    	cmp al, 0
   734 0000076D 7476                    	je .Lchar_null
   735 0000076F 3C07                    	cmp al, 7
   736 00000771 0F847D000000            	je .Lchar_bell
   737 00000777 3C08                    	cmp al, 8
   738 00000779 0F8484000000            	je .Lchar_backspace
   739 0000077F 3C09                    	cmp al, 9
   740 00000781 0F848B000000            	je .Lchar_tab
   741 00000787 3C0A                    	cmp al, 10
   742 00000789 0F8492000000            	je .Lchar_newline
   743 0000078F 3C0C                    	cmp al, 12
   744 00000791 0F8499000000            	je .Lchar_formfeed
   745 00000797 3C0D                    	cmp al, 13
   746 00000799 0F84A0000000            	je .Lchar_return
   747 0000079F 3C1B                    	cmp al, 27
   748 000007A1 0F84A7000000            	je .Lchar_escape
   749 000007A7 4825FF000000            	and rax, 255
   750 000007AD 3C20                    	cmp al, ' '
   751 000007AF 0F84A8000000            	je .Lchar_space
   752 000007B5 48BF-                   	mov rdi, fmt_char_hex
   752 000007B7 [7B01000000000000] 
   753 000007BF 4889C6                  	mov rsi, rax
   754 000007C2 E9F7030000              	jmp .Lemit	
   755                                  
   756                                  .Lchar_backslash:
   757 000007C7 48BF-                   	mov rdi, fmt_char_backslash
   757 000007C9 [2701000000000000] 
   758 000007D1 E9E8030000              	jmp .Lemit
   759                                  
   760                                  .Lchar_dquote:
   761 000007D6 48BF-                   	mov rdi, fmt_char_dquote
   761 000007D8 [2B01000000000000] 
   762 000007E0 E9D9030000              	jmp .Lemit
   763                                  
   764                                  .Lchar_null:
   765 000007E5 48BF-                   	mov rdi, fmt_char_null
   765 000007E7 [3401000000000000] 
   766 000007EF E9CA030000              	jmp .Lemit
   767                                  
   768                                  .Lchar_bell:
   769 000007F4 48BF-                   	mov rdi, fmt_char_bell
   769 000007F6 [3A01000000000000] 
   770 000007FE E9BB030000              	jmp .Lemit
   771                                  
   772                                  .Lchar_backspace:
   773 00000803 48BF-                   	mov rdi, fmt_char_backspace
   773 00000805 [4101000000000000] 
   774 0000080D E9AC030000              	jmp .Lemit
   775                                  
   776                                  .Lchar_tab:
   777 00000812 48BF-                   	mov rdi, fmt_char_tab
   777 00000814 [4D01000000000000] 
   778 0000081C E99D030000              	jmp .Lemit
   779                                  
   780                                  .Lchar_newline:
   781 00000821 48BF-                   	mov rdi, fmt_char_newline
   781 00000823 [5301000000000000] 
   782 0000082B E98E030000              	jmp .Lemit
   783                                  
   784                                  .Lchar_formfeed:
   785 00000830 48BF-                   	mov rdi, fmt_char_formfeed
   785 00000832 [5D01000000000000] 
   786 0000083A E97F030000              	jmp .Lemit
   787                                  
   788                                  .Lchar_return:
   789 0000083F 48BF-                   	mov rdi, fmt_char_return
   789 00000841 [6401000000000000] 
   790 00000849 E970030000              	jmp .Lemit
   791                                  
   792                                  .Lchar_escape:
   793 0000084E 48BF-                   	mov rdi, fmt_char_escape
   793 00000850 [6D01000000000000] 
   794 00000858 E961030000              	jmp .Lemit
   795                                  
   796                                  .Lchar_space:
   797 0000085D 48BF-                   	mov rdi, fmt_char_space
   797 0000085F [7301000000000000] 
   798 00000867 E952030000              	jmp .Lemit
   799                                  
   800                                  .Lclosure:
   801 0000086C 4889FE                  	mov rsi, qword rdi
   802 0000086F 48BF-                   	mov rdi, fmt_closure
   802 00000871 [8301000000000000] 
   803 00000879 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   804 0000087D 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   805 00000881 E938030000              	jmp .Lemit
   806                                  
   807                                  .Lsymbol:
   808 00000886 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   809 0000088A BE01000000              	mov rsi, 1		 ; size = 1 byte
   810 0000088F 488B5701                	mov rdx, qword [rdi + 1] ; length
   811 00000893 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   812 00000897 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   813 0000089F E8(00000000)            	call fwrite
   814 000008A4 E921030000              	jmp .Lend
   815                                  	
   816                                  .Lpair:
   817 000008A9 57                      	push rdi
   818 000008AA 48BF-                   	mov rdi, fmt_lparen
   818 000008AC [AF01000000000000] 
   819 000008B4 B800000000              	mov rax, 0
   820                                          ENTER
   820 000008B9 C8000000            <1>  enter 0, 0
   820 000008BD 4883E4F0            <1>  and rsp, ~15
   821 000008C1 E8(00000000)            	call printf
   822                                          LEAVE
   822 000008C6 C9                  <1>  leave
   823 000008C7 488B3C24                	mov rdi, qword [rsp] 	; pair
   824 000008CB 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   825 000008CF E8D1FDFFFF              	call print_sexpr
   826 000008D4 5F                      	pop rdi 		; pair
   827 000008D5 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   828                                  .Lcdr:
   829 000008D9 8A07                    	mov al, byte [rdi]
   830 000008DB 3C01                    	cmp al, T_nil
   831 000008DD 7435                    	je .Lcdr_nil
   832 000008DF 3C21                    	cmp al, T_pair
   833 000008E1 7447                    	je .Lcdr_pair
   834 000008E3 57                      	push rdi
   835 000008E4 48BF-                   	mov rdi, fmt_dotted_pair
   835 000008E6 [B101000000000000] 
   836 000008EE B800000000              	mov rax, 0
   837 000008F3 E8(00000000)            	call printf
   838 000008F8 5F                      	pop rdi
   839 000008F9 E8A7FDFFFF              	call print_sexpr
   840 000008FE 48BF-                   	mov rdi, fmt_rparen
   840 00000900 [B501000000000000] 
   841 00000908 B800000000              	mov rax, 0
   842 0000090D E8(00000000)            	call printf
   843                                  	LEAVE
   843 00000912 C9                  <1>  leave
   844 00000913 C3                      	ret
   845                                  
   846                                  .Lcdr_nil:
   847 00000914 48BF-                   	mov rdi, fmt_rparen
   847 00000916 [B501000000000000] 
   848 0000091E B800000000              	mov rax, 0
   849 00000923 E8(00000000)            	call printf
   850                                  	LEAVE
   850 00000928 C9                  <1>  leave
   851 00000929 C3                      	ret
   852                                  
   853                                  .Lcdr_pair:
   854 0000092A 57                      	push rdi
   855 0000092B 48BF-                   	mov rdi, fmt_space
   855 0000092D [B701000000000000] 
   856 00000935 B800000000              	mov rax, 0
   857 0000093A E8(00000000)            	call printf
   858 0000093F 488B3C24                	mov rdi, qword [rsp]
   859 00000943 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   860 00000947 E859FDFFFF              	call print_sexpr
   861 0000094C 5F                      	pop rdi
   862 0000094D 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   863 00000951 EB86                    	jmp .Lcdr
   864                                  
   865                                  .Lvector:
   866 00000953 488B4701                	mov rax, qword [rdi + 1] ; length
   867 00000957 4883F800                	cmp rax, 0
   868 0000095B 7472                    	je .Lvector_empty
   869 0000095D 57                      	push rdi
   870 0000095E 48BF-                   	mov rdi, fmt_vector
   870 00000960 [BD01000000000000] 
   871 00000968 B800000000              	mov rax, 0
   872 0000096D E8(00000000)            	call printf
   873 00000972 488B3C24                	mov rdi, qword [rsp]
   874 00000976 FF7701                  	push qword [rdi + 1]
   875 00000979 6A01                    	push 1
   876 0000097B 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   877 0000097F E821FDFFFF              	call print_sexpr
   878                                  .Lvector_loop:
   879                                  	; [rsp] index
   880                                  	; [rsp + 8*1] limit
   881                                  	; [rsp + 8*2] vector
   882 00000984 488B0424                	mov rax, qword [rsp]
   883 00000988 483B442408              	cmp rax, qword [rsp + 8*1]
   884 0000098D 742D                    	je .Lvector_end
   885 0000098F 48BF-                   	mov rdi, fmt_space
   885 00000991 [B701000000000000] 
   886 00000999 B800000000              	mov rax, 0
   887 0000099E E8(00000000)            	call printf
   888 000009A3 488B0424                	mov rax, qword [rsp]
   889 000009A7 488B5C2410              	mov rbx, qword [rsp + 8*2]
   890 000009AC 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   891 000009B1 E8EFFCFFFF              	call print_sexpr
   892 000009B6 48FF0424                	inc qword [rsp]
   893 000009BA EBC8                    	jmp .Lvector_loop
   894                                  
   895                                  .Lvector_end:
   896 000009BC 4883C418                	add rsp, 8*3
   897 000009C0 48BF-                   	mov rdi, fmt_rparen
   897 000009C2 [B501000000000000] 
   898 000009CA E9EF010000              	jmp .Lemit	
   899                                  
   900                                  .Lvector_empty:
   901 000009CF 48BF-                   	mov rdi, fmt_empty_vector
   901 000009D1 [B901000000000000] 
   902 000009D9 E9E0010000              	jmp .Lemit
   903                                  
   904                                  .Lreal:
   905 000009DE FF7701                  	push qword [rdi + 1]
   906 000009E1 F20F100424              	movsd xmm0, qword [rsp]
   907 000009E6 4883C408                	add rsp, 8*1
   908 000009EA 48BF-                   	mov rdi, fmt_real
   908 000009EC [C001000000000000] 
   909 000009F4 B801000000              	mov rax, 1
   910                                  	ENTER
   910 000009F9 C8000000            <1>  enter 0, 0
   910 000009FD 4883E4F0            <1>  and rsp, ~15
   911 00000A01 E8(00000000)            	call printf
   912                                  	LEAVE
   912 00000A06 C9                  <1>  leave
   913 00000A07 E9BE010000              	jmp .Lend
   914                                  
   915                                  .Lrational:
   916 00000A0C 488B7701                	mov rsi, qword [rdi + 1]
   917 00000A10 488B5709                	mov rdx, qword [rdi + 1 + 8]
   918 00000A14 4883FE00                	cmp rsi, 0
   919 00000A18 7415                    	je .Lrat_zero
   920 00000A1A 4883FA01                	cmp rdx, 1
   921 00000A1E 741E                    	je .Lrat_int
   922 00000A20 48BF-                   	mov rdi, fmt_fraction
   922 00000A22 [C301000000000000] 
   923 00000A2A E98F010000              	jmp .Lemit
   924                                  
   925                                  .Lrat_zero:
   926 00000A2F 48BF-                   	mov rdi, fmt_zero
   926 00000A31 [CB01000000000000] 
   927 00000A39 E980010000              	jmp .Lemit
   928                                  
   929                                  .Lrat_int:
   930 00000A3E 48BF-                   	mov rdi, fmt_int
   930 00000A40 [CD01000000000000] 
   931 00000A48 E971010000              	jmp .Lemit
   932                                  
   933                                  .Lstring:
   934 00000A4D 488D4709                	lea rax, [rdi + 1 + 8]
   935 00000A51 50                      	push rax
   936 00000A52 FF7701                  	push qword [rdi + 1]
   937 00000A55 48BF-                   	mov rdi, fmt_dquote
   937 00000A57 [1102000000000000] 
   938 00000A5F B800000000              	mov rax, 0
   939                                  	ENTER
   939 00000A64 C8000000            <1>  enter 0, 0
   939 00000A68 4883E4F0            <1>  and rsp, ~15
   940 00000A6C E8(00000000)            	call printf
   941                                  	LEAVE
   941 00000A71 C9                  <1>  leave
   942                                  .Lstring_loop:
   943                                  	; qword [rsp]: limit
   944                                  	; qword [rsp + 8*1]: char *
   945 00000A72 48833C2400              	cmp qword [rsp], 0
   946 00000A77 0F84FD000000            	je .Lstring_end
   947 00000A7D 488B442408              	mov rax, qword [rsp + 8*1]
   948 00000A82 8A00                    	mov al, byte [rax]
   949 00000A84 4825FF000000            	and rax, 255
   950 00000A8A 3C07                    	cmp al, 7
   951 00000A8C 7468                            je .Lstring_char_7
   952 00000A8E 3C08                            cmp al, 8
   953 00000A90 7470                            je .Lstring_char_8
   954 00000A92 3C09                            cmp al, 9
   955 00000A94 7478                            je .Lstring_char_9
   956 00000A96 3C0A                            cmp al, 10
   957 00000A98 0F847C000000                    je .Lstring_char_10
   958 00000A9E 3C0B                            cmp al, 11
   959 00000AA0 0F8480000000                    je .Lstring_char_11
   960 00000AA6 3C0C                            cmp al, 12
   961 00000AA8 0F8484000000                    je .Lstring_char_12
   962 00000AAE 3C0D                            cmp al, 13
   963 00000AB0 0F8488000000                    je .Lstring_char_13
   964 00000AB6 3C22                            cmp al, 34
   965 00000AB8 0F848C000000                    je .Lstring_char_34
   967 00000ABE 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   968 00000AC0 3C20                            cmp al, ' '
   969 00000AC2 0F8CA0000000                    jl .Lstring_char_hex
   970 00000AC8 48BF-                           mov rdi, fmt_string_char
   970 00000ACA [1302000000000000] 
   971 00000AD2 4889C6                          mov rsi, rax
   972                                  .Lstring_char_emit:
   973 00000AD5 B800000000                      mov rax, 0
   974                                          ENTER
   974 00000ADA C8000000            <1>  enter 0, 0
   974 00000ADE 4883E4F0            <1>  and rsp, ~15
   975 00000AE2 E8(00000000)                    call printf
   976                                          LEAVE
   976 00000AE7 C9                  <1>  leave
   977 00000AE8 48FF0C24                        dec qword [rsp]
   978 00000AEC 48FF442408                      inc qword [rsp + 8*1]
   979 00000AF1 E97CFFFFFF                      jmp .Lstring_loop
   980                                  
   981                                  .Lstring_char_7:
   982 00000AF6 48BF-                           mov rdi, fmt_string_char_7
   982 00000AF8 [1602000000000000] 
   983 00000B00 EBD3                            jmp .Lstring_char_emit
   984                                  
   985                                  .Lstring_char_8:
   986 00000B02 48BF-                           mov rdi, fmt_string_char_8
   986 00000B04 [1902000000000000] 
   987 00000B0C EBC7                            jmp .Lstring_char_emit
   988                                          
   989                                  .Lstring_char_9:
   990 00000B0E 48BF-                           mov rdi, fmt_string_char_9
   990 00000B10 [1C02000000000000] 
   991 00000B18 EBBB                            jmp .Lstring_char_emit
   992                                  
   993                                  .Lstring_char_10:
   994 00000B1A 48BF-                           mov rdi, fmt_string_char_10
   994 00000B1C [1F02000000000000] 
   995 00000B24 EBAF                            jmp .Lstring_char_emit
   996                                  
   997                                  .Lstring_char_11:
   998 00000B26 48BF-                           mov rdi, fmt_string_char_11
   998 00000B28 [2202000000000000] 
   999 00000B30 EBA3                            jmp .Lstring_char_emit
  1000                                  
  1001                                  .Lstring_char_12:
  1002 00000B32 48BF-                           mov rdi, fmt_string_char_12
  1002 00000B34 [2502000000000000] 
  1003 00000B3C EB97                            jmp .Lstring_char_emit
  1004                                  
  1005                                  .Lstring_char_13:
  1006 00000B3E 48BF-                           mov rdi, fmt_string_char_13
  1006 00000B40 [2802000000000000] 
  1007 00000B48 EB8B                            jmp .Lstring_char_emit
  1008                                  
  1009                                  .Lstring_char_34:
  1010 00000B4A 48BF-                           mov rdi, fmt_string_char_34
  1010 00000B4C [2B02000000000000] 
  1011 00000B54 E97CFFFFFF                      jmp .Lstring_char_emit
  1012                                  
  1013                                  .Lstring_char_92:
  1014 00000B59 48BF-                           mov rdi, fmt_string_char_92
  1014 00000B5B [2E02000000000000] 
  1015 00000B63 E96DFFFFFF                      jmp .Lstring_char_emit
  1016                                  
  1017                                  .Lstring_char_hex:
  1018 00000B68 48BF-                           mov rdi, fmt_string_char_hex
  1018 00000B6A [3102000000000000] 
  1019 00000B72 4889C6                          mov rsi, rax
  1020 00000B75 E95BFFFFFF                      jmp .Lstring_char_emit        
  1021                                  
  1022                                  .Lstring_end:
  1023 00000B7A 4883C410                	add rsp, 8 * 2
  1024 00000B7E 48BF-                   	mov rdi, fmt_dquote
  1024 00000B80 [1102000000000000] 
  1025 00000B88 EB34                    	jmp .Lemit
  1026                                  
  1027                                  .Lunknown_sexpr_type:
  1028 00000B8A 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1028 00000B8C [D101000000000000] 
  1029 00000B94 4825FF000000            	and rax, 255
  1030 00000B9A 4889C2                  	mov rdx, rax
  1031 00000B9D 4889F9                  	mov rcx, rdi
  1032 00000BA0 488B3C25[00000000]      	mov rdi, qword [stderr]
  1033 00000BA8 B800000000              	mov rax, 0
  1034 00000BAD E8(00000000)            	call fprintf
  1035 00000BB2 48C7C0FFFFFFFF          	mov rax, -1
  1036 00000BB9 E8(00000000)            	call exit
  1037                                  
  1038                                  .Lemit:
  1039 00000BBE B800000000              	mov rax, 0
  1040 00000BC3 E8(00000000)            	call printf
  1041 00000BC8 EB00                    	jmp .Lend
  1042                                  
  1043                                  .Lend:
  1044                                  	LEAVE
  1044 00000BCA C9                  <1>  leave
  1045 00000BCB C3                      	ret
  1046                                  
  1047                                  ;;; rdi: address of free variable
  1048                                  ;;; rsi: address of code-pointer
  1049                                  bind_primitive:
  1050                                          ENTER
  1050 00000BCC C8000000            <1>  enter 0, 0
  1050 00000BD0 4883E4F0            <1>  and rsp, ~15
  1051 00000BD4 57                              push rdi
  1052 00000BD5 BF11000000                      mov rdi, (1 + 8 + 8)
  1053 00000BDA E8ABFAFFFF                      call malloc
  1054 00000BDF 5F                              pop rdi
  1055 00000BE0 C60005                          mov byte [rax], T_closure
  1056 00000BE3 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1057 00000BEB 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1058 00000BEF 488907                          mov qword [rdi], rax
  1059                                          LEAVE
  1059 00000BF2 C9                  <1>  leave
  1060 00000BF3 C3                              ret
  1061                                  
  1062                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1063                                  L_code_ptr_bin_apply:
  1064                                          
  1065                                          ENTER
  1065 00000BF4 C8000000            <1>  enter 0, 0
  1065 00000BF8 4883E4F0            <1>  and rsp, ~15
  1066 00000BFC 48837D1803                      cmp COUNT, 3
  1067 00000C01 0F8564110000                    jne L_error_arg_count_3
  1068                                  
  1069 00000C07 488B4520                        mov rax, PARAM(0)       ; rax <- closure
  1070 00000C0B 803805                          cmp byte [rax], T_closure ;  is it a closure? 
  1071 00000C0E 0F85E8F9FFFF                    jne L_error_non_closure ;; if not closure jmp kibinimat
  1072                                          ;; make sure it is a closure                
  1073                                  
  1074                                          ;; goal to apply closure on 2 params
  1075 00000C14 488B5D28                        mov rbx, qword PARAM(1)
  1076 00000C18 53                              push rbx                ; push arg
  1077 00000C19 488B4D30                        mov rcx, qword PARAM(2)
  1078 00000C1D 51                              push rcx                ; push arg
  1079                                          
  1080 00000C1E BB02000000                      mov rbx, 2
  1081 00000C23 53                              push rbx
  1082                                  
  1083                                          ; jmp L_sagy_debug
  1084 00000C24 803805                  	cmp byte [rax], T_closure 
  1085 00000C27 0F8550090000                    jne L_code_ptr_error
  1086                                  
  1087 00000C2D 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  1088 00000C31 53                              push rbx
  1089                                  
  1090                                          ; mov rbx, [rsp + 4 * 8]
  1091                                          ; mov [rsp], rbx
  1092 00000C32 FF5009                          call SOB_CLOSURE_CODE(rax)
  1093                                  
  1094                                  	; mov rdi, rax
  1095                                  	; call print_sexpr_if_not_void
  1096                                  
  1097                                          LEAVE
  1097 00000C35 C9                  <1>  leave
  1098 00000C36 C22800                          ret AND_KILL_FRAME(3)
  1099                                       
  1100                                  	
  1101                                  L_code_ptr_is_null:
  1102                                          ENTER
  1102 00000C39 C8000000            <1>  enter 0, 0
  1102 00000C3D 4883E4F0            <1>  and rsp, ~15
  1103 00000C41 48837D1801                      cmp COUNT, 1
  1104 00000C46 0F856F100000                    jne L_error_arg_count_1
  1105 00000C4C 488B4520                        mov rax, PARAM(0)
  1106 00000C50 803801                          cmp byte [rax], T_nil
  1107 00000C53 750C                            jne .L_false
  1108 00000C55 48B8-                           mov rax, sob_boolean_true
  1108 00000C57 [0300000000000000] 
  1109 00000C5F EB0A                            jmp .L_end
  1110                                  .L_false:
  1111 00000C61 48B8-                           mov rax, sob_boolean_false
  1111 00000C63 [0200000000000000] 
  1112                                  .L_end:
  1113                                          LEAVE
  1113 00000C6B C9                  <1>  leave
  1114 00000C6C C21800                          ret AND_KILL_FRAME(1)
  1115                                  
  1116                                  L_code_ptr_is_pair:
  1117                                          ENTER
  1117 00000C6F C8000000            <1>  enter 0, 0
  1117 00000C73 4883E4F0            <1>  and rsp, ~15
  1118 00000C77 48837D1801                      cmp COUNT, 1
  1119 00000C7C 0F8539100000                    jne L_error_arg_count_1
  1120 00000C82 488B4520                        mov rax, PARAM(0)
  1121 00000C86 803821                          cmp byte [rax], T_pair
  1122 00000C89 750C                            jne .L_false
  1123 00000C8B 48B8-                           mov rax, sob_boolean_true
  1123 00000C8D [0300000000000000] 
  1124 00000C95 EB0A                            jmp .L_end
  1125                                  .L_false:
  1126 00000C97 48B8-                           mov rax, sob_boolean_false
  1126 00000C99 [0200000000000000] 
  1127                                  .L_end:
  1128                                          LEAVE
  1128 00000CA1 C9                  <1>  leave
  1129 00000CA2 C21800                          ret AND_KILL_FRAME(1)
  1130                                          
  1131                                  L_code_ptr_is_void:
  1132                                          ENTER
  1132 00000CA5 C8000000            <1>  enter 0, 0
  1132 00000CA9 4883E4F0            <1>  and rsp, ~15
  1133 00000CAD 48837D1801                      cmp COUNT, 1
  1134 00000CB2 0F8503100000                    jne L_error_arg_count_1
  1135 00000CB8 488B4520                        mov rax, PARAM(0)
  1136 00000CBC 803800                          cmp byte [rax], T_void
  1137 00000CBF 750C                            jne .L_false
  1138 00000CC1 48B8-                           mov rax, sob_boolean_true
  1138 00000CC3 [0300000000000000] 
  1139 00000CCB EB0A                            jmp .L_end
  1140                                  .L_false:
  1141 00000CCD 48B8-                           mov rax, sob_boolean_false
  1141 00000CCF [0200000000000000] 
  1142                                  .L_end:
  1143                                          LEAVE
  1143 00000CD7 C9                  <1>  leave
  1144 00000CD8 C21800                          ret AND_KILL_FRAME(1)
  1145                                  
  1146                                  L_code_ptr_is_char:
  1147                                          ENTER
  1147 00000CDB C8000000            <1>  enter 0, 0
  1147 00000CDF 4883E4F0            <1>  and rsp, ~15
  1148 00000CE3 48837D1801                      cmp COUNT, 1
  1149 00000CE8 0F85CD0F0000                    jne L_error_arg_count_1
  1150 00000CEE 488B4520                        mov rax, PARAM(0)
  1151 00000CF2 803802                          cmp byte [rax], T_char
  1152 00000CF5 750C                            jne .L_false
  1153 00000CF7 48B8-                           mov rax, sob_boolean_true
  1153 00000CF9 [0300000000000000] 
  1154 00000D01 EB0A                            jmp .L_end
  1155                                  .L_false:
  1156 00000D03 48B8-                           mov rax, sob_boolean_false
  1156 00000D05 [0200000000000000] 
  1157                                  .L_end:
  1158                                          LEAVE
  1158 00000D0D C9                  <1>  leave
  1159 00000D0E C21800                          ret AND_KILL_FRAME(1)
  1160                                  
  1161                                  L_code_ptr_is_string:
  1162                                          ENTER
  1162 00000D11 C8000000            <1>  enter 0, 0
  1162 00000D15 4883E4F0            <1>  and rsp, ~15
  1163 00000D19 48837D1801                      cmp COUNT, 1
  1164 00000D1E 0F85970F0000                    jne L_error_arg_count_1
  1165 00000D24 488B4520                        mov rax, PARAM(0)
  1166 00000D28 803803                          cmp byte [rax], T_string
  1167 00000D2B 750C                            jne .L_false
  1168 00000D2D 48B8-                           mov rax, sob_boolean_true
  1168 00000D2F [0300000000000000] 
  1169 00000D37 EB0A                            jmp .L_end
  1170                                  .L_false:
  1171 00000D39 48B8-                           mov rax, sob_boolean_false
  1171 00000D3B [0200000000000000] 
  1172                                  .L_end:
  1173                                          LEAVE
  1173 00000D43 C9                  <1>  leave
  1174 00000D44 C21800                          ret AND_KILL_FRAME(1)
  1175                                  
  1176                                  L_code_ptr_is_symbol:
  1177                                          ENTER
  1177 00000D47 C8000000            <1>  enter 0, 0
  1177 00000D4B 4883E4F0            <1>  and rsp, ~15
  1178 00000D4F 48837D1801                      cmp COUNT, 1
  1179 00000D54 0F85610F0000                    jne L_error_arg_count_1
  1180 00000D5A 488B4520                        mov rax, PARAM(0)
  1181 00000D5E 803804                          cmp byte [rax], T_symbol
  1182 00000D61 750C                            jne .L_false
  1183 00000D63 48B8-                           mov rax, sob_boolean_true
  1183 00000D65 [0300000000000000] 
  1184 00000D6D EB0A                            jmp .L_end
  1185                                  .L_false:
  1186 00000D6F 48B8-                           mov rax, sob_boolean_false
  1186 00000D71 [0200000000000000] 
  1187                                  .L_end:
  1188                                          LEAVE
  1188 00000D79 C9                  <1>  leave
  1189 00000D7A C21800                          ret AND_KILL_FRAME(1)
  1190                                  
  1191                                  L_code_ptr_is_vector:
  1192                                          ENTER
  1192 00000D7D C8000000            <1>  enter 0, 0
  1192 00000D81 4883E4F0            <1>  and rsp, ~15
  1193 00000D85 48837D1801                      cmp COUNT, 1
  1194 00000D8A 0F852B0F0000                    jne L_error_arg_count_1
  1195 00000D90 488B4520                        mov rax, PARAM(0)
  1196 00000D94 803822                          cmp byte [rax], T_vector
  1197 00000D97 750C                            jne .L_false
  1198 00000D99 48B8-                           mov rax, sob_boolean_true
  1198 00000D9B [0300000000000000] 
  1199 00000DA3 EB0A                            jmp .L_end
  1200                                  .L_false:
  1201 00000DA5 48B8-                           mov rax, sob_boolean_false
  1201 00000DA7 [0200000000000000] 
  1202                                  .L_end:
  1203                                          LEAVE
  1203 00000DAF C9                  <1>  leave
  1204 00000DB0 C21800                          ret AND_KILL_FRAME(1)
  1205                                  
  1206                                  L_code_ptr_is_closure:
  1207                                          ENTER
  1207 00000DB3 C8000000            <1>  enter 0, 0
  1207 00000DB7 4883E4F0            <1>  and rsp, ~15
  1208 00000DBB 48837D1801                      cmp COUNT, 1
  1209 00000DC0 0F85F50E0000                    jne L_error_arg_count_1
  1210 00000DC6 488B4520                        mov rax, PARAM(0)
  1211 00000DCA 803805                          cmp byte [rax], T_closure
  1212 00000DCD 750C                            jne .L_false
  1213 00000DCF 48B8-                           mov rax, sob_boolean_true
  1213 00000DD1 [0300000000000000] 
  1214 00000DD9 EB0A                            jmp .L_end
  1215                                  .L_false:
  1216 00000DDB 48B8-                           mov rax, sob_boolean_false
  1216 00000DDD [0200000000000000] 
  1217                                  .L_end:
  1218                                          LEAVE
  1218 00000DE5 C9                  <1>  leave
  1219 00000DE6 C21800                          ret AND_KILL_FRAME(1)
  1220                                  
  1221                                  L_code_ptr_is_real:
  1222                                          ENTER
  1222 00000DE9 C8000000            <1>  enter 0, 0
  1222 00000DED 4883E4F0            <1>  and rsp, ~15
  1223 00000DF1 48837D1801                      cmp COUNT, 1
  1224 00000DF6 0F85BF0E0000                    jne L_error_arg_count_1
  1225 00000DFC 488B4520                        mov rax, PARAM(0)
  1226 00000E00 803812                          cmp byte [rax], T_real
  1227 00000E03 750C                            jne .L_false
  1228 00000E05 48B8-                           mov rax, sob_boolean_true
  1228 00000E07 [0300000000000000] 
  1229 00000E0F EB0A                            jmp .L_end
  1230                                  .L_false:
  1231 00000E11 48B8-                           mov rax, sob_boolean_false
  1231 00000E13 [0200000000000000] 
  1232                                  .L_end:
  1233                                          LEAVE
  1233 00000E1B C9                  <1>  leave
  1234 00000E1C C21800                          ret AND_KILL_FRAME(1)
  1235                                  
  1236                                  L_code_ptr_is_rational:
  1237                                          ENTER
  1237 00000E1F C8000000            <1>  enter 0, 0
  1237 00000E23 4883E4F0            <1>  and rsp, ~15
  1238 00000E27 48837D1801                      cmp COUNT, 1
  1239 00000E2C 0F85890E0000                    jne L_error_arg_count_1
  1240 00000E32 488B4520                        mov rax, PARAM(0)
  1241 00000E36 803811                          cmp byte [rax], T_rational
  1242 00000E39 750C                            jne .L_false
  1243 00000E3B 48B8-                           mov rax, sob_boolean_true
  1243 00000E3D [0300000000000000] 
  1244 00000E45 EB0A                            jmp .L_end
  1245                                  .L_false:
  1246 00000E47 48B8-                           mov rax, sob_boolean_false
  1246 00000E49 [0200000000000000] 
  1247                                  .L_end:
  1248                                          LEAVE
  1248 00000E51 C9                  <1>  leave
  1249 00000E52 C21800                          ret AND_KILL_FRAME(1)
  1250                                  
  1251                                  L_code_ptr_is_boolean:
  1252                                          ENTER
  1252 00000E55 C8000000            <1>  enter 0, 0
  1252 00000E59 4883E4F0            <1>  and rsp, ~15
  1253 00000E5D 48837D1801                      cmp COUNT, 1
  1254 00000E62 0F85530E0000                    jne L_error_arg_count_1
  1255 00000E68 488B4520                        mov rax, PARAM(0)
  1256 00000E6C 8A18                            mov bl, byte [rax]
  1257 00000E6E 80E308                          and bl, T_boolean
  1258 00000E71 740C                            je .L_false
  1259 00000E73 48B8-                           mov rax, sob_boolean_true
  1259 00000E75 [0300000000000000] 
  1260 00000E7D EB0A                            jmp .L_end
  1261                                  .L_false:
  1262 00000E7F 48B8-                           mov rax, sob_boolean_false
  1262 00000E81 [0200000000000000] 
  1263                                  .L_end:
  1264                                          LEAVE
  1264 00000E89 C9                  <1>  leave
  1265 00000E8A C21800                          ret AND_KILL_FRAME(1)
  1266                                          
  1267                                  L_code_ptr_is_number:
  1268                                          ENTER
  1268 00000E8D C8000000            <1>  enter 0, 0
  1268 00000E91 4883E4F0            <1>  and rsp, ~15
  1269 00000E95 48837D1801                      cmp COUNT, 1
  1270 00000E9A 0F851B0E0000                    jne L_error_arg_count_1
  1271 00000EA0 488B4520                        mov rax, PARAM(0)
  1272 00000EA4 8A18                            mov bl, byte [rax]
  1273 00000EA6 80E310                          and bl, T_number
  1274 00000EA9 740C                            je .L_false
  1275 00000EAB 48B8-                           mov rax, sob_boolean_true
  1275 00000EAD [0300000000000000] 
  1276 00000EB5 EB0A                            jmp .L_end
  1277                                  .L_false:
  1278 00000EB7 48B8-                           mov rax, sob_boolean_false
  1278 00000EB9 [0200000000000000] 
  1279                                  .L_end:
  1280                                          LEAVE
  1280 00000EC1 C9                  <1>  leave
  1281 00000EC2 C21800                          ret AND_KILL_FRAME(1)
  1282                                          
  1283                                  L_code_ptr_is_collection:
  1284                                          ENTER
  1284 00000EC5 C8000000            <1>  enter 0, 0
  1284 00000EC9 4883E4F0            <1>  and rsp, ~15
  1285 00000ECD 48837D1801                      cmp COUNT, 1
  1286 00000ED2 0F85E30D0000                    jne L_error_arg_count_1
  1287 00000ED8 488B4520                        mov rax, PARAM(0)
  1288 00000EDC 8A18                            mov bl, byte [rax]
  1289 00000EDE 80E320                          and bl, T_collection
  1290 00000EE1 740C                            je .L_false
  1291 00000EE3 48B8-                           mov rax, sob_boolean_true
  1291 00000EE5 [0300000000000000] 
  1292 00000EED EB0A                            jmp .L_end
  1293                                  .L_false:
  1294 00000EEF 48B8-                           mov rax, sob_boolean_false
  1294 00000EF1 [0200000000000000] 
  1295                                  .L_end:
  1296                                          LEAVE
  1296 00000EF9 C9                  <1>  leave
  1297 00000EFA C21800                          ret AND_KILL_FRAME(1)
  1298                                  
  1299                                  L_code_ptr_cons:
  1300                                          ENTER
  1300 00000EFD C8000000            <1>  enter 0, 0
  1300 00000F01 4883E4F0            <1>  and rsp, ~15
  1301 00000F05 48837D1802                      cmp COUNT, 2
  1302 00000F0A 0F85D70D0000                    jne L_error_arg_count_2
  1303 00000F10 BF11000000                      mov rdi, (1 + 8 + 8)
  1304 00000F15 E870F7FFFF                      call malloc
  1305 00000F1A C60021                          mov byte [rax], T_pair
  1306 00000F1D 488B5D20                        mov rbx, PARAM(0)
  1307 00000F21 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1308 00000F25 488B5D28                        mov rbx, PARAM(1)
  1309 00000F29 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1310                                          LEAVE
  1310 00000F2D C9                  <1>  leave
  1311 00000F2E C22000                          ret AND_KILL_FRAME(2)
  1312                                  
  1313                                  L_code_ptr_display_sexpr:
  1314                                          ENTER
  1314 00000F31 C8000000            <1>  enter 0, 0
  1314 00000F35 4883E4F0            <1>  and rsp, ~15
  1315 00000F39 48837D1801                      cmp COUNT, 1
  1316 00000F3E 0F85770D0000                    jne L_error_arg_count_1
  1317 00000F44 488B7D20                        mov rdi, PARAM(0)
  1318 00000F48 E858F7FFFF                      call print_sexpr
  1319 00000F4D 48B8-                           mov rax, sob_void
  1319 00000F4F [0000000000000000] 
  1320                                          LEAVE
  1320 00000F57 C9                  <1>  leave
  1321 00000F58 C21800                          ret AND_KILL_FRAME(1)
  1322                                  
  1323                                  L_code_ptr_write_char:
  1324                                          ENTER
  1324 00000F5B C8000000            <1>  enter 0, 0
  1324 00000F5F 4883E4F0            <1>  and rsp, ~15
  1325 00000F63 48837D1801                      cmp COUNT, 1
  1326 00000F68 0F854D0D0000                    jne L_error_arg_count_1
  1327 00000F6E 488B4520                        mov rax, PARAM(0)
  1328                                          assert_char(rax)
  1328 00000F72 803802              <1>  cmp byte [%1], %2
  1328 00000F75 0F851C0E0000        <1>  jne L_error_incorrect_type
  1329 00000F7B 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1330 00000F7E 4825FF000000                    and rax, 255
  1331 00000F84 48BF-                           mov rdi, fmt_char
  1331 00000F86 [3702000000000000] 
  1332 00000F8E 4889C6                          mov rsi, rax
  1333 00000F91 B800000000                      mov rax, 0
  1334 00000F96 E8(00000000)                    call printf
  1335 00000F9B 48B8-                           mov rax, sob_void
  1335 00000F9D [0000000000000000] 
  1336                                          LEAVE
  1336 00000FA5 C9                  <1>  leave
  1337 00000FA6 C21800                          ret AND_KILL_FRAME(1)
  1338                                  
  1339                                  L_code_ptr_car:
  1340                                          ENTER
  1340 00000FA9 C8000000            <1>  enter 0, 0
  1340 00000FAD 4883E4F0            <1>  and rsp, ~15
  1341 00000FB1 48837D1801                      cmp COUNT, 1
  1342 00000FB6 0F85FF0C0000                    jne L_error_arg_count_1
  1343 00000FBC 488B4520                        mov rax, PARAM(0)
  1344                                          assert_pair(rax)
  1344 00000FC0 803821              <1>  cmp byte [%1], %2
  1344 00000FC3 0F85CE0D0000        <1>  jne L_error_incorrect_type
  1345 00000FC9 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1346                                          LEAVE
  1346 00000FCD C9                  <1>  leave
  1347 00000FCE C21800                          ret AND_KILL_FRAME(1)
  1348                                          
  1349                                  L_code_ptr_cdr:
  1350                                          ENTER
  1350 00000FD1 C8000000            <1>  enter 0, 0
  1350 00000FD5 4883E4F0            <1>  and rsp, ~15
  1351 00000FD9 48837D1801                      cmp COUNT, 1
  1352 00000FDE 0F85D70C0000                    jne L_error_arg_count_1
  1353 00000FE4 488B4520                        mov rax, PARAM(0)
  1354                                          assert_pair(rax)
  1354 00000FE8 803821              <1>  cmp byte [%1], %2
  1354 00000FEB 0F85A60D0000        <1>  jne L_error_incorrect_type
  1355 00000FF1 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1356                                          LEAVE
  1356 00000FF5 C9                  <1>  leave
  1357 00000FF6 C21800                          ret AND_KILL_FRAME(1)
  1358                                          
  1359                                  L_code_ptr_string_length:
  1360                                          ENTER
  1360 00000FF9 C8000000            <1>  enter 0, 0
  1360 00000FFD 4883E4F0            <1>  and rsp, ~15
  1361 00001001 48837D1801                      cmp COUNT, 1
  1362 00001006 0F85AF0C0000                    jne L_error_arg_count_1
  1363 0000100C 488B4520                        mov rax, PARAM(0)
  1364                                          assert_string(rax)
  1364 00001010 803803              <1>  cmp byte [%1], %2
  1364 00001013 0F857E0D0000        <1>  jne L_error_incorrect_type
  1365 00001019 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1366 0000101D E81F0C0000                      call make_integer
  1367                                          LEAVE
  1367 00001022 C9                  <1>  leave
  1368 00001023 C21800                          ret AND_KILL_FRAME(1)
  1369                                  
  1370                                  L_code_ptr_vector_length:
  1371                                          ENTER
  1371 00001026 C8000000            <1>  enter 0, 0
  1371 0000102A 4883E4F0            <1>  and rsp, ~15
  1372 0000102E 48837D1801                      cmp COUNT, 1
  1373 00001033 0F85820C0000                    jne L_error_arg_count_1
  1374 00001039 488B4520                        mov rax, PARAM(0)
  1375                                          assert_vector(rax)
  1375 0000103D 803822              <1>  cmp byte [%1], %2
  1375 00001040 0F85510D0000        <1>  jne L_error_incorrect_type
  1376 00001046 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1377 0000104A E8F20B0000                      call make_integer
  1378                                          LEAVE
  1378 0000104F C9                  <1>  leave
  1379 00001050 C21800                          ret AND_KILL_FRAME(1)
  1380                                  
  1381                                  L_code_ptr_real_to_integer:
  1382                                          ENTER
  1382 00001053 C8000000            <1>  enter 0, 0
  1382 00001057 4883E4F0            <1>  and rsp, ~15
  1383 0000105B 48837D1801                      cmp COUNT, 1
  1384 00001060 0F85550C0000                    jne L_error_arg_count_1
  1385 00001066 488B5D20                        mov rbx, PARAM(0)
  1386                                          assert_real(rbx)
  1386 0000106A 803B12              <1>  cmp byte [%1], %2
  1386 0000106D 0F85240D0000        <1>  jne L_error_incorrect_type
  1387 00001073 F20F104301                      movsd xmm0, qword [rbx + 1]
  1388 00001078 F2480F2CF8                      cvttsd2si rdi, xmm0
  1389 0000107D E8BF0B0000                      call make_integer
  1390                                          LEAVE
  1390 00001082 C9                  <1>  leave
  1391 00001083 C21800                          ret AND_KILL_FRAME(1)
  1392                                  
  1393                                  L_code_ptr_exit:
  1394                                          ENTER
  1394 00001086 C8000000            <1>  enter 0, 0
  1394 0000108A 4883E4F0            <1>  and rsp, ~15
  1395 0000108E 48837D1800                      cmp COUNT, 0
  1396 00001093 0F85F60B0000                    jne L_error_arg_count_0
  1397 00001099 B800000000                      mov rax, 0
  1398 0000109E E8(00000000)                    call exit
  1399                                  
  1400                                  L_code_ptr_integer_to_real:
  1401                                          ENTER
  1401 000010A3 C8000000            <1>  enter 0, 0
  1401 000010A7 4883E4F0            <1>  and rsp, ~15
  1402 000010AB 48837D1801                      cmp COUNT, 1
  1403 000010B0 0F85050C0000                    jne L_error_arg_count_1
  1404 000010B6 488B4520                        mov rax, PARAM(0)
  1405                                          assert_integer(rax)
  1405                              <1>  assert_rational(%1)
  1405 000010BA 803811              <2>  cmp byte [%1], %2
  1405 000010BD 0F85D40C0000        <2>  jne L_error_incorrect_type
  1405 000010C3 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
  1405 000010C8 0F85C90C0000        <1>  jne L_error_incorrect_type
  1406 000010CE FF7001                          push qword [rax + 1]
  1407 000010D1 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1408 000010D7 E8490B0000                      call make_real
  1409                                          LEAVE
  1409 000010DC C9                  <1>  leave
  1410 000010DD C21800                          ret AND_KILL_FRAME(1)
  1411                                  
  1412                                  L_code_ptr_rational_to_real:
  1413                                          ENTER
  1413 000010E0 C8000000            <1>  enter 0, 0
  1413 000010E4 4883E4F0            <1>  and rsp, ~15
  1414 000010E8 48837D1801                      cmp COUNT, 1
  1415 000010ED 0F85C80B0000                    jne L_error_arg_count_1
  1416 000010F3 488B4520                        mov rax, PARAM(0)
  1417                                          assert_rational(rax)
  1417 000010F7 803811              <1>  cmp byte [%1], %2
  1417 000010FA 0F85970C0000        <1>  jne L_error_incorrect_type
  1418 00001100 FF7001                          push qword [rax + 1]
  1419 00001103 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1420 00001109 FF7009                          push qword [rax + 1 + 8]
  1421 0000110C F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1422 00001112 F20F5EC1                        divsd xmm0, xmm1
  1423 00001116 E80A0B0000                      call make_real
  1424                                          LEAVE
  1424 0000111B C9                  <1>  leave
  1425 0000111C C21800                          ret AND_KILL_FRAME(1)
  1426                                  
  1427                                  L_code_ptr_char_to_integer:
  1428                                          ENTER
  1428 0000111F C8000000            <1>  enter 0, 0
  1428 00001123 4883E4F0            <1>  and rsp, ~15
  1429 00001127 48837D1801                      cmp COUNT, 1
  1430 0000112C 0F85890B0000                    jne L_error_arg_count_1
  1431 00001132 488B4520                        mov rax, PARAM(0)
  1432                                          assert_char(rax)
  1432 00001136 803802              <1>  cmp byte [%1], %2
  1432 00001139 0F85580C0000        <1>  jne L_error_incorrect_type
  1433 0000113F 8A4001                          mov al, byte [rax + 1]
  1434 00001142 4825FF000000                    and rax, 255
  1435 00001148 4889C7                          mov rdi, rax
  1436 0000114B E8F10A0000                      call make_integer
  1437                                          LEAVE
  1437 00001150 C9                  <1>  leave
  1438 00001151 C21800                          ret AND_KILL_FRAME(1)
  1439                                  
  1440                                  L_code_ptr_integer_to_char:
  1441                                          ENTER
  1441 00001154 C8000000            <1>  enter 0, 0
  1441 00001158 4883E4F0            <1>  and rsp, ~15
  1442 0000115C 48837D1801                      cmp COUNT, 1
  1443 00001161 0F85540B0000                    jne L_error_arg_count_1
  1444 00001167 488B4520                        mov rax, PARAM(0)
  1445                                          assert_integer(rax)
  1445                              <1>  assert_rational(%1)
  1445 0000116B 803811              <2>  cmp byte [%1], %2
  1445 0000116E 0F85230C0000        <2>  jne L_error_incorrect_type
  1445 00001174 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
  1445 00001179 0F85180C0000        <1>  jne L_error_incorrect_type
  1446 0000117F 488B5801                        mov rbx, qword [rax + 1]
  1447 00001183 4883FB00                        cmp rbx, 0
  1448 00001187 0F8EDA0A0000                    jle L_error_integer_range
  1449 0000118D 4881FB00010000                  cmp rbx, 256
  1450 00001194 0F8DCD0A0000                    jge L_error_integer_range
  1451 0000119A BF02000000                      mov rdi, (1 + 1)
  1452 0000119F E8E6F4FFFF                      call malloc
  1453 000011A4 C60002                          mov byte [rax], T_char
  1454 000011A7 885801                          mov byte [rax + 1], bl
  1455                                          LEAVE
  1455 000011AA C9                  <1>  leave
  1456 000011AB C21800                          ret AND_KILL_FRAME(1)
  1457                                  
  1458                                  L_code_ptr_trng:
  1459                                          ENTER
  1459 000011AE C8000000            <1>  enter 0, 0
  1459 000011B2 4883E4F0            <1>  and rsp, ~15
  1460 000011B6 48837D1800                      cmp COUNT, 0
  1461 000011BB 0F85CE0A0000                    jne L_error_arg_count_0
  1462 000011C1 480FC7F7                        rdrand rdi
  1463 000011C5 48D1EF                          shr rdi, 1
  1464 000011C8 E8740A0000                      call make_integer
  1465                                          LEAVE
  1465 000011CD C9                  <1>  leave
  1466 000011CE C21000                          ret AND_KILL_FRAME(0)
  1467                                  
  1468                                  L_code_ptr_is_zero:
  1469                                          ENTER
  1469 000011D1 C8000000            <1>  enter 0, 0
  1469 000011D5 4883E4F0            <1>  and rsp, ~15
  1470 000011D9 48837D1801                      cmp COUNT, 1
  1471 000011DE 0F85D70A0000                    jne L_error_arg_count_1
  1472 000011E4 488B4520                        mov rax, PARAM(0)
  1473 000011E8 803811                          cmp byte [rax], T_rational
  1474 000011EB 740A                            je .L_rational
  1475 000011ED 803812                          cmp byte [rax], T_real
  1476 000011F0 740E                            je .L_real
  1477 000011F2 E9A00B0000                      jmp L_error_incorrect_type
  1478                                  .L_rational:
  1479 000011F7 4883780100                      cmp qword [rax + 1], 0
  1480 000011FC 7420                            je .L_zero
  1481 000011FE EB12                            jmp .L_not_zero
  1482                                  .L_real:
  1483 00001200 660FEFC0                        pxor xmm0, xmm0
  1484 00001204 FF7001                          push qword [rax + 1]
  1485 00001207 F20F100C24                      movsd xmm1, qword [rsp]
  1486 0000120C 660F2EC1                        ucomisd xmm0, xmm1
  1487 00001210 740C                            je .L_zero
  1488                                  .L_not_zero:
  1489 00001212 48B8-                           mov rax, sob_boolean_false
  1489 00001214 [0200000000000000] 
  1490 0000121C EB0A                            jmp .L_end
  1491                                  .L_zero:
  1492 0000121E 48B8-                           mov rax, sob_boolean_true
  1492 00001220 [0300000000000000] 
  1493                                  .L_end:
  1494                                          LEAVE
  1494 00001228 C9                  <1>  leave
  1495 00001229 C21800                          ret AND_KILL_FRAME(1)
  1496                                  
  1497                                  L_code_ptr_is_integer:
  1498                                          ENTER
  1498 0000122C C8000000            <1>  enter 0, 0
  1498 00001230 4883E4F0            <1>  and rsp, ~15
  1499 00001234 48837D1801                      cmp COUNT, 1
  1500 00001239 0F857C0A0000                    jne L_error_arg_count_1
  1501 0000123F 488B4520                        mov rax, PARAM(0)
  1502 00001243 803811                          cmp byte [rax], T_rational
  1503 00001246 7513                            jne .L_false
  1504 00001248 4883780901                      cmp qword [rax + 1 + 8], 1
  1505 0000124D 750C                            jne .L_false
  1506 0000124F 48B8-                           mov rax, sob_boolean_true
  1506 00001251 [0300000000000000] 
  1507 00001259 EB0A                            jmp .L_exit
  1508                                  .L_false:
  1509 0000125B 48B8-                           mov rax, sob_boolean_false
  1509 0000125D [0200000000000000] 
  1510                                  .L_exit:
  1511                                          LEAVE
  1511 00001265 C9                  <1>  leave
  1512 00001266 C21800                          ret AND_KILL_FRAME(1)
  1513                                  
  1514                                  L_code_ptr_raw_bin_add_rr:
  1515                                          ENTER
  1515 00001269 C8000000            <1>  enter 0, 0
  1515 0000126D 4883E4F0            <1>  and rsp, ~15
  1516 00001271 48837D1802                      cmp COUNT, 2
  1517 00001276 0F856B0A0000                    jne L_error_arg_count_2
  1518 0000127C 488B5D20                        mov rbx, PARAM(0)
  1519                                          assert_real(rbx)
  1519 00001280 803B12              <1>  cmp byte [%1], %2
  1519 00001283 0F850E0B0000        <1>  jne L_error_incorrect_type
  1520 00001289 488B4D28                        mov rcx, PARAM(1)
  1521                                          assert_real(rcx)
  1521 0000128D 803912              <1>  cmp byte [%1], %2
  1521 00001290 0F85010B0000        <1>  jne L_error_incorrect_type
  1522 00001296 F20F104301                      movsd xmm0, qword [rbx + 1]
  1523 0000129B F20F104901                      movsd xmm1, qword [rcx + 1]
  1524 000012A0 F20F58C1                        addsd xmm0, xmm1
  1525 000012A4 E87C090000                      call make_real
  1526                                          LEAVE
  1526 000012A9 C9                  <1>  leave
  1527 000012AA C22000                          ret AND_KILL_FRAME(2)
  1528                                  
  1529                                  L_code_ptr_raw_bin_sub_rr:
  1530                                          ENTER
  1530 000012AD C8000000            <1>  enter 0, 0
  1530 000012B1 4883E4F0            <1>  and rsp, ~15
  1531 000012B5 48837D1802                      cmp COUNT, 2
  1532 000012BA 0F85270A0000                    jne L_error_arg_count_2
  1533 000012C0 488B5D20                        mov rbx, PARAM(0)
  1534                                          assert_real(rbx)
  1534 000012C4 803B12              <1>  cmp byte [%1], %2
  1534 000012C7 0F85CA0A0000        <1>  jne L_error_incorrect_type
  1535 000012CD 488B4D28                        mov rcx, PARAM(1)
  1536                                          assert_real(rcx)
  1536 000012D1 803912              <1>  cmp byte [%1], %2
  1536 000012D4 0F85BD0A0000        <1>  jne L_error_incorrect_type
  1537 000012DA F20F104301                      movsd xmm0, qword [rbx + 1]
  1538 000012DF F20F104901                      movsd xmm1, qword [rcx + 1]
  1539 000012E4 F20F5CC1                        subsd xmm0, xmm1
  1540 000012E8 E838090000                      call make_real
  1541                                          LEAVE
  1541 000012ED C9                  <1>  leave
  1542 000012EE C22000                          ret AND_KILL_FRAME(2)
  1543                                  
  1544                                  L_code_ptr_raw_bin_mul_rr:
  1545                                          ENTER
  1545 000012F1 C8000000            <1>  enter 0, 0
  1545 000012F5 4883E4F0            <1>  and rsp, ~15
  1546 000012F9 48837D1802                      cmp COUNT, 2
  1547 000012FE 0F85E3090000                    jne L_error_arg_count_2
  1548 00001304 488B5D20                        mov rbx, PARAM(0)
  1549                                          assert_real(rbx)
  1549 00001308 803B12              <1>  cmp byte [%1], %2
  1549 0000130B 0F85860A0000        <1>  jne L_error_incorrect_type
  1550 00001311 488B4D28                        mov rcx, PARAM(1)
  1551                                          assert_real(rcx)
  1551 00001315 803912              <1>  cmp byte [%1], %2
  1551 00001318 0F85790A0000        <1>  jne L_error_incorrect_type
  1552 0000131E F20F104301                      movsd xmm0, qword [rbx + 1]
  1553 00001323 F20F104901                      movsd xmm1, qword [rcx + 1]
  1554 00001328 F20F59C1                        mulsd xmm0, xmm1
  1555 0000132C E8F4080000                      call make_real
  1556                                          LEAVE
  1556 00001331 C9                  <1>  leave
  1557 00001332 C22000                          ret AND_KILL_FRAME(2)
  1558                                  
  1559                                  L_code_ptr_raw_bin_div_rr:
  1560                                          ENTER
  1560 00001335 C8000000            <1>  enter 0, 0
  1560 00001339 4883E4F0            <1>  and rsp, ~15
  1561 0000133D 48837D1802                      cmp COUNT, 2
  1562 00001342 0F859F090000                    jne L_error_arg_count_2
  1563 00001348 488B5D20                        mov rbx, PARAM(0)
  1564                                          assert_real(rbx)
  1564 0000134C 803B12              <1>  cmp byte [%1], %2
  1564 0000134F 0F85420A0000        <1>  jne L_error_incorrect_type
  1565 00001355 488B4D28                        mov rcx, PARAM(1)
  1566                                          assert_real(rcx)
  1566 00001359 803912              <1>  cmp byte [%1], %2
  1566 0000135C 0F85350A0000        <1>  jne L_error_incorrect_type
  1567 00001362 F20F104301                      movsd xmm0, qword [rbx + 1]
  1568 00001367 F20F104901                      movsd xmm1, qword [rcx + 1]
  1569 0000136C 660FEFD2                        pxor xmm2, xmm2
  1570 00001370 660F2ECA                        ucomisd xmm1, xmm2
  1571 00001374 0F84450A0000                    je L_error_division_by_zero
  1572 0000137A F20F5EC1                        divsd xmm0, xmm1
  1573 0000137E E8A2080000                      call make_real
  1574                                          LEAVE
  1574 00001383 C9                  <1>  leave
  1575 00001384 C22000                          ret AND_KILL_FRAME(2)
  1576                                  
  1577                                  L_code_ptr_raw_bin_add_qq:
  1578                                          ENTER
  1578 00001387 C8000000            <1>  enter 0, 0
  1578 0000138B 4883E4F0            <1>  and rsp, ~15
  1579 0000138F 48837D1802                      cmp COUNT, 2
  1580 00001394 0F854D090000                    jne L_error_arg_count_2
  1581 0000139A 4C8B4520                        mov r8, PARAM(0)
  1582                                          assert_rational(r8)
  1582 0000139E 41803811            <1>  cmp byte [%1], %2
  1582 000013A2 0F85EF090000        <1>  jne L_error_incorrect_type
  1583 000013A8 4C8B4D28                        mov r9, PARAM(1)
  1584                                          assert_rational(r9)
  1584 000013AC 41803911            <1>  cmp byte [%1], %2
  1584 000013B0 0F85E1090000        <1>  jne L_error_incorrect_type
  1585 000013B6 498B4001                        mov rax, qword [r8 + 1] ; num1
  1586 000013BA 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1587 000013BE 4899                            cqo
  1588 000013C0 48F7EB                          imul rbx
  1589 000013C3 4889C6                          mov rsi, rax
  1590 000013C6 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1591 000013CA 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1592 000013CE 4899                            cqo
  1593 000013D0 48F7EB                          imul rbx
  1594 000013D3 4801C6                          add rsi, rax
  1595 000013D6 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1596 000013DA 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1597 000013DE 4899                            cqo
  1598 000013E0 48F7EB                          imul rbx
  1599 000013E3 4889C7                          mov rdi, rax
  1600 000013E6 E827010000                      call normalize_rational
  1601                                          LEAVE
  1601 000013EB C9                  <1>  leave
  1602 000013EC C22000                          ret AND_KILL_FRAME(2)
  1603                                  
  1604                                  L_code_ptr_raw_bin_sub_qq:
  1605                                          ENTER
  1605 000013EF C8000000            <1>  enter 0, 0
  1605 000013F3 4883E4F0            <1>  and rsp, ~15
  1606 000013F7 48837D1802                      cmp COUNT, 2
  1607 000013FC 0F85E5080000                    jne L_error_arg_count_2
  1608 00001402 4C8B4520                        mov r8, PARAM(0)
  1609                                          assert_rational(r8)
  1609 00001406 41803811            <1>  cmp byte [%1], %2
  1609 0000140A 0F8587090000        <1>  jne L_error_incorrect_type
  1610 00001410 4C8B4D28                        mov r9, PARAM(1)
  1611                                          assert_rational(r9)
  1611 00001414 41803911            <1>  cmp byte [%1], %2
  1611 00001418 0F8579090000        <1>  jne L_error_incorrect_type
  1612 0000141E 498B4001                        mov rax, qword [r8 + 1] ; num1
  1613 00001422 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1614 00001426 4899                            cqo
  1615 00001428 48F7EB                          imul rbx
  1616 0000142B 4889C6                          mov rsi, rax
  1617 0000142E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1618 00001432 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1619 00001436 4899                            cqo
  1620 00001438 48F7EB                          imul rbx
  1621 0000143B 4829C6                          sub rsi, rax
  1622 0000143E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1623 00001442 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1624 00001446 4899                            cqo
  1625 00001448 48F7EB                          imul rbx
  1626 0000144B 4889C7                          mov rdi, rax
  1627 0000144E E8BF000000                      call normalize_rational
  1628                                          LEAVE
  1628 00001453 C9                  <1>  leave
  1629 00001454 C22000                          ret AND_KILL_FRAME(2)
  1630                                  
  1631                                  L_code_ptr_raw_bin_mul_qq:
  1632                                          ENTER
  1632 00001457 C8000000            <1>  enter 0, 0
  1632 0000145B 4883E4F0            <1>  and rsp, ~15
  1633 0000145F 48837D1802                      cmp COUNT, 2
  1634 00001464 0F857D080000                    jne L_error_arg_count_2
  1635 0000146A 4C8B4520                        mov r8, PARAM(0)
  1636                                          assert_rational(r8)
  1636 0000146E 41803811            <1>  cmp byte [%1], %2
  1636 00001472 0F851F090000        <1>  jne L_error_incorrect_type
  1637 00001478 4C8B4D28                        mov r9, PARAM(1)
  1638                                          assert_rational(r9)
  1638 0000147C 41803911            <1>  cmp byte [%1], %2
  1638 00001480 0F8511090000        <1>  jne L_error_incorrect_type
  1639 00001486 498B4001                        mov rax, qword [r8 + 1] ; num1
  1640 0000148A 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1641 0000148E 4899                            cqo
  1642 00001490 48F7EB                          imul rbx
  1643 00001493 4889C6                          mov rsi, rax
  1644 00001496 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1645 0000149A 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1646 0000149E 4899                            cqo
  1647 000014A0 48F7EB                          imul rbx
  1648 000014A3 4889C7                          mov rdi, rax
  1649 000014A6 E867000000                      call normalize_rational
  1650                                          LEAVE
  1650 000014AB C9                  <1>  leave
  1651 000014AC C22000                          ret AND_KILL_FRAME(2)
  1652                                          
  1653                                  L_code_ptr_raw_bin_div_qq:
  1654                                          ENTER
  1654 000014AF C8000000            <1>  enter 0, 0
  1654 000014B3 4883E4F0            <1>  and rsp, ~15
  1655 000014B7 48837D1802                      cmp COUNT, 2
  1656 000014BC 0F8525080000                    jne L_error_arg_count_2
  1657 000014C2 4C8B4520                        mov r8, PARAM(0)
  1658                                          assert_rational(r8)
  1658 000014C6 41803811            <1>  cmp byte [%1], %2
  1658 000014CA 0F85C7080000        <1>  jne L_error_incorrect_type
  1659 000014D0 4C8B4D28                        mov r9, PARAM(1)
  1660                                          assert_rational(r9)
  1660 000014D4 41803911            <1>  cmp byte [%1], %2
  1660 000014D8 0F85B9080000        <1>  jne L_error_incorrect_type
  1661 000014DE 4983790100                      cmp qword [r9 + 1], 0
  1662 000014E3 0F84D6080000                    je L_error_division_by_zero
  1663 000014E9 498B4001                        mov rax, qword [r8 + 1] ; num1
  1664 000014ED 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1665 000014F1 4899                            cqo
  1666 000014F3 48F7EB                          imul rbx
  1667 000014F6 4889C6                          mov rsi, rax
  1668 000014F9 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1669 000014FD 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1670 00001501 4899                            cqo
  1671 00001503 48F7EB                          imul rbx
  1672 00001506 4889C7                          mov rdi, rax
  1673 00001509 E804000000                      call normalize_rational
  1674                                          LEAVE
  1674 0000150E C9                  <1>  leave
  1675 0000150F C22000                          ret AND_KILL_FRAME(2)
  1676                                          
  1677                                  normalize_rational:
  1678 00001512 56                              push rsi
  1679 00001513 57                              push rdi
  1680 00001514 E839000000                      call gcd
  1681 00001519 4889C3                          mov rbx, rax
  1682 0000151C 58                              pop rax
  1683 0000151D 4899                            cqo
  1684 0000151F 48F7FB                          idiv rbx
  1685 00001522 4989C0                          mov r8, rax
  1686 00001525 58                              pop rax
  1687 00001526 4899                            cqo
  1688 00001528 48F7FB                          idiv rbx
  1689 0000152B 4989C1                          mov r9, rax
  1690 0000152E BF11000000                      mov rdi, (1 + 8 + 8)
  1691 00001533 E852F1FFFF                      call malloc
  1692 00001538 C60011                          mov byte [rax], T_rational
  1693 0000153B 4C894801                        mov qword [rax + 1], r9
  1694 0000153F 4C894009                        mov qword [rax + 1 + 8], r8
  1695 00001543 C3                              ret
  1696                                  
  1697                                  iabs:
  1698 00001544 4889F8                          mov rax, rdi
  1699 00001547 4883F800                        cmp rax, 0
  1700 0000154B 7C01                            jl .Lneg
  1701 0000154D C3                              ret
  1702                                  .Lneg:
  1703 0000154E 48F7D8                          neg rax
  1704 00001551 C3                              ret
  1705                                  
  1706                                  gcd:
  1707 00001552 E8EDFFFFFF                      call iabs
  1708 00001557 4889C3                          mov rbx, rax
  1709 0000155A 4889F7                          mov rdi, rsi
  1710 0000155D E8E2FFFFFF                      call iabs
  1711 00001562 4883F800                        cmp rax, 0
  1712 00001566 7502                            jne .L0
  1713 00001568 4893                            xchg rax, rbx
  1714                                  .L0:
  1715 0000156A 4883FB00                        cmp rbx, 0
  1716 0000156E 740C                            je .L1
  1717 00001570 4899                            cqo
  1718 00001572 48F7F3                          div rbx
  1719 00001575 4889D0                          mov rax, rdx
  1720 00001578 4893                            xchg rax, rbx
  1721 0000157A EBEE                            jmp .L0
  1722                                  .L1:
  1723 0000157C C3                              ret
  1724                                  
  1725                                  L_code_ptr_error:
  1726                                          ENTER
  1726 0000157D C8000000            <1>  enter 0, 0
  1726 00001581 4883E4F0            <1>  and rsp, ~15
  1727 00001585 48837D1802                      cmp COUNT, 2
  1728 0000158A 0F8557070000                    jne L_error_arg_count_2
  1729 00001590 488B7520                        mov rsi, PARAM(0)
  1730                                          assert_symbol(rsi)
  1730 00001594 803E04              <1>  cmp byte [%1], %2
  1730 00001597 0F85FA070000        <1>  jne L_error_incorrect_type
  1731 0000159D 488B7528                        mov rsi, PARAM(1)
  1732                                          assert_string(rsi)
  1732 000015A1 803E03              <1>  cmp byte [%1], %2
  1732 000015A4 0F85ED070000        <1>  jne L_error_incorrect_type
  1733 000015AA 48BF-                           mov rdi, fmt_scheme_error_part_1
  1733 000015AC [8C03000000000000] 
  1734 000015B4 B800000000                      mov rax, 0
  1735 000015B9 E8(00000000)                    call printf
  1736 000015BE 488B7D20                        mov rdi, PARAM(0)
  1737 000015C2 E8DEF0FFFF                      call print_sexpr
  1738 000015C7 48BF-                           mov rdi, fmt_scheme_error_part_2
  1738 000015C9 [A003000000000000] 
  1739 000015D1 B800000000                      mov rax, 0
  1740 000015D6 E8(00000000)                    call printf
  1741 000015DB 488B4528                        mov rax, PARAM(1)       ; sob_string
  1742 000015DF BE01000000                      mov rsi, 1              ; size = 1 byte
  1743 000015E4 488B5001                        mov rdx, qword [rax + 1] ; length
  1744 000015E8 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1745 000015EC 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1746 000015F4 E8(00000000)                    call fwrite
  1747 000015F9 48BF-                           mov rdi, fmt_scheme_error_part_3
  1747 000015FB [E203000000000000] 
  1748 00001603 B800000000                      mov rax, 0
  1749 00001608 E8(00000000)                    call printf
  1750 0000160D 48C7C0F7FFFFFF                  mov rax, -9
  1751 00001614 E8(00000000)                    call exit
  1752                                  
  1753                                  L_code_ptr_raw_less_than_rr:
  1754                                          ENTER
  1754 00001619 C8000000            <1>  enter 0, 0
  1754 0000161D 4883E4F0            <1>  and rsp, ~15
  1755 00001621 48837D1802                      cmp COUNT, 2
  1756 00001626 0F85BB060000                    jne L_error_arg_count_2
  1757 0000162C 488B7520                        mov rsi, PARAM(0)
  1758                                          assert_real(rsi)
  1758 00001630 803E12              <1>  cmp byte [%1], %2
  1758 00001633 0F855E070000        <1>  jne L_error_incorrect_type
  1759 00001639 488B7D28                        mov rdi, PARAM(1)
  1760                                          assert_real(rdi)
  1760 0000163D 803F12              <1>  cmp byte [%1], %2
  1760 00001640 0F8551070000        <1>  jne L_error_incorrect_type
  1761 00001646 F20F104601                      movsd xmm0, qword [rsi + 1]
  1762 0000164B F20F104F01                      movsd xmm1, qword [rdi + 1]
  1763 00001650 660F2FC1                        comisd xmm0, xmm1
  1764 00001654 730C                            jae .L_false
  1765 00001656 48B8-                           mov rax, sob_boolean_true
  1765 00001658 [0300000000000000] 
  1766 00001660 EB0A                            jmp .L_exit
  1767                                  .L_false:
  1768 00001662 48B8-                           mov rax, sob_boolean_false
  1768 00001664 [0200000000000000] 
  1769                                  .L_exit:
  1770                                          LEAVE
  1770 0000166C C9                  <1>  leave
  1771 0000166D C22000                          ret AND_KILL_FRAME(2)
  1772                                          
  1773                                  L_code_ptr_raw_less_than_qq:
  1774                                          ENTER
  1774 00001670 C8000000            <1>  enter 0, 0
  1774 00001674 4883E4F0            <1>  and rsp, ~15
  1775 00001678 48837D1802                      cmp COUNT, 2
  1776 0000167D 0F8564060000                    jne L_error_arg_count_2
  1777 00001683 488B7520                        mov rsi, PARAM(0)
  1778                                          assert_rational(rsi)
  1778 00001687 803E11              <1>  cmp byte [%1], %2
  1778 0000168A 0F8507070000        <1>  jne L_error_incorrect_type
  1779 00001690 488B7D28                        mov rdi, PARAM(1)
  1780                                          assert_rational(rdi)
  1780 00001694 803F11              <1>  cmp byte [%1], %2
  1780 00001697 0F85FA060000        <1>  jne L_error_incorrect_type
  1781 0000169D 488B4601                        mov rax, qword [rsi + 1] ; num1
  1782 000016A1 4899                            cqo
  1783 000016A3 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1784 000016A7 4889C1                          mov rcx, rax
  1785 000016AA 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1786 000016AE 4899                            cqo
  1787 000016B0 48F76F01                        imul qword [rdi + 1]          ; num2
  1788 000016B4 4829C1                          sub rcx, rax
  1789 000016B7 7D0C                            jge .L_false
  1790 000016B9 48B8-                           mov rax, sob_boolean_true
  1790 000016BB [0300000000000000] 
  1791 000016C3 EB0A                            jmp .L_exit
  1792                                  .L_false:
  1793 000016C5 48B8-                           mov rax, sob_boolean_false
  1793 000016C7 [0200000000000000] 
  1794                                  .L_exit:
  1795                                          LEAVE
  1795 000016CF C9                  <1>  leave
  1796 000016D0 C22000                          ret AND_KILL_FRAME(2)
  1797                                  
  1798                                  L_code_ptr_raw_equal_rr:
  1799                                          ENTER
  1799 000016D3 C8000000            <1>  enter 0, 0
  1799 000016D7 4883E4F0            <1>  and rsp, ~15
  1800 000016DB 48837D1802                      cmp COUNT, 2
  1801 000016E0 0F8501060000                    jne L_error_arg_count_2
  1802 000016E6 488B7520                        mov rsi, PARAM(0)
  1803                                          assert_real(rsi)
  1803 000016EA 803E12              <1>  cmp byte [%1], %2
  1803 000016ED 0F85A4060000        <1>  jne L_error_incorrect_type
  1804 000016F3 488B7D28                        mov rdi, PARAM(1)
  1805                                          assert_real(rdi)
  1805 000016F7 803F12              <1>  cmp byte [%1], %2
  1805 000016FA 0F8597060000        <1>  jne L_error_incorrect_type
  1806 00001700 F20F104601                      movsd xmm0, qword [rsi + 1]
  1807 00001705 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1808 0000170A 660F2FC1                        comisd xmm0, xmm1
  1809 0000170E 750C                            jne .L_false
  1810 00001710 48B8-                           mov rax, sob_boolean_true
  1810 00001712 [0300000000000000] 
  1811 0000171A EB0A                            jmp .L_exit
  1812                                  .L_false:
  1813 0000171C 48B8-                           mov rax, sob_boolean_false
  1813 0000171E [0200000000000000] 
  1814                                  .L_exit:
  1815                                          LEAVE
  1815 00001726 C9                  <1>  leave
  1816 00001727 C22000                          ret AND_KILL_FRAME(2)
  1817                                          
  1818                                  L_code_ptr_raw_equal_qq:
  1819                                          ENTER
  1819 0000172A C8000000            <1>  enter 0, 0
  1819 0000172E 4883E4F0            <1>  and rsp, ~15
  1820 00001732 48837D1802                      cmp COUNT, 2
  1821 00001737 0F85AA050000                    jne L_error_arg_count_2
  1822 0000173D 488B7520                        mov rsi, PARAM(0)
  1823                                          assert_rational(rsi)
  1823 00001741 803E11              <1>  cmp byte [%1], %2
  1823 00001744 0F854D060000        <1>  jne L_error_incorrect_type
  1824 0000174A 488B7D28                        mov rdi, PARAM(1)
  1825                                          assert_rational(rdi)
  1825 0000174E 803F11              <1>  cmp byte [%1], %2
  1825 00001751 0F8540060000        <1>  jne L_error_incorrect_type
  1826 00001757 488B4601                        mov rax, qword [rsi + 1] ; num1
  1827 0000175B 4899                            cqo
  1828 0000175D 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1829 00001761 4889C1                          mov rcx, rax
  1830 00001764 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1831 00001768 4899                            cqo
  1832 0000176A 48F76F01                        imul qword [rdi + 1]          ; num2
  1833 0000176E 4829C1                          sub rcx, rax
  1834 00001771 750C                            jne .L_false
  1835 00001773 48B8-                           mov rax, sob_boolean_true
  1835 00001775 [0300000000000000] 
  1836 0000177D EB0A                            jmp .L_exit
  1837                                  .L_false:
  1838 0000177F 48B8-                           mov rax, sob_boolean_false
  1838 00001781 [0200000000000000] 
  1839                                  .L_exit:
  1840                                          LEAVE
  1840 00001789 C9                  <1>  leave
  1841 0000178A C22000                          ret AND_KILL_FRAME(2)
  1842                                  
  1843                                  L_code_ptr_quotient:
  1844                                          ENTER
  1844 0000178D C8000000            <1>  enter 0, 0
  1844 00001791 4883E4F0            <1>  and rsp, ~15
  1845 00001795 48837D1802                      cmp COUNT, 2
  1846 0000179A 0F8547050000                    jne L_error_arg_count_2
  1847 000017A0 488B7520                        mov rsi, PARAM(0)
  1848                                          assert_integer(rsi)
  1848                              <1>  assert_rational(%1)
  1848 000017A4 803E11              <2>  cmp byte [%1], %2
  1848 000017A7 0F85EA050000        <2>  jne L_error_incorrect_type
  1848 000017AD 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  1848 000017B2 0F85DF050000        <1>  jne L_error_incorrect_type
  1849 000017B8 488B7D28                        mov rdi, PARAM(1)
  1850                                          assert_integer(rdi)
  1850                              <1>  assert_rational(%1)
  1850 000017BC 803F11              <2>  cmp byte [%1], %2
  1850 000017BF 0F85D2050000        <2>  jne L_error_incorrect_type
  1850 000017C5 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
  1850 000017CA 0F85C7050000        <1>  jne L_error_incorrect_type
  1851 000017D0 488B4601                        mov rax, qword [rsi + 1]
  1852 000017D4 488B5F01                        mov rbx, qword [rdi + 1]
  1853 000017D8 4883FB00                        cmp rbx, 0
  1854 000017DC 0F84DD050000                    je L_error_division_by_zero
  1855 000017E2 4899                            cqo
  1856 000017E4 48F7FB                          idiv rbx
  1857 000017E7 4889C7                          mov rdi, rax
  1858 000017EA E852040000                      call make_integer
  1859                                          LEAVE
  1859 000017EF C9                  <1>  leave
  1860 000017F0 C22000                          ret AND_KILL_FRAME(2)
  1861                                          
  1862                                  L_code_ptr_remainder:
  1863                                          ENTER
  1863 000017F3 C8000000            <1>  enter 0, 0
  1863 000017F7 4883E4F0            <1>  and rsp, ~15
  1864 000017FB 48837D1802                      cmp COUNT, 2
  1865 00001800 0F85E1040000                    jne L_error_arg_count_2
  1866 00001806 488B7520                        mov rsi, PARAM(0)
  1867                                          assert_integer(rsi)
  1867                              <1>  assert_rational(%1)
  1867 0000180A 803E11              <2>  cmp byte [%1], %2
  1867 0000180D 0F8584050000        <2>  jne L_error_incorrect_type
  1867 00001813 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  1867 00001818 0F8579050000        <1>  jne L_error_incorrect_type
  1868 0000181E 488B7D28                        mov rdi, PARAM(1)
  1869                                          assert_integer(rdi)
  1869                              <1>  assert_rational(%1)
  1869 00001822 803F11              <2>  cmp byte [%1], %2
  1869 00001825 0F856C050000        <2>  jne L_error_incorrect_type
  1869 0000182B 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
  1869 00001830 0F8561050000        <1>  jne L_error_incorrect_type
  1870 00001836 488B4601                        mov rax, qword [rsi + 1]
  1871 0000183A 488B5F01                        mov rbx, qword [rdi + 1]
  1872 0000183E 4883FB00                        cmp rbx, 0
  1873 00001842 0F8477050000                    je L_error_division_by_zero
  1874 00001848 4899                            cqo
  1875 0000184A 48F7FB                          idiv rbx
  1876 0000184D 4889D7                          mov rdi, rdx
  1877 00001850 E8EC030000                      call make_integer
  1878                                          LEAVE
  1878 00001855 C9                  <1>  leave
  1879 00001856 C22000                          ret AND_KILL_FRAME(2)
  1880                                  
  1881                                  L_code_ptr_set_car:
  1882                                          ENTER
  1882 00001859 C8000000            <1>  enter 0, 0
  1882 0000185D 4883E4F0            <1>  and rsp, ~15
  1883 00001861 48837D1802                      cmp COUNT, 2
  1884 00001866 0F857B040000                    jne L_error_arg_count_2
  1885 0000186C 488B4520                        mov rax, PARAM(0)
  1886                                          assert_pair(rax)
  1886 00001870 803821              <1>  cmp byte [%1], %2
  1886 00001873 0F851E050000        <1>  jne L_error_incorrect_type
  1887 00001879 488B5D28                        mov rbx, PARAM(1)
  1888 0000187D 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1889 00001881 48B8-                           mov rax, sob_void
  1889 00001883 [0000000000000000] 
  1890                                          LEAVE
  1890 0000188B C9                  <1>  leave
  1891 0000188C C22000                          ret AND_KILL_FRAME(2)
  1892                                  
  1893                                  L_code_ptr_set_cdr:
  1894                                          ENTER
  1894 0000188F C8000000            <1>  enter 0, 0
  1894 00001893 4883E4F0            <1>  and rsp, ~15
  1895 00001897 48837D1802                      cmp COUNT, 2
  1896 0000189C 0F8545040000                    jne L_error_arg_count_2
  1897 000018A2 488B4520                        mov rax, PARAM(0)
  1898                                          assert_pair(rax)
  1898 000018A6 803821              <1>  cmp byte [%1], %2
  1898 000018A9 0F85E8040000        <1>  jne L_error_incorrect_type
  1899 000018AF 488B5D28                        mov rbx, PARAM(1)
  1900 000018B3 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1901 000018B7 48B8-                           mov rax, sob_void
  1901 000018B9 [0000000000000000] 
  1902                                          LEAVE
  1902 000018C1 C9                  <1>  leave
  1903 000018C2 C22000                          ret AND_KILL_FRAME(2)
  1904                                  
  1905                                  L_code_ptr_string_ref:
  1906                                          ENTER
  1906 000018C5 C8000000            <1>  enter 0, 0
  1906 000018C9 4883E4F0            <1>  and rsp, ~15
  1907 000018CD 48837D1802                      cmp COUNT, 2
  1908 000018D2 0F850F040000                    jne L_error_arg_count_2
  1909 000018D8 488B7D20                        mov rdi, PARAM(0)
  1910                                          assert_string(rdi)
  1910 000018DC 803F03              <1>  cmp byte [%1], %2
  1910 000018DF 0F85B2040000        <1>  jne L_error_incorrect_type
  1911 000018E5 488B7528                        mov rsi, PARAM(1)
  1912                                          assert_integer(rsi)
  1912                              <1>  assert_rational(%1)
  1912 000018E9 803E11              <2>  cmp byte [%1], %2
  1912 000018EC 0F85A5040000        <2>  jne L_error_incorrect_type
  1912 000018F2 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  1912 000018F7 0F859A040000        <1>  jne L_error_incorrect_type
  1913 000018FD 488B5701                        mov rdx, qword [rdi + 1]
  1914 00001901 488B4E01                        mov rcx, qword [rsi + 1]
  1915 00001905 4839D1                          cmp rcx, rdx
  1916 00001908 0F8D59030000                    jge L_error_integer_range
  1917 0000190E 4883F900                        cmp rcx, 0
  1918 00001912 0F8C4F030000                    jl L_error_integer_range
  1919 00001918 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  1920 0000191C BF02000000                      mov rdi, 2
  1921 00001921 E864EDFFFF                      call malloc
  1922 00001926 C60002                          mov byte [rax], T_char
  1923 00001929 885801                          mov byte [rax + 1], bl
  1924                                          LEAVE
  1924 0000192C C9                  <1>  leave
  1925 0000192D C22000                          ret AND_KILL_FRAME(2)
  1926                                  
  1927                                  L_code_ptr_vector_ref:
  1928                                          ENTER
  1928 00001930 C8000000            <1>  enter 0, 0
  1928 00001934 4883E4F0            <1>  and rsp, ~15
  1929 00001938 48837D1802                      cmp COUNT, 2
  1930 0000193D 0F85A4030000                    jne L_error_arg_count_2
  1931 00001943 488B7D20                        mov rdi, PARAM(0)
  1932                                          assert_vector(rdi)
  1932 00001947 803F22              <1>  cmp byte [%1], %2
  1932 0000194A 0F8547040000        <1>  jne L_error_incorrect_type
  1933 00001950 488B7528                        mov rsi, PARAM(1)
  1934                                          assert_integer(rsi)
  1934                              <1>  assert_rational(%1)
  1934 00001954 803E11              <2>  cmp byte [%1], %2
  1934 00001957 0F853A040000        <2>  jne L_error_incorrect_type
  1934 0000195D 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  1934 00001962 0F852F040000        <1>  jne L_error_incorrect_type
  1935 00001968 488B5701                        mov rdx, qword [rdi + 1]
  1936 0000196C 488B4E01                        mov rcx, qword [rsi + 1]
  1937 00001970 4839D1                          cmp rcx, rdx
  1938 00001973 0F8DEE020000                    jge L_error_integer_range
  1939 00001979 4883F900                        cmp rcx, 0
  1940 0000197D 0F8CE4020000                    jl L_error_integer_range
  1941 00001983 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  1942                                          LEAVE
  1942 00001988 C9                  <1>  leave
  1943 00001989 C22000                          ret AND_KILL_FRAME(2)
  1944                                  
  1945                                  L_code_ptr_vector_set:
  1946                                          ENTER
  1946 0000198C C8000000            <1>  enter 0, 0
  1946 00001990 4883E4F0            <1>  and rsp, ~15
  1947 00001994 48837D1803                      cmp COUNT, 3
  1948 00001999 0F85CC030000                    jne L_error_arg_count_3
  1949 0000199F 488B7D20                        mov rdi, PARAM(0)
  1950                                          assert_vector(rdi)
  1950 000019A3 803F22              <1>  cmp byte [%1], %2
  1950 000019A6 0F85EB030000        <1>  jne L_error_incorrect_type
  1951 000019AC 488B7528                        mov rsi, PARAM(1)
  1952                                          assert_integer(rsi)
  1952                              <1>  assert_rational(%1)
  1952 000019B0 803E11              <2>  cmp byte [%1], %2
  1952 000019B3 0F85DE030000        <2>  jne L_error_incorrect_type
  1952 000019B9 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  1952 000019BE 0F85D3030000        <1>  jne L_error_incorrect_type
  1953 000019C4 488B5701                        mov rdx, qword [rdi + 1]
  1954 000019C8 488B4E01                        mov rcx, qword [rsi + 1]
  1955 000019CC 4839D1                          cmp rcx, rdx
  1956 000019CF 0F8D92020000                    jge L_error_integer_range
  1957 000019D5 4883F900                        cmp rcx, 0
  1958 000019D9 0F8C88020000                    jl L_error_integer_range
  1959 000019DF 488B4530                        mov rax, PARAM(2)
  1960 000019E3 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  1961 000019E8 48B8-                           mov rax, sob_void
  1961 000019EA [0000000000000000] 
  1962                                          LEAVE
  1962 000019F2 C9                  <1>  leave
  1963 000019F3 C22800                          ret AND_KILL_FRAME(3)
  1964                                  
  1965                                  L_code_ptr_string_set:
  1966                                          ENTER
  1966 000019F6 C8000000            <1>  enter 0, 0
  1966 000019FA 4883E4F0            <1>  and rsp, ~15
  1967 000019FE 48837D1803                      cmp COUNT, 3
  1968 00001A03 0F8562030000                    jne L_error_arg_count_3
  1969 00001A09 488B7D20                        mov rdi, PARAM(0)
  1970                                          assert_string(rdi)
  1970 00001A0D 803F03              <1>  cmp byte [%1], %2
  1970 00001A10 0F8581030000        <1>  jne L_error_incorrect_type
  1971 00001A16 488B7528                        mov rsi, PARAM(1)
  1972                                          assert_integer(rsi)
  1972                              <1>  assert_rational(%1)
  1972 00001A1A 803E11              <2>  cmp byte [%1], %2
  1972 00001A1D 0F8574030000        <2>  jne L_error_incorrect_type
  1972 00001A23 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  1972 00001A28 0F8569030000        <1>  jne L_error_incorrect_type
  1973 00001A2E 488B5701                        mov rdx, qword [rdi + 1]
  1974 00001A32 488B4E01                        mov rcx, qword [rsi + 1]
  1975 00001A36 4839D1                          cmp rcx, rdx
  1976 00001A39 0F8D28020000                    jge L_error_integer_range
  1977 00001A3F 4883F900                        cmp rcx, 0
  1978 00001A43 0F8C1E020000                    jl L_error_integer_range
  1979 00001A49 488B4530                        mov rax, PARAM(2)
  1980                                          assert_char(rax)
  1980 00001A4D 803802              <1>  cmp byte [%1], %2
  1980 00001A50 0F8541030000        <1>  jne L_error_incorrect_type
  1981 00001A56 8A4001                          mov al, byte [rax + 1]
  1982 00001A59 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  1983 00001A5D 48B8-                           mov rax, sob_void
  1983 00001A5F [0000000000000000] 
  1984                                          LEAVE
  1984 00001A67 C9                  <1>  leave
  1985 00001A68 C22800                          ret AND_KILL_FRAME(3)
  1986                                  
  1987                                  L_code_ptr_make_vector:
  1988                                          ENTER
  1988 00001A6B C8000000            <1>  enter 0, 0
  1988 00001A6F 4883E4F0            <1>  and rsp, ~15
  1989 00001A73 48837D1802                      cmp COUNT, 2
  1990 00001A78 0F8569020000                    jne L_error_arg_count_2
  1991 00001A7E 488B4D20                        mov rcx, PARAM(0)
  1992                                          assert_integer(rcx)
  1992                              <1>  assert_rational(%1)
  1992 00001A82 803911              <2>  cmp byte [%1], %2
  1992 00001A85 0F850C030000        <2>  jne L_error_incorrect_type
  1992 00001A8B 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
  1992 00001A90 0F8501030000        <1>  jne L_error_incorrect_type
  1993 00001A96 488B4901                        mov rcx, qword [rcx + 1]
  1994 00001A9A 4883F900                        cmp rcx, 0
  1995 00001A9E 0F8CC3010000                    jl L_error_integer_range
  1996 00001AA4 488B5528                        mov rdx, PARAM(1)
  1997 00001AA8 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  1998 00001AB0 E8D5EBFFFF                      call malloc
  1999 00001AB5 C60022                          mov byte [rax], T_vector
  2000 00001AB8 48894801                        mov qword [rax + 1], rcx
  2001 00001ABC 41B800000000                    mov r8, 0
  2002                                  .L0:
  2003 00001AC2 4939C8                          cmp r8, rcx
  2004 00001AC5 740A                            je .L1
  2005 00001AC7 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2006 00001ACC 49FFC0                          inc r8
  2007 00001ACF EBF1                            jmp .L0
  2008                                  .L1:
  2009                                          LEAVE
  2009 00001AD1 C9                  <1>  leave
  2010 00001AD2 C22000                          ret AND_KILL_FRAME(2)
  2011                                          
  2012                                  L_code_ptr_make_string:
  2013                                          ENTER
  2013 00001AD5 C8000000            <1>  enter 0, 0
  2013 00001AD9 4883E4F0            <1>  and rsp, ~15
  2014 00001ADD 48837D1802                      cmp COUNT, 2
  2015 00001AE2 0F85FF010000                    jne L_error_arg_count_2
  2016 00001AE8 488B4D20                        mov rcx, PARAM(0)
  2017                                          assert_integer(rcx)
  2017                              <1>  assert_rational(%1)
  2017 00001AEC 803911              <2>  cmp byte [%1], %2
  2017 00001AEF 0F85A2020000        <2>  jne L_error_incorrect_type
  2017 00001AF5 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
  2017 00001AFA 0F8597020000        <1>  jne L_error_incorrect_type
  2018 00001B00 488B4901                        mov rcx, qword [rcx + 1]
  2019 00001B04 4883F900                        cmp rcx, 0
  2020 00001B08 0F8C59010000                    jl L_error_integer_range
  2021 00001B0E 488B5528                        mov rdx, PARAM(1)
  2022                                          assert_char(rdx)
  2022 00001B12 803A02              <1>  cmp byte [%1], %2
  2022 00001B15 0F857C020000        <1>  jne L_error_incorrect_type
  2023 00001B1B 8A5201                          mov dl, byte [rdx + 1]
  2024 00001B1E 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2025 00001B22 E863EBFFFF                      call malloc
  2026 00001B27 C60003                          mov byte [rax], T_string
  2027 00001B2A 48894801                        mov qword [rax + 1], rcx
  2028 00001B2E 41B800000000                    mov r8, 0
  2029                                  .L0:
  2030 00001B34 4939C8                          cmp r8, rcx
  2031 00001B37 740A                            je .L1
  2032 00001B39 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2033 00001B3E 49FFC0                          inc r8
  2034 00001B41 EBF1                            jmp .L0
  2035                                  .L1:
  2036                                          LEAVE
  2036 00001B43 C9                  <1>  leave
  2037 00001B44 C22000                          ret AND_KILL_FRAME(2)
  2038                                  
  2039                                  L_code_ptr_numerator:
  2040                                          ENTER
  2040 00001B47 C8000000            <1>  enter 0, 0
  2040 00001B4B 4883E4F0            <1>  and rsp, ~15
  2041 00001B4F 48837D1801                      cmp COUNT, 1
  2042 00001B54 0F8561010000                    jne L_error_arg_count_1
  2043 00001B5A 488B4520                        mov rax, PARAM(0)
  2044                                          assert_rational(rax)
  2044 00001B5E 803811              <1>  cmp byte [%1], %2
  2044 00001B61 0F8530020000        <1>  jne L_error_incorrect_type
  2045 00001B67 488B7801                        mov rdi, qword [rax + 1]
  2046 00001B6B E8D1000000                      call make_integer
  2047                                          LEAVE
  2047 00001B70 C9                  <1>  leave
  2048 00001B71 C21800                          ret AND_KILL_FRAME(1)
  2049                                          
  2050                                  L_code_ptr_denominator:
  2051                                          ENTER
  2051 00001B74 C8000000            <1>  enter 0, 0
  2051 00001B78 4883E4F0            <1>  and rsp, ~15
  2052 00001B7C 48837D1801                      cmp COUNT, 1
  2053 00001B81 0F8534010000                    jne L_error_arg_count_1
  2054 00001B87 488B4520                        mov rax, PARAM(0)
  2055                                          assert_rational(rax)
  2055 00001B8B 803811              <1>  cmp byte [%1], %2
  2055 00001B8E 0F8503020000        <1>  jne L_error_incorrect_type
  2056 00001B94 488B7809                        mov rdi, qword [rax + 1 + 8]
  2057 00001B98 E8A4000000                      call make_integer
  2058                                          LEAVE
  2058 00001B9D C9                  <1>  leave
  2059 00001B9E C21800                          ret AND_KILL_FRAME(1)
  2060                                  
  2061                                  L_code_ptr_eq:
  2062                                  	ENTER
  2062 00001BA1 C8000000            <1>  enter 0, 0
  2062 00001BA5 4883E4F0            <1>  and rsp, ~15
  2063 00001BA9 48837D1802              	cmp COUNT, 2
  2064 00001BAE 0F8533010000            	jne L_error_arg_count_2
  2065 00001BB4 488B7D20                	mov rdi, PARAM(0)
  2066 00001BB8 488B7528                	mov rsi, PARAM(1)
  2067 00001BBC 4839F7                  	cmp rdi, rsi
  2068 00001BBF 744A                    	je .L_eq_true
  2069 00001BC1 8A17                    	mov dl, byte [rdi]
  2070 00001BC3 3A16                    	cmp dl, byte [rsi]
  2071 00001BC5 7550                    	jne .L_eq_false
  2072 00001BC7 80FA02                  	cmp dl, T_char
  2073 00001BCA 7437                    	je .L_char
  2074 00001BCC 80FA04                  	cmp dl, T_symbol
  2075 00001BCF 742A                    	je .L_symbol
  2076 00001BD1 80FA12                  	cmp dl, T_real
  2077 00001BD4 741D                    	je .L_real
  2078 00001BD6 80FA11                  	cmp dl, T_rational
  2079 00001BD9 7402                    	je .L_rational
  2080 00001BDB EB3A                    	jmp .L_eq_false
  2081                                  .L_rational:
  2082 00001BDD 488B4601                	mov rax, qword [rsi + 1]
  2083 00001BE1 483B4701                	cmp rax, qword [rdi + 1]
  2084 00001BE5 7530                    	jne .L_eq_false
  2085 00001BE7 488B4609                	mov rax, qword [rsi + 1 + 8]
  2086 00001BEB 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2087 00001BEF 7526                    	jne .L_eq_false
  2088 00001BF1 EB18                    	jmp .L_eq_true
  2089                                  .L_real:
  2090 00001BF3 488B4601                	mov rax, qword [rsi + 1]
  2091 00001BF7 483B4701                	cmp rax, qword [rdi + 1]
  2092                                  .L_symbol:
  2093                                  	; never reached, because symbols are static!
  2094                                  	; but I'm keeping it in case, I'll ever change
  2095                                  	; the implementation
  2096 00001BFB 488B4601                	mov rax, qword [rsi + 1]
  2097 00001BFF 483B4701                	cmp rax, qword [rdi + 1]
  2098                                  .L_char:
  2099 00001C03 8A5E01                  	mov bl, byte [rsi + 1]
  2100 00001C06 3A5F01                  	cmp bl, byte [rdi + 1]
  2101 00001C09 750C                    	jne .L_eq_false
  2102                                  .L_eq_true:
  2103 00001C0B 48B8-                   	mov rax, sob_boolean_true
  2103 00001C0D [0300000000000000] 
  2104 00001C15 EB0A                    	jmp .L_eq_exit
  2105                                  .L_eq_false:
  2106 00001C17 48B8-                   	mov rax, sob_boolean_false
  2106 00001C19 [0200000000000000] 
  2107                                  .L_eq_exit:
  2108                                  	LEAVE
  2108 00001C21 C9                  <1>  leave
  2109 00001C22 C22000                  	ret AND_KILL_FRAME(2)
  2110                                  
  2111                                  make_real:
  2112                                          ENTER
  2112 00001C25 C8000000            <1>  enter 0, 0
  2112 00001C29 4883E4F0            <1>  and rsp, ~15
  2113 00001C2D BF09000000                      mov rdi, (1 + 8)
  2114 00001C32 E853EAFFFF                      call malloc
  2115 00001C37 C60012                          mov byte [rax], T_real
  2116 00001C3A F20F114001                      movsd qword [rax + 1], xmm0
  2117                                          LEAVE
  2117 00001C3F C9                  <1>  leave
  2118 00001C40 C3                              ret
  2119                                          
  2120                                  make_integer:
  2121                                          ENTER
  2121 00001C41 C8000000            <1>  enter 0, 0
  2121 00001C45 4883E4F0            <1>  and rsp, ~15
  2122 00001C49 4889FE                          mov rsi, rdi
  2123 00001C4C BF11000000                      mov rdi, (1 + 8 + 8)
  2124 00001C51 E834EAFFFF                      call malloc
  2125 00001C56 C60011                          mov byte [rax], T_rational
  2126 00001C59 48897001                        mov qword [rax + 1], rsi
  2127 00001C5D 48C7400901000000                mov qword [rax + 1 + 8], 1
  2128                                          LEAVE
  2128 00001C65 C9                  <1>  leave
  2129 00001C66 C3                              ret
  2130                                          
  2131                                  L_error_integer_range:
  2132 00001C67 488B3C25[00000000]              mov rdi, qword [stderr]
  2133 00001C6F 48BE-                           mov rsi, fmt_integer_range
  2133 00001C71 [5903000000000000] 
  2134 00001C79 B800000000                      mov rax, 0
  2135 00001C7E E8(00000000)                    call fprintf
  2136 00001C83 48C7C0FBFFFFFF                  mov rax, -5
  2137 00001C8A E8(00000000)                    call exit
  2138                                  
  2139                                  L_error_arg_count_0:
  2140 00001C8F 488B3C25[00000000]              mov rdi, qword [stderr]
  2141 00001C97 48BE-                           mov rsi, fmt_arg_count_0
  2141 00001C99 [3A02000000000000] 
  2142 00001CA1 488B5518                        mov rdx, COUNT
  2143 00001CA5 B800000000                      mov rax, 0
  2144 00001CAA E8(00000000)                    call fprintf
  2145 00001CAF 48C7C0FDFFFFFF                  mov rax, -3
  2146 00001CB6 E8(00000000)                    call exit
  2147                                  
  2148                                  L_error_arg_count_1:
  2149 00001CBB 488B3C25[00000000]              mov rdi, qword [stderr]
  2150 00001CC3 48BE-                           mov rsi, fmt_arg_count_1
  2150 00001CC5 [6202000000000000] 
  2151 00001CCD 488B5518                        mov rdx, COUNT
  2152 00001CD1 B800000000                      mov rax, 0
  2153 00001CD6 E8(00000000)                    call fprintf
  2154 00001CDB 48C7C0FDFFFFFF                  mov rax, -3
  2155 00001CE2 E8(00000000)                    call exit
  2156                                  
  2157                                  L_error_arg_count_2:
  2158 00001CE7 488B3C25[00000000]              mov rdi, qword [stderr]
  2159 00001CEF 48BE-                           mov rsi, fmt_arg_count_2
  2159 00001CF1 [E502000000000000] 
  2160 00001CF9 488B5518                        mov rdx, COUNT
  2161 00001CFD B800000000                      mov rax, 0
  2162 00001D02 E8(00000000)                    call fprintf
  2163 00001D07 48C7C0FDFFFFFF                  mov rax, -3
  2164 00001D0E E8(00000000)                    call exit
  2165                                  
  2166                                  L_error_arg_count_12:
  2167 00001D13 488B3C25[00000000]              mov rdi, qword [stderr]
  2168 00001D1B 48BE-                           mov rsi, fmt_arg_count_12
  2168 00001D1D [8802000000000000] 
  2169 00001D25 488B5518                        mov rdx, COUNT
  2170 00001D29 B800000000                      mov rax, 0
  2171 00001D2E E8(00000000)                    call fprintf
  2172 00001D33 48C7C0FDFFFFFF                  mov rax, -3
  2173 00001D3A E8(00000000)                    call exit
  2174                                  
  2175                                  L_sagy_debug:
  2176 00001D3F 488B3C25[00000000]              mov rdi, qword [stderr]
  2177 00001D47 48BE-                           mov rsi, fmt_sagy_debug
  2177 00001D49 [C802000000000000] 
  2178 00001D51 488B5518                        mov rdx, COUNT
  2179 00001D55 B800000000                      mov rax, 0
  2180 00001D5A E8(00000000)                    call fprintf
  2181 00001D5F 48C7C0FDFFFFFF                  mov rax, -3
  2182 00001D66 E8(00000000)                    call exit
  2183                                  
  2184                                  L_error_arg_count_3:
  2185 00001D6B 488B3C25[00000000]              mov rdi, qword [stderr]
  2186 00001D73 48BE-                           mov rsi, fmt_arg_count_3
  2186 00001D75 [0C03000000000000] 
  2187 00001D7D 488B5518                        mov rdx, COUNT
  2188 00001D81 B800000000                      mov rax, 0
  2189 00001D86 E8(00000000)                    call fprintf
  2190 00001D8B 48C7C0FDFFFFFF                  mov rax, -3
  2191 00001D92 E8(00000000)                    call exit
  2192                                          
  2193                                  L_error_incorrect_type:
  2194 00001D97 488B3C25[00000000]              mov rdi, qword [stderr]
  2195 00001D9F 48BE-                           mov rsi, fmt_type
  2195 00001DA1 [3503000000000000] 
  2196 00001DA9 B800000000                      mov rax, 0
  2197 00001DAE E8(00000000)                    call fprintf
  2198 00001DB3 48C7C0FCFFFFFF                  mov rax, -4
  2199 00001DBA E8(00000000)                    call exit
  2200                                  
  2201                                  L_error_division_by_zero:
  2202 00001DBF 488B3C25[00000000]              mov rdi, qword [stderr]
  2203 00001DC7 48BE-                           mov rsi, fmt_division_by_zero
  2203 00001DC9 [7603000000000000] 
  2204 00001DD1 B800000000                      mov rax, 0
  2205 00001DD6 E8(00000000)                    call fprintf
  2206 00001DDB 48C7C0F8FFFFFF                  mov rax, -8
  2207 00001DE2 E8(00000000)                    call exit
  2208                                  
  2209                                  section .data
  2210                                  fmt_char:
  2211 00000237 256300                          db `%c\0`
  2212                                  fmt_arg_count_0:
  2213 0000023A 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2213 00000243 74696E67207A65726F-
  2213 0000024C 20617267756D656E74-
  2213 00000255 732E20466F756E6420-
  2213 0000025E 25640A00           
  2214                                  fmt_arg_count_1:
  2215 00000262 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2215 0000026B 74696E67206F6E6520-
  2215 00000274 617267756D656E742E-
  2215 0000027D 20466F756E64202564-
  2215 00000286 0A00               
  2216                                  fmt_arg_count_12:
  2217 00000288 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2217 00000291 74696E67206F6E6520-
  2217 0000029A 726571756972656420-
  2217 000002A3 616E64206F6E65206F-
  2217 000002AC 7074696F6E616C2061-
  2217 000002B5 7267756D656E742E20-
  2217 000002BE 466F756E642025640A-
  2217 000002C7 00                 
  2218                                  fmt_sagy_debug:
  2219 000002C8 212121202A2A2A2A20-             db `!!! **** SAGY DEBUG **** %d\n\0`
  2219 000002D1 534147592044454255-
  2219 000002DA 47202A2A2A2A202564-
  2219 000002E3 0A00               
  2220                                  fmt_arg_count_2:
  2221 000002E5 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2221 000002EE 74696E672074776F20-
  2221 000002F7 617267756D656E7473-
  2221 00000300 2E20466F756E642025-
  2221 00000309 640A00             
  2222                                  fmt_arg_count_3:
  2223 0000030C 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2223 00000315 74696E672074687265-
  2223 0000031E 6520617267756D656E-
  2223 00000327 74732E20466F756E64-
  2223 00000330 2025640A00         
  2224                                  fmt_type:
  2225 00000335 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2225 0000033E 696F6E207061737365-
  2225 00000347 6420696E636F727265-
  2225 00000350 637420747970650A00 
  2226                                  fmt_integer_range:
  2227 00000359 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2227 00000362 7265637420696E7465-
  2227 0000036B 6765722072616E6765-
  2227 00000374 0A00               
  2228                                  fmt_division_by_zero:
  2229 00000376 212121204469766973-             db `!!! Division by zero\n\0`
  2229 0000037F 696F6E206279207A65-
  2229 00000388 726F0A00           
  2230                                  fmt_scheme_error_part_1:
  2231 0000038C 0A2121212054686520-             db `\n!!! The procedure \0`
  2231 00000395 70726F636564757265-
  2231 0000039E 2000               
  2232                                  fmt_scheme_error_part_2:
  2233 000003A0 2061736B656420746F-             db ` asked to terminate the program\n`
  2233 000003A9 207465726D696E6174-
  2233 000003B2 65207468652070726F-
  2233 000003BB 6772616D0A         
  2234 000003C0 202020207769746820-             db `    with the following message:\n\n\0`
  2234 000003C9 74686520666F6C6C6F-
  2234 000003D2 77696E67206D657373-
  2234 000003DB 6167653A0A0A00     
  2235                                  fmt_scheme_error_part_3:
  2236 000003E2 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2236 000003EB 210A0A00           
