     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 11                      	db T_rational	; 2
    84 00000007 020000000000000001-     	dq 2, 1
    84 00000010 00000000000000     
    85 00000017 11                      	db T_rational	; 1
    86 00000018 010000000000000001-     	dq 1, 1
    86 00000021 00000000000000     
    87 00000028 21                      	db T_pair	; (1)
    88 00000029 [1700000000000000]-     	dq L_constants + 23, L_constants + 1
    88 00000031 [0100000000000000] 
    89 00000039 21                      	db T_pair	; (2 1)
    90 0000003A [0600000000000000]-     	dq L_constants + 6, L_constants + 40
    90 00000042 [2800000000000000] 
    91                                  
    92                                  section .bss
    93                                  free_var_0:	; location of null?
    94 00000000 <res 00000008>          	resq 1
    95                                  free_var_1:	; location of pair?
    96 00000008 <res 00000008>          	resq 1
    97                                  free_var_2:	; location of void?
    98 00000010 <res 00000008>          	resq 1
    99                                  free_var_3:	; location of char?
   100 00000018 <res 00000008>          	resq 1
   101                                  free_var_4:	; location of string?
   102 00000020 <res 00000008>          	resq 1
   103                                  free_var_5:	; location of symbol?
   104 00000028 <res 00000008>          	resq 1
   105                                  free_var_6:	; location of vector?
   106 00000030 <res 00000008>          	resq 1
   107                                  free_var_7:	; location of procedure?
   108 00000038 <res 00000008>          	resq 1
   109                                  free_var_8:	; location of real?
   110 00000040 <res 00000008>          	resq 1
   111                                  free_var_9:	; location of rational?
   112 00000048 <res 00000008>          	resq 1
   113                                  free_var_10:	; location of boolean?
   114 00000050 <res 00000008>          	resq 1
   115                                  free_var_11:	; location of number?
   116 00000058 <res 00000008>          	resq 1
   117                                  free_var_12:	; location of collection?
   118 00000060 <res 00000008>          	resq 1
   119                                  free_var_13:	; location of cons
   120 00000068 <res 00000008>          	resq 1
   121                                  free_var_14:	; location of display-sexpr
   122 00000070 <res 00000008>          	resq 1
   123                                  free_var_15:	; location of write-char
   124 00000078 <res 00000008>          	resq 1
   125                                  free_var_16:	; location of car
   126 00000080 <res 00000008>          	resq 1
   127                                  free_var_17:	; location of cdr
   128 00000088 <res 00000008>          	resq 1
   129                                  free_var_18:	; location of string-length
   130 00000090 <res 00000008>          	resq 1
   131                                  free_var_19:	; location of vector-length
   132 00000098 <res 00000008>          	resq 1
   133                                  free_var_20:	; location of real->integer
   134 000000A0 <res 00000008>          	resq 1
   135                                  free_var_21:	; location of exit
   136 000000A8 <res 00000008>          	resq 1
   137                                  free_var_22:	; location of integer->real
   138 000000B0 <res 00000008>          	resq 1
   139                                  free_var_23:	; location of rational->real
   140 000000B8 <res 00000008>          	resq 1
   141                                  free_var_24:	; location of char->integer
   142 000000C0 <res 00000008>          	resq 1
   143                                  free_var_25:	; location of integer->char
   144 000000C8 <res 00000008>          	resq 1
   145                                  free_var_26:	; location of trng
   146 000000D0 <res 00000008>          	resq 1
   147                                  free_var_27:	; location of zero?
   148 000000D8 <res 00000008>          	resq 1
   149                                  free_var_28:	; location of integer?
   150 000000E0 <res 00000008>          	resq 1
   151                                  free_var_29:	; location of __bin-apply
   152 000000E8 <res 00000008>          	resq 1
   153                                  free_var_30:	; location of __bin-add-rr
   154 000000F0 <res 00000008>          	resq 1
   155                                  free_var_31:	; location of __bin-sub-rr
   156 000000F8 <res 00000008>          	resq 1
   157                                  free_var_32:	; location of __bin-mul-rr
   158 00000100 <res 00000008>          	resq 1
   159                                  free_var_33:	; location of __bin-div-rr
   160 00000108 <res 00000008>          	resq 1
   161                                  free_var_34:	; location of __bin-add-qq
   162 00000110 <res 00000008>          	resq 1
   163                                  free_var_35:	; location of __bin-sub-qq
   164 00000118 <res 00000008>          	resq 1
   165                                  free_var_36:	; location of __bin-mul-qq
   166 00000120 <res 00000008>          	resq 1
   167                                  free_var_37:	; location of __bin-div-qq
   168 00000128 <res 00000008>          	resq 1
   169                                  free_var_38:	; location of error
   170 00000130 <res 00000008>          	resq 1
   171                                  free_var_39:	; location of __bin-less-than-rr
   172 00000138 <res 00000008>          	resq 1
   173                                  free_var_40:	; location of __bin-less-than-qq
   174 00000140 <res 00000008>          	resq 1
   175                                  free_var_41:	; location of __bin-equal-rr
   176 00000148 <res 00000008>          	resq 1
   177                                  free_var_42:	; location of __bin-equal-qq
   178 00000150 <res 00000008>          	resq 1
   179                                  free_var_43:	; location of quotient
   180 00000158 <res 00000008>          	resq 1
   181                                  free_var_44:	; location of remainder
   182 00000160 <res 00000008>          	resq 1
   183                                  free_var_45:	; location of set-car!
   184 00000168 <res 00000008>          	resq 1
   185                                  free_var_46:	; location of set-cdr!
   186 00000170 <res 00000008>          	resq 1
   187                                  free_var_47:	; location of string-ref
   188 00000178 <res 00000008>          	resq 1
   189                                  free_var_48:	; location of vector-ref
   190 00000180 <res 00000008>          	resq 1
   191                                  free_var_49:	; location of vector-set!
   192 00000188 <res 00000008>          	resq 1
   193                                  free_var_50:	; location of string-set!
   194 00000190 <res 00000008>          	resq 1
   195                                  free_var_51:	; location of make-vector
   196 00000198 <res 00000008>          	resq 1
   197                                  free_var_52:	; location of make-string
   198 000001A0 <res 00000008>          	resq 1
   199                                  free_var_53:	; location of numerator
   200 000001A8 <res 00000008>          	resq 1
   201                                  free_var_54:	; location of denominator
   202 000001B0 <res 00000008>          	resq 1
   203                                  free_var_55:	; location of eq?
   204 000001B8 <res 00000008>          	resq 1
   205                                  
   206                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   207                                  global main
   208                                  section .text
   209                                  main:
   210 00000000 C8000000                        enter 0, 0
   211                                          
   212                                  	; building closure for null?
   213 00000004 48BF-                   	mov rdi, free_var_0
   213 00000006 [0000000000000000] 
   214 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   214 00000010 [F80C000000000000] 
   215 00000018 E8FE0B0000              	call bind_primitive
   216                                  
   217                                  	; building closure for pair?
   218 0000001D 48BF-                   	mov rdi, free_var_1
   218 0000001F [0800000000000000] 
   219 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   219 00000029 [2E0D000000000000] 
   220 00000031 E8E50B0000              	call bind_primitive
   221                                  
   222                                  	; building closure for void?
   223 00000036 48BF-                   	mov rdi, free_var_2
   223 00000038 [1000000000000000] 
   224 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   224 00000042 [640D000000000000] 
   225 0000004A E8CC0B0000              	call bind_primitive
   226                                  
   227                                  	; building closure for char?
   228 0000004F 48BF-                   	mov rdi, free_var_3
   228 00000051 [1800000000000000] 
   229 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   229 0000005B [9A0D000000000000] 
   230 00000063 E8B30B0000              	call bind_primitive
   231                                  
   232                                  	; building closure for string?
   233 00000068 48BF-                   	mov rdi, free_var_4
   233 0000006A [2000000000000000] 
   234 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   234 00000074 [D00D000000000000] 
   235 0000007C E89A0B0000              	call bind_primitive
   236                                  
   237                                  	; building closure for symbol?
   238 00000081 48BF-                   	mov rdi, free_var_5
   238 00000083 [2800000000000000] 
   239 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   239 0000008D [060E000000000000] 
   240 00000095 E8810B0000              	call bind_primitive
   241                                  
   242                                  	; building closure for vector?
   243 0000009A 48BF-                   	mov rdi, free_var_6
   243 0000009C [3000000000000000] 
   244 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   244 000000A6 [3C0E000000000000] 
   245 000000AE E8680B0000              	call bind_primitive
   246                                  
   247                                  	; building closure for procedure?
   248 000000B3 48BF-                   	mov rdi, free_var_7
   248 000000B5 [3800000000000000] 
   249 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   249 000000BF [720E000000000000] 
   250 000000C7 E84F0B0000              	call bind_primitive
   251                                  
   252                                  	; building closure for real?
   253 000000CC 48BF-                   	mov rdi, free_var_8
   253 000000CE [4000000000000000] 
   254 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   254 000000D8 [A80E000000000000] 
   255 000000E0 E8360B0000              	call bind_primitive
   256                                  
   257                                  	; building closure for rational?
   258 000000E5 48BF-                   	mov rdi, free_var_9
   258 000000E7 [4800000000000000] 
   259 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   259 000000F1 [DE0E000000000000] 
   260 000000F9 E81D0B0000              	call bind_primitive
   261                                  
   262                                  	; building closure for boolean?
   263 000000FE 48BF-                   	mov rdi, free_var_10
   263 00000100 [5000000000000000] 
   264 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   264 0000010A [140F000000000000] 
   265 00000112 E8040B0000              	call bind_primitive
   266                                  
   267                                  	; building closure for number?
   268 00000117 48BF-                   	mov rdi, free_var_11
   268 00000119 [5800000000000000] 
   269 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   269 00000123 [4C0F000000000000] 
   270 0000012B E8EB0A0000              	call bind_primitive
   271                                  
   272                                  	; building closure for collection?
   273 00000130 48BF-                   	mov rdi, free_var_12
   273 00000132 [6000000000000000] 
   274 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   274 0000013C [840F000000000000] 
   275 00000144 E8D20A0000              	call bind_primitive
   276                                  
   277                                  	; building closure for cons
   278 00000149 48BF-                   	mov rdi, free_var_13
   278 0000014B [6800000000000000] 
   279 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   279 00000155 [BC0F000000000000] 
   280 0000015D E8B90A0000              	call bind_primitive
   281                                  
   282                                  	; building closure for display-sexpr
   283 00000162 48BF-                   	mov rdi, free_var_14
   283 00000164 [7000000000000000] 
   284 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   284 0000016E [F00F000000000000] 
   285 00000176 E8A00A0000              	call bind_primitive
   286                                  
   287                                  	; building closure for write-char
   288 0000017B 48BF-                   	mov rdi, free_var_15
   288 0000017D [7800000000000000] 
   289 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   289 00000187 [1A10000000000000] 
   290 0000018F E8870A0000              	call bind_primitive
   291                                  
   292                                  	; building closure for car
   293 00000194 48BF-                   	mov rdi, free_var_16
   293 00000196 [8000000000000000] 
   294 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   294 000001A0 [7110000000000000] 
   295 000001A8 E86E0A0000              	call bind_primitive
   296                                  
   297                                  	; building closure for cdr
   298 000001AD 48BF-                   	mov rdi, free_var_17
   298 000001AF [8800000000000000] 
   299 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   299 000001B9 [9910000000000000] 
   300 000001C1 E8550A0000              	call bind_primitive
   301                                  
   302                                  	; building closure for string-length
   303 000001C6 48BF-                   	mov rdi, free_var_18
   303 000001C8 [9000000000000000] 
   304 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   304 000001D2 [C110000000000000] 
   305 000001DA E83C0A0000              	call bind_primitive
   306                                  
   307                                  	; building closure for vector-length
   308 000001DF 48BF-                   	mov rdi, free_var_19
   308 000001E1 [9800000000000000] 
   309 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   309 000001EB [EE10000000000000] 
   310 000001F3 E8230A0000              	call bind_primitive
   311                                  
   312                                  	; building closure for real->integer
   313 000001F8 48BF-                   	mov rdi, free_var_20
   313 000001FA [A000000000000000] 
   314 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   314 00000204 [1B11000000000000] 
   315 0000020C E80A0A0000              	call bind_primitive
   316                                  
   317                                  	; building closure for exit
   318 00000211 48BF-                   	mov rdi, free_var_21
   318 00000213 [A800000000000000] 
   319 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   319 0000021D [4E11000000000000] 
   320 00000225 E8F1090000              	call bind_primitive
   321                                  
   322                                  	; building closure for integer->real
   323 0000022A 48BF-                   	mov rdi, free_var_22
   323 0000022C [B000000000000000] 
   324 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   324 00000236 [6B11000000000000] 
   325 0000023E E8D8090000              	call bind_primitive
   326                                  
   327                                  	; building closure for rational->real
   328 00000243 48BF-                   	mov rdi, free_var_23
   328 00000245 [B800000000000000] 
   329 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   329 0000024F [A811000000000000] 
   330 00000257 E8BF090000              	call bind_primitive
   331                                  
   332                                  	; building closure for char->integer
   333 0000025C 48BF-                   	mov rdi, free_var_24
   333 0000025E [C000000000000000] 
   334 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   334 00000268 [E711000000000000] 
   335 00000270 E8A6090000              	call bind_primitive
   336                                  
   337                                  	; building closure for integer->char
   338 00000275 48BF-                   	mov rdi, free_var_25
   338 00000277 [C800000000000000] 
   339 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   339 00000281 [1C12000000000000] 
   340 00000289 E88D090000              	call bind_primitive
   341                                  
   342                                  	; building closure for trng
   343 0000028E 48BF-                   	mov rdi, free_var_26
   343 00000290 [D000000000000000] 
   344 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   344 0000029A [7612000000000000] 
   345 000002A2 E874090000              	call bind_primitive
   346                                  
   347                                  	; building closure for zero?
   348 000002A7 48BF-                   	mov rdi, free_var_27
   348 000002A9 [D800000000000000] 
   349 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   349 000002B3 [9912000000000000] 
   350 000002BB E85B090000              	call bind_primitive
   351                                  
   352                                  	; building closure for integer?
   353 000002C0 48BF-                   	mov rdi, free_var_28
   353 000002C2 [E000000000000000] 
   354 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   354 000002CC [F412000000000000] 
   355 000002D4 E842090000              	call bind_primitive
   356                                  
   357                                  	; building closure for __bin-apply
   358 000002D9 48BF-                   	mov rdi, free_var_29
   358 000002DB [E800000000000000] 
   359 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   359 000002E5 [430C000000000000] 
   360 000002ED E829090000              	call bind_primitive
   361                                  
   362                                  	; building closure for __bin-add-rr
   363 000002F2 48BF-                   	mov rdi, free_var_30
   363 000002F4 [F000000000000000] 
   364 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   364 000002FE [3113000000000000] 
   365 00000306 E810090000              	call bind_primitive
   366                                  
   367                                  	; building closure for __bin-sub-rr
   368 0000030B 48BF-                   	mov rdi, free_var_31
   368 0000030D [F800000000000000] 
   369 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   369 00000317 [7513000000000000] 
   370 0000031F E8F7080000              	call bind_primitive
   371                                  
   372                                  	; building closure for __bin-mul-rr
   373 00000324 48BF-                   	mov rdi, free_var_32
   373 00000326 [0001000000000000] 
   374 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   374 00000330 [B913000000000000] 
   375 00000338 E8DE080000              	call bind_primitive
   376                                  
   377                                  	; building closure for __bin-div-rr
   378 0000033D 48BF-                   	mov rdi, free_var_33
   378 0000033F [0801000000000000] 
   379 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   379 00000349 [FD13000000000000] 
   380 00000351 E8C5080000              	call bind_primitive
   381                                  
   382                                  	; building closure for __bin-add-qq
   383 00000356 48BF-                   	mov rdi, free_var_34
   383 00000358 [1001000000000000] 
   384 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   384 00000362 [4F14000000000000] 
   385 0000036A E8AC080000              	call bind_primitive
   386                                  
   387                                  	; building closure for __bin-sub-qq
   388 0000036F 48BF-                   	mov rdi, free_var_35
   388 00000371 [1801000000000000] 
   389 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   389 0000037B [B714000000000000] 
   390 00000383 E893080000              	call bind_primitive
   391                                  
   392                                  	; building closure for __bin-mul-qq
   393 00000388 48BF-                   	mov rdi, free_var_36
   393 0000038A [2001000000000000] 
   394 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   394 00000394 [1F15000000000000] 
   395 0000039C E87A080000              	call bind_primitive
   396                                  
   397                                  	; building closure for __bin-div-qq
   398 000003A1 48BF-                   	mov rdi, free_var_37
   398 000003A3 [2801000000000000] 
   399 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   399 000003AD [7715000000000000] 
   400 000003B5 E861080000              	call bind_primitive
   401                                  
   402                                  	; building closure for error
   403 000003BA 48BF-                   	mov rdi, free_var_38
   403 000003BC [3001000000000000] 
   404 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   404 000003C6 [4516000000000000] 
   405 000003CE E848080000              	call bind_primitive
   406                                  
   407                                  	; building closure for __bin-less-than-rr
   408 000003D3 48BF-                   	mov rdi, free_var_39
   408 000003D5 [3801000000000000] 
   409 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   409 000003DF [FC16000000000000] 
   410 000003E7 E82F080000              	call bind_primitive
   411                                  
   412                                  	; building closure for __bin-less-than-qq
   413 000003EC 48BF-                   	mov rdi, free_var_40
   413 000003EE [4001000000000000] 
   414 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   414 000003F8 [5317000000000000] 
   415 00000400 E816080000              	call bind_primitive
   416                                  
   417                                  	; building closure for __bin-equal-rr
   418 00000405 48BF-                   	mov rdi, free_var_41
   418 00000407 [4801000000000000] 
   419 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   419 00000411 [B617000000000000] 
   420 00000419 E8FD070000              	call bind_primitive
   421                                  
   422                                  	; building closure for __bin-equal-qq
   423 0000041E 48BF-                   	mov rdi, free_var_42
   423 00000420 [5001000000000000] 
   424 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   424 0000042A [0D18000000000000] 
   425 00000432 E8E4070000              	call bind_primitive
   426                                  
   427                                  	; building closure for quotient
   428 00000437 48BF-                   	mov rdi, free_var_43
   428 00000439 [5801000000000000] 
   429 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   429 00000443 [7018000000000000] 
   430 0000044B E8CB070000              	call bind_primitive
   431                                  
   432                                  	; building closure for remainder
   433 00000450 48BF-                   	mov rdi, free_var_44
   433 00000452 [6001000000000000] 
   434 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   434 0000045C [D618000000000000] 
   435 00000464 E8B2070000              	call bind_primitive
   436                                  
   437                                  	; building closure for set-car!
   438 00000469 48BF-                   	mov rdi, free_var_45
   438 0000046B [6801000000000000] 
   439 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   439 00000475 [3C19000000000000] 
   440 0000047D E899070000              	call bind_primitive
   441                                  
   442                                  	; building closure for set-cdr!
   443 00000482 48BF-                   	mov rdi, free_var_46
   443 00000484 [7001000000000000] 
   444 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   444 0000048E [7219000000000000] 
   445 00000496 E880070000              	call bind_primitive
   446                                  
   447                                  	; building closure for string-ref
   448 0000049B 48BF-                   	mov rdi, free_var_47
   448 0000049D [7801000000000000] 
   449 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   449 000004A7 [A819000000000000] 
   450 000004AF E867070000              	call bind_primitive
   451                                  
   452                                  	; building closure for vector-ref
   453 000004B4 48BF-                   	mov rdi, free_var_48
   453 000004B6 [8001000000000000] 
   454 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   454 000004C0 [131A000000000000] 
   455 000004C8 E84E070000              	call bind_primitive
   456                                  
   457                                  	; building closure for vector-set!
   458 000004CD 48BF-                   	mov rdi, free_var_49
   458 000004CF [8801000000000000] 
   459 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   459 000004D9 [6F1A000000000000] 
   460 000004E1 E835070000              	call bind_primitive
   461                                  
   462                                  	; building closure for string-set!
   463 000004E6 48BF-                   	mov rdi, free_var_50
   463 000004E8 [9001000000000000] 
   464 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   464 000004F2 [D91A000000000000] 
   465 000004FA E81C070000              	call bind_primitive
   466                                  
   467                                  	; building closure for make-vector
   468 000004FF 48BF-                   	mov rdi, free_var_51
   468 00000501 [9801000000000000] 
   469 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   469 0000050B [4E1B000000000000] 
   470 00000513 E803070000              	call bind_primitive
   471                                  
   472                                  	; building closure for make-string
   473 00000518 48BF-                   	mov rdi, free_var_52
   473 0000051A [A001000000000000] 
   474 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   474 00000524 [B81B000000000000] 
   475 0000052C E8EA060000              	call bind_primitive
   476                                  
   477                                  	; building closure for numerator
   478 00000531 48BF-                   	mov rdi, free_var_53
   478 00000533 [A801000000000000] 
   479 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   479 0000053D [2A1C000000000000] 
   480 00000545 E8D1060000              	call bind_primitive
   481                                  
   482                                  	; building closure for denominator
   483 0000054A 48BF-                   	mov rdi, free_var_54
   483 0000054C [B001000000000000] 
   484 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   484 00000556 [571C000000000000] 
   485 0000055E E8B8060000              	call bind_primitive
   486                                  
   487                                  	; building closure for eq?
   488 00000563 48BF-                   	mov rdi, free_var_55
   488 00000565 [B801000000000000] 
   489 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   489 0000056F [841C000000000000] 
   490 00000577 E89F060000              	call bind_primitive
   491                                  
   492 0000057C 48B8-                   	mov rax, qword (L_constants + 57)
   492 0000057E [3900000000000000] 
   493 00000586 50                      	push rax
   494 00000587 488B0425[18010000]      	mov rax, qword [free_var_35]
   495 0000058F 50                      	push rax
   496 00000590 6A02                    	push 2
   497 00000592 488B0425[E8000000]      	mov rax, qword [free_var_29]
   498 0000059A 803805                  	cmp byte [rax], T_closure 
   499 0000059D 0F85A2100000                    jne L_code_ptr_error
   500                                  
   501 000005A3 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
   502                                  
   503 000005A7 53                              push rbx
   504                                  
   505 000005A8 FF5009                          call SOB_CLOSURE_CODE(rax)
   506                                  
   507                                          
   508 000005AB 4889C7                  	mov rdi, rax
   509 000005AE E8E8000000              	call print_sexpr_if_not_void
   510                                  
   511 000005B3 48BF-                           mov rdi, fmt_memory_usage
   511 000005B5 [A900000000000000] 
   512 000005BD 488B3425[30010000]              mov rsi, qword [top_of_memory]
   513 000005C5 4881EE[C0010000]                sub rsi, memory
   514 000005CC B800000000                      mov rax, 0
   515                                  	ENTER
   515 000005D1 C8000000            <1>  enter 0, 0
   515 000005D5 4883E4F0            <1>  and rsp, ~15
   516 000005D9 E8(00000000)                    call printf
   517                                  	LEAVE
   517 000005DE C9                  <1>  leave
   518 000005DF C9                      	leave
   519 000005E0 C3                      	ret
   520                                  
   521                                  L_error_non_closure:
   522 000005E1 488B3C25[00000000]              mov rdi, qword [stderr]
   523 000005E9 48BE-                           mov rsi, fmt_non_closure
   523 000005EB [E000000000000000] 
   524 000005F3 B800000000                      mov rax, 0
   525                                  	ENTER
   525 000005F8 C8000000            <1>  enter 0, 0
   525 000005FC 4883E4F0            <1>  and rsp, ~15
   526 00000600 E8(00000000)                    call fprintf
   527                                  	LEAVE
   527 00000605 C9                  <1>  leave
   528 00000606 48C7C0FEFFFFFF                  mov rax, -2
   529 0000060D E8(00000000)                    call exit
   530                                  
   531                                  L_error_improper_list:
   532 00000612 488B3C25[00000000]      	mov rdi, qword [stderr]
   533 0000061A 48BE-                   	mov rsi, fmt_error_improper_list
   533 0000061C [0801000000000000] 
   534 00000624 B800000000              	mov rax, 0
   535                                  	ENTER
   535 00000629 C8000000            <1>  enter 0, 0
   535 0000062D 4883E4F0            <1>  and rsp, ~15
   536 00000631 E8(00000000)            	call fprintf
   537                                  	LEAVE
   537 00000636 C9                  <1>  leave
   538 00000637 48C7C0F9FFFFFF          	mov rax, -7
   539 0000063E E8(00000000)            	call exit
   540                                  
   541                                  L_error_incorrect_arity_simple:
   542 00000643 488B3C25[00000000]              mov rdi, qword [stderr]
   543 0000064B 48BE-                           mov rsi, fmt_incorrect_arity_simple
   543 0000064D [4A00000000000000] 
   544 00000655 EB12                            jmp L_error_incorrect_arity_common
   545                                  L_error_incorrect_arity_opt:
   546 00000657 488B3C25[00000000]              mov rdi, qword [stderr]
   547 0000065F 48BE-                           mov rsi, fmt_incorrect_arity_opt
   547 00000661 [7500000000000000] 
   548                                  L_error_incorrect_arity_common:
   549 00000669 5A                              pop rdx
   550 0000066A 59                              pop rcx
   551 0000066B B800000000                      mov rax, 0
   552                                  	ENTER
   552 00000670 C8000000            <1>  enter 0, 0
   552 00000674 4883E4F0            <1>  and rsp, ~15
   553 00000678 E8(00000000)                    call fprintf
   554                                  	LEAVE
   554 0000067D C9                  <1>  leave
   555 0000067E 48C7C0FAFFFFFF                  mov rax, -6
   556 00000685 E8(00000000)                    call exit
   557                                  
   558                                  section .data
   559                                  fmt_incorrect_arity_simple:
   560 0000004A 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   560 00000053 74656420256C642061-
   560 0000005C 7267756D656E74732C-
   560 00000065 206275742067697665-
   560 0000006E 6E20256C640A00     
   561                                  fmt_incorrect_arity_opt:
   562 00000075 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   562 0000007E 746564206174206C65-
   562 00000087 61737420256C642061-
   562 00000090 7267756D656E74732C-
   562 00000099 206275742067697665-
   562 000000A2 6E20256C640A00     
   563                                  fmt_memory_usage:
   564 000000A9 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   564 000000B2 6420256C6420627974-
   564 000000BB 6573206F662064796E-
   564 000000C4 616D6963616C6C792D-
   564 000000CD 616C6C6F6361746564-
   564 000000D6 206D656D6F72790A0A-
   564 000000DF 00                 
   565                                  fmt_non_closure:
   566 000000E0 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   566 000000E9 7074696E6720746F20-
   566 000000F2 6170706C792061206E-
   566 000000FB 6F6E2D636C6F737572-
   566 00000104 65210A00           
   567                                  fmt_error_improper_list:
   568 00000108 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   568 00000111 7267756D656E742069-
   568 0000011A 73206E6F7420612070-
   568 00000123 726F706572206C6973-
   568 0000012C 74210A00           
   569                                  
   570                                  section .bss
   571                                  memory:
   572 000001C0 <res 40000000>          	resb gbytes(1)
   573                                  
   574                                  section .data
   575                                  top_of_memory:
   576 00000130 [C001000000000000]              dq memory
   577                                  
   578                                  section .text
   579                                  malloc:
   580 0000068A 488B0425[30010000]              mov rax, qword [top_of_memory]
   581 00000692 48013C25[30010000]              add qword [top_of_memory], rdi
   582 0000069A C3                              ret
   583                                          
   584                                  print_sexpr_if_not_void:
   585 0000069B 4881FF[00000000]        	cmp rdi, sob_void
   586 000006A2 7501                    	jne print_sexpr
   587 000006A4 C3                      	ret
   588                                  
   589                                  section .data
   590                                  fmt_void:
   591 00000138 233C766F69643E00        	db `#<void>\0`
   592                                  fmt_nil:
   593 00000140 282900                  	db `()\0`
   594                                  fmt_boolean_false:
   595 00000143 236600                  	db `#f\0`
   596                                  fmt_boolean_true:
   597 00000146 237400                  	db `#t\0`
   598                                  fmt_char_backslash:
   599 00000149 235C5C00                	db `#\\\\\0`
   600                                  fmt_char_dquote:
   601 0000014D 235C2200                	db `#\\"\0`
   602                                  fmt_char_simple:
   603 00000151 235C256300              	db `#\\%c\0`
   604                                  fmt_char_null:
   605 00000156 235C6E756C00            	db `#\\nul\0`
   606                                  fmt_char_bell:
   607 0000015C 235C62656C6C00          	db `#\\bell\0`
   608                                  fmt_char_backspace:
   609 00000163 235C6261636B737061-     	db `#\\backspace\0`
   609 0000016C 636500             
   610                                  fmt_char_tab:
   611 0000016F 235C74616200            	db `#\\tab\0`
   612                                  fmt_char_newline:
   613 00000175 235C6E65776C696E65-     	db `#\\newline\0`
   613 0000017E 00                 
   614                                  fmt_char_formfeed:
   615 0000017F 235C7061676500          	db `#\\page\0`
   616                                  fmt_char_return:
   617 00000186 235C72657475726E00      	db `#\\return\0`
   618                                  fmt_char_escape:
   619 0000018F 235C65736300            	db `#\\esc\0`
   620                                  fmt_char_space:
   621 00000195 235C737061636500        	db `#\\space\0`
   622                                  fmt_char_hex:
   623 0000019D 235C782530325800        	db `#\\x%02X\0`
   624                                  fmt_closure:
   625 000001A5 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   625 000001AE 206174203078253038-
   625 000001B7 5820656E763D307825-
   625 000001C0 30385820636F64653D-
   625 000001C9 3078253038583E00   
   626                                  fmt_lparen:
   627 000001D1 2800                    	db `(\0`
   628                                  fmt_dotted_pair:
   629 000001D3 202E2000                	db ` . \0`
   630                                  fmt_rparen:
   631 000001D7 2900                    	db `)\0`
   632                                  fmt_space:
   633 000001D9 2000                    	db ` \0`
   634                                  fmt_empty_vector:
   635 000001DB 23282900                	db `#()\0`
   636                                  fmt_vector:
   637 000001DF 232800                  	db `#(\0`
   638                                  fmt_real:
   639 000001E2 256600                  	db `%f\0`
   640                                  fmt_fraction:
   641 000001E5 256C642F256C6400        	db `%ld/%ld\0`
   642                                  fmt_zero:
   643 000001ED 3000                    	db `0\0`
   644                                  fmt_int:
   645 000001EF 256C6400                	db `%ld\0`
   646                                  fmt_unknown_sexpr_error:
   647 000001F3 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   647 000001FC 6F723A20556E6B6E6F-
   647 00000205 776E2074797065206F-
   647 0000020E 662073657870722028-
   647 00000217 3078253032582920   
   648 0000021F 617420616464726573-     	db `at address 0x%08X\n\n\0`
   648 00000228 73203078253038580A-
   648 00000231 0A00               
   649                                  fmt_dquote:
   650 00000233 2200                    	db `\"\0`
   651                                  fmt_string_char:
   652 00000235 256300                          db `%c\0`
   653                                  fmt_string_char_7:
   654 00000238 5C6100                          db `\\a\0`
   655                                  fmt_string_char_8:
   656 0000023B 5C6200                          db `\\b\0`
   657                                  fmt_string_char_9:
   658 0000023E 5C7400                          db `\\t\0`
   659                                  fmt_string_char_10:
   660 00000241 5C6E00                          db `\\n\0`
   661                                  fmt_string_char_11:
   662 00000244 5C7600                          db `\\v\0`
   663                                  fmt_string_char_12:
   664 00000247 5C6600                          db `\\f\0`
   665                                  fmt_string_char_13:
   666 0000024A 5C7200                          db `\\r\0`
   667                                  fmt_string_char_34:
   668 0000024D 5C2200                          db `\\"\0`
   669                                  fmt_string_char_92:
   670 00000250 5C5C00                          db `\\\\\0`
   671                                  fmt_string_char_hex:
   672 00000253 5C7825583B00                    db `\\x%X;\0`
   673                                  
   674                                  section .text
   675                                  
   676                                  print_sexpr:
   677                                  	ENTER
   677 000006A5 C8000000            <1>  enter 0, 0
   677 000006A9 4883E4F0            <1>  and rsp, ~15
   678 000006AD 8A07                    	mov al, byte [rdi]
   679 000006AF 3C00                    	cmp al, T_void
   680 000006B1 744D                    	je .Lvoid
   681 000006B3 3C01                    	cmp al, T_nil
   682 000006B5 7458                    	je .Lnil
   683 000006B7 3C09                    	cmp al, T_boolean_false
   684 000006B9 7463                    	je .Lboolean_false
   685 000006BB 3C0A                    	cmp al, T_boolean_true
   686 000006BD 746E                    	je .Lboolean_true
   687 000006BF 3C02                    	cmp al, T_char
   688 000006C1 7479                    	je .Lchar
   689 000006C3 3C04                    	cmp al, T_symbol
   690 000006C5 0F84BB010000            	je .Lsymbol
   691 000006CB 3C21                    	cmp al, T_pair
   692 000006CD 0F84D6010000            	je .Lpair
   693 000006D3 3C22                    	cmp al, T_vector
   694 000006D5 0F849F020000            	je .Lvector
   695 000006DB 3C05                    	cmp al, T_closure
   696 000006DD 0F8489010000            	je .Lclosure
   697 000006E3 3C12                    	cmp al, T_real
   698 000006E5 0F8430030000            	je .Lreal
   699 000006EB 3C11                    	cmp al, T_rational
   700 000006ED 0F8456030000            	je .Lrational
   701 000006F3 3C03                    	cmp al, T_string
   702 000006F5 0F848F030000            	je .Lstring
   703                                  
   704 000006FB E9C7040000              	jmp .Lunknown_sexpr_type
   705                                  
   706                                  .Lvoid:
   707 00000700 48BF-                   	mov rdi, fmt_void
   707 00000702 [3801000000000000] 
   708 0000070A E9F5040000              	jmp .Lemit
   709                                  
   710                                  .Lnil:
   711 0000070F 48BF-                   	mov rdi, fmt_nil
   711 00000711 [4001000000000000] 
   712 00000719 E9E6040000              	jmp .Lemit
   713                                  
   714                                  .Lboolean_false:
   715 0000071E 48BF-                   	mov rdi, fmt_boolean_false
   715 00000720 [4301000000000000] 
   716 00000728 E9D7040000              	jmp .Lemit
   717                                  
   718                                  .Lboolean_true:
   719 0000072D 48BF-                   	mov rdi, fmt_boolean_true
   719 0000072F [4601000000000000] 
   720 00000737 E9C8040000              	jmp .Lemit
   721                                  
   722                                  .Lchar:
   723 0000073C 8A4701                  	mov al, byte [rdi + 1]
   724 0000073F 3C20                    	cmp al, ' '
   725 00000741 7E28                    	jle .Lchar_whitespace
   726 00000743 3C5C                    	cmp al, 92 		; backslash
   727 00000745 0F847C000000            	je .Lchar_backslash
   728 0000074B 3C22                    	cmp al, '"'
   729 0000074D 0F8483000000            	je .Lchar_dquote
   730 00000753 4825FF000000            	and rax, 255
   731 00000759 48BF-                   	mov rdi, fmt_char_simple
   731 0000075B [5101000000000000] 
   732 00000763 4889C6                  	mov rsi, rax
   733 00000766 E999040000              	jmp .Lemit
   734                                  
   735                                  .Lchar_whitespace:
   736 0000076B 3C00                    	cmp al, 0
   737 0000076D 7476                    	je .Lchar_null
   738 0000076F 3C07                    	cmp al, 7
   739 00000771 0F847D000000            	je .Lchar_bell
   740 00000777 3C08                    	cmp al, 8
   741 00000779 0F8484000000            	je .Lchar_backspace
   742 0000077F 3C09                    	cmp al, 9
   743 00000781 0F848B000000            	je .Lchar_tab
   744 00000787 3C0A                    	cmp al, 10
   745 00000789 0F8492000000            	je .Lchar_newline
   746 0000078F 3C0C                    	cmp al, 12
   747 00000791 0F8499000000            	je .Lchar_formfeed
   748 00000797 3C0D                    	cmp al, 13
   749 00000799 0F84A0000000            	je .Lchar_return
   750 0000079F 3C1B                    	cmp al, 27
   751 000007A1 0F84A7000000            	je .Lchar_escape
   752 000007A7 4825FF000000            	and rax, 255
   753 000007AD 3C20                    	cmp al, ' '
   754 000007AF 0F84A8000000            	je .Lchar_space
   755 000007B5 48BF-                   	mov rdi, fmt_char_hex
   755 000007B7 [9D01000000000000] 
   756 000007BF 4889C6                  	mov rsi, rax
   757 000007C2 E93D040000              	jmp .Lemit	
   758                                  
   759                                  .Lchar_backslash:
   760 000007C7 48BF-                   	mov rdi, fmt_char_backslash
   760 000007C9 [4901000000000000] 
   761 000007D1 E92E040000              	jmp .Lemit
   762                                  
   763                                  .Lchar_dquote:
   764 000007D6 48BF-                   	mov rdi, fmt_char_dquote
   764 000007D8 [4D01000000000000] 
   765 000007E0 E91F040000              	jmp .Lemit
   766                                  
   767                                  .Lchar_null:
   768 000007E5 48BF-                   	mov rdi, fmt_char_null
   768 000007E7 [5601000000000000] 
   769 000007EF E910040000              	jmp .Lemit
   770                                  
   771                                  .Lchar_bell:
   772 000007F4 48BF-                   	mov rdi, fmt_char_bell
   772 000007F6 [5C01000000000000] 
   773 000007FE E901040000              	jmp .Lemit
   774                                  
   775                                  .Lchar_backspace:
   776 00000803 48BF-                   	mov rdi, fmt_char_backspace
   776 00000805 [6301000000000000] 
   777 0000080D E9F2030000              	jmp .Lemit
   778                                  
   779                                  .Lchar_tab:
   780 00000812 48BF-                   	mov rdi, fmt_char_tab
   780 00000814 [6F01000000000000] 
   781 0000081C E9E3030000              	jmp .Lemit
   782                                  
   783                                  .Lchar_newline:
   784 00000821 48BF-                   	mov rdi, fmt_char_newline
   784 00000823 [7501000000000000] 
   785 0000082B E9D4030000              	jmp .Lemit
   786                                  
   787                                  .Lchar_formfeed:
   788 00000830 48BF-                   	mov rdi, fmt_char_formfeed
   788 00000832 [7F01000000000000] 
   789 0000083A E9C5030000              	jmp .Lemit
   790                                  
   791                                  .Lchar_return:
   792 0000083F 48BF-                   	mov rdi, fmt_char_return
   792 00000841 [8601000000000000] 
   793 00000849 E9B6030000              	jmp .Lemit
   794                                  
   795                                  .Lchar_escape:
   796 0000084E 48BF-                   	mov rdi, fmt_char_escape
   796 00000850 [8F01000000000000] 
   797 00000858 E9A7030000              	jmp .Lemit
   798                                  
   799                                  .Lchar_space:
   800 0000085D 48BF-                   	mov rdi, fmt_char_space
   800 0000085F [9501000000000000] 
   801 00000867 E998030000              	jmp .Lemit
   802                                  
   803                                  .Lclosure:
   804 0000086C 4889FE                  	mov rsi, qword rdi
   805 0000086F 48BF-                   	mov rdi, fmt_closure
   805 00000871 [A501000000000000] 
   806 00000879 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   807 0000087D 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   808 00000881 E97E030000              	jmp .Lemit
   809                                  
   810                                  .Lsymbol:
   811 00000886 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   812 0000088A BE01000000              	mov rsi, 1		 ; size = 1 byte
   813 0000088F 488B5701                	mov rdx, qword [rdi + 1] ; length
   814 00000893 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   815 00000897 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   816 0000089F E8(00000000)            	call fwrite
   817 000008A4 E970030000              	jmp .Lend
   818                                  	
   819                                  .Lpair:
   820 000008A9 57                      	push rdi
   821 000008AA 48BF-                   	mov rdi, fmt_lparen
   821 000008AC [D101000000000000] 
   822 000008B4 B800000000              	mov rax, 0
   823                                          ENTER
   823 000008B9 C8000000            <1>  enter 0, 0
   823 000008BD 4883E4F0            <1>  and rsp, ~15
   824 000008C1 E8(00000000)            	call printf
   825                                          LEAVE
   825 000008C6 C9                  <1>  leave
   826 000008C7 488B3C24                	mov rdi, qword [rsp] 	; pair
   827 000008CB 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   828 000008CF E8D1FDFFFF              	call print_sexpr
   829 000008D4 5F                      	pop rdi 		; pair
   830 000008D5 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   831                                  .Lcdr:
   832 000008D9 8A07                    	mov al, byte [rdi]
   833 000008DB 3C01                    	cmp al, T_nil
   834 000008DD 7447                    	je .Lcdr_nil
   835 000008DF 3C21                    	cmp al, T_pair
   836 000008E1 7462                    	je .Lcdr_pair
   837 000008E3 57                      	push rdi
   838 000008E4 48BF-                   	mov rdi, fmt_dotted_pair
   838 000008E6 [D301000000000000] 
   839 000008EE B800000000              	mov rax, 0
   840                                  	ENTER
   840 000008F3 C8000000            <1>  enter 0, 0
   840 000008F7 4883E4F0            <1>  and rsp, ~15
   841 000008FB E8(00000000)            	call printf
   842                                  	LEAVE
   842 00000900 C9                  <1>  leave
   843 00000901 5F                      	pop rdi
   844 00000902 E89EFDFFFF              	call print_sexpr
   845 00000907 48BF-                   	mov rdi, fmt_rparen
   845 00000909 [D701000000000000] 
   846 00000911 B800000000              	mov rax, 0
   847                                  	ENTER
   847 00000916 C8000000            <1>  enter 0, 0
   847 0000091A 4883E4F0            <1>  and rsp, ~15
   848 0000091E E8(00000000)            	call printf
   849                                  	LEAVE
   849 00000923 C9                  <1>  leave
   850                                  	LEAVE
   850 00000924 C9                  <1>  leave
   851 00000925 C3                      	ret
   852                                  
   853                                  .Lcdr_nil:
   854 00000926 48BF-                   	mov rdi, fmt_rparen
   854 00000928 [D701000000000000] 
   855 00000930 B800000000              	mov rax, 0
   856                                  	ENTER
   856 00000935 C8000000            <1>  enter 0, 0
   856 00000939 4883E4F0            <1>  and rsp, ~15
   857 0000093D E8(00000000)            	call printf
   858                                  	LEAVE
   858 00000942 C9                  <1>  leave
   859                                  	LEAVE
   859 00000943 C9                  <1>  leave
   860 00000944 C3                      	ret
   861                                  
   862                                  .Lcdr_pair:
   863 00000945 57                      	push rdi
   864 00000946 48BF-                   	mov rdi, fmt_space
   864 00000948 [D901000000000000] 
   865 00000950 B800000000              	mov rax, 0
   866                                  	ENTER
   866 00000955 C8000000            <1>  enter 0, 0
   866 00000959 4883E4F0            <1>  and rsp, ~15
   867 0000095D E8(00000000)            	call printf
   868                                  	LEAVE
   868 00000962 C9                  <1>  leave
   869 00000963 488B3C24                	mov rdi, qword [rsp]
   870 00000967 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   871 0000096B E835FDFFFF              	call print_sexpr
   872 00000970 5F                      	pop rdi
   873 00000971 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   874 00000975 E95FFFFFFF              	jmp .Lcdr
   875                                  
   876                                  .Lvector:
   877 0000097A 488B4701                	mov rax, qword [rdi + 1] ; length
   878 0000097E 4883F800                	cmp rax, 0
   879 00000982 0F8484000000            	je .Lvector_empty
   880 00000988 57                      	push rdi
   881 00000989 48BF-                   	mov rdi, fmt_vector
   881 0000098B [DF01000000000000] 
   882 00000993 B800000000              	mov rax, 0
   883                                  	ENTER
   883 00000998 C8000000            <1>  enter 0, 0
   883 0000099C 4883E4F0            <1>  and rsp, ~15
   884 000009A0 E8(00000000)            	call printf
   885                                  	LEAVE
   885 000009A5 C9                  <1>  leave
   886 000009A6 488B3C24                	mov rdi, qword [rsp]
   887 000009AA FF7701                  	push qword [rdi + 1]
   888 000009AD 6A01                    	push 1
   889 000009AF 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   890 000009B3 E8EDFCFFFF              	call print_sexpr
   891                                  .Lvector_loop:
   892                                  	; [rsp] index
   893                                  	; [rsp + 8*1] limit
   894                                  	; [rsp + 8*2] vector
   895 000009B8 488B0424                	mov rax, qword [rsp]
   896 000009BC 483B442408              	cmp rax, qword [rsp + 8*1]
   897 000009C1 7436                    	je .Lvector_end
   898 000009C3 48BF-                   	mov rdi, fmt_space
   898 000009C5 [D901000000000000] 
   899 000009CD B800000000              	mov rax, 0
   900                                  	ENTER
   900 000009D2 C8000000            <1>  enter 0, 0
   900 000009D6 4883E4F0            <1>  and rsp, ~15
   901 000009DA E8(00000000)            	call printf
   902                                  	LEAVE
   902 000009DF C9                  <1>  leave
   903 000009E0 488B0424                	mov rax, qword [rsp]
   904 000009E4 488B5C2410              	mov rbx, qword [rsp + 8*2]
   905 000009E9 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   906 000009EE E8B2FCFFFF              	call print_sexpr
   907 000009F3 48FF0424                	inc qword [rsp]
   908 000009F7 EBBF                    	jmp .Lvector_loop
   909                                  
   910                                  .Lvector_end:
   911 000009F9 4883C418                	add rsp, 8*3
   912 000009FD 48BF-                   	mov rdi, fmt_rparen
   912 000009FF [D701000000000000] 
   913 00000A07 E9F8010000              	jmp .Lemit	
   914                                  
   915                                  .Lvector_empty:
   916 00000A0C 48BF-                   	mov rdi, fmt_empty_vector
   916 00000A0E [DB01000000000000] 
   917 00000A16 E9E9010000              	jmp .Lemit
   918                                  
   919                                  .Lreal:
   920 00000A1B FF7701                  	push qword [rdi + 1]
   921 00000A1E F20F100424              	movsd xmm0, qword [rsp]
   922 00000A23 4883C408                	add rsp, 8*1
   923 00000A27 48BF-                   	mov rdi, fmt_real
   923 00000A29 [E201000000000000] 
   924 00000A31 B801000000              	mov rax, 1
   925                                  	ENTER
   925 00000A36 C8000000            <1>  enter 0, 0
   925 00000A3A 4883E4F0            <1>  and rsp, ~15
   926 00000A3E E8(00000000)            	call printf
   927                                  	LEAVE
   927 00000A43 C9                  <1>  leave
   928 00000A44 E9D0010000              	jmp .Lend
   929                                  
   930                                  .Lrational:
   931 00000A49 488B7701                	mov rsi, qword [rdi + 1]
   932 00000A4D 488B5709                	mov rdx, qword [rdi + 1 + 8]
   933 00000A51 4883FE00                	cmp rsi, 0
   934 00000A55 7415                    	je .Lrat_zero
   935 00000A57 4883FA01                	cmp rdx, 1
   936 00000A5B 741E                    	je .Lrat_int
   937 00000A5D 48BF-                   	mov rdi, fmt_fraction
   937 00000A5F [E501000000000000] 
   938 00000A67 E998010000              	jmp .Lemit
   939                                  
   940                                  .Lrat_zero:
   941 00000A6C 48BF-                   	mov rdi, fmt_zero
   941 00000A6E [ED01000000000000] 
   942 00000A76 E989010000              	jmp .Lemit
   943                                  
   944                                  .Lrat_int:
   945 00000A7B 48BF-                   	mov rdi, fmt_int
   945 00000A7D [EF01000000000000] 
   946 00000A85 E97A010000              	jmp .Lemit
   947                                  
   948                                  .Lstring:
   949 00000A8A 488D4709                	lea rax, [rdi + 1 + 8]
   950 00000A8E 50                      	push rax
   951 00000A8F FF7701                  	push qword [rdi + 1]
   952 00000A92 48BF-                   	mov rdi, fmt_dquote
   952 00000A94 [3302000000000000] 
   953 00000A9C B800000000              	mov rax, 0
   954                                  	ENTER
   954 00000AA1 C8000000            <1>  enter 0, 0
   954 00000AA5 4883E4F0            <1>  and rsp, ~15
   955 00000AA9 E8(00000000)            	call printf
   956                                  	LEAVE
   956 00000AAE C9                  <1>  leave
   957                                  .Lstring_loop:
   958                                  	; qword [rsp]: limit
   959                                  	; qword [rsp + 8*1]: char *
   960 00000AAF 48833C2400              	cmp qword [rsp], 0
   961 00000AB4 0F84FD000000            	je .Lstring_end
   962 00000ABA 488B442408              	mov rax, qword [rsp + 8*1]
   963 00000ABF 8A00                    	mov al, byte [rax]
   964 00000AC1 4825FF000000            	and rax, 255
   965 00000AC7 3C07                    	cmp al, 7
   966 00000AC9 7468                            je .Lstring_char_7
   967 00000ACB 3C08                            cmp al, 8
   968 00000ACD 7470                            je .Lstring_char_8
   969 00000ACF 3C09                            cmp al, 9
   970 00000AD1 7478                            je .Lstring_char_9
   971 00000AD3 3C0A                            cmp al, 10
   972 00000AD5 0F847C000000                    je .Lstring_char_10
   973 00000ADB 3C0B                            cmp al, 11
   974 00000ADD 0F8480000000                    je .Lstring_char_11
   975 00000AE3 3C0C                            cmp al, 12
   976 00000AE5 0F8484000000                    je .Lstring_char_12
   977 00000AEB 3C0D                            cmp al, 13
   978 00000AED 0F8488000000                    je .Lstring_char_13
   979 00000AF3 3C22                            cmp al, 34
   980 00000AF5 0F848C000000                    je .Lstring_char_34
   982 00000AFB 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   983 00000AFD 3C20                            cmp al, ' '
   984 00000AFF 0F8CA0000000                    jl .Lstring_char_hex
   985 00000B05 48BF-                           mov rdi, fmt_string_char
   985 00000B07 [3502000000000000] 
   986 00000B0F 4889C6                          mov rsi, rax
   987                                  .Lstring_char_emit:
   988 00000B12 B800000000                      mov rax, 0
   989                                          ENTER
   989 00000B17 C8000000            <1>  enter 0, 0
   989 00000B1B 4883E4F0            <1>  and rsp, ~15
   990 00000B1F E8(00000000)                    call printf
   991                                          LEAVE
   991 00000B24 C9                  <1>  leave
   992 00000B25 48FF0C24                        dec qword [rsp]
   993 00000B29 48FF442408                      inc qword [rsp + 8*1]
   994 00000B2E E97CFFFFFF                      jmp .Lstring_loop
   995                                  
   996                                  .Lstring_char_7:
   997 00000B33 48BF-                           mov rdi, fmt_string_char_7
   997 00000B35 [3802000000000000] 
   998 00000B3D EBD3                            jmp .Lstring_char_emit
   999                                  
  1000                                  .Lstring_char_8:
  1001 00000B3F 48BF-                           mov rdi, fmt_string_char_8
  1001 00000B41 [3B02000000000000] 
  1002 00000B49 EBC7                            jmp .Lstring_char_emit
  1003                                          
  1004                                  .Lstring_char_9:
  1005 00000B4B 48BF-                           mov rdi, fmt_string_char_9
  1005 00000B4D [3E02000000000000] 
  1006 00000B55 EBBB                            jmp .Lstring_char_emit
  1007                                  
  1008                                  .Lstring_char_10:
  1009 00000B57 48BF-                           mov rdi, fmt_string_char_10
  1009 00000B59 [4102000000000000] 
  1010 00000B61 EBAF                            jmp .Lstring_char_emit
  1011                                  
  1012                                  .Lstring_char_11:
  1013 00000B63 48BF-                           mov rdi, fmt_string_char_11
  1013 00000B65 [4402000000000000] 
  1014 00000B6D EBA3                            jmp .Lstring_char_emit
  1015                                  
  1016                                  .Lstring_char_12:
  1017 00000B6F 48BF-                           mov rdi, fmt_string_char_12
  1017 00000B71 [4702000000000000] 
  1018 00000B79 EB97                            jmp .Lstring_char_emit
  1019                                  
  1020                                  .Lstring_char_13:
  1021 00000B7B 48BF-                           mov rdi, fmt_string_char_13
  1021 00000B7D [4A02000000000000] 
  1022 00000B85 EB8B                            jmp .Lstring_char_emit
  1023                                  
  1024                                  .Lstring_char_34:
  1025 00000B87 48BF-                           mov rdi, fmt_string_char_34
  1025 00000B89 [4D02000000000000] 
  1026 00000B91 E97CFFFFFF                      jmp .Lstring_char_emit
  1027                                  
  1028                                  .Lstring_char_92:
  1029 00000B96 48BF-                           mov rdi, fmt_string_char_92
  1029 00000B98 [5002000000000000] 
  1030 00000BA0 E96DFFFFFF                      jmp .Lstring_char_emit
  1031                                  
  1032                                  .Lstring_char_hex:
  1033 00000BA5 48BF-                           mov rdi, fmt_string_char_hex
  1033 00000BA7 [5302000000000000] 
  1034 00000BAF 4889C6                          mov rsi, rax
  1035 00000BB2 E95BFFFFFF                      jmp .Lstring_char_emit        
  1036                                  
  1037                                  .Lstring_end:
  1038 00000BB7 4883C410                	add rsp, 8 * 2
  1039 00000BBB 48BF-                   	mov rdi, fmt_dquote
  1039 00000BBD [3302000000000000] 
  1040 00000BC5 EB3D                    	jmp .Lemit
  1041                                  
  1042                                  .Lunknown_sexpr_type:
  1043 00000BC7 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1043 00000BC9 [F301000000000000] 
  1044 00000BD1 4825FF000000            	and rax, 255
  1045 00000BD7 4889C2                  	mov rdx, rax
  1046 00000BDA 4889F9                  	mov rcx, rdi
  1047 00000BDD 488B3C25[00000000]      	mov rdi, qword [stderr]
  1048 00000BE5 B800000000              	mov rax, 0
  1049                                  	ENTER
  1049 00000BEA C8000000            <1>  enter 0, 0
  1049 00000BEE 4883E4F0            <1>  and rsp, ~15
  1050 00000BF2 E8(00000000)            	call fprintf
  1051                                  	LEAVE
  1051 00000BF7 C9                  <1>  leave
  1052 00000BF8 48C7C0FFFFFFFF          	mov rax, -1
  1053 00000BFF E8(00000000)            	call exit
  1054                                  
  1055                                  .Lemit:
  1056 00000C04 B800000000              	mov rax, 0
  1057                                  	ENTER
  1057 00000C09 C8000000            <1>  enter 0, 0
  1057 00000C0D 4883E4F0            <1>  and rsp, ~15
  1058 00000C11 E8(00000000)            	call printf
  1059                                  	LEAVE
  1059 00000C16 C9                  <1>  leave
  1060 00000C17 EB00                    	jmp .Lend
  1061                                  
  1062                                  .Lend:
  1063                                  	LEAVE
  1063 00000C19 C9                  <1>  leave
  1064 00000C1A C3                      	ret
  1065                                  
  1066                                  ;;; rdi: address of free variable
  1067                                  ;;; rsi: address of code-pointer
  1068                                  bind_primitive:
  1069                                          ENTER
  1069 00000C1B C8000000            <1>  enter 0, 0
  1069 00000C1F 4883E4F0            <1>  and rsp, ~15
  1070 00000C23 57                              push rdi
  1071 00000C24 BF11000000                      mov rdi, (1 + 8 + 8)
  1072 00000C29 E85CFAFFFF                      call malloc
  1073 00000C2E 5F                              pop rdi
  1074 00000C2F C60005                          mov byte [rax], T_closure
  1075 00000C32 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1076 00000C3A 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1077 00000C3E 488907                          mov qword [rdi], rax
  1078                                          LEAVE
  1078 00000C41 C9                  <1>  leave
  1079 00000C42 C3                              ret
  1080                                  
  1081                                  
  1082                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1083                                  ; (* cuurent version!*)
  1084                                  L_code_ptr_bin_apply:
  1085 00000C43 488B0C24                        mov rcx, qword [rsp]
  1086 00000C47 4C8B442410                      mov r8, [rsp +  2 * 8]                          ; r8 <- num_of_args
  1087 00000C4C 4983F802                        cmp byte r8, 2       
  1087          ******************       warning: register size specification ignored [-w+other]
  1088 00000C50 0F858F110000                    jne L_error_arg_count_2                         ; check right number of parameters.           
  1089                                  
  1090 00000C56 4C8B442420                      mov r8, qword [rsp + 4 * 8]                     ; r8 <- list_of_args
  1091                                          assert_pair(r8)
  1091 00000C5B 41803821            <1>  cmp byte [%1], %2
  1091 00000C5F 0F851F120000        <1>  jne L_error_incorrect_type
  1092                                  ; bul_bul
  1093 00000C65 41803801                        cmp byte [r8], T_nil 
  1094 00000C69 0F840C110000                    je L_error_arg_count_0                       ; list.length == 0 ?
  1095                                  
  1096 00000C6F 41BB00000000                    mov r11, 0                                      ; list_asrgs_counter init
  1097                                  
  1098 00000C75 4C8B642418                      mov r12, qword [rsp + 3 * 8]                    ; r12 <- proc
  1099 00000C7A 803805                          cmp byte [rax], T_closure
  1100 00000C7D 0F855EF9FFFF                    jne L_error_non_closure
  1101                                  
  1102 00000C83 4C8B3424                        mov r14, qword [rsp]                            ; r14 <- ret address
  1103 00000C87 4883C428                        add rsp, 5 * 8                                  ; set rsp to override the last args
  1104                                                                                          ; similliar to 4 pops.
  1105                                  
  1106                                  .L_list_of_args_not_empty_yet:
  1107                                  
  1108                                          assert_pair(r8)
  1108 00000C8B 41803821            <1>  cmp byte [%1], %2
  1108 00000C8F 0F85EF110000        <1>  jne L_error_incorrect_type
  1109 00000C95 4D8B4801                        mov r9, qword SOB_PAIR_CAR(r8)                  ; r9 <- car(list)
  1110 00000C99 4151                            push r9                                         ; * push arg *
  1111                                          
  1112 00000C9B 4983C301                        add r11, 1                                      ; args_counter ++
  1113                                  
  1114 00000C9F 4D8B5009                        mov r10, qword SOB_PAIR_CDR(r8)                 
  1115 00000CA3 4D89D0                          mov r8, qword r10                               ; r8 <- cdr(list)
  1116                                   
  1117 00000CA6 41803801                        cmp byte [r8], T_nil                            ; rest of the list is empty?
  1118 00000CAA 75DF                            jne .L_list_of_args_not_empty_yet               
  1119                                  
  1120                                  .L_list_of_args_totally_pushed:
  1121                                  
  1122 00000CAC 4153                            push r11                                        ; * push args_counter *
  1123                                  
  1124 00000CAE 4D8B6C2401                      mov r13, SOB_CLOSURE_ENV(r12)                   ; r13 <- proc.env
  1125 00000CB3 4155                            push r13                                        ; * push proc env *
  1126                                  
  1127 00000CB5 4156                            push r14                                        ; * push return address *
  1128                                  
  1129                                  
  1130                                  .L_flip_args_order:
  1131 00000CB7 4D89D8                          mov r8, r11  
  1132 00000CBA 4983C0FF                        add r8, -1                                      ; limit                              
  1133 00000CBE 41BA00000000                    mov r10, qword 0
  1134                                          
  1135                                  .L_flip_loop:
  1136 00000CC4 4983F800                        cmp r8, 0
  1137 00000CC8 7426                            je .L_end_of_flip_loop
  1138 00000CCA 4E8B7CDC10                      mov r15, qword [rsp + (2 + r11) * 8]                    ; r15 <- top
  1139 00000CCF 4E8B74D418                      mov r14, qword [rsp + (3 + r10) * 8]                    ;  r14 <- down
  1140 00000CD4 4E8974DC10                      mov [rsp + (2 + r11) * 8], qword r14                    ; swap
  1141 00000CD9 4E897CD418                      mov [rsp + (3 + r10) * 8], qword r15                    
  1142                                  
  1143 00000CDE 4983C201                        add r10, 1
  1144 00000CE2 4983C3FF                        add r11, -1
  1145                                  
  1146 00000CE6 4983C0FE                        add r8, -2                                      ; arg_left_to_swap -= 2
  1147                                  
  1148 00000CEA 4983F800                        cmp r8, 0
  1149 00000CEE 7FD4                            jg .L_flip_loop
  1150                                  
  1151                                  .L_end_of_flip_loop:
  1152                                  
  1153                                          
  1154                                        
  1155                                  
  1156                                  .L_all_args_are_flipped:
  1157                                  
  1158 00000CF0 4D8B6C2409                      mov r13, SOB_CLOSURE_CODE(r12)
  1159 00000CF5 41FFE5                          jmp r13
  1160                                  
  1161                                  	
  1162                                  L_code_ptr_is_null:
  1163                                          ENTER
  1163 00000CF8 C8000000            <1>  enter 0, 0
  1163 00000CFC 4883E4F0            <1>  and rsp, ~15
  1164 00000D00 48837D1801                      cmp COUNT, 1
  1165 00000D05 0F85A5100000                    jne L_error_arg_count_1
  1166 00000D0B 488B4520                        mov rax, PARAM(0)
  1167 00000D0F 803801                          cmp byte [rax], T_nil
  1168 00000D12 750C                            jne .L_false
  1169 00000D14 48B8-                           mov rax, sob_boolean_true
  1169 00000D16 [0300000000000000] 
  1170 00000D1E EB0A                            jmp .L_end
  1171                                  .L_false:
  1172 00000D20 48B8-                           mov rax, sob_boolean_false
  1172 00000D22 [0200000000000000] 
  1173                                  .L_end:
  1174                                          LEAVE
  1174 00000D2A C9                  <1>  leave
  1175 00000D2B C21800                          ret AND_KILL_FRAME(1)
  1176                                  
  1177                                  L_code_ptr_is_pair:
  1178                                          ENTER
  1178 00000D2E C8000000            <1>  enter 0, 0
  1178 00000D32 4883E4F0            <1>  and rsp, ~15
  1179 00000D36 48837D1801                      cmp COUNT, 1
  1180 00000D3B 0F856F100000                    jne L_error_arg_count_1
  1181 00000D41 488B4520                        mov rax, PARAM(0)
  1182 00000D45 803821                          cmp byte [rax], T_pair
  1183 00000D48 750C                            jne .L_false
  1184 00000D4A 48B8-                           mov rax, sob_boolean_true
  1184 00000D4C [0300000000000000] 
  1185 00000D54 EB0A                            jmp .L_end
  1186                                  .L_false:
  1187 00000D56 48B8-                           mov rax, sob_boolean_false
  1187 00000D58 [0200000000000000] 
  1188                                  .L_end:
  1189                                          LEAVE
  1189 00000D60 C9                  <1>  leave
  1190 00000D61 C21800                          ret AND_KILL_FRAME(1)
  1191                                          
  1192                                  L_code_ptr_is_void:
  1193                                          ENTER
  1193 00000D64 C8000000            <1>  enter 0, 0
  1193 00000D68 4883E4F0            <1>  and rsp, ~15
  1194 00000D6C 48837D1801                      cmp COUNT, 1
  1195 00000D71 0F8539100000                    jne L_error_arg_count_1
  1196 00000D77 488B4520                        mov rax, PARAM(0)
  1197 00000D7B 803800                          cmp byte [rax], T_void
  1198 00000D7E 750C                            jne .L_false
  1199 00000D80 48B8-                           mov rax, sob_boolean_true
  1199 00000D82 [0300000000000000] 
  1200 00000D8A EB0A                            jmp .L_end
  1201                                  .L_false:
  1202 00000D8C 48B8-                           mov rax, sob_boolean_false
  1202 00000D8E [0200000000000000] 
  1203                                  .L_end:
  1204                                          LEAVE
  1204 00000D96 C9                  <1>  leave
  1205 00000D97 C21800                          ret AND_KILL_FRAME(1)
  1206                                  
  1207                                  L_code_ptr_is_char:
  1208                                          ENTER
  1208 00000D9A C8000000            <1>  enter 0, 0
  1208 00000D9E 4883E4F0            <1>  and rsp, ~15
  1209 00000DA2 48837D1801                      cmp COUNT, 1
  1210 00000DA7 0F8503100000                    jne L_error_arg_count_1
  1211 00000DAD 488B4520                        mov rax, PARAM(0)
  1212 00000DB1 803802                          cmp byte [rax], T_char
  1213 00000DB4 750C                            jne .L_false
  1214 00000DB6 48B8-                           mov rax, sob_boolean_true
  1214 00000DB8 [0300000000000000] 
  1215 00000DC0 EB0A                            jmp .L_end
  1216                                  .L_false:
  1217 00000DC2 48B8-                           mov rax, sob_boolean_false
  1217 00000DC4 [0200000000000000] 
  1218                                  .L_end:
  1219                                          LEAVE
  1219 00000DCC C9                  <1>  leave
  1220 00000DCD C21800                          ret AND_KILL_FRAME(1)
  1221                                  
  1222                                  L_code_ptr_is_string:
  1223                                          ENTER
  1223 00000DD0 C8000000            <1>  enter 0, 0
  1223 00000DD4 4883E4F0            <1>  and rsp, ~15
  1224 00000DD8 48837D1801                      cmp COUNT, 1
  1225 00000DDD 0F85CD0F0000                    jne L_error_arg_count_1
  1226 00000DE3 488B4520                        mov rax, PARAM(0)
  1227 00000DE7 803803                          cmp byte [rax], T_string
  1228 00000DEA 750C                            jne .L_false
  1229 00000DEC 48B8-                           mov rax, sob_boolean_true
  1229 00000DEE [0300000000000000] 
  1230 00000DF6 EB0A                            jmp .L_end
  1231                                  .L_false:
  1232 00000DF8 48B8-                           mov rax, sob_boolean_false
  1232 00000DFA [0200000000000000] 
  1233                                  .L_end:
  1234                                          LEAVE
  1234 00000E02 C9                  <1>  leave
  1235 00000E03 C21800                          ret AND_KILL_FRAME(1)
  1236                                  
  1237                                  L_code_ptr_is_symbol:
  1238                                          ENTER
  1238 00000E06 C8000000            <1>  enter 0, 0
  1238 00000E0A 4883E4F0            <1>  and rsp, ~15
  1239 00000E0E 48837D1801                      cmp COUNT, 1
  1240 00000E13 0F85970F0000                    jne L_error_arg_count_1
  1241 00000E19 488B4520                        mov rax, PARAM(0)
  1242 00000E1D 803804                          cmp byte [rax], T_symbol
  1243 00000E20 750C                            jne .L_false
  1244 00000E22 48B8-                           mov rax, sob_boolean_true
  1244 00000E24 [0300000000000000] 
  1245 00000E2C EB0A                            jmp .L_end
  1246                                  .L_false:
  1247 00000E2E 48B8-                           mov rax, sob_boolean_false
  1247 00000E30 [0200000000000000] 
  1248                                  .L_end:
  1249                                          LEAVE
  1249 00000E38 C9                  <1>  leave
  1250 00000E39 C21800                          ret AND_KILL_FRAME(1)
  1251                                  
  1252                                  L_code_ptr_is_vector:
  1253                                          ENTER
  1253 00000E3C C8000000            <1>  enter 0, 0
  1253 00000E40 4883E4F0            <1>  and rsp, ~15
  1254 00000E44 48837D1801                      cmp COUNT, 1
  1255 00000E49 0F85610F0000                    jne L_error_arg_count_1
  1256 00000E4F 488B4520                        mov rax, PARAM(0)
  1257 00000E53 803822                          cmp byte [rax], T_vector
  1258 00000E56 750C                            jne .L_false
  1259 00000E58 48B8-                           mov rax, sob_boolean_true
  1259 00000E5A [0300000000000000] 
  1260 00000E62 EB0A                            jmp .L_end
  1261                                  .L_false:
  1262 00000E64 48B8-                           mov rax, sob_boolean_false
  1262 00000E66 [0200000000000000] 
  1263                                  .L_end:
  1264                                          LEAVE
  1264 00000E6E C9                  <1>  leave
  1265 00000E6F C21800                          ret AND_KILL_FRAME(1)
  1266                                  
  1267                                  L_code_ptr_is_closure:
  1268                                          ENTER
  1268 00000E72 C8000000            <1>  enter 0, 0
  1268 00000E76 4883E4F0            <1>  and rsp, ~15
  1269 00000E7A 48837D1801                      cmp COUNT, 1
  1270 00000E7F 0F852B0F0000                    jne L_error_arg_count_1
  1271 00000E85 488B4520                        mov rax, PARAM(0)
  1272 00000E89 803805                          cmp byte [rax], T_closure
  1273 00000E8C 750C                            jne .L_false
  1274 00000E8E 48B8-                           mov rax, sob_boolean_true
  1274 00000E90 [0300000000000000] 
  1275 00000E98 EB0A                            jmp .L_end
  1276                                  .L_false:
  1277 00000E9A 48B8-                           mov rax, sob_boolean_false
  1277 00000E9C [0200000000000000] 
  1278                                  .L_end:
  1279                                          LEAVE
  1279 00000EA4 C9                  <1>  leave
  1280 00000EA5 C21800                          ret AND_KILL_FRAME(1)
  1281                                  
  1282                                  L_code_ptr_is_real:
  1283                                          ENTER
  1283 00000EA8 C8000000            <1>  enter 0, 0
  1283 00000EAC 4883E4F0            <1>  and rsp, ~15
  1284 00000EB0 48837D1801                      cmp COUNT, 1
  1285 00000EB5 0F85F50E0000                    jne L_error_arg_count_1
  1286 00000EBB 488B4520                        mov rax, PARAM(0)
  1287 00000EBF 803812                          cmp byte [rax], T_real
  1288 00000EC2 750C                            jne .L_false
  1289 00000EC4 48B8-                           mov rax, sob_boolean_true
  1289 00000EC6 [0300000000000000] 
  1290 00000ECE EB0A                            jmp .L_end
  1291                                  .L_false:
  1292 00000ED0 48B8-                           mov rax, sob_boolean_false
  1292 00000ED2 [0200000000000000] 
  1293                                  .L_end:
  1294                                          LEAVE
  1294 00000EDA C9                  <1>  leave
  1295 00000EDB C21800                          ret AND_KILL_FRAME(1)
  1296                                  
  1297                                  L_code_ptr_is_rational:
  1298                                          ENTER
  1298 00000EDE C8000000            <1>  enter 0, 0
  1298 00000EE2 4883E4F0            <1>  and rsp, ~15
  1299 00000EE6 48837D1801                      cmp COUNT, 1
  1300 00000EEB 0F85BF0E0000                    jne L_error_arg_count_1
  1301 00000EF1 488B4520                        mov rax, PARAM(0)
  1302 00000EF5 803811                          cmp byte [rax], T_rational
  1303 00000EF8 750C                            jne .L_false
  1304 00000EFA 48B8-                           mov rax, sob_boolean_true
  1304 00000EFC [0300000000000000] 
  1305 00000F04 EB0A                            jmp .L_end
  1306                                  .L_false:
  1307 00000F06 48B8-                           mov rax, sob_boolean_false
  1307 00000F08 [0200000000000000] 
  1308                                  .L_end:
  1309                                          LEAVE
  1309 00000F10 C9                  <1>  leave
  1310 00000F11 C21800                          ret AND_KILL_FRAME(1)
  1311                                  
  1312                                  L_code_ptr_is_boolean:
  1313                                          ENTER
  1313 00000F14 C8000000            <1>  enter 0, 0
  1313 00000F18 4883E4F0            <1>  and rsp, ~15
  1314 00000F1C 48837D1801                      cmp COUNT, 1
  1315 00000F21 0F85890E0000                    jne L_error_arg_count_1
  1316 00000F27 488B4520                        mov rax, PARAM(0)
  1317 00000F2B 8A18                            mov bl, byte [rax]
  1318 00000F2D 80E308                          and bl, T_boolean
  1319 00000F30 740C                            je .L_false
  1320 00000F32 48B8-                           mov rax, sob_boolean_true
  1320 00000F34 [0300000000000000] 
  1321 00000F3C EB0A                            jmp .L_end
  1322                                  .L_false:
  1323 00000F3E 48B8-                           mov rax, sob_boolean_false
  1323 00000F40 [0200000000000000] 
  1324                                  .L_end:
  1325                                          LEAVE
  1325 00000F48 C9                  <1>  leave
  1326 00000F49 C21800                          ret AND_KILL_FRAME(1)
  1327                                          
  1328                                  L_code_ptr_is_number:
  1329                                          ENTER
  1329 00000F4C C8000000            <1>  enter 0, 0
  1329 00000F50 4883E4F0            <1>  and rsp, ~15
  1330 00000F54 48837D1801                      cmp COUNT, 1
  1331 00000F59 0F85510E0000                    jne L_error_arg_count_1
  1332 00000F5F 488B4520                        mov rax, PARAM(0)
  1333 00000F63 8A18                            mov bl, byte [rax]
  1334 00000F65 80E310                          and bl, T_number
  1335 00000F68 740C                            je .L_false
  1336 00000F6A 48B8-                           mov rax, sob_boolean_true
  1336 00000F6C [0300000000000000] 
  1337 00000F74 EB0A                            jmp .L_end
  1338                                  .L_false:
  1339 00000F76 48B8-                           mov rax, sob_boolean_false
  1339 00000F78 [0200000000000000] 
  1340                                  .L_end:
  1341                                          LEAVE
  1341 00000F80 C9                  <1>  leave
  1342 00000F81 C21800                          ret AND_KILL_FRAME(1)
  1343                                          
  1344                                  L_code_ptr_is_collection:
  1345                                          ENTER
  1345 00000F84 C8000000            <1>  enter 0, 0
  1345 00000F88 4883E4F0            <1>  and rsp, ~15
  1346 00000F8C 48837D1801                      cmp COUNT, 1
  1347 00000F91 0F85190E0000                    jne L_error_arg_count_1
  1348 00000F97 488B4520                        mov rax, PARAM(0)
  1349 00000F9B 8A18                            mov bl, byte [rax]
  1350 00000F9D 80E320                          and bl, T_collection
  1351 00000FA0 740C                            je .L_false
  1352 00000FA2 48B8-                           mov rax, sob_boolean_true
  1352 00000FA4 [0300000000000000] 
  1353 00000FAC EB0A                            jmp .L_end
  1354                                  .L_false:
  1355 00000FAE 48B8-                           mov rax, sob_boolean_false
  1355 00000FB0 [0200000000000000] 
  1356                                  .L_end:
  1357                                          LEAVE
  1357 00000FB8 C9                  <1>  leave
  1358 00000FB9 C21800                          ret AND_KILL_FRAME(1)
  1359                                  
  1360                                  L_code_ptr_cons:
  1361                                          ENTER
  1361 00000FBC C8000000            <1>  enter 0, 0
  1361 00000FC0 4883E4F0            <1>  and rsp, ~15
  1362 00000FC4 48837D1802                      cmp COUNT, 2
  1363 00000FC9 0F85160E0000                    jne L_error_arg_count_2
  1364 00000FCF BF11000000                      mov rdi, (1 + 8 + 8)
  1365 00000FD4 E8B1F6FFFF                      call malloc
  1366 00000FD9 C60021                          mov byte [rax], T_pair
  1367 00000FDC 488B5D20                        mov rbx, PARAM(0)
  1368 00000FE0 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1369 00000FE4 488B5D28                        mov rbx, PARAM(1)
  1370 00000FE8 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1371                                          LEAVE
  1371 00000FEC C9                  <1>  leave
  1372 00000FED C22000                          ret AND_KILL_FRAME(2)
  1373                                  
  1374                                  L_code_ptr_display_sexpr:
  1375                                          ENTER
  1375 00000FF0 C8000000            <1>  enter 0, 0
  1375 00000FF4 4883E4F0            <1>  and rsp, ~15
  1376 00000FF8 48837D1801                      cmp COUNT, 1
  1377 00000FFD 0F85AD0D0000                    jne L_error_arg_count_1
  1378 00001003 488B7D20                        mov rdi, PARAM(0)
  1379 00001007 E899F6FFFF                      call print_sexpr
  1380 0000100C 48B8-                           mov rax, sob_void
  1380 0000100E [0000000000000000] 
  1381                                          LEAVE
  1381 00001016 C9                  <1>  leave
  1382 00001017 C21800                          ret AND_KILL_FRAME(1)
  1383                                  
  1384                                  L_code_ptr_write_char:
  1385                                          ENTER
  1385 0000101A C8000000            <1>  enter 0, 0
  1385 0000101E 4883E4F0            <1>  and rsp, ~15
  1386 00001022 48837D1801                      cmp COUNT, 1
  1387 00001027 0F85830D0000                    jne L_error_arg_count_1
  1388 0000102D 488B4520                        mov rax, PARAM(0)
  1389                                          assert_char(rax)
  1389 00001031 803802              <1>  cmp byte [%1], %2
  1389 00001034 0F854A0E0000        <1>  jne L_error_incorrect_type
  1390 0000103A 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1391 0000103D 4825FF000000                    and rax, 255
  1392 00001043 48BF-                           mov rdi, fmt_char
  1392 00001045 [5902000000000000] 
  1393 0000104D 4889C6                          mov rsi, rax
  1394 00001050 B800000000                      mov rax, 0
  1395                                  	ENTER
  1395 00001055 C8000000            <1>  enter 0, 0
  1395 00001059 4883E4F0            <1>  and rsp, ~15
  1396 0000105D E8(00000000)                    call printf
  1397                                  	LEAVE
  1397 00001062 C9                  <1>  leave
  1398 00001063 48B8-                           mov rax, sob_void
  1398 00001065 [0000000000000000] 
  1399                                          LEAVE
  1399 0000106D C9                  <1>  leave
  1400 0000106E C21800                          ret AND_KILL_FRAME(1)
  1401                                  
  1402                                  L_code_ptr_car:
  1403                                          ENTER
  1403 00001071 C8000000            <1>  enter 0, 0
  1403 00001075 4883E4F0            <1>  and rsp, ~15
  1404 00001079 48837D1801                      cmp COUNT, 1
  1405 0000107E 0F852C0D0000                    jne L_error_arg_count_1
  1406 00001084 488B4520                        mov rax, PARAM(0)
  1407                                          assert_pair(rax)
  1407 00001088 803821              <1>  cmp byte [%1], %2
  1407 0000108B 0F85F30D0000        <1>  jne L_error_incorrect_type
  1408 00001091 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1409                                          LEAVE
  1409 00001095 C9                  <1>  leave
  1410 00001096 C21800                          ret AND_KILL_FRAME(1)
  1411                                          
  1412                                  L_code_ptr_cdr:
  1413                                          ENTER
  1413 00001099 C8000000            <1>  enter 0, 0
  1413 0000109D 4883E4F0            <1>  and rsp, ~15
  1414 000010A1 48837D1801                      cmp COUNT, 1
  1415 000010A6 0F85040D0000                    jne L_error_arg_count_1
  1416 000010AC 488B4520                        mov rax, PARAM(0)
  1417                                          assert_pair(rax)
  1417 000010B0 803821              <1>  cmp byte [%1], %2
  1417 000010B3 0F85CB0D0000        <1>  jne L_error_incorrect_type
  1418 000010B9 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1419                                          LEAVE
  1419 000010BD C9                  <1>  leave
  1420 000010BE C21800                          ret AND_KILL_FRAME(1)
  1421                                          
  1422                                  L_code_ptr_string_length:
  1423                                          ENTER
  1423 000010C1 C8000000            <1>  enter 0, 0
  1423 000010C5 4883E4F0            <1>  and rsp, ~15
  1424 000010C9 48837D1801                      cmp COUNT, 1
  1425 000010CE 0F85DC0C0000                    jne L_error_arg_count_1
  1426 000010D4 488B4520                        mov rax, PARAM(0)
  1427                                          assert_string(rax)
  1427 000010D8 803803              <1>  cmp byte [%1], %2
  1427 000010DB 0F85A30D0000        <1>  jne L_error_incorrect_type
  1428 000010E1 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1429 000010E5 E83A0C0000                      call make_integer
  1430                                          LEAVE
  1430 000010EA C9                  <1>  leave
  1431 000010EB C21800                          ret AND_KILL_FRAME(1)
  1432                                  
  1433                                  L_code_ptr_vector_length:
  1434                                          ENTER
  1434 000010EE C8000000            <1>  enter 0, 0
  1434 000010F2 4883E4F0            <1>  and rsp, ~15
  1435 000010F6 48837D1801                      cmp COUNT, 1
  1436 000010FB 0F85AF0C0000                    jne L_error_arg_count_1
  1437 00001101 488B4520                        mov rax, PARAM(0)
  1438                                          assert_vector(rax)
  1438 00001105 803822              <1>  cmp byte [%1], %2
  1438 00001108 0F85760D0000        <1>  jne L_error_incorrect_type
  1439 0000110E 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1440 00001112 E80D0C0000                      call make_integer
  1441                                          LEAVE
  1441 00001117 C9                  <1>  leave
  1442 00001118 C21800                          ret AND_KILL_FRAME(1)
  1443                                  
  1444                                  L_code_ptr_real_to_integer:
  1445                                          ENTER
  1445 0000111B C8000000            <1>  enter 0, 0
  1445 0000111F 4883E4F0            <1>  and rsp, ~15
  1446 00001123 48837D1801                      cmp COUNT, 1
  1447 00001128 0F85820C0000                    jne L_error_arg_count_1
  1448 0000112E 488B5D20                        mov rbx, PARAM(0)
  1449                                          assert_real(rbx)
  1449 00001132 803B12              <1>  cmp byte [%1], %2
  1449 00001135 0F85490D0000        <1>  jne L_error_incorrect_type
  1450 0000113B F20F104301                      movsd xmm0, qword [rbx + 1]
  1451 00001140 F2480F2CF8                      cvttsd2si rdi, xmm0
  1452 00001145 E8DA0B0000                      call make_integer
  1453                                          LEAVE
  1453 0000114A C9                  <1>  leave
  1454 0000114B C21800                          ret AND_KILL_FRAME(1)
  1455                                  
  1456                                  L_code_ptr_exit:
  1457                                          ENTER
  1457 0000114E C8000000            <1>  enter 0, 0
  1457 00001152 4883E4F0            <1>  and rsp, ~15
  1458 00001156 48837D1800                      cmp COUNT, 0
  1459 0000115B 0F851A0C0000                    jne L_error_arg_count_0
  1460 00001161 B800000000                      mov rax, 0
  1461 00001166 E8(00000000)                    call exit
  1462                                  
  1463                                  L_code_ptr_integer_to_real:
  1464                                          ENTER
  1464 0000116B C8000000            <1>  enter 0, 0
  1464 0000116F 4883E4F0            <1>  and rsp, ~15
  1465 00001173 48837D1801                      cmp COUNT, 1
  1466 00001178 0F85320C0000                    jne L_error_arg_count_1
  1467 0000117E 488B4520                        mov rax, PARAM(0)
  1468                                          assert_integer(rax)
  1468                              <1>  assert_rational(%1)
  1468 00001182 803811              <2>  cmp byte [%1], %2
  1468 00001185 0F85F90C0000        <2>  jne L_error_incorrect_type
  1468 0000118B 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
  1468 00001190 0F85EE0C0000        <1>  jne L_error_incorrect_type
  1469 00001196 FF7001                          push qword [rax + 1]
  1470 00001199 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1471 0000119F E8640B0000                      call make_real
  1472                                          LEAVE
  1472 000011A4 C9                  <1>  leave
  1473 000011A5 C21800                          ret AND_KILL_FRAME(1)
  1474                                  
  1475                                  L_code_ptr_rational_to_real:
  1476                                          ENTER
  1476 000011A8 C8000000            <1>  enter 0, 0
  1476 000011AC 4883E4F0            <1>  and rsp, ~15
  1477 000011B0 48837D1801                      cmp COUNT, 1
  1478 000011B5 0F85F50B0000                    jne L_error_arg_count_1
  1479 000011BB 488B4520                        mov rax, PARAM(0)
  1480                                          assert_rational(rax)
  1480 000011BF 803811              <1>  cmp byte [%1], %2
  1480 000011C2 0F85BC0C0000        <1>  jne L_error_incorrect_type
  1481 000011C8 FF7001                          push qword [rax + 1]
  1482 000011CB F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1483 000011D1 FF7009                          push qword [rax + 1 + 8]
  1484 000011D4 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1485 000011DA F20F5EC1                        divsd xmm0, xmm1
  1486 000011DE E8250B0000                      call make_real
  1487                                          LEAVE
  1487 000011E3 C9                  <1>  leave
  1488 000011E4 C21800                          ret AND_KILL_FRAME(1)
  1489                                  
  1490                                  L_code_ptr_char_to_integer:
  1491                                          ENTER
  1491 000011E7 C8000000            <1>  enter 0, 0
  1491 000011EB 4883E4F0            <1>  and rsp, ~15
  1492 000011EF 48837D1801                      cmp COUNT, 1
  1493 000011F4 0F85B60B0000                    jne L_error_arg_count_1
  1494 000011FA 488B4520                        mov rax, PARAM(0)
  1495                                          assert_char(rax)
  1495 000011FE 803802              <1>  cmp byte [%1], %2
  1495 00001201 0F857D0C0000        <1>  jne L_error_incorrect_type
  1496 00001207 8A4001                          mov al, byte [rax + 1]
  1497 0000120A 4825FF000000                    and rax, 255
  1498 00001210 4889C7                          mov rdi, rax
  1499 00001213 E80C0B0000                      call make_integer
  1500                                          LEAVE
  1500 00001218 C9                  <1>  leave
  1501 00001219 C21800                          ret AND_KILL_FRAME(1)
  1502                                  
  1503                                  L_code_ptr_integer_to_char:
  1504                                          ENTER
  1504 0000121C C8000000            <1>  enter 0, 0
  1504 00001220 4883E4F0            <1>  and rsp, ~15
  1505 00001224 48837D1801                      cmp COUNT, 1
  1506 00001229 0F85810B0000                    jne L_error_arg_count_1
  1507 0000122F 488B4520                        mov rax, PARAM(0)
  1508                                          assert_integer(rax)
  1508                              <1>  assert_rational(%1)
  1508 00001233 803811              <2>  cmp byte [%1], %2
  1508 00001236 0F85480C0000        <2>  jne L_error_incorrect_type
  1508 0000123C 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
  1508 00001241 0F853D0C0000        <1>  jne L_error_incorrect_type
  1509 00001247 488B5801                        mov rbx, qword [rax + 1]
  1510 0000124B 4883FB00                        cmp rbx, 0
  1511 0000124F 0F8EF50A0000                    jle L_error_integer_range
  1512 00001255 4881FB00010000                  cmp rbx, 256
  1513 0000125C 0F8DE80A0000                    jge L_error_integer_range
  1514 00001262 BF02000000                      mov rdi, (1 + 1)
  1515 00001267 E81EF4FFFF                      call malloc
  1516 0000126C C60002                          mov byte [rax], T_char
  1517 0000126F 885801                          mov byte [rax + 1], bl
  1518                                          LEAVE
  1518 00001272 C9                  <1>  leave
  1519 00001273 C21800                          ret AND_KILL_FRAME(1)
  1520                                  
  1521                                  L_code_ptr_trng:
  1522                                          ENTER
  1522 00001276 C8000000            <1>  enter 0, 0
  1522 0000127A 4883E4F0            <1>  and rsp, ~15
  1523 0000127E 48837D1800                      cmp COUNT, 0
  1524 00001283 0F85F20A0000                    jne L_error_arg_count_0
  1525 00001289 480FC7F7                        rdrand rdi
  1526 0000128D 48D1EF                          shr rdi, 1
  1527 00001290 E88F0A0000                      call make_integer
  1528                                          LEAVE
  1528 00001295 C9                  <1>  leave
  1529 00001296 C21000                          ret AND_KILL_FRAME(0)
  1530                                  
  1531                                  L_code_ptr_is_zero:
  1532                                          ENTER
  1532 00001299 C8000000            <1>  enter 0, 0
  1532 0000129D 4883E4F0            <1>  and rsp, ~15
  1533 000012A1 48837D1801                      cmp COUNT, 1
  1534 000012A6 0F85040B0000                    jne L_error_arg_count_1
  1535 000012AC 488B4520                        mov rax, PARAM(0)
  1536 000012B0 803811                          cmp byte [rax], T_rational
  1537 000012B3 740A                            je .L_rational
  1538 000012B5 803812                          cmp byte [rax], T_real
  1539 000012B8 740E                            je .L_real
  1540 000012BA E9C50B0000                      jmp L_error_incorrect_type
  1541                                  .L_rational:
  1542 000012BF 4883780100                      cmp qword [rax + 1], 0
  1543 000012C4 7420                            je .L_zero
  1544 000012C6 EB12                            jmp .L_not_zero
  1545                                  .L_real:
  1546 000012C8 660FEFC0                        pxor xmm0, xmm0
  1547 000012CC FF7001                          push qword [rax + 1]
  1548 000012CF F20F100C24                      movsd xmm1, qword [rsp]
  1549 000012D4 660F2EC1                        ucomisd xmm0, xmm1
  1550 000012D8 740C                            je .L_zero
  1551                                  .L_not_zero:
  1552 000012DA 48B8-                           mov rax, sob_boolean_false
  1552 000012DC [0200000000000000] 
  1553 000012E4 EB0A                            jmp .L_end
  1554                                  .L_zero:
  1555 000012E6 48B8-                           mov rax, sob_boolean_true
  1555 000012E8 [0300000000000000] 
  1556                                  .L_end:
  1557                                          LEAVE
  1557 000012F0 C9                  <1>  leave
  1558 000012F1 C21800                          ret AND_KILL_FRAME(1)
  1559                                  
  1560                                  L_code_ptr_is_integer:
  1561                                          ENTER
  1561 000012F4 C8000000            <1>  enter 0, 0
  1561 000012F8 4883E4F0            <1>  and rsp, ~15
  1562 000012FC 48837D1801                      cmp COUNT, 1
  1563 00001301 0F85A90A0000                    jne L_error_arg_count_1
  1564 00001307 488B4520                        mov rax, PARAM(0)
  1565 0000130B 803811                          cmp byte [rax], T_rational
  1566 0000130E 7513                            jne .L_false
  1567 00001310 4883780901                      cmp qword [rax + 1 + 8], 1
  1568 00001315 750C                            jne .L_false
  1569 00001317 48B8-                           mov rax, sob_boolean_true
  1569 00001319 [0300000000000000] 
  1570 00001321 EB0A                            jmp .L_exit
  1571                                  .L_false:
  1572 00001323 48B8-                           mov rax, sob_boolean_false
  1572 00001325 [0200000000000000] 
  1573                                  .L_exit:
  1574                                          LEAVE
  1574 0000132D C9                  <1>  leave
  1575 0000132E C21800                          ret AND_KILL_FRAME(1)
  1576                                  
  1577                                  L_code_ptr_raw_bin_add_rr:
  1578                                          ENTER
  1578 00001331 C8000000            <1>  enter 0, 0
  1578 00001335 4883E4F0            <1>  and rsp, ~15
  1579 00001339 48837D1802                      cmp COUNT, 2
  1580 0000133E 0F85A10A0000                    jne L_error_arg_count_2
  1581 00001344 488B5D20                        mov rbx, PARAM(0)
  1582                                          assert_real(rbx)
  1582 00001348 803B12              <1>  cmp byte [%1], %2
  1582 0000134B 0F85330B0000        <1>  jne L_error_incorrect_type
  1583 00001351 488B4D28                        mov rcx, PARAM(1)
  1584                                          assert_real(rcx)
  1584 00001355 803912              <1>  cmp byte [%1], %2
  1584 00001358 0F85260B0000        <1>  jne L_error_incorrect_type
  1585 0000135E F20F104301                      movsd xmm0, qword [rbx + 1]
  1586 00001363 F20F104901                      movsd xmm1, qword [rcx + 1]
  1587 00001368 F20F58C1                        addsd xmm0, xmm1
  1588 0000136C E897090000                      call make_real
  1589                                          LEAVE
  1589 00001371 C9                  <1>  leave
  1590 00001372 C22000                          ret AND_KILL_FRAME(2)
  1591                                  
  1592                                  L_code_ptr_raw_bin_sub_rr:
  1593                                          ENTER
  1593 00001375 C8000000            <1>  enter 0, 0
  1593 00001379 4883E4F0            <1>  and rsp, ~15
  1594 0000137D 48837D1802                      cmp COUNT, 2
  1595 00001382 0F855D0A0000                    jne L_error_arg_count_2
  1596 00001388 488B5D20                        mov rbx, PARAM(0)
  1597                                          assert_real(rbx)
  1597 0000138C 803B12              <1>  cmp byte [%1], %2
  1597 0000138F 0F85EF0A0000        <1>  jne L_error_incorrect_type
  1598 00001395 488B4D28                        mov rcx, PARAM(1)
  1599                                          assert_real(rcx)
  1599 00001399 803912              <1>  cmp byte [%1], %2
  1599 0000139C 0F85E20A0000        <1>  jne L_error_incorrect_type
  1600 000013A2 F20F104301                      movsd xmm0, qword [rbx + 1]
  1601 000013A7 F20F104901                      movsd xmm1, qword [rcx + 1]
  1602 000013AC F20F5CC1                        subsd xmm0, xmm1
  1603 000013B0 E853090000                      call make_real
  1604                                          LEAVE
  1604 000013B5 C9                  <1>  leave
  1605 000013B6 C22000                          ret AND_KILL_FRAME(2)
  1606                                  
  1607                                  L_code_ptr_raw_bin_mul_rr:
  1608                                          ENTER
  1608 000013B9 C8000000            <1>  enter 0, 0
  1608 000013BD 4883E4F0            <1>  and rsp, ~15
  1609 000013C1 48837D1802                      cmp COUNT, 2
  1610 000013C6 0F85190A0000                    jne L_error_arg_count_2
  1611 000013CC 488B5D20                        mov rbx, PARAM(0)
  1612                                          assert_real(rbx)
  1612 000013D0 803B12              <1>  cmp byte [%1], %2
  1612 000013D3 0F85AB0A0000        <1>  jne L_error_incorrect_type
  1613 000013D9 488B4D28                        mov rcx, PARAM(1)
  1614                                          assert_real(rcx)
  1614 000013DD 803912              <1>  cmp byte [%1], %2
  1614 000013E0 0F859E0A0000        <1>  jne L_error_incorrect_type
  1615 000013E6 F20F104301                      movsd xmm0, qword [rbx + 1]
  1616 000013EB F20F104901                      movsd xmm1, qword [rcx + 1]
  1617 000013F0 F20F59C1                        mulsd xmm0, xmm1
  1618 000013F4 E80F090000                      call make_real
  1619                                          LEAVE
  1619 000013F9 C9                  <1>  leave
  1620 000013FA C22000                          ret AND_KILL_FRAME(2)
  1621                                  
  1622                                  L_code_ptr_raw_bin_div_rr:
  1623                                          ENTER
  1623 000013FD C8000000            <1>  enter 0, 0
  1623 00001401 4883E4F0            <1>  and rsp, ~15
  1624 00001405 48837D1802                      cmp COUNT, 2
  1625 0000140A 0F85D5090000                    jne L_error_arg_count_2
  1626 00001410 488B5D20                        mov rbx, PARAM(0)
  1627                                          assert_real(rbx)
  1627 00001414 803B12              <1>  cmp byte [%1], %2
  1627 00001417 0F85670A0000        <1>  jne L_error_incorrect_type
  1628 0000141D 488B4D28                        mov rcx, PARAM(1)
  1629                                          assert_real(rcx)
  1629 00001421 803912              <1>  cmp byte [%1], %2
  1629 00001424 0F855A0A0000        <1>  jne L_error_incorrect_type
  1630 0000142A F20F104301                      movsd xmm0, qword [rbx + 1]
  1631 0000142F F20F104901                      movsd xmm1, qword [rcx + 1]
  1632 00001434 660FEFD2                        pxor xmm2, xmm2
  1633 00001438 660F2ECA                        ucomisd xmm1, xmm2
  1634 0000143C 0F84730A0000                    je L_error_division_by_zero
  1635 00001442 F20F5EC1                        divsd xmm0, xmm1
  1636 00001446 E8BD080000                      call make_real
  1637                                          LEAVE
  1637 0000144B C9                  <1>  leave
  1638 0000144C C22000                          ret AND_KILL_FRAME(2)
  1639                                  
  1640                                  L_code_ptr_raw_bin_add_qq:
  1641                                          ENTER
  1641 0000144F C8000000            <1>  enter 0, 0
  1641 00001453 4883E4F0            <1>  and rsp, ~15
  1642 00001457 48837D1802                      cmp COUNT, 2
  1643 0000145C 0F8583090000                    jne L_error_arg_count_2
  1644 00001462 4C8B4520                        mov r8, PARAM(0)
  1645                                          assert_rational(r8)
  1645 00001466 41803811            <1>  cmp byte [%1], %2
  1645 0000146A 0F85140A0000        <1>  jne L_error_incorrect_type
  1646 00001470 4C8B4D28                        mov r9, PARAM(1)
  1647                                          assert_rational(r9)
  1647 00001474 41803911            <1>  cmp byte [%1], %2
  1647 00001478 0F85060A0000        <1>  jne L_error_incorrect_type
  1648 0000147E 498B4001                        mov rax, qword [r8 + 1] ; num1
  1649 00001482 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1650 00001486 4899                            cqo
  1651 00001488 48F7EB                          imul rbx
  1652 0000148B 4889C6                          mov rsi, rax
  1653 0000148E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1654 00001492 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1655 00001496 4899                            cqo
  1656 00001498 48F7EB                          imul rbx
  1657 0000149B 4801C6                          add rsi, rax
  1658 0000149E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1659 000014A2 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1660 000014A6 4899                            cqo
  1661 000014A8 48F7EB                          imul rbx
  1662 000014AB 4889C7                          mov rdi, rax
  1663 000014AE E827010000                      call normalize_rational
  1664                                          LEAVE
  1664 000014B3 C9                  <1>  leave
  1665 000014B4 C22000                          ret AND_KILL_FRAME(2)
  1666                                  
  1667                                  L_code_ptr_raw_bin_sub_qq:
  1668                                          ENTER
  1668 000014B7 C8000000            <1>  enter 0, 0
  1668 000014BB 4883E4F0            <1>  and rsp, ~15
  1669 000014BF 48837D1802                      cmp COUNT, 2
  1670 000014C4 0F851B090000                    jne L_error_arg_count_2
  1671 000014CA 4C8B4520                        mov r8, PARAM(0)
  1672                                          assert_rational(r8)
  1672 000014CE 41803811            <1>  cmp byte [%1], %2
  1672 000014D2 0F85AC090000        <1>  jne L_error_incorrect_type
  1673 000014D8 4C8B4D28                        mov r9, PARAM(1)
  1674                                          assert_rational(r9)
  1674 000014DC 41803911            <1>  cmp byte [%1], %2
  1674 000014E0 0F859E090000        <1>  jne L_error_incorrect_type
  1675 000014E6 498B4001                        mov rax, qword [r8 + 1] ; num1
  1676 000014EA 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1677 000014EE 4899                            cqo
  1678 000014F0 48F7EB                          imul rbx
  1679 000014F3 4889C6                          mov rsi, rax
  1680 000014F6 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1681 000014FA 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1682 000014FE 4899                            cqo
  1683 00001500 48F7EB                          imul rbx
  1684 00001503 4829C6                          sub rsi, rax
  1685 00001506 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1686 0000150A 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1687 0000150E 4899                            cqo
  1688 00001510 48F7EB                          imul rbx
  1689 00001513 4889C7                          mov rdi, rax
  1690 00001516 E8BF000000                      call normalize_rational
  1691                                          LEAVE
  1691 0000151B C9                  <1>  leave
  1692 0000151C C22000                          ret AND_KILL_FRAME(2)
  1693                                  
  1694                                  L_code_ptr_raw_bin_mul_qq:
  1695                                          ENTER
  1695 0000151F C8000000            <1>  enter 0, 0
  1695 00001523 4883E4F0            <1>  and rsp, ~15
  1696 00001527 48837D1802                      cmp COUNT, 2
  1697 0000152C 0F85B3080000                    jne L_error_arg_count_2
  1698 00001532 4C8B4520                        mov r8, PARAM(0)
  1699                                          assert_rational(r8)
  1699 00001536 41803811            <1>  cmp byte [%1], %2
  1699 0000153A 0F8544090000        <1>  jne L_error_incorrect_type
  1700 00001540 4C8B4D28                        mov r9, PARAM(1)
  1701                                          assert_rational(r9)
  1701 00001544 41803911            <1>  cmp byte [%1], %2
  1701 00001548 0F8536090000        <1>  jne L_error_incorrect_type
  1702 0000154E 498B4001                        mov rax, qword [r8 + 1] ; num1
  1703 00001552 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1704 00001556 4899                            cqo
  1705 00001558 48F7EB                          imul rbx
  1706 0000155B 4889C6                          mov rsi, rax
  1707 0000155E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1708 00001562 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1709 00001566 4899                            cqo
  1710 00001568 48F7EB                          imul rbx
  1711 0000156B 4889C7                          mov rdi, rax
  1712 0000156E E867000000                      call normalize_rational
  1713                                          LEAVE
  1713 00001573 C9                  <1>  leave
  1714 00001574 C22000                          ret AND_KILL_FRAME(2)
  1715                                          
  1716                                  L_code_ptr_raw_bin_div_qq:
  1717                                          ENTER
  1717 00001577 C8000000            <1>  enter 0, 0
  1717 0000157B 4883E4F0            <1>  and rsp, ~15
  1718 0000157F 48837D1802                      cmp COUNT, 2
  1719 00001584 0F855B080000                    jne L_error_arg_count_2
  1720 0000158A 4C8B4520                        mov r8, PARAM(0)
  1721                                          assert_rational(r8)
  1721 0000158E 41803811            <1>  cmp byte [%1], %2
  1721 00001592 0F85EC080000        <1>  jne L_error_incorrect_type
  1722 00001598 4C8B4D28                        mov r9, PARAM(1)
  1723                                          assert_rational(r9)
  1723 0000159C 41803911            <1>  cmp byte [%1], %2
  1723 000015A0 0F85DE080000        <1>  jne L_error_incorrect_type
  1724 000015A6 4983790100                      cmp qword [r9 + 1], 0
  1725 000015AB 0F8404090000                    je L_error_division_by_zero
  1726 000015B1 498B4001                        mov rax, qword [r8 + 1] ; num1
  1727 000015B5 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1728 000015B9 4899                            cqo
  1729 000015BB 48F7EB                          imul rbx
  1730 000015BE 4889C6                          mov rsi, rax
  1731 000015C1 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1732 000015C5 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1733 000015C9 4899                            cqo
  1734 000015CB 48F7EB                          imul rbx
  1735 000015CE 4889C7                          mov rdi, rax
  1736 000015D1 E804000000                      call normalize_rational
  1737                                          LEAVE
  1737 000015D6 C9                  <1>  leave
  1738 000015D7 C22000                          ret AND_KILL_FRAME(2)
  1739                                          
  1740                                  normalize_rational:
  1741 000015DA 56                              push rsi
  1742 000015DB 57                              push rdi
  1743 000015DC E839000000                      call gcd
  1744 000015E1 4889C3                          mov rbx, rax
  1745 000015E4 58                              pop rax
  1746 000015E5 4899                            cqo
  1747 000015E7 48F7FB                          idiv rbx
  1748 000015EA 4989C0                          mov r8, rax
  1749 000015ED 58                              pop rax
  1750 000015EE 4899                            cqo
  1751 000015F0 48F7FB                          idiv rbx
  1752 000015F3 4989C1                          mov r9, rax
  1753 000015F6 BF11000000                      mov rdi, (1 + 8 + 8)
  1754 000015FB E88AF0FFFF                      call malloc
  1755 00001600 C60011                          mov byte [rax], T_rational
  1756 00001603 4C894801                        mov qword [rax + 1], r9
  1757 00001607 4C894009                        mov qword [rax + 1 + 8], r8
  1758 0000160B C3                              ret
  1759                                  
  1760                                  iabs:
  1761 0000160C 4889F8                          mov rax, rdi
  1762 0000160F 4883F800                        cmp rax, 0
  1763 00001613 7C01                            jl .Lneg
  1764 00001615 C3                              ret
  1765                                  .Lneg:
  1766 00001616 48F7D8                          neg rax
  1767 00001619 C3                              ret
  1768                                  
  1769                                  gcd:
  1770 0000161A E8EDFFFFFF                      call iabs
  1771 0000161F 4889C3                          mov rbx, rax
  1772 00001622 4889F7                          mov rdi, rsi
  1773 00001625 E8E2FFFFFF                      call iabs
  1774 0000162A 4883F800                        cmp rax, 0
  1775 0000162E 7502                            jne .L0
  1776 00001630 4893                            xchg rax, rbx
  1777                                  .L0:
  1778 00001632 4883FB00                        cmp rbx, 0
  1779 00001636 740C                            je .L1
  1780 00001638 4899                            cqo
  1781 0000163A 48F7F3                          div rbx
  1782 0000163D 4889D0                          mov rax, rdx
  1783 00001640 4893                            xchg rax, rbx
  1784 00001642 EBEE                            jmp .L0
  1785                                  .L1:
  1786 00001644 C3                              ret
  1787                                  
  1788                                  L_code_ptr_error:
  1789                                          ENTER
  1789 00001645 C8000000            <1>  enter 0, 0
  1789 00001649 4883E4F0            <1>  and rsp, ~15
  1790 0000164D 48837D1802                      cmp COUNT, 2
  1791 00001652 0F858D070000                    jne L_error_arg_count_2
  1792 00001658 488B7520                        mov rsi, PARAM(0)
  1793                                          assert_symbol(rsi)
  1793 0000165C 803E04              <1>  cmp byte [%1], %2
  1793 0000165F 0F851F080000        <1>  jne L_error_incorrect_type
  1794 00001665 488B7528                        mov rsi, PARAM(1)
  1795                                          assert_string(rsi)
  1795 00001669 803E03              <1>  cmp byte [%1], %2
  1795 0000166C 0F8512080000        <1>  jne L_error_incorrect_type
  1796 00001672 48BF-                           mov rdi, fmt_scheme_error_part_1
  1796 00001674 [9103000000000000] 
  1797 0000167C B800000000                      mov rax, 0
  1798                                  	ENTER
  1798 00001681 C8000000            <1>  enter 0, 0
  1798 00001685 4883E4F0            <1>  and rsp, ~15
  1799 00001689 E8(00000000)                    call printf
  1800                                  	LEAVE
  1800 0000168E C9                  <1>  leave
  1801 0000168F 488B7D20                        mov rdi, PARAM(0)
  1802 00001693 E80DF0FFFF                      call print_sexpr
  1803 00001698 48BF-                           mov rdi, fmt_scheme_error_part_2
  1803 0000169A [A503000000000000] 
  1804 000016A2 B800000000                      mov rax, 0
  1805                                  	ENTER
  1805 000016A7 C8000000            <1>  enter 0, 0
  1805 000016AB 4883E4F0            <1>  and rsp, ~15
  1806 000016AF E8(00000000)                    call printf
  1807                                  	LEAVE
  1807 000016B4 C9                  <1>  leave
  1808 000016B5 488B4528                        mov rax, PARAM(1)       ; sob_string
  1809 000016B9 BE01000000                      mov rsi, 1              ; size = 1 byte
  1810 000016BE 488B5001                        mov rdx, qword [rax + 1] ; length
  1811 000016C2 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1812 000016C6 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1813 000016CE E8(00000000)                    call fwrite
  1814 000016D3 48BF-                           mov rdi, fmt_scheme_error_part_3
  1814 000016D5 [E703000000000000] 
  1815 000016DD B800000000                      mov rax, 0
  1816                                  	ENTER
  1816 000016E2 C8000000            <1>  enter 0, 0
  1816 000016E6 4883E4F0            <1>  and rsp, ~15
  1817 000016EA E8(00000000)                    call printf
  1818                                  	LEAVE
  1818 000016EF C9                  <1>  leave
  1819 000016F0 48C7C0F7FFFFFF                  mov rax, -9
  1820 000016F7 E8(00000000)                    call exit
  1821                                  
  1822                                  L_code_ptr_raw_less_than_rr:
  1823                                          ENTER
  1823 000016FC C8000000            <1>  enter 0, 0
  1823 00001700 4883E4F0            <1>  and rsp, ~15
  1824 00001704 48837D1802                      cmp COUNT, 2
  1825 00001709 0F85D6060000                    jne L_error_arg_count_2
  1826 0000170F 488B7520                        mov rsi, PARAM(0)
  1827                                          assert_real(rsi)
  1827 00001713 803E12              <1>  cmp byte [%1], %2
  1827 00001716 0F8568070000        <1>  jne L_error_incorrect_type
  1828 0000171C 488B7D28                        mov rdi, PARAM(1)
  1829                                          assert_real(rdi)
  1829 00001720 803F12              <1>  cmp byte [%1], %2
  1829 00001723 0F855B070000        <1>  jne L_error_incorrect_type
  1830 00001729 F20F104601                      movsd xmm0, qword [rsi + 1]
  1831 0000172E F20F104F01                      movsd xmm1, qword [rdi + 1]
  1832 00001733 660F2FC1                        comisd xmm0, xmm1
  1833 00001737 730C                            jae .L_false
  1834 00001739 48B8-                           mov rax, sob_boolean_true
  1834 0000173B [0300000000000000] 
  1835 00001743 EB0A                            jmp .L_exit
  1836                                  .L_false:
  1837 00001745 48B8-                           mov rax, sob_boolean_false
  1837 00001747 [0200000000000000] 
  1838                                  .L_exit:
  1839                                          LEAVE
  1839 0000174F C9                  <1>  leave
  1840 00001750 C22000                          ret AND_KILL_FRAME(2)
  1841                                          
  1842                                  L_code_ptr_raw_less_than_qq:
  1843                                          ENTER
  1843 00001753 C8000000            <1>  enter 0, 0
  1843 00001757 4883E4F0            <1>  and rsp, ~15
  1844 0000175B 48837D1802                      cmp COUNT, 2
  1845 00001760 0F857F060000                    jne L_error_arg_count_2
  1846 00001766 488B7520                        mov rsi, PARAM(0)
  1847                                          assert_rational(rsi)
  1847 0000176A 803E11              <1>  cmp byte [%1], %2
  1847 0000176D 0F8511070000        <1>  jne L_error_incorrect_type
  1848 00001773 488B7D28                        mov rdi, PARAM(1)
  1849                                          assert_rational(rdi)
  1849 00001777 803F11              <1>  cmp byte [%1], %2
  1849 0000177A 0F8504070000        <1>  jne L_error_incorrect_type
  1850 00001780 488B4601                        mov rax, qword [rsi + 1] ; num1
  1851 00001784 4899                            cqo
  1852 00001786 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1853 0000178A 4889C1                          mov rcx, rax
  1854 0000178D 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1855 00001791 4899                            cqo
  1856 00001793 48F76F01                        imul qword [rdi + 1]          ; num2
  1857 00001797 4829C1                          sub rcx, rax
  1858 0000179A 7D0C                            jge .L_false
  1859 0000179C 48B8-                           mov rax, sob_boolean_true
  1859 0000179E [0300000000000000] 
  1860 000017A6 EB0A                            jmp .L_exit
  1861                                  .L_false:
  1862 000017A8 48B8-                           mov rax, sob_boolean_false
  1862 000017AA [0200000000000000] 
  1863                                  .L_exit:
  1864                                          LEAVE
  1864 000017B2 C9                  <1>  leave
  1865 000017B3 C22000                          ret AND_KILL_FRAME(2)
  1866                                  
  1867                                  L_code_ptr_raw_equal_rr:
  1868                                          ENTER
  1868 000017B6 C8000000            <1>  enter 0, 0
  1868 000017BA 4883E4F0            <1>  and rsp, ~15
  1869 000017BE 48837D1802                      cmp COUNT, 2
  1870 000017C3 0F851C060000                    jne L_error_arg_count_2
  1871 000017C9 488B7520                        mov rsi, PARAM(0)
  1872                                          assert_real(rsi)
  1872 000017CD 803E12              <1>  cmp byte [%1], %2
  1872 000017D0 0F85AE060000        <1>  jne L_error_incorrect_type
  1873 000017D6 488B7D28                        mov rdi, PARAM(1)
  1874                                          assert_real(rdi)
  1874 000017DA 803F12              <1>  cmp byte [%1], %2
  1874 000017DD 0F85A1060000        <1>  jne L_error_incorrect_type
  1875 000017E3 F20F104601                      movsd xmm0, qword [rsi + 1]
  1876 000017E8 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1877 000017ED 660F2FC1                        comisd xmm0, xmm1
  1878 000017F1 750C                            jne .L_false
  1879 000017F3 48B8-                           mov rax, sob_boolean_true
  1879 000017F5 [0300000000000000] 
  1880 000017FD EB0A                            jmp .L_exit
  1881                                  .L_false:
  1882 000017FF 48B8-                           mov rax, sob_boolean_false
  1882 00001801 [0200000000000000] 
  1883                                  .L_exit:
  1884                                          LEAVE
  1884 00001809 C9                  <1>  leave
  1885 0000180A C22000                          ret AND_KILL_FRAME(2)
  1886                                          
  1887                                  L_code_ptr_raw_equal_qq:
  1888                                          ENTER
  1888 0000180D C8000000            <1>  enter 0, 0
  1888 00001811 4883E4F0            <1>  and rsp, ~15
  1889 00001815 48837D1802                      cmp COUNT, 2
  1890 0000181A 0F85C5050000                    jne L_error_arg_count_2
  1891 00001820 488B7520                        mov rsi, PARAM(0)
  1892                                          assert_rational(rsi)
  1892 00001824 803E11              <1>  cmp byte [%1], %2
  1892 00001827 0F8557060000        <1>  jne L_error_incorrect_type
  1893 0000182D 488B7D28                        mov rdi, PARAM(1)
  1894                                          assert_rational(rdi)
  1894 00001831 803F11              <1>  cmp byte [%1], %2
  1894 00001834 0F854A060000        <1>  jne L_error_incorrect_type
  1895 0000183A 488B4601                        mov rax, qword [rsi + 1] ; num1
  1896 0000183E 4899                            cqo
  1897 00001840 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1898 00001844 4889C1                          mov rcx, rax
  1899 00001847 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1900 0000184B 4899                            cqo
  1901 0000184D 48F76F01                        imul qword [rdi + 1]          ; num2
  1902 00001851 4829C1                          sub rcx, rax
  1903 00001854 750C                            jne .L_false
  1904 00001856 48B8-                           mov rax, sob_boolean_true
  1904 00001858 [0300000000000000] 
  1905 00001860 EB0A                            jmp .L_exit
  1906                                  .L_false:
  1907 00001862 48B8-                           mov rax, sob_boolean_false
  1907 00001864 [0200000000000000] 
  1908                                  .L_exit:
  1909                                          LEAVE
  1909 0000186C C9                  <1>  leave
  1910 0000186D C22000                          ret AND_KILL_FRAME(2)
  1911                                  
  1912                                  L_code_ptr_quotient:
  1913                                          ENTER
  1913 00001870 C8000000            <1>  enter 0, 0
  1913 00001874 4883E4F0            <1>  and rsp, ~15
  1914 00001878 48837D1802                      cmp COUNT, 2
  1915 0000187D 0F8562050000                    jne L_error_arg_count_2
  1916 00001883 488B7520                        mov rsi, PARAM(0)
  1917                                          assert_integer(rsi)
  1917                              <1>  assert_rational(%1)
  1917 00001887 803E11              <2>  cmp byte [%1], %2
  1917 0000188A 0F85F4050000        <2>  jne L_error_incorrect_type
  1917 00001890 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  1917 00001895 0F85E9050000        <1>  jne L_error_incorrect_type
  1918 0000189B 488B7D28                        mov rdi, PARAM(1)
  1919                                          assert_integer(rdi)
  1919                              <1>  assert_rational(%1)
  1919 0000189F 803F11              <2>  cmp byte [%1], %2
  1919 000018A2 0F85DC050000        <2>  jne L_error_incorrect_type
  1919 000018A8 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
  1919 000018AD 0F85D1050000        <1>  jne L_error_incorrect_type
  1920 000018B3 488B4601                        mov rax, qword [rsi + 1]
  1921 000018B7 488B5F01                        mov rbx, qword [rdi + 1]
  1922 000018BB 4883FB00                        cmp rbx, 0
  1923 000018BF 0F84F0050000                    je L_error_division_by_zero
  1924 000018C5 4899                            cqo
  1925 000018C7 48F7FB                          idiv rbx
  1926 000018CA 4889C7                          mov rdi, rax
  1927 000018CD E852040000                      call make_integer
  1928                                          LEAVE
  1928 000018D2 C9                  <1>  leave
  1929 000018D3 C22000                          ret AND_KILL_FRAME(2)
  1930                                          
  1931                                  L_code_ptr_remainder:
  1932                                          ENTER
  1932 000018D6 C8000000            <1>  enter 0, 0
  1932 000018DA 4883E4F0            <1>  and rsp, ~15
  1933 000018DE 48837D1802                      cmp COUNT, 2
  1934 000018E3 0F85FC040000                    jne L_error_arg_count_2
  1935 000018E9 488B7520                        mov rsi, PARAM(0)
  1936                                          assert_integer(rsi)
  1936                              <1>  assert_rational(%1)
  1936 000018ED 803E11              <2>  cmp byte [%1], %2
  1936 000018F0 0F858E050000        <2>  jne L_error_incorrect_type
  1936 000018F6 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  1936 000018FB 0F8583050000        <1>  jne L_error_incorrect_type
  1937 00001901 488B7D28                        mov rdi, PARAM(1)
  1938                                          assert_integer(rdi)
  1938                              <1>  assert_rational(%1)
  1938 00001905 803F11              <2>  cmp byte [%1], %2
  1938 00001908 0F8576050000        <2>  jne L_error_incorrect_type
  1938 0000190E 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
  1938 00001913 0F856B050000        <1>  jne L_error_incorrect_type
  1939 00001919 488B4601                        mov rax, qword [rsi + 1]
  1940 0000191D 488B5F01                        mov rbx, qword [rdi + 1]
  1941 00001921 4883FB00                        cmp rbx, 0
  1942 00001925 0F848A050000                    je L_error_division_by_zero
  1943 0000192B 4899                            cqo
  1944 0000192D 48F7FB                          idiv rbx
  1945 00001930 4889D7                          mov rdi, rdx
  1946 00001933 E8EC030000                      call make_integer
  1947                                          LEAVE
  1947 00001938 C9                  <1>  leave
  1948 00001939 C22000                          ret AND_KILL_FRAME(2)
  1949                                  
  1950                                  L_code_ptr_set_car:
  1951                                          ENTER
  1951 0000193C C8000000            <1>  enter 0, 0
  1951 00001940 4883E4F0            <1>  and rsp, ~15
  1952 00001944 48837D1802                      cmp COUNT, 2
  1953 00001949 0F8596040000                    jne L_error_arg_count_2
  1954 0000194F 488B4520                        mov rax, PARAM(0)
  1955                                          assert_pair(rax)
  1955 00001953 803821              <1>  cmp byte [%1], %2
  1955 00001956 0F8528050000        <1>  jne L_error_incorrect_type
  1956 0000195C 488B5D28                        mov rbx, PARAM(1)
  1957 00001960 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1958 00001964 48B8-                           mov rax, sob_void
  1958 00001966 [0000000000000000] 
  1959                                          LEAVE
  1959 0000196E C9                  <1>  leave
  1960 0000196F C22000                          ret AND_KILL_FRAME(2)
  1961                                  
  1962                                  L_code_ptr_set_cdr:
  1963                                          ENTER
  1963 00001972 C8000000            <1>  enter 0, 0
  1963 00001976 4883E4F0            <1>  and rsp, ~15
  1964 0000197A 48837D1802                      cmp COUNT, 2
  1965 0000197F 0F8560040000                    jne L_error_arg_count_2
  1966 00001985 488B4520                        mov rax, PARAM(0)
  1967                                          assert_pair(rax)
  1967 00001989 803821              <1>  cmp byte [%1], %2
  1967 0000198C 0F85F2040000        <1>  jne L_error_incorrect_type
  1968 00001992 488B5D28                        mov rbx, PARAM(1)
  1969 00001996 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1970 0000199A 48B8-                           mov rax, sob_void
  1970 0000199C [0000000000000000] 
  1971                                          LEAVE
  1971 000019A4 C9                  <1>  leave
  1972 000019A5 C22000                          ret AND_KILL_FRAME(2)
  1973                                  
  1974                                  L_code_ptr_string_ref:
  1975                                          ENTER
  1975 000019A8 C8000000            <1>  enter 0, 0
  1975 000019AC 4883E4F0            <1>  and rsp, ~15
  1976 000019B0 48837D1802                      cmp COUNT, 2
  1977 000019B5 0F852A040000                    jne L_error_arg_count_2
  1978 000019BB 488B7D20                        mov rdi, PARAM(0)
  1979                                          assert_string(rdi)
  1979 000019BF 803F03              <1>  cmp byte [%1], %2
  1979 000019C2 0F85BC040000        <1>  jne L_error_incorrect_type
  1980 000019C8 488B7528                        mov rsi, PARAM(1)
  1981                                          assert_integer(rsi)
  1981                              <1>  assert_rational(%1)
  1981 000019CC 803E11              <2>  cmp byte [%1], %2
  1981 000019CF 0F85AF040000        <2>  jne L_error_incorrect_type
  1981 000019D5 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  1981 000019DA 0F85A4040000        <1>  jne L_error_incorrect_type
  1982 000019E0 488B5701                        mov rdx, qword [rdi + 1]
  1983 000019E4 488B4E01                        mov rcx, qword [rsi + 1]
  1984 000019E8 4839D1                          cmp rcx, rdx
  1985 000019EB 0F8D59030000                    jge L_error_integer_range
  1986 000019F1 4883F900                        cmp rcx, 0
  1987 000019F5 0F8C4F030000                    jl L_error_integer_range
  1988 000019FB 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  1989 000019FF BF02000000                      mov rdi, 2
  1990 00001A04 E881ECFFFF                      call malloc
  1991 00001A09 C60002                          mov byte [rax], T_char
  1992 00001A0C 885801                          mov byte [rax + 1], bl
  1993                                          LEAVE
  1993 00001A0F C9                  <1>  leave
  1994 00001A10 C22000                          ret AND_KILL_FRAME(2)
  1995                                  
  1996                                  L_code_ptr_vector_ref:
  1997                                          ENTER
  1997 00001A13 C8000000            <1>  enter 0, 0
  1997 00001A17 4883E4F0            <1>  and rsp, ~15
  1998 00001A1B 48837D1802                      cmp COUNT, 2
  1999 00001A20 0F85BF030000                    jne L_error_arg_count_2
  2000 00001A26 488B7D20                        mov rdi, PARAM(0)
  2001                                          assert_vector(rdi)
  2001 00001A2A 803F22              <1>  cmp byte [%1], %2
  2001 00001A2D 0F8551040000        <1>  jne L_error_incorrect_type
  2002 00001A33 488B7528                        mov rsi, PARAM(1)
  2003                                          assert_integer(rsi)
  2003                              <1>  assert_rational(%1)
  2003 00001A37 803E11              <2>  cmp byte [%1], %2
  2003 00001A3A 0F8544040000        <2>  jne L_error_incorrect_type
  2003 00001A40 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2003 00001A45 0F8539040000        <1>  jne L_error_incorrect_type
  2004 00001A4B 488B5701                        mov rdx, qword [rdi + 1]
  2005 00001A4F 488B4E01                        mov rcx, qword [rsi + 1]
  2006 00001A53 4839D1                          cmp rcx, rdx
  2007 00001A56 0F8DEE020000                    jge L_error_integer_range
  2008 00001A5C 4883F900                        cmp rcx, 0
  2009 00001A60 0F8CE4020000                    jl L_error_integer_range
  2010 00001A66 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2011                                          LEAVE
  2011 00001A6B C9                  <1>  leave
  2012 00001A6C C22000                          ret AND_KILL_FRAME(2)
  2013                                  
  2014                                  L_code_ptr_vector_set:
  2015                                          ENTER
  2015 00001A6F C8000000            <1>  enter 0, 0
  2015 00001A73 4883E4F0            <1>  and rsp, ~15
  2016 00001A77 48837D1803                      cmp COUNT, 3
  2017 00001A7C 0F85CD030000                    jne L_error_arg_count_3
  2018 00001A82 488B7D20                        mov rdi, PARAM(0)
  2019                                          assert_vector(rdi)
  2019 00001A86 803F22              <1>  cmp byte [%1], %2
  2019 00001A89 0F85F5030000        <1>  jne L_error_incorrect_type
  2020 00001A8F 488B7528                        mov rsi, PARAM(1)
  2021                                          assert_integer(rsi)
  2021                              <1>  assert_rational(%1)
  2021 00001A93 803E11              <2>  cmp byte [%1], %2
  2021 00001A96 0F85E8030000        <2>  jne L_error_incorrect_type
  2021 00001A9C 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2021 00001AA1 0F85DD030000        <1>  jne L_error_incorrect_type
  2022 00001AA7 488B5701                        mov rdx, qword [rdi + 1]
  2023 00001AAB 488B4E01                        mov rcx, qword [rsi + 1]
  2024 00001AAF 4839D1                          cmp rcx, rdx
  2025 00001AB2 0F8D92020000                    jge L_error_integer_range
  2026 00001AB8 4883F900                        cmp rcx, 0
  2027 00001ABC 0F8C88020000                    jl L_error_integer_range
  2028 00001AC2 488B4530                        mov rax, PARAM(2)
  2029 00001AC6 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2030 00001ACB 48B8-                           mov rax, sob_void
  2030 00001ACD [0000000000000000] 
  2031                                          LEAVE
  2031 00001AD5 C9                  <1>  leave
  2032 00001AD6 C22800                          ret AND_KILL_FRAME(3)
  2033                                  
  2034                                  L_code_ptr_string_set:
  2035                                          ENTER
  2035 00001AD9 C8000000            <1>  enter 0, 0
  2035 00001ADD 4883E4F0            <1>  and rsp, ~15
  2036 00001AE1 48837D1803                      cmp COUNT, 3
  2037 00001AE6 0F8563030000                    jne L_error_arg_count_3
  2038 00001AEC 488B7D20                        mov rdi, PARAM(0)
  2039                                          assert_string(rdi)
  2039 00001AF0 803F03              <1>  cmp byte [%1], %2
  2039 00001AF3 0F858B030000        <1>  jne L_error_incorrect_type
  2040 00001AF9 488B7528                        mov rsi, PARAM(1)
  2041                                          assert_integer(rsi)
  2041                              <1>  assert_rational(%1)
  2041 00001AFD 803E11              <2>  cmp byte [%1], %2
  2041 00001B00 0F857E030000        <2>  jne L_error_incorrect_type
  2041 00001B06 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2041 00001B0B 0F8573030000        <1>  jne L_error_incorrect_type
  2042 00001B11 488B5701                        mov rdx, qword [rdi + 1]
  2043 00001B15 488B4E01                        mov rcx, qword [rsi + 1]
  2044 00001B19 4839D1                          cmp rcx, rdx
  2045 00001B1C 0F8D28020000                    jge L_error_integer_range
  2046 00001B22 4883F900                        cmp rcx, 0
  2047 00001B26 0F8C1E020000                    jl L_error_integer_range
  2048 00001B2C 488B4530                        mov rax, PARAM(2)
  2049                                          assert_char(rax)
  2049 00001B30 803802              <1>  cmp byte [%1], %2
  2049 00001B33 0F854B030000        <1>  jne L_error_incorrect_type
  2050 00001B39 8A4001                          mov al, byte [rax + 1]
  2051 00001B3C 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2052 00001B40 48B8-                           mov rax, sob_void
  2052 00001B42 [0000000000000000] 
  2053                                          LEAVE
  2053 00001B4A C9                  <1>  leave
  2054 00001B4B C22800                          ret AND_KILL_FRAME(3)
  2055                                  
  2056                                  L_code_ptr_make_vector:
  2057                                          ENTER
  2057 00001B4E C8000000            <1>  enter 0, 0
  2057 00001B52 4883E4F0            <1>  and rsp, ~15
  2058 00001B56 48837D1802                      cmp COUNT, 2
  2059 00001B5B 0F8584020000                    jne L_error_arg_count_2
  2060 00001B61 488B4D20                        mov rcx, PARAM(0)
  2061                                          assert_integer(rcx)
  2061                              <1>  assert_rational(%1)
  2061 00001B65 803911              <2>  cmp byte [%1], %2
  2061 00001B68 0F8516030000        <2>  jne L_error_incorrect_type
  2061 00001B6E 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
  2061 00001B73 0F850B030000        <1>  jne L_error_incorrect_type
  2062 00001B79 488B4901                        mov rcx, qword [rcx + 1]
  2063 00001B7D 4883F900                        cmp rcx, 0
  2064 00001B81 0F8CC3010000                    jl L_error_integer_range
  2065 00001B87 488B5528                        mov rdx, PARAM(1)
  2066 00001B8B 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2067 00001B93 E8F2EAFFFF                      call malloc
  2068 00001B98 C60022                          mov byte [rax], T_vector
  2069 00001B9B 48894801                        mov qword [rax + 1], rcx
  2070 00001B9F 41B800000000                    mov r8, 0
  2071                                  .L0:
  2072 00001BA5 4939C8                          cmp r8, rcx
  2073 00001BA8 740A                            je .L1
  2074 00001BAA 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2075 00001BAF 49FFC0                          inc r8
  2076 00001BB2 EBF1                            jmp .L0
  2077                                  .L1:
  2078                                          LEAVE
  2078 00001BB4 C9                  <1>  leave
  2079 00001BB5 C22000                          ret AND_KILL_FRAME(2)
  2080                                          
  2081                                  L_code_ptr_make_string:
  2082                                          ENTER
  2082 00001BB8 C8000000            <1>  enter 0, 0
  2082 00001BBC 4883E4F0            <1>  and rsp, ~15
  2083 00001BC0 48837D1802                      cmp COUNT, 2
  2084 00001BC5 0F851A020000                    jne L_error_arg_count_2
  2085 00001BCB 488B4D20                        mov rcx, PARAM(0)
  2086                                          assert_integer(rcx)
  2086                              <1>  assert_rational(%1)
  2086 00001BCF 803911              <2>  cmp byte [%1], %2
  2086 00001BD2 0F85AC020000        <2>  jne L_error_incorrect_type
  2086 00001BD8 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
  2086 00001BDD 0F85A1020000        <1>  jne L_error_incorrect_type
  2087 00001BE3 488B4901                        mov rcx, qword [rcx + 1]
  2088 00001BE7 4883F900                        cmp rcx, 0
  2089 00001BEB 0F8C59010000                    jl L_error_integer_range
  2090 00001BF1 488B5528                        mov rdx, PARAM(1)
  2091                                          assert_char(rdx)
  2091 00001BF5 803A02              <1>  cmp byte [%1], %2
  2091 00001BF8 0F8586020000        <1>  jne L_error_incorrect_type
  2092 00001BFE 8A5201                          mov dl, byte [rdx + 1]
  2093 00001C01 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2094 00001C05 E880EAFFFF                      call malloc
  2095 00001C0A C60003                          mov byte [rax], T_string
  2096 00001C0D 48894801                        mov qword [rax + 1], rcx
  2097 00001C11 41B800000000                    mov r8, 0
  2098                                  .L0:
  2099 00001C17 4939C8                          cmp r8, rcx
  2100 00001C1A 740A                            je .L1
  2101 00001C1C 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2102 00001C21 49FFC0                          inc r8
  2103 00001C24 EBF1                            jmp .L0
  2104                                  .L1:
  2105                                          LEAVE
  2105 00001C26 C9                  <1>  leave
  2106 00001C27 C22000                          ret AND_KILL_FRAME(2)
  2107                                  
  2108                                  L_code_ptr_numerator:
  2109                                          ENTER
  2109 00001C2A C8000000            <1>  enter 0, 0
  2109 00001C2E 4883E4F0            <1>  and rsp, ~15
  2110 00001C32 48837D1801                      cmp COUNT, 1
  2111 00001C37 0F8573010000                    jne L_error_arg_count_1
  2112 00001C3D 488B4520                        mov rax, PARAM(0)
  2113                                          assert_rational(rax)
  2113 00001C41 803811              <1>  cmp byte [%1], %2
  2113 00001C44 0F853A020000        <1>  jne L_error_incorrect_type
  2114 00001C4A 488B7801                        mov rdi, qword [rax + 1]
  2115 00001C4E E8D1000000                      call make_integer
  2116                                          LEAVE
  2116 00001C53 C9                  <1>  leave
  2117 00001C54 C21800                          ret AND_KILL_FRAME(1)
  2118                                          
  2119                                  L_code_ptr_denominator:
  2120                                          ENTER
  2120 00001C57 C8000000            <1>  enter 0, 0
  2120 00001C5B 4883E4F0            <1>  and rsp, ~15
  2121 00001C5F 48837D1801                      cmp COUNT, 1
  2122 00001C64 0F8546010000                    jne L_error_arg_count_1
  2123 00001C6A 488B4520                        mov rax, PARAM(0)
  2124                                          assert_rational(rax)
  2124 00001C6E 803811              <1>  cmp byte [%1], %2
  2124 00001C71 0F850D020000        <1>  jne L_error_incorrect_type
  2125 00001C77 488B7809                        mov rdi, qword [rax + 1 + 8]
  2126 00001C7B E8A4000000                      call make_integer
  2127                                          LEAVE
  2127 00001C80 C9                  <1>  leave
  2128 00001C81 C21800                          ret AND_KILL_FRAME(1)
  2129                                  
  2130                                  L_code_ptr_eq:
  2131                                  	ENTER
  2131 00001C84 C8000000            <1>  enter 0, 0
  2131 00001C88 4883E4F0            <1>  and rsp, ~15
  2132 00001C8C 48837D1802              	cmp COUNT, 2
  2133 00001C91 0F854E010000            	jne L_error_arg_count_2
  2134 00001C97 488B7D20                	mov rdi, PARAM(0)
  2135 00001C9B 488B7528                	mov rsi, PARAM(1)
  2136 00001C9F 4839F7                  	cmp rdi, rsi
  2137 00001CA2 744A                    	je .L_eq_true
  2138 00001CA4 8A17                    	mov dl, byte [rdi]
  2139 00001CA6 3A16                    	cmp dl, byte [rsi]
  2140 00001CA8 7550                    	jne .L_eq_false
  2141 00001CAA 80FA02                  	cmp dl, T_char
  2142 00001CAD 7437                    	je .L_char
  2143 00001CAF 80FA04                  	cmp dl, T_symbol
  2144 00001CB2 742A                    	je .L_symbol
  2145 00001CB4 80FA12                  	cmp dl, T_real
  2146 00001CB7 741D                    	je .L_real
  2147 00001CB9 80FA11                  	cmp dl, T_rational
  2148 00001CBC 7402                    	je .L_rational
  2149 00001CBE EB3A                    	jmp .L_eq_false
  2150                                  .L_rational:
  2151 00001CC0 488B4601                	mov rax, qword [rsi + 1]
  2152 00001CC4 483B4701                	cmp rax, qword [rdi + 1]
  2153 00001CC8 7530                    	jne .L_eq_false
  2154 00001CCA 488B4609                	mov rax, qword [rsi + 1 + 8]
  2155 00001CCE 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2156 00001CD2 7526                    	jne .L_eq_false
  2157 00001CD4 EB18                    	jmp .L_eq_true
  2158                                  .L_real:
  2159 00001CD6 488B4601                	mov rax, qword [rsi + 1]
  2160 00001CDA 483B4701                	cmp rax, qword [rdi + 1]
  2161                                  .L_symbol:
  2162                                  	; never reached, because symbols are static!
  2163                                  	; but I'm keeping it in case, I'll ever change
  2164                                  	; the implementation
  2165 00001CDE 488B4601                	mov rax, qword [rsi + 1]
  2166 00001CE2 483B4701                	cmp rax, qword [rdi + 1]
  2167                                  .L_char:
  2168 00001CE6 8A5E01                  	mov bl, byte [rsi + 1]
  2169 00001CE9 3A5F01                  	cmp bl, byte [rdi + 1]
  2170 00001CEC 750C                    	jne .L_eq_false
  2171                                  .L_eq_true:
  2172 00001CEE 48B8-                   	mov rax, sob_boolean_true
  2172 00001CF0 [0300000000000000] 
  2173 00001CF8 EB0A                    	jmp .L_eq_exit
  2174                                  .L_eq_false:
  2175 00001CFA 48B8-                   	mov rax, sob_boolean_false
  2175 00001CFC [0200000000000000] 
  2176                                  .L_eq_exit:
  2177                                  	LEAVE
  2177 00001D04 C9                  <1>  leave
  2178 00001D05 C22000                  	ret AND_KILL_FRAME(2)
  2179                                  
  2180                                  make_real:
  2181                                          ENTER
  2181 00001D08 C8000000            <1>  enter 0, 0
  2181 00001D0C 4883E4F0            <1>  and rsp, ~15
  2182 00001D10 BF09000000                      mov rdi, (1 + 8)
  2183 00001D15 E870E9FFFF                      call malloc
  2184 00001D1A C60012                          mov byte [rax], T_real
  2185 00001D1D F20F114001                      movsd qword [rax + 1], xmm0
  2186                                          LEAVE
  2186 00001D22 C9                  <1>  leave
  2187 00001D23 C3                              ret
  2188                                          
  2189                                  make_integer:
  2190                                          ENTER
  2190 00001D24 C8000000            <1>  enter 0, 0
  2190 00001D28 4883E4F0            <1>  and rsp, ~15
  2191 00001D2C 4889FE                          mov rsi, rdi
  2192 00001D2F BF11000000                      mov rdi, (1 + 8 + 8)
  2193 00001D34 E851E9FFFF                      call malloc
  2194 00001D39 C60011                          mov byte [rax], T_rational
  2195 00001D3C 48897001                        mov qword [rax + 1], rsi
  2196 00001D40 48C7400901000000                mov qword [rax + 1 + 8], 1
  2197                                          LEAVE
  2197 00001D48 C9                  <1>  leave
  2198 00001D49 C3                              ret
  2199                                          
  2200                                  L_error_integer_range:
  2201 00001D4A 488B3C25[00000000]              mov rdi, qword [stderr]
  2202 00001D52 48BE-                           mov rsi, fmt_integer_range
  2202 00001D54 [5E03000000000000] 
  2203 00001D5C B800000000                      mov rax, 0
  2204                                  	ENTER
  2204 00001D61 C8000000            <1>  enter 0, 0
  2204 00001D65 4883E4F0            <1>  and rsp, ~15
  2205 00001D69 E8(00000000)                    call fprintf
  2206                                  	LEAVE
  2206 00001D6E C9                  <1>  leave
  2207 00001D6F 48C7C0FBFFFFFF                  mov rax, -5
  2208 00001D76 E8(00000000)                    call exit
  2209                                  
  2210                                  L_error_arg_count_0:
  2211 00001D7B 488B3C25[00000000]              mov rdi, qword [stderr]
  2212 00001D83 48BE-                           mov rsi, fmt_arg_count_0
  2212 00001D85 [5C02000000000000] 
  2213 00001D8D 488B5518                        mov rdx, COUNT
  2214 00001D91 B800000000                      mov rax, 0
  2215                                  	ENTER
  2215 00001D96 C8000000            <1>  enter 0, 0
  2215 00001D9A 4883E4F0            <1>  and rsp, ~15
  2216 00001D9E E8(00000000)                    call fprintf
  2217                                  	LEAVE
  2217 00001DA3 C9                  <1>  leave
  2218 00001DA4 48C7C0FDFFFFFF                  mov rax, -3
  2219 00001DAB E8(00000000)                    call exit
  2220                                  
  2221                                  L_error_arg_count_1:
  2222 00001DB0 488B3C25[00000000]              mov rdi, qword [stderr]
  2223 00001DB8 48BE-                           mov rsi, fmt_arg_count_1
  2223 00001DBA [8402000000000000] 
  2224 00001DC2 488B5518                        mov rdx, COUNT
  2225 00001DC6 B800000000                      mov rax, 0
  2226                                  	ENTER
  2226 00001DCB C8000000            <1>  enter 0, 0
  2226 00001DCF 4883E4F0            <1>  and rsp, ~15
  2227 00001DD3 E8(00000000)                    call fprintf
  2228                                  	LEAVE
  2228 00001DD8 C9                  <1>  leave
  2229 00001DD9 48C7C0FDFFFFFF                  mov rax, -3
  2230 00001DE0 E8(00000000)                    call exit
  2231                                  
  2232                                  L_error_arg_count_2:
  2233 00001DE5 488B3C25[00000000]              mov rdi, qword [stderr]
  2234 00001DED 48BE-                           mov rsi, fmt_arg_count_2
  2234 00001DEF [EA02000000000000] 
  2235 00001DF7 488B5518                        mov rdx, COUNT
  2236 00001DFB B800000000                      mov rax, 0
  2237                                  	ENTER
  2237 00001E00 C8000000            <1>  enter 0, 0
  2237 00001E04 4883E4F0            <1>  and rsp, ~15
  2238 00001E08 E8(00000000)                    call fprintf
  2239                                  	LEAVE
  2239 00001E0D C9                  <1>  leave
  2240 00001E0E 48C7C0FDFFFFFF                  mov rax, -3
  2241 00001E15 E8(00000000)                    call exit
  2242                                  
  2243                                  L_error_arg_count_12:
  2244 00001E1A 488B3C25[00000000]              mov rdi, qword [stderr]
  2245 00001E22 48BE-                           mov rsi, fmt_arg_count_12
  2245 00001E24 [AA02000000000000] 
  2246 00001E2C 488B5518                        mov rdx, COUNT
  2247 00001E30 B800000000                      mov rax, 0
  2248                                  	ENTER
  2248 00001E35 C8000000            <1>  enter 0, 0
  2248 00001E39 4883E4F0            <1>  and rsp, ~15
  2249 00001E3D E8(00000000)                    call fprintf
  2250                                  	LEAVE
  2250 00001E42 C9                  <1>  leave
  2251 00001E43 48C7C0FDFFFFFF                  mov rax, -3
  2252 00001E4A E8(00000000)                    call exit
  2253                                  
  2254                                  L_error_arg_count_3:
  2255 00001E4F 488B3C25[00000000]              mov rdi, qword [stderr]
  2256 00001E57 48BE-                           mov rsi, fmt_arg_count_3
  2256 00001E59 [1103000000000000] 
  2257 00001E61 488B5518                        mov rdx, COUNT
  2258 00001E65 B800000000                      mov rax, 0
  2259                                  	ENTER
  2259 00001E6A C8000000            <1>  enter 0, 0
  2259 00001E6E 4883E4F0            <1>  and rsp, ~15
  2260 00001E72 E8(00000000)                    call fprintf
  2261                                  	LEAVE
  2261 00001E77 C9                  <1>  leave
  2262 00001E78 48C7C0FDFFFFFF                  mov rax, -3
  2263 00001E7F E8(00000000)                    call exit
  2264                                          
  2265                                  L_error_incorrect_type:
  2266 00001E84 488B3C25[00000000]              mov rdi, qword [stderr]
  2267 00001E8C 48BE-                           mov rsi, fmt_type
  2267 00001E8E [3A03000000000000] 
  2268 00001E96 B800000000                      mov rax, 0
  2269                                  	ENTER
  2269 00001E9B C8000000            <1>  enter 0, 0
  2269 00001E9F 4883E4F0            <1>  and rsp, ~15
  2270 00001EA3 E8(00000000)                    call fprintf
  2271                                  	LEAVE
  2271 00001EA8 C9                  <1>  leave
  2272 00001EA9 48C7C0FCFFFFFF                  mov rax, -4
  2273 00001EB0 E8(00000000)                    call exit
  2274                                  
  2275                                  L_error_division_by_zero:
  2276 00001EB5 488B3C25[00000000]              mov rdi, qword [stderr]
  2277 00001EBD 48BE-                           mov rsi, fmt_division_by_zero
  2277 00001EBF [7B03000000000000] 
  2278 00001EC7 B800000000                      mov rax, 0
  2279                                  	ENTER
  2279 00001ECC C8000000            <1>  enter 0, 0
  2279 00001ED0 4883E4F0            <1>  and rsp, ~15
  2280 00001ED4 E8(00000000)                    call fprintf
  2281                                  	LEAVE
  2281 00001ED9 C9                  <1>  leave
  2282 00001EDA 48C7C0F8FFFFFF                  mov rax, -8
  2283 00001EE1 E8(00000000)                    call exit
  2284                                  
  2285                                  section .data
  2286                                  fmt_char:
  2287 00000259 256300                          db `%c\0`
  2288                                  fmt_arg_count_0:
  2289 0000025C 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2289 00000265 74696E67207A65726F-
  2289 0000026E 20617267756D656E74-
  2289 00000277 732E20466F756E6420-
  2289 00000280 25640A00           
  2290                                  fmt_arg_count_1:
  2291 00000284 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2291 0000028D 74696E67206F6E6520-
  2291 00000296 617267756D656E742E-
  2291 0000029F 20466F756E64202564-
  2291 000002A8 0A00               
  2292                                  fmt_arg_count_12:
  2293 000002AA 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2293 000002B3 74696E67206F6E6520-
  2293 000002BC 726571756972656420-
  2293 000002C5 616E64206F6E65206F-
  2293 000002CE 7074696F6E616C2061-
  2293 000002D7 7267756D656E742E20-
  2293 000002E0 466F756E642025640A-
  2293 000002E9 00                 
  2294                                  fmt_arg_count_2:
  2295 000002EA 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2295 000002F3 74696E672074776F20-
  2295 000002FC 617267756D656E7473-
  2295 00000305 2E20466F756E642025-
  2295 0000030E 640A00             
  2296                                  fmt_arg_count_3:
  2297 00000311 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2297 0000031A 74696E672074687265-
  2297 00000323 6520617267756D656E-
  2297 0000032C 74732E20466F756E64-
  2297 00000335 2025640A00         
  2298                                  fmt_type:
  2299 0000033A 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2299 00000343 696F6E207061737365-
  2299 0000034C 6420696E636F727265-
  2299 00000355 637420747970650A00 
  2300                                  fmt_integer_range:
  2301 0000035E 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2301 00000367 7265637420696E7465-
  2301 00000370 6765722072616E6765-
  2301 00000379 0A00               
  2302                                  fmt_division_by_zero:
  2303 0000037B 212121204469766973-             db `!!! Division by zero\n\0`
  2303 00000384 696F6E206279207A65-
  2303 0000038D 726F0A00           
  2304                                  fmt_scheme_error_part_1:
  2305 00000391 0A2121212054686520-             db `\n!!! The procedure \0`
  2305 0000039A 70726F636564757265-
  2305 000003A3 2000               
  2306                                  fmt_scheme_error_part_2:
  2307 000003A5 2061736B656420746F-             db ` asked to terminate the program\n`
  2307 000003AE 207465726D696E6174-
  2307 000003B7 65207468652070726F-
  2307 000003C0 6772616D0A         
  2308 000003C5 202020207769746820-             db `    with the following message:\n\n\0`
  2308 000003CE 74686520666F6C6C6F-
  2308 000003D7 77696E67206D657373-
  2308 000003E0 6167653A0A0A00     
  2309                                  fmt_scheme_error_part_3:
  2310 000003E7 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2310 000003F0 210A0A00           
