     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 03                      	db T_string	; "a"
    84 00000007 0100000000000000        	dq 1
    85 0000000F 61                      	db 0x61
    86 00000010 04                      	db T_symbol	; a
    87 00000011 [0600000000000000]      	dq L_constants + 6
    88 00000019 03                      	db T_string	; "new"
    89 0000001A 0300000000000000        	dq 3
    90 00000022 6E6577                  	db 0x6E, 0x65, 0x77
    91 00000025 04                      	db T_symbol	; new
    92 00000026 [1900000000000000]      	dq L_constants + 25
    93 0000002E 03                      	db T_string	; "list"
    94 0000002F 0400000000000000        	dq 4
    95 00000037 6C697374                	db 0x6C, 0x69, 0x73, 0x74
    96 0000003B 04                      	db T_symbol	; list
    97 0000003C [2E00000000000000]      	dq L_constants + 46
    98 00000044 11                      	db T_rational	; 1
    99 00000045 010000000000000001-     	dq 1, 1
    99 0000004E 00000000000000     
   100 00000055 11                      	db T_rational	; 2
   101 00000056 020000000000000001-     	dq 2, 1
   101 0000005F 00000000000000     
   102                                  
   103                                  section .bss
   104                                  free_var_0:	; location of null?
   105 00000000 <res 00000008>          	resq 1
   106                                  free_var_1:	; location of pair?
   107 00000008 <res 00000008>          	resq 1
   108                                  free_var_2:	; location of void?
   109 00000010 <res 00000008>          	resq 1
   110                                  free_var_3:	; location of char?
   111 00000018 <res 00000008>          	resq 1
   112                                  free_var_4:	; location of string?
   113 00000020 <res 00000008>          	resq 1
   114                                  free_var_5:	; location of symbol?
   115 00000028 <res 00000008>          	resq 1
   116                                  free_var_6:	; location of vector?
   117 00000030 <res 00000008>          	resq 1
   118                                  free_var_7:	; location of procedure?
   119 00000038 <res 00000008>          	resq 1
   120                                  free_var_8:	; location of real?
   121 00000040 <res 00000008>          	resq 1
   122                                  free_var_9:	; location of rational?
   123 00000048 <res 00000008>          	resq 1
   124                                  free_var_10:	; location of boolean?
   125 00000050 <res 00000008>          	resq 1
   126                                  free_var_11:	; location of number?
   127 00000058 <res 00000008>          	resq 1
   128                                  free_var_12:	; location of collection?
   129 00000060 <res 00000008>          	resq 1
   130                                  free_var_13:	; location of cons
   131 00000068 <res 00000008>          	resq 1
   132                                  free_var_14:	; location of display-sexpr
   133 00000070 <res 00000008>          	resq 1
   134                                  free_var_15:	; location of write-char
   135 00000078 <res 00000008>          	resq 1
   136                                  free_var_16:	; location of car
   137 00000080 <res 00000008>          	resq 1
   138                                  free_var_17:	; location of cdr
   139 00000088 <res 00000008>          	resq 1
   140                                  free_var_18:	; location of string-length
   141 00000090 <res 00000008>          	resq 1
   142                                  free_var_19:	; location of vector-length
   143 00000098 <res 00000008>          	resq 1
   144                                  free_var_20:	; location of real->integer
   145 000000A0 <res 00000008>          	resq 1
   146                                  free_var_21:	; location of exit
   147 000000A8 <res 00000008>          	resq 1
   148                                  free_var_22:	; location of integer->real
   149 000000B0 <res 00000008>          	resq 1
   150                                  free_var_23:	; location of rational->real
   151 000000B8 <res 00000008>          	resq 1
   152                                  free_var_24:	; location of char->integer
   153 000000C0 <res 00000008>          	resq 1
   154                                  free_var_25:	; location of integer->char
   155 000000C8 <res 00000008>          	resq 1
   156                                  free_var_26:	; location of trng
   157 000000D0 <res 00000008>          	resq 1
   158                                  free_var_27:	; location of zero?
   159 000000D8 <res 00000008>          	resq 1
   160                                  free_var_28:	; location of integer?
   161 000000E0 <res 00000008>          	resq 1
   162                                  free_var_29:	; location of __bin-apply
   163 000000E8 <res 00000008>          	resq 1
   164                                  free_var_30:	; location of __bin-add-rr
   165 000000F0 <res 00000008>          	resq 1
   166                                  free_var_31:	; location of __bin-sub-rr
   167 000000F8 <res 00000008>          	resq 1
   168                                  free_var_32:	; location of __bin-mul-rr
   169 00000100 <res 00000008>          	resq 1
   170                                  free_var_33:	; location of __bin-div-rr
   171 00000108 <res 00000008>          	resq 1
   172                                  free_var_34:	; location of __bin-add-qq
   173 00000110 <res 00000008>          	resq 1
   174                                  free_var_35:	; location of __bin-sub-qq
   175 00000118 <res 00000008>          	resq 1
   176                                  free_var_36:	; location of __bin-mul-qq
   177 00000120 <res 00000008>          	resq 1
   178                                  free_var_37:	; location of __bin-div-qq
   179 00000128 <res 00000008>          	resq 1
   180                                  free_var_38:	; location of error
   181 00000130 <res 00000008>          	resq 1
   182                                  free_var_39:	; location of __bin-less-than-rr
   183 00000138 <res 00000008>          	resq 1
   184                                  free_var_40:	; location of __bin-less-than-qq
   185 00000140 <res 00000008>          	resq 1
   186                                  free_var_41:	; location of __bin-equal-rr
   187 00000148 <res 00000008>          	resq 1
   188                                  free_var_42:	; location of __bin-equal-qq
   189 00000150 <res 00000008>          	resq 1
   190                                  free_var_43:	; location of quotient
   191 00000158 <res 00000008>          	resq 1
   192                                  free_var_44:	; location of remainder
   193 00000160 <res 00000008>          	resq 1
   194                                  free_var_45:	; location of set-car!
   195 00000168 <res 00000008>          	resq 1
   196                                  free_var_46:	; location of set-cdr!
   197 00000170 <res 00000008>          	resq 1
   198                                  free_var_47:	; location of string-ref
   199 00000178 <res 00000008>          	resq 1
   200                                  free_var_48:	; location of vector-ref
   201 00000180 <res 00000008>          	resq 1
   202                                  free_var_49:	; location of vector-set!
   203 00000188 <res 00000008>          	resq 1
   204                                  free_var_50:	; location of string-set!
   205 00000190 <res 00000008>          	resq 1
   206                                  free_var_51:	; location of make-vector
   207 00000198 <res 00000008>          	resq 1
   208                                  free_var_52:	; location of make-string
   209 000001A0 <res 00000008>          	resq 1
   210                                  free_var_53:	; location of numerator
   211 000001A8 <res 00000008>          	resq 1
   212                                  free_var_54:	; location of denominator
   213 000001B0 <res 00000008>          	resq 1
   214                                  free_var_55:	; location of eq?
   215 000001B8 <res 00000008>          	resq 1
   216                                  
   217                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   218                                  global main
   219                                  section .text
   220                                  main:
   221 00000000 C8000000                        enter 0, 0
   222                                          
   223                                  	; building closure for null?
   224 00000004 48BF-                   	mov rdi, free_var_0
   224 00000006 [0000000000000000] 
   225 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   225 00000010 [0510000000000000] 
   226 00000018 E80B0F0000              	call bind_primitive
   227                                  
   228                                  	; building closure for pair?
   229 0000001D 48BF-                   	mov rdi, free_var_1
   229 0000001F [0800000000000000] 
   230 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   230 00000029 [3B10000000000000] 
   231 00000031 E8F20E0000              	call bind_primitive
   232                                  
   233                                  	; building closure for void?
   234 00000036 48BF-                   	mov rdi, free_var_2
   234 00000038 [1000000000000000] 
   235 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   235 00000042 [7110000000000000] 
   236 0000004A E8D90E0000              	call bind_primitive
   237                                  
   238                                  	; building closure for char?
   239 0000004F 48BF-                   	mov rdi, free_var_3
   239 00000051 [1800000000000000] 
   240 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   240 0000005B [A710000000000000] 
   241 00000063 E8C00E0000              	call bind_primitive
   242                                  
   243                                  	; building closure for string?
   244 00000068 48BF-                   	mov rdi, free_var_4
   244 0000006A [2000000000000000] 
   245 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   245 00000074 [DD10000000000000] 
   246 0000007C E8A70E0000              	call bind_primitive
   247                                  
   248                                  	; building closure for symbol?
   249 00000081 48BF-                   	mov rdi, free_var_5
   249 00000083 [2800000000000000] 
   250 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   250 0000008D [1311000000000000] 
   251 00000095 E88E0E0000              	call bind_primitive
   252                                  
   253                                  	; building closure for vector?
   254 0000009A 48BF-                   	mov rdi, free_var_6
   254 0000009C [3000000000000000] 
   255 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   255 000000A6 [4911000000000000] 
   256 000000AE E8750E0000              	call bind_primitive
   257                                  
   258                                  	; building closure for procedure?
   259 000000B3 48BF-                   	mov rdi, free_var_7
   259 000000B5 [3800000000000000] 
   260 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   260 000000BF [7F11000000000000] 
   261 000000C7 E85C0E0000              	call bind_primitive
   262                                  
   263                                  	; building closure for real?
   264 000000CC 48BF-                   	mov rdi, free_var_8
   264 000000CE [4000000000000000] 
   265 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   265 000000D8 [B511000000000000] 
   266 000000E0 E8430E0000              	call bind_primitive
   267                                  
   268                                  	; building closure for rational?
   269 000000E5 48BF-                   	mov rdi, free_var_9
   269 000000E7 [4800000000000000] 
   270 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   270 000000F1 [EB11000000000000] 
   271 000000F9 E82A0E0000              	call bind_primitive
   272                                  
   273                                  	; building closure for boolean?
   274 000000FE 48BF-                   	mov rdi, free_var_10
   274 00000100 [5000000000000000] 
   275 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   275 0000010A [2112000000000000] 
   276 00000112 E8110E0000              	call bind_primitive
   277                                  
   278                                  	; building closure for number?
   279 00000117 48BF-                   	mov rdi, free_var_11
   279 00000119 [5800000000000000] 
   280 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   280 00000123 [5912000000000000] 
   281 0000012B E8F80D0000              	call bind_primitive
   282                                  
   283                                  	; building closure for collection?
   284 00000130 48BF-                   	mov rdi, free_var_12
   284 00000132 [6000000000000000] 
   285 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   285 0000013C [9112000000000000] 
   286 00000144 E8DF0D0000              	call bind_primitive
   287                                  
   288                                  	; building closure for cons
   289 00000149 48BF-                   	mov rdi, free_var_13
   289 0000014B [6800000000000000] 
   290 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   290 00000155 [C912000000000000] 
   291 0000015D E8C60D0000              	call bind_primitive
   292                                  
   293                                  	; building closure for display-sexpr
   294 00000162 48BF-                   	mov rdi, free_var_14
   294 00000164 [7000000000000000] 
   295 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   295 0000016E [FD12000000000000] 
   296 00000176 E8AD0D0000              	call bind_primitive
   297                                  
   298                                  	; building closure for write-char
   299 0000017B 48BF-                   	mov rdi, free_var_15
   299 0000017D [7800000000000000] 
   300 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   300 00000187 [2713000000000000] 
   301 0000018F E8940D0000              	call bind_primitive
   302                                  
   303                                  	; building closure for car
   304 00000194 48BF-                   	mov rdi, free_var_16
   304 00000196 [8000000000000000] 
   305 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   305 000001A0 [7E13000000000000] 
   306 000001A8 E87B0D0000              	call bind_primitive
   307                                  
   308                                  	; building closure for cdr
   309 000001AD 48BF-                   	mov rdi, free_var_17
   309 000001AF [8800000000000000] 
   310 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   310 000001B9 [A613000000000000] 
   311 000001C1 E8620D0000              	call bind_primitive
   312                                  
   313                                  	; building closure for string-length
   314 000001C6 48BF-                   	mov rdi, free_var_18
   314 000001C8 [9000000000000000] 
   315 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   315 000001D2 [CE13000000000000] 
   316 000001DA E8490D0000              	call bind_primitive
   317                                  
   318                                  	; building closure for vector-length
   319 000001DF 48BF-                   	mov rdi, free_var_19
   319 000001E1 [9800000000000000] 
   320 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   320 000001EB [FB13000000000000] 
   321 000001F3 E8300D0000              	call bind_primitive
   322                                  
   323                                  	; building closure for real->integer
   324 000001F8 48BF-                   	mov rdi, free_var_20
   324 000001FA [A000000000000000] 
   325 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   325 00000204 [2814000000000000] 
   326 0000020C E8170D0000              	call bind_primitive
   327                                  
   328                                  	; building closure for exit
   329 00000211 48BF-                   	mov rdi, free_var_21
   329 00000213 [A800000000000000] 
   330 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   330 0000021D [5B14000000000000] 
   331 00000225 E8FE0C0000              	call bind_primitive
   332                                  
   333                                  	; building closure for integer->real
   334 0000022A 48BF-                   	mov rdi, free_var_22
   334 0000022C [B000000000000000] 
   335 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   335 00000236 [7814000000000000] 
   336 0000023E E8E50C0000              	call bind_primitive
   337                                  
   338                                  	; building closure for rational->real
   339 00000243 48BF-                   	mov rdi, free_var_23
   339 00000245 [B800000000000000] 
   340 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   340 0000024F [B514000000000000] 
   341 00000257 E8CC0C0000              	call bind_primitive
   342                                  
   343                                  	; building closure for char->integer
   344 0000025C 48BF-                   	mov rdi, free_var_24
   344 0000025E [C000000000000000] 
   345 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   345 00000268 [F414000000000000] 
   346 00000270 E8B30C0000              	call bind_primitive
   347                                  
   348                                  	; building closure for integer->char
   349 00000275 48BF-                   	mov rdi, free_var_25
   349 00000277 [C800000000000000] 
   350 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   350 00000281 [2915000000000000] 
   351 00000289 E89A0C0000              	call bind_primitive
   352                                  
   353                                  	; building closure for trng
   354 0000028E 48BF-                   	mov rdi, free_var_26
   354 00000290 [D000000000000000] 
   355 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   355 0000029A [8315000000000000] 
   356 000002A2 E8810C0000              	call bind_primitive
   357                                  
   358                                  	; building closure for zero?
   359 000002A7 48BF-                   	mov rdi, free_var_27
   359 000002A9 [D800000000000000] 
   360 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   360 000002B3 [A615000000000000] 
   361 000002BB E8680C0000              	call bind_primitive
   362                                  
   363                                  	; building closure for integer?
   364 000002C0 48BF-                   	mov rdi, free_var_28
   364 000002C2 [E000000000000000] 
   365 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   365 000002CC [0116000000000000] 
   366 000002D4 E84F0C0000              	call bind_primitive
   367                                  
   368                                  	; building closure for __bin-apply
   369 000002D9 48BF-                   	mov rdi, free_var_29
   369 000002DB [E800000000000000] 
   370 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   370 000002E5 [500F000000000000] 
   371 000002ED E8360C0000              	call bind_primitive
   372                                  
   373                                  	; building closure for __bin-add-rr
   374 000002F2 48BF-                   	mov rdi, free_var_30
   374 000002F4 [F000000000000000] 
   375 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   375 000002FE [3E16000000000000] 
   376 00000306 E81D0C0000              	call bind_primitive
   377                                  
   378                                  	; building closure for __bin-sub-rr
   379 0000030B 48BF-                   	mov rdi, free_var_31
   379 0000030D [F800000000000000] 
   380 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   380 00000317 [8216000000000000] 
   381 0000031F E8040C0000              	call bind_primitive
   382                                  
   383                                  	; building closure for __bin-mul-rr
   384 00000324 48BF-                   	mov rdi, free_var_32
   384 00000326 [0001000000000000] 
   385 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   385 00000330 [C616000000000000] 
   386 00000338 E8EB0B0000              	call bind_primitive
   387                                  
   388                                  	; building closure for __bin-div-rr
   389 0000033D 48BF-                   	mov rdi, free_var_33
   389 0000033F [0801000000000000] 
   390 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   390 00000349 [0A17000000000000] 
   391 00000351 E8D20B0000              	call bind_primitive
   392                                  
   393                                  	; building closure for __bin-add-qq
   394 00000356 48BF-                   	mov rdi, free_var_34
   394 00000358 [1001000000000000] 
   395 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   395 00000362 [5C17000000000000] 
   396 0000036A E8B90B0000              	call bind_primitive
   397                                  
   398                                  	; building closure for __bin-sub-qq
   399 0000036F 48BF-                   	mov rdi, free_var_35
   399 00000371 [1801000000000000] 
   400 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   400 0000037B [C417000000000000] 
   401 00000383 E8A00B0000              	call bind_primitive
   402                                  
   403                                  	; building closure for __bin-mul-qq
   404 00000388 48BF-                   	mov rdi, free_var_36
   404 0000038A [2001000000000000] 
   405 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   405 00000394 [2C18000000000000] 
   406 0000039C E8870B0000              	call bind_primitive
   407                                  
   408                                  	; building closure for __bin-div-qq
   409 000003A1 48BF-                   	mov rdi, free_var_37
   409 000003A3 [2801000000000000] 
   410 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   410 000003AD [8418000000000000] 
   411 000003B5 E86E0B0000              	call bind_primitive
   412                                  
   413                                  	; building closure for error
   414 000003BA 48BF-                   	mov rdi, free_var_38
   414 000003BC [3001000000000000] 
   415 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   415 000003C6 [5219000000000000] 
   416 000003CE E8550B0000              	call bind_primitive
   417                                  
   418                                  	; building closure for __bin-less-than-rr
   419 000003D3 48BF-                   	mov rdi, free_var_39
   419 000003D5 [3801000000000000] 
   420 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   420 000003DF [091A000000000000] 
   421 000003E7 E83C0B0000              	call bind_primitive
   422                                  
   423                                  	; building closure for __bin-less-than-qq
   424 000003EC 48BF-                   	mov rdi, free_var_40
   424 000003EE [4001000000000000] 
   425 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   425 000003F8 [601A000000000000] 
   426 00000400 E8230B0000              	call bind_primitive
   427                                  
   428                                  	; building closure for __bin-equal-rr
   429 00000405 48BF-                   	mov rdi, free_var_41
   429 00000407 [4801000000000000] 
   430 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   430 00000411 [C31A000000000000] 
   431 00000419 E80A0B0000              	call bind_primitive
   432                                  
   433                                  	; building closure for __bin-equal-qq
   434 0000041E 48BF-                   	mov rdi, free_var_42
   434 00000420 [5001000000000000] 
   435 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   435 0000042A [1A1B000000000000] 
   436 00000432 E8F10A0000              	call bind_primitive
   437                                  
   438                                  	; building closure for quotient
   439 00000437 48BF-                   	mov rdi, free_var_43
   439 00000439 [5801000000000000] 
   440 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   440 00000443 [7D1B000000000000] 
   441 0000044B E8D80A0000              	call bind_primitive
   442                                  
   443                                  	; building closure for remainder
   444 00000450 48BF-                   	mov rdi, free_var_44
   444 00000452 [6001000000000000] 
   445 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   445 0000045C [E31B000000000000] 
   446 00000464 E8BF0A0000              	call bind_primitive
   447                                  
   448                                  	; building closure for set-car!
   449 00000469 48BF-                   	mov rdi, free_var_45
   449 0000046B [6801000000000000] 
   450 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   450 00000475 [491C000000000000] 
   451 0000047D E8A60A0000              	call bind_primitive
   452                                  
   453                                  	; building closure for set-cdr!
   454 00000482 48BF-                   	mov rdi, free_var_46
   454 00000484 [7001000000000000] 
   455 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   455 0000048E [7F1C000000000000] 
   456 00000496 E88D0A0000              	call bind_primitive
   457                                  
   458                                  	; building closure for string-ref
   459 0000049B 48BF-                   	mov rdi, free_var_47
   459 0000049D [7801000000000000] 
   460 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   460 000004A7 [B51C000000000000] 
   461 000004AF E8740A0000              	call bind_primitive
   462                                  
   463                                  	; building closure for vector-ref
   464 000004B4 48BF-                   	mov rdi, free_var_48
   464 000004B6 [8001000000000000] 
   465 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   465 000004C0 [201D000000000000] 
   466 000004C8 E85B0A0000              	call bind_primitive
   467                                  
   468                                  	; building closure for vector-set!
   469 000004CD 48BF-                   	mov rdi, free_var_49
   469 000004CF [8801000000000000] 
   470 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   470 000004D9 [7C1D000000000000] 
   471 000004E1 E8420A0000              	call bind_primitive
   472                                  
   473                                  	; building closure for string-set!
   474 000004E6 48BF-                   	mov rdi, free_var_50
   474 000004E8 [9001000000000000] 
   475 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   475 000004F2 [E61D000000000000] 
   476 000004FA E8290A0000              	call bind_primitive
   477                                  
   478                                  	; building closure for make-vector
   479 000004FF 48BF-                   	mov rdi, free_var_51
   479 00000501 [9801000000000000] 
   480 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   480 0000050B [5B1E000000000000] 
   481 00000513 E8100A0000              	call bind_primitive
   482                                  
   483                                  	; building closure for make-string
   484 00000518 48BF-                   	mov rdi, free_var_52
   484 0000051A [A001000000000000] 
   485 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   485 00000524 [C51E000000000000] 
   486 0000052C E8F7090000              	call bind_primitive
   487                                  
   488                                  	; building closure for numerator
   489 00000531 48BF-                   	mov rdi, free_var_53
   489 00000533 [A801000000000000] 
   490 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   490 0000053D [371F000000000000] 
   491 00000545 E8DE090000              	call bind_primitive
   492                                  
   493                                  	; building closure for denominator
   494 0000054A 48BF-                   	mov rdi, free_var_54
   494 0000054C [B001000000000000] 
   495 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   495 00000556 [641F000000000000] 
   496 0000055E E8C5090000              	call bind_primitive
   497                                  
   498                                  	; building closure for eq?
   499 00000563 48BF-                   	mov rdi, free_var_55
   499 00000565 [B801000000000000] 
   500 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   500 0000056F [911F000000000000] 
   501 00000577 E8AC090000              	call bind_primitive
   502                                  
   503 0000057C 48B8-                   	mov rax, qword (L_constants + 85)
   503 0000057E [5500000000000000] 
   504 00000586 50                      	push rax
   505 00000587 48B8-                   	mov rax, qword (L_constants + 68)
   505 00000589 [4400000000000000] 
   506 00000591 50                      	push rax
   507 00000592 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   508 00000597 E8FB030000              	call malloc
   509 0000059C 50                      	push rax
   510 0000059D BF00000000              	mov rdi, 8 * 0	; new rib
   511 000005A2 E8F0030000              	call malloc
   512 000005A7 50                      	push rax
   513 000005A8 BF08000000              	mov rdi, 8 * 1	; extended env
   514 000005AD E8E5030000              	call malloc
   515 000005B2 488B7D10                	mov rdi, ENV
   516 000005B6 BE00000000              	mov rsi, 0
   517 000005BB BA01000000              	mov rdx, 1
   518                                  .L_lambda_opt_env_loop_002f:	; ext_env[i + 1] <-- env[i]
   519 000005C0 4883FE00                	cmp rsi, 0
   520 000005C4 7410                    	je .L_lambda_opt_env_end_002f
   521 000005C6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   522 000005CA 48890CD0                	mov qword [rax + 8 * rdx], rcx
   523 000005CE 48FFC6                  	inc rsi
   524 000005D1 48FFC2                  	inc rdx
   525 000005D4 EBEA                    	jmp .L_lambda_opt_env_loop_002f
   526                                  .L_lambda_opt_env_end_002f:
   527 000005D6 5B                      	pop rbx
   528 000005D7 BE00000000              	mov rsi, 0
   529                                  .L_lambda_opt_params_loop_005d:	; copy params
   530 000005DC 4883FE00                	cmp rsi, 0
   531 000005E0 740E                    	je .L_lambda_opt_params_end_005d
   532 000005E2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   533 000005E7 488914F3                	mov qword [rbx + 8 * rsi], rdx
   534 000005EB 48FFC6                  	inc rsi
   535 000005EE EBEC                    	jmp .L_lambda_opt_params_loop_005d
   536                                  .L_lambda_opt_params_end_005d:
   537 000005F0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   538 000005F3 4889C3                  	mov rbx, rax
   539 000005F6 58                      	pop rax
   540 000005F7 C60005                  	mov byte [rax], T_closure
   541 000005FA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   542 000005FE 48C74009[0B060000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_002f
   543 00000606 E99C010000              	jmp .L_lambda_opt_end_002f
   544                                  .L_lambda_opt_code_002f:
   545 0000060B 4C8B542410              mov r10, qword [rsp+8*2]
   546 00000610 4983FA00                cmp r10, 0
   547 00000614 740B                    je .L_lambda_opt_arity_check_exact_002f
   548 00000616 4983FA00                cmp r10, 0
   549 0000061A 7F41                    jg .L_lambda_opt_arity_check_more_002f
   550 0000061C E943030000              jmp L_error_incorrect_arity_opt
   551                                  .L_lambda_opt_arity_check_exact_002f:
   552 00000621 4883EC08                sub rsp, 8
   553 00000625 BA03000000              mov rdx, 3+0
   554 0000062A 4889E3                  mov qword rbx, rsp
   555                                  .L_lambda_opt_params_loop_005e:
   556 0000062D 488B4B08                mov qword rcx, [rbx+8]
   557 00000631 48890B                  mov qword [rbx], rcx
   558 00000634 48FFCA                  dec rdx
   559 00000637 4883C308                add rbx, 8
   560 0000063B 4883FA00                cmp rdx, 0
   561 0000063F 7402                    je .L_lambda_opt_params_end_005e
   562 00000641 EBEA                    jmp .L_lambda_opt_params_loop_005e
   563                                  .L_lambda_opt_params_end_005e:
   564 00000643 49FFC2                  inc r10
   565 00000646 4C89542410              mov qword [rsp+8*2], r10
   566 0000064B 4983C202                add r10, 2
   567 0000064F 4AC704D4[01000000]      mov qword [rsp + 8*(r10)], sob_nil
   568 00000657 4C8B4D00                mov r9, [rbp]
   569 0000065B EB52                    jmp .L_lambda_opt_stack_adjusted_002f
   570                                  .L_lambda_opt_arity_check_more_002f:
   571 0000065D 48B8-                   mov rax, sob_nil
   571 0000065F [0100000000000000] 
   572 00000667 4C8B542410              mov r10, [rsp+2*8]
   573 0000066C 4E8D44D410              lea r8, [rsp+ 8*(2+r10)]
   574 00000671 4983EA00                sub r10, 0
   575                                  .L_lambda_opt_stack_shrink_loop_002f:
   576 00000675 4983FA00                cmp r10, 0
   577 00000679 7424                    je .L_lambda_opt_stack_shrink_loop_exit_002f
   578 0000067B 4889C1                  mov rcx, rax
   579 0000067E 498B10                  mov rdx, [r8]
   580 00000681 BF11000000              mov rdi, 17
   581 00000686 E80C030000              call malloc
   582 0000068B C60021                  mov byte [rax], T_pair
   583 0000068E 48894809                mov SOB_PAIR_CDR(rax), rcx
   584 00000692 48895001                mov SOB_PAIR_CAR(rax), rdx
   585 00000696 4983E808                sub r8, 8
   586 0000069A 49FFCA                  dec r10
   587 0000069D EBD6                    jmp .L_lambda_opt_stack_shrink_loop_002f
   588                                  .L_lambda_opt_stack_shrink_loop_exit_002f:
   589 0000069F 4889442418              mov [rsp+8*(2+1)], rax
   590 000006A4 41BA01000000            mov r10, 1
   591 000006AA 4C89542410              mov [rsp+16], r10
   592                                  .L_lambda_opt_stack_adjusted_002f:
   593 000006AF 4C8B4D00                mov r9, [rbp]
   594 000006B3 C8000000                enter 0, 0
   595 000006B7 48B8-                   	mov rax, qword (L_constants + 1)
   595 000006B9 [0100000000000000] 
   596 000006C1 50                      	push rax
   597 000006C2 488B4520                mov rax, qword [rbp + 32]
   598 000006C6 50                      	push rax
   599 000006C7 6A02                    	push 2
   600 000006C9 488B0425[68000000]      	mov rax, qword [free_var_13]
   601 000006D1 803805                  	cmp byte [rax], T_closure 
   602 000006D4 0F8578120000                    jne L_code_ptr_error
   603                                  
   604 000006DA 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
   605                                  
   606 000006DE 53                              push rbx
   607                                  
   608 000006DF FF5009                          call SOB_CLOSURE_CODE(rax)
   609                                  
   610 000006E2 50                              	push rax
   611 000006E3 48B8-                   	mov rax, qword (L_constants + 59)
   611 000006E5 [3B00000000000000] 
   612 000006ED 50                      	push rax
   613 000006EE 6A02                    	push 2
   614 000006F0 488B0425[68000000]      	mov rax, qword [free_var_13]
   615 000006F8 803805                  	cmp byte [rax], T_closure 
   616 000006FB 0F8551120000                    jne L_code_ptr_error
   617                                  
   618 00000701 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
   619                                  
   620 00000705 53                              push rbx
   621                                  
   622 00000706 FF5009                          call SOB_CLOSURE_CODE(rax)
   623                                  
   624 00000709 50                              	push rax
   625 0000070A 48B8-                   	mov rax, qword (L_constants + 37)
   625 0000070C [2500000000000000] 
   626 00000714 50                      	push rax
   627 00000715 6A02                    	push 2
   628 00000717 488B0425[68000000]      	mov rax, qword [free_var_13]
   629 0000071F 803805                  	cmp byte [rax], T_closure 
   630 00000722 0F852A120000                    jne L_code_ptr_error
   631                                  
   632 00000728 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
   633                                  
   634 0000072C 53                              push rbx
   635                                  
   636 0000072D FF5009                          call SOB_CLOSURE_CODE(rax)
   637                                  
   638 00000730 50                              	push rax
   639 00000731 48B8-                   	mov rax, qword (L_constants + 16)
   639 00000733 [1000000000000000] 
   640 0000073B 50                      	push rax
   641 0000073C 6A02                    	push 2
   642 0000073E 488B0425[68000000]      	mov rax, qword [free_var_13]
   643                                  .L_lambda_simple_arity_check_ok_02a9:
   644 00000746 803805                  	cmp byte [rax], T_closure
   645                                  
   646 00000749 0F8503120000                    jne L_code_ptr_error                      ; rax <- proc
   647                                  
   648                                  
   649 0000074F 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)             ; rbx <- env(proc)
   650                                  
   651 00000753 53                              push rbx                                  ; env pushed
   652                                  
   653 00000754 FF7508                          push qword [ rbp + 8 * 1]                 ; old ret addr pushed
   654                                  
   655                                  
   656 00000757 FF7500                          push qword [ rbp ]                        ; the same old rbp pushed
   657                                  
   658                                          
   659                                          
   660 0000075A 4C8B4518                        mov r8, [ rbp + 3 * 8]                    ; r8 <- old_code_num_of_args_n
   661                                  
   662 0000075E 4C8B4C2418                      mov r9, [ rsp + 3 * 8 ]                   ; r9 <- new_code_num_of_args_m
   663                                  
   664                                  
   665 00000763 4D89CA                          mov r10, r9
   666 00000766 4983C204                        add r10, 4                                ; total elemnts left to copy: num_of_args + 4 (num_of_args, lexenv retf, rbp in f)
   667                                  
   668                                                                                         
   669 0000076A 4D89C4                          mov r12, r8                               ; r12 <- index in new code
   670 0000076D 4983C404                        add r12, 4
   671                                  
   672 00000771 41BE00000000                    mov r14, 0                                ; r14 <- 0 : init box: curr_arg_to_copy
   673                                  .L_tc_recycle_frame_loop_016f:
   674 00000777 4E8B34D4                	mov r14, [rsp + (r10 * 8)]               ; r14 <- i_element_old_code
   675                                  
   676 0000077B 4E8974E500                      mov [rbp + (r12 * 8)], r14
   677                                  
   678                                  
   679                                  
   680 00000780 41BE00000000                    mov r14, 0                                ; clean box
   681                                  
   682                                  
   683                                                                  
   684 00000786 4983C2FF                        add r10, -1                               ; args_copied_counter--
   685                                  
   686 0000078A 4983C4FF                        add r12, -1 
   687                                  
   688 0000078E 4983FA00                        cmp r10, 0                                ; element_copied_counter == 0 ?
   689 00000792 75E3                    	jne .L_tc_recycle_frame_loop_016f
   690                                  .L_tc_recycle_frame_done_016f:
   691 00000794 5D                      	pop rbp                                  ; restore the old rbp
   692                                  
   693 00000795 488B4D00                        mov rcx, qword [rbp]
   694 00000799 488B5809                        mov rbx, SOB_CLOSURE_CODE(rax)
   695                                            ; rbx <- code(proc)
   696                                  
   697 0000079D FFE3                            jmp rbx
   698 0000079F C9                      leave
   699 000007A0 4C8B4D00                mov r9, [rbp]
   700 000007A4 C22000                  ret 8 * (3 + 1)
   701                                  .L_lambda_opt_end_002f:	; new closure is in rax
   702 000007A7 50                      	push rax
   703 000007A8 6A03                    	push 3
   704 000007AA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   705 000007AF E8E3010000              	call malloc
   706 000007B4 50                      	push rax
   707 000007B5 BF00000000              	mov rdi, 8 * 0	; new rib
   708 000007BA E8D8010000              	call malloc
   709 000007BF 50                      	push rax
   710 000007C0 BF08000000              	mov rdi, 8 * 1	; extended env
   711 000007C5 E8CD010000              	call malloc
   712 000007CA 488B7D10                	mov rdi, ENV
   713 000007CE BE00000000              	mov rsi, 0
   714 000007D3 BA01000000              	mov rdx, 1
   715                                  .L_lambda_simple_env_loop_013b:	; ext_env[i + 1] <-- env[i]
   716 000007D8 4883FE00                	cmp rsi, 0
   717 000007DC 7410                    	je .L_lambda_simple_env_end_013b
   718 000007DE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   719 000007E2 48890CD0                	mov qword [rax + 8 * rdx], rcx
   720 000007E6 48FFC6                  	inc rsi
   721 000007E9 48FFC2                  	inc rdx
   722 000007EC EBEA                    	jmp .L_lambda_simple_env_loop_013b
   723                                  .L_lambda_simple_env_end_013b:
   724 000007EE 5B                      	pop rbx
   725 000007EF BE00000000              	mov rsi, 0
   726                                  .L_lambda_simple_params_loop_013b:	; copy params
   727 000007F4 4883FE00                	cmp rsi, 0
   728 000007F8 740E                    	je .L_lambda_simple_params_end_013b
   729 000007FA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   730 000007FF 488914F3                	mov qword [rbx + 8 * rsi], rdx
   731 00000803 48FFC6                  	inc rsi
   732 00000806 EBEC                    	jmp .L_lambda_simple_params_loop_013b
   733                                  .L_lambda_simple_params_end_013b:
   734 00000808 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   735 0000080B 4889C3                  	mov rbx, rax
   736 0000080E 58                      	pop rax
   737 0000080F C60005                  	mov byte [rax], T_closure
   738 00000812 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   739 00000816 48C74009[23080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_013b
   740 0000081E E984000000              	jmp .L_lambda_simple_end_013b
   741                                  .L_lambda_simple_code_013b:	; lambda-simple body
   742 00000823 48837C241003            	cmp qword [rsp + 8 * 2], 3
   743 00000829 740B                    	je .L_lambda_simple_arity_check_ok_02aa
   744 0000082B FF742410                	push qword [rsp + 8 * 2]
   745 0000082F 6A03                    	push 3
   746 00000831 E91A010000              	jmp L_error_incorrect_arity_simple
   747                                  .L_lambda_simple_arity_check_ok_02aa:
   748 00000836 C8000000                	enter 0, 0
   749 0000083A 488B4530                mov rax, qword [rbp + 48]
   750 0000083E 50                      	push rax
   751 0000083F 488B4528                mov rax, qword [rbp + 40]
   752 00000843 50                      	push rax
   753 00000844 6A02                    	push 2
   754 00000846 488B4520                mov rax, qword [rbp + 32]
   755                                  .L_lambda_simple_arity_check_ok_02ab:
   756 0000084A 803805                  	cmp byte [rax], T_closure
   757                                  
   758 0000084D 0F85FF100000                    jne L_code_ptr_error                      ; rax <- proc
   759                                  
   760                                  
   761 00000853 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)             ; rbx <- env(proc)
   762                                  
   763 00000857 53                              push rbx                                  ; env pushed
   764                                  
   765 00000858 FF7508                          push qword [ rbp + 8 * 1]                 ; old ret addr pushed
   766                                  
   767                                  
   768 0000085B FF7500                          push qword [ rbp ]                        ; the same old rbp pushed
   769                                  
   770                                          
   771                                          
   772 0000085E 4C8B4518                        mov r8, [ rbp + 3 * 8]                    ; r8 <- old_code_num_of_args_n
   773                                  
   774 00000862 4C8B4C2418                      mov r9, [ rsp + 3 * 8 ]                   ; r9 <- new_code_num_of_args_m
   775                                  
   776                                  
   777 00000867 4D89CA                          mov r10, r9
   778 0000086A 4983C204                        add r10, 4                                ; total elemnts left to copy: num_of_args + 4 (num_of_args, lexenv retf, rbp in f)
   779                                  
   780                                                                                         
   781 0000086E 4D89C4                          mov r12, r8                               ; r12 <- index in new code
   782 00000871 4983C404                        add r12, 4
   783                                  
   784 00000875 41BE00000000                    mov r14, 0                                ; r14 <- 0 : init box: curr_arg_to_copy
   785                                  .L_tc_recycle_frame_loop_0170:
   786 0000087B 4E8B34D4                	mov r14, [rsp + (r10 * 8)]               ; r14 <- i_element_old_code
   787                                  
   788 0000087F 4E8974E500                      mov [rbp + (r12 * 8)], r14
   789                                  
   790                                  
   791                                  
   792 00000884 41BE00000000                    mov r14, 0                                ; clean box
   793                                  
   794                                  
   795                                                                  
   796 0000088A 4983C2FF                        add r10, -1                               ; args_copied_counter--
   797                                  
   798 0000088E 4983C4FF                        add r12, -1 
   799                                  
   800 00000892 4983FA00                        cmp r10, 0                                ; element_copied_counter == 0 ?
   801 00000896 75E3                    	jne .L_tc_recycle_frame_loop_0170
   802                                  .L_tc_recycle_frame_done_0170:
   803 00000898 5D                      	pop rbp                                  ; restore the old rbp
   804                                  
   805 00000899 488B4D00                        mov rcx, qword [rbp]
   806 0000089D 488B5809                        mov rbx, SOB_CLOSURE_CODE(rax)
   807                                            ; rbx <- code(proc)
   808                                  
   809 000008A1 FFE3                            jmp rbx
   810 000008A3 C9                      	leave
   811 000008A4 C22800                  	ret 8 * (2 + 3)
   812                                  .L_lambda_simple_end_013b:	; new closure is in rax
   813 000008A7 803805                  	cmp byte [rax], T_closure 
   814 000008AA 0F85A2100000                    jne L_code_ptr_error
   815                                  
   816 000008B0 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
   817                                  
   818 000008B4 53                              push rbx
   819                                  
   820 000008B5 FF5009                          call SOB_CLOSURE_CODE(rax)
   821                                  
   822                                          
   823 000008B8 4889C7                  	mov rdi, rax
   824 000008BB E8E8000000              	call print_sexpr_if_not_void
   825                                  
   826 000008C0 48BF-                           mov rdi, fmt_memory_usage
   826 000008C2 [C500000000000000] 
   827 000008CA 488B3425[4C010000]              mov rsi, qword [top_of_memory]
   828 000008D2 4881EE[C0010000]                sub rsi, memory
   829 000008D9 B800000000                      mov rax, 0
   830                                  	ENTER
   830 000008DE C8000000            <1>  enter 0, 0
   830 000008E2 4883E4F0            <1>  and rsp, ~15
   831 000008E6 E8(00000000)                    call printf
   832                                  	LEAVE
   832 000008EB C9                  <1>  leave
   833 000008EC C9                      	leave
   834 000008ED C3                      	ret
   835                                  
   836                                  L_error_non_closure:
   837 000008EE 488B3C25[00000000]              mov rdi, qword [stderr]
   838 000008F6 48BE-                           mov rsi, fmt_non_closure
   838 000008F8 [FC00000000000000] 
   839 00000900 B800000000                      mov rax, 0
   840                                  	ENTER
   840 00000905 C8000000            <1>  enter 0, 0
   840 00000909 4883E4F0            <1>  and rsp, ~15
   841 0000090D E8(00000000)                    call fprintf
   842                                  	LEAVE
   842 00000912 C9                  <1>  leave
   843 00000913 48C7C0FEFFFFFF                  mov rax, -2
   844 0000091A E8(00000000)                    call exit
   845                                  
   846                                  L_error_improper_list:
   847 0000091F 488B3C25[00000000]      	mov rdi, qword [stderr]
   848 00000927 48BE-                   	mov rsi, fmt_error_improper_list
   848 00000929 [2401000000000000] 
   849 00000931 B800000000              	mov rax, 0
   850                                  	ENTER
   850 00000936 C8000000            <1>  enter 0, 0
   850 0000093A 4883E4F0            <1>  and rsp, ~15
   851 0000093E E8(00000000)            	call fprintf
   852                                  	LEAVE
   852 00000943 C9                  <1>  leave
   853 00000944 48C7C0F9FFFFFF          	mov rax, -7
   854 0000094B E8(00000000)            	call exit
   855                                  
   856                                  L_error_incorrect_arity_simple:
   857 00000950 488B3C25[00000000]              mov rdi, qword [stderr]
   858 00000958 48BE-                           mov rsi, fmt_incorrect_arity_simple
   858 0000095A [6600000000000000] 
   859 00000962 EB12                            jmp L_error_incorrect_arity_common
   860                                  L_error_incorrect_arity_opt:
   861 00000964 488B3C25[00000000]              mov rdi, qword [stderr]
   862 0000096C 48BE-                           mov rsi, fmt_incorrect_arity_opt
   862 0000096E [9100000000000000] 
   863                                  L_error_incorrect_arity_common:
   864 00000976 5A                              pop rdx
   865 00000977 59                              pop rcx
   866 00000978 B800000000                      mov rax, 0
   867                                  	ENTER
   867 0000097D C8000000            <1>  enter 0, 0
   867 00000981 4883E4F0            <1>  and rsp, ~15
   868 00000985 E8(00000000)                    call fprintf
   869                                  	LEAVE
   869 0000098A C9                  <1>  leave
   870 0000098B 48C7C0FAFFFFFF                  mov rax, -6
   871 00000992 E8(00000000)                    call exit
   872                                  
   873                                  section .data
   874                                  fmt_incorrect_arity_simple:
   875 00000066 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   875 0000006F 74656420256C642061-
   875 00000078 7267756D656E74732C-
   875 00000081 206275742067697665-
   875 0000008A 6E20256C640A00     
   876                                  fmt_incorrect_arity_opt:
   877 00000091 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   877 0000009A 746564206174206C65-
   877 000000A3 61737420256C642061-
   877 000000AC 7267756D656E74732C-
   877 000000B5 206275742067697665-
   877 000000BE 6E20256C640A00     
   878                                  fmt_memory_usage:
   879 000000C5 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   879 000000CE 6420256C6420627974-
   879 000000D7 6573206F662064796E-
   879 000000E0 616D6963616C6C792D-
   879 000000E9 616C6C6F6361746564-
   879 000000F2 206D656D6F72790A0A-
   879 000000FB 00                 
   880                                  fmt_non_closure:
   881 000000FC 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   881 00000105 7074696E6720746F20-
   881 0000010E 6170706C792061206E-
   881 00000117 6F6E2D636C6F737572-
   881 00000120 65210A00           
   882                                  fmt_error_improper_list:
   883 00000124 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   883 0000012D 7267756D656E742069-
   883 00000136 73206E6F7420612070-
   883 0000013F 726F706572206C6973-
   883 00000148 74210A00           
   884                                  
   885                                  section .bss
   886                                  memory:
   887 000001C0 <res 40000000>          	resb gbytes(1)
   888                                  
   889                                  section .data
   890                                  top_of_memory:
   891 0000014C [C001000000000000]              dq memory
   892                                  
   893                                  section .text
   894                                  malloc:
   895 00000997 488B0425[4C010000]              mov rax, qword [top_of_memory]
   896 0000099F 48013C25[4C010000]              add qword [top_of_memory], rdi
   897 000009A7 C3                              ret
   898                                          
   899                                  print_sexpr_if_not_void:
   900 000009A8 4881FF[00000000]        	cmp rdi, sob_void
   901 000009AF 7501                    	jne print_sexpr
   902 000009B1 C3                      	ret
   903                                  
   904                                  section .data
   905                                  fmt_void:
   906 00000154 233C766F69643E00        	db `#<void>\0`
   907                                  fmt_nil:
   908 0000015C 282900                  	db `()\0`
   909                                  fmt_boolean_false:
   910 0000015F 236600                  	db `#f\0`
   911                                  fmt_boolean_true:
   912 00000162 237400                  	db `#t\0`
   913                                  fmt_char_backslash:
   914 00000165 235C5C00                	db `#\\\\\0`
   915                                  fmt_char_dquote:
   916 00000169 235C2200                	db `#\\"\0`
   917                                  fmt_char_simple:
   918 0000016D 235C256300              	db `#\\%c\0`
   919                                  fmt_char_null:
   920 00000172 235C6E756C00            	db `#\\nul\0`
   921                                  fmt_char_bell:
   922 00000178 235C62656C6C00          	db `#\\bell\0`
   923                                  fmt_char_backspace:
   924 0000017F 235C6261636B737061-     	db `#\\backspace\0`
   924 00000188 636500             
   925                                  fmt_char_tab:
   926 0000018B 235C74616200            	db `#\\tab\0`
   927                                  fmt_char_newline:
   928 00000191 235C6E65776C696E65-     	db `#\\newline\0`
   928 0000019A 00                 
   929                                  fmt_char_formfeed:
   930 0000019B 235C7061676500          	db `#\\page\0`
   931                                  fmt_char_return:
   932 000001A2 235C72657475726E00      	db `#\\return\0`
   933                                  fmt_char_escape:
   934 000001AB 235C65736300            	db `#\\esc\0`
   935                                  fmt_char_space:
   936 000001B1 235C737061636500        	db `#\\space\0`
   937                                  fmt_char_hex:
   938 000001B9 235C782530325800        	db `#\\x%02X\0`
   939                                  fmt_closure:
   940 000001C1 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   940 000001CA 206174203078253038-
   940 000001D3 5820656E763D307825-
   940 000001DC 30385820636F64653D-
   940 000001E5 3078253038583E00   
   941                                  fmt_lparen:
   942 000001ED 2800                    	db `(\0`
   943                                  fmt_dotted_pair:
   944 000001EF 202E2000                	db ` . \0`
   945                                  fmt_rparen:
   946 000001F3 2900                    	db `)\0`
   947                                  fmt_space:
   948 000001F5 2000                    	db ` \0`
   949                                  fmt_empty_vector:
   950 000001F7 23282900                	db `#()\0`
   951                                  fmt_vector:
   952 000001FB 232800                  	db `#(\0`
   953                                  fmt_real:
   954 000001FE 256600                  	db `%f\0`
   955                                  fmt_fraction:
   956 00000201 256C642F256C6400        	db `%ld/%ld\0`
   957                                  fmt_zero:
   958 00000209 3000                    	db `0\0`
   959                                  fmt_int:
   960 0000020B 256C6400                	db `%ld\0`
   961                                  fmt_unknown_sexpr_error:
   962 0000020F 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   962 00000218 6F723A20556E6B6E6F-
   962 00000221 776E2074797065206F-
   962 0000022A 662073657870722028-
   962 00000233 3078253032582920   
   963 0000023B 617420616464726573-     	db `at address 0x%08X\n\n\0`
   963 00000244 73203078253038580A-
   963 0000024D 0A00               
   964                                  fmt_dquote:
   965 0000024F 2200                    	db `\"\0`
   966                                  fmt_string_char:
   967 00000251 256300                          db `%c\0`
   968                                  fmt_string_char_7:
   969 00000254 5C6100                          db `\\a\0`
   970                                  fmt_string_char_8:
   971 00000257 5C6200                          db `\\b\0`
   972                                  fmt_string_char_9:
   973 0000025A 5C7400                          db `\\t\0`
   974                                  fmt_string_char_10:
   975 0000025D 5C6E00                          db `\\n\0`
   976                                  fmt_string_char_11:
   977 00000260 5C7600                          db `\\v\0`
   978                                  fmt_string_char_12:
   979 00000263 5C6600                          db `\\f\0`
   980                                  fmt_string_char_13:
   981 00000266 5C7200                          db `\\r\0`
   982                                  fmt_string_char_34:
   983 00000269 5C2200                          db `\\"\0`
   984                                  fmt_string_char_92:
   985 0000026C 5C5C00                          db `\\\\\0`
   986                                  fmt_string_char_hex:
   987 0000026F 5C7825583B00                    db `\\x%X;\0`
   988                                  
   989                                  section .text
   990                                  
   991                                  print_sexpr:
   992                                  	ENTER
   992 000009B2 C8000000            <1>  enter 0, 0
   992 000009B6 4883E4F0            <1>  and rsp, ~15
   993 000009BA 8A07                    	mov al, byte [rdi]
   994 000009BC 3C00                    	cmp al, T_void
   995 000009BE 744D                    	je .Lvoid
   996 000009C0 3C01                    	cmp al, T_nil
   997 000009C2 7458                    	je .Lnil
   998 000009C4 3C09                    	cmp al, T_boolean_false
   999 000009C6 7463                    	je .Lboolean_false
  1000 000009C8 3C0A                    	cmp al, T_boolean_true
  1001 000009CA 746E                    	je .Lboolean_true
  1002 000009CC 3C02                    	cmp al, T_char
  1003 000009CE 7479                    	je .Lchar
  1004 000009D0 3C04                    	cmp al, T_symbol
  1005 000009D2 0F84BB010000            	je .Lsymbol
  1006 000009D8 3C21                    	cmp al, T_pair
  1007 000009DA 0F84D6010000            	je .Lpair
  1008 000009E0 3C22                    	cmp al, T_vector
  1009 000009E2 0F849F020000            	je .Lvector
  1010 000009E8 3C05                    	cmp al, T_closure
  1011 000009EA 0F8489010000            	je .Lclosure
  1012 000009F0 3C12                    	cmp al, T_real
  1013 000009F2 0F8430030000            	je .Lreal
  1014 000009F8 3C11                    	cmp al, T_rational
  1015 000009FA 0F8456030000            	je .Lrational
  1016 00000A00 3C03                    	cmp al, T_string
  1017 00000A02 0F848F030000            	je .Lstring
  1018                                  
  1019 00000A08 E9C7040000              	jmp .Lunknown_sexpr_type
  1020                                  
  1021                                  .Lvoid:
  1022 00000A0D 48BF-                   	mov rdi, fmt_void
  1022 00000A0F [5401000000000000] 
  1023 00000A17 E9F5040000              	jmp .Lemit
  1024                                  
  1025                                  .Lnil:
  1026 00000A1C 48BF-                   	mov rdi, fmt_nil
  1026 00000A1E [5C01000000000000] 
  1027 00000A26 E9E6040000              	jmp .Lemit
  1028                                  
  1029                                  .Lboolean_false:
  1030 00000A2B 48BF-                   	mov rdi, fmt_boolean_false
  1030 00000A2D [5F01000000000000] 
  1031 00000A35 E9D7040000              	jmp .Lemit
  1032                                  
  1033                                  .Lboolean_true:
  1034 00000A3A 48BF-                   	mov rdi, fmt_boolean_true
  1034 00000A3C [6201000000000000] 
  1035 00000A44 E9C8040000              	jmp .Lemit
  1036                                  
  1037                                  .Lchar:
  1038 00000A49 8A4701                  	mov al, byte [rdi + 1]
  1039 00000A4C 3C20                    	cmp al, ' '
  1040 00000A4E 7E28                    	jle .Lchar_whitespace
  1041 00000A50 3C5C                    	cmp al, 92 		; backslash
  1042 00000A52 0F847C000000            	je .Lchar_backslash
  1043 00000A58 3C22                    	cmp al, '"'
  1044 00000A5A 0F8483000000            	je .Lchar_dquote
  1045 00000A60 4825FF000000            	and rax, 255
  1046 00000A66 48BF-                   	mov rdi, fmt_char_simple
  1046 00000A68 [6D01000000000000] 
  1047 00000A70 4889C6                  	mov rsi, rax
  1048 00000A73 E999040000              	jmp .Lemit
  1049                                  
  1050                                  .Lchar_whitespace:
  1051 00000A78 3C00                    	cmp al, 0
  1052 00000A7A 7476                    	je .Lchar_null
  1053 00000A7C 3C07                    	cmp al, 7
  1054 00000A7E 0F847D000000            	je .Lchar_bell
  1055 00000A84 3C08                    	cmp al, 8
  1056 00000A86 0F8484000000            	je .Lchar_backspace
  1057 00000A8C 3C09                    	cmp al, 9
  1058 00000A8E 0F848B000000            	je .Lchar_tab
  1059 00000A94 3C0A                    	cmp al, 10
  1060 00000A96 0F8492000000            	je .Lchar_newline
  1061 00000A9C 3C0C                    	cmp al, 12
  1062 00000A9E 0F8499000000            	je .Lchar_formfeed
  1063 00000AA4 3C0D                    	cmp al, 13
  1064 00000AA6 0F84A0000000            	je .Lchar_return
  1065 00000AAC 3C1B                    	cmp al, 27
  1066 00000AAE 0F84A7000000            	je .Lchar_escape
  1067 00000AB4 4825FF000000            	and rax, 255
  1068 00000ABA 3C20                    	cmp al, ' '
  1069 00000ABC 0F84A8000000            	je .Lchar_space
  1070 00000AC2 48BF-                   	mov rdi, fmt_char_hex
  1070 00000AC4 [B901000000000000] 
  1071 00000ACC 4889C6                  	mov rsi, rax
  1072 00000ACF E93D040000              	jmp .Lemit	
  1073                                  
  1074                                  .Lchar_backslash:
  1075 00000AD4 48BF-                   	mov rdi, fmt_char_backslash
  1075 00000AD6 [6501000000000000] 
  1076 00000ADE E92E040000              	jmp .Lemit
  1077                                  
  1078                                  .Lchar_dquote:
  1079 00000AE3 48BF-                   	mov rdi, fmt_char_dquote
  1079 00000AE5 [6901000000000000] 
  1080 00000AED E91F040000              	jmp .Lemit
  1081                                  
  1082                                  .Lchar_null:
  1083 00000AF2 48BF-                   	mov rdi, fmt_char_null
  1083 00000AF4 [7201000000000000] 
  1084 00000AFC E910040000              	jmp .Lemit
  1085                                  
  1086                                  .Lchar_bell:
  1087 00000B01 48BF-                   	mov rdi, fmt_char_bell
  1087 00000B03 [7801000000000000] 
  1088 00000B0B E901040000              	jmp .Lemit
  1089                                  
  1090                                  .Lchar_backspace:
  1091 00000B10 48BF-                   	mov rdi, fmt_char_backspace
  1091 00000B12 [7F01000000000000] 
  1092 00000B1A E9F2030000              	jmp .Lemit
  1093                                  
  1094                                  .Lchar_tab:
  1095 00000B1F 48BF-                   	mov rdi, fmt_char_tab
  1095 00000B21 [8B01000000000000] 
  1096 00000B29 E9E3030000              	jmp .Lemit
  1097                                  
  1098                                  .Lchar_newline:
  1099 00000B2E 48BF-                   	mov rdi, fmt_char_newline
  1099 00000B30 [9101000000000000] 
  1100 00000B38 E9D4030000              	jmp .Lemit
  1101                                  
  1102                                  .Lchar_formfeed:
  1103 00000B3D 48BF-                   	mov rdi, fmt_char_formfeed
  1103 00000B3F [9B01000000000000] 
  1104 00000B47 E9C5030000              	jmp .Lemit
  1105                                  
  1106                                  .Lchar_return:
  1107 00000B4C 48BF-                   	mov rdi, fmt_char_return
  1107 00000B4E [A201000000000000] 
  1108 00000B56 E9B6030000              	jmp .Lemit
  1109                                  
  1110                                  .Lchar_escape:
  1111 00000B5B 48BF-                   	mov rdi, fmt_char_escape
  1111 00000B5D [AB01000000000000] 
  1112 00000B65 E9A7030000              	jmp .Lemit
  1113                                  
  1114                                  .Lchar_space:
  1115 00000B6A 48BF-                   	mov rdi, fmt_char_space
  1115 00000B6C [B101000000000000] 
  1116 00000B74 E998030000              	jmp .Lemit
  1117                                  
  1118                                  .Lclosure:
  1119 00000B79 4889FE                  	mov rsi, qword rdi
  1120 00000B7C 48BF-                   	mov rdi, fmt_closure
  1120 00000B7E [C101000000000000] 
  1121 00000B86 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  1122 00000B8A 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  1123 00000B8E E97E030000              	jmp .Lemit
  1124                                  
  1125                                  .Lsymbol:
  1126 00000B93 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  1127 00000B97 BE01000000              	mov rsi, 1		 ; size = 1 byte
  1128 00000B9C 488B5701                	mov rdx, qword [rdi + 1] ; length
  1129 00000BA0 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  1130 00000BA4 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  1131 00000BAC E8(00000000)            	call fwrite
  1132 00000BB1 E970030000              	jmp .Lend
  1133                                  	
  1134                                  .Lpair:
  1135 00000BB6 57                      	push rdi
  1136 00000BB7 48BF-                   	mov rdi, fmt_lparen
  1136 00000BB9 [ED01000000000000] 
  1137 00000BC1 B800000000              	mov rax, 0
  1138                                          ENTER
  1138 00000BC6 C8000000            <1>  enter 0, 0
  1138 00000BCA 4883E4F0            <1>  and rsp, ~15
  1139 00000BCE E8(00000000)            	call printf
  1140                                          LEAVE
  1140 00000BD3 C9                  <1>  leave
  1141 00000BD4 488B3C24                	mov rdi, qword [rsp] 	; pair
  1142 00000BD8 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1143 00000BDC E8D1FDFFFF              	call print_sexpr
  1144 00000BE1 5F                      	pop rdi 		; pair
  1145 00000BE2 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1146                                  .Lcdr:
  1147 00000BE6 8A07                    	mov al, byte [rdi]
  1148 00000BE8 3C01                    	cmp al, T_nil
  1149 00000BEA 7447                    	je .Lcdr_nil
  1150 00000BEC 3C21                    	cmp al, T_pair
  1151 00000BEE 7462                    	je .Lcdr_pair
  1152 00000BF0 57                      	push rdi
  1153 00000BF1 48BF-                   	mov rdi, fmt_dotted_pair
  1153 00000BF3 [EF01000000000000] 
  1154 00000BFB B800000000              	mov rax, 0
  1155                                  	ENTER
  1155 00000C00 C8000000            <1>  enter 0, 0
  1155 00000C04 4883E4F0            <1>  and rsp, ~15
  1156 00000C08 E8(00000000)            	call printf
  1157                                  	LEAVE
  1157 00000C0D C9                  <1>  leave
  1158 00000C0E 5F                      	pop rdi
  1159 00000C0F E89EFDFFFF              	call print_sexpr
  1160 00000C14 48BF-                   	mov rdi, fmt_rparen
  1160 00000C16 [F301000000000000] 
  1161 00000C1E B800000000              	mov rax, 0
  1162                                  	ENTER
  1162 00000C23 C8000000            <1>  enter 0, 0
  1162 00000C27 4883E4F0            <1>  and rsp, ~15
  1163 00000C2B E8(00000000)            	call printf
  1164                                  	LEAVE
  1164 00000C30 C9                  <1>  leave
  1165                                  	LEAVE
  1165 00000C31 C9                  <1>  leave
  1166 00000C32 C3                      	ret
  1167                                  
  1168                                  .Lcdr_nil:
  1169 00000C33 48BF-                   	mov rdi, fmt_rparen
  1169 00000C35 [F301000000000000] 
  1170 00000C3D B800000000              	mov rax, 0
  1171                                  	ENTER
  1171 00000C42 C8000000            <1>  enter 0, 0
  1171 00000C46 4883E4F0            <1>  and rsp, ~15
  1172 00000C4A E8(00000000)            	call printf
  1173                                  	LEAVE
  1173 00000C4F C9                  <1>  leave
  1174                                  	LEAVE
  1174 00000C50 C9                  <1>  leave
  1175 00000C51 C3                      	ret
  1176                                  
  1177                                  .Lcdr_pair:
  1178 00000C52 57                      	push rdi
  1179 00000C53 48BF-                   	mov rdi, fmt_space
  1179 00000C55 [F501000000000000] 
  1180 00000C5D B800000000              	mov rax, 0
  1181                                  	ENTER
  1181 00000C62 C8000000            <1>  enter 0, 0
  1181 00000C66 4883E4F0            <1>  and rsp, ~15
  1182 00000C6A E8(00000000)            	call printf
  1183                                  	LEAVE
  1183 00000C6F C9                  <1>  leave
  1184 00000C70 488B3C24                	mov rdi, qword [rsp]
  1185 00000C74 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1186 00000C78 E835FDFFFF              	call print_sexpr
  1187 00000C7D 5F                      	pop rdi
  1188 00000C7E 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1189 00000C82 E95FFFFFFF              	jmp .Lcdr
  1190                                  
  1191                                  .Lvector:
  1192 00000C87 488B4701                	mov rax, qword [rdi + 1] ; length
  1193 00000C8B 4883F800                	cmp rax, 0
  1194 00000C8F 0F8484000000            	je .Lvector_empty
  1195 00000C95 57                      	push rdi
  1196 00000C96 48BF-                   	mov rdi, fmt_vector
  1196 00000C98 [FB01000000000000] 
  1197 00000CA0 B800000000              	mov rax, 0
  1198                                  	ENTER
  1198 00000CA5 C8000000            <1>  enter 0, 0
  1198 00000CA9 4883E4F0            <1>  and rsp, ~15
  1199 00000CAD E8(00000000)            	call printf
  1200                                  	LEAVE
  1200 00000CB2 C9                  <1>  leave
  1201 00000CB3 488B3C24                	mov rdi, qword [rsp]
  1202 00000CB7 FF7701                  	push qword [rdi + 1]
  1203 00000CBA 6A01                    	push 1
  1204 00000CBC 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  1205 00000CC0 E8EDFCFFFF              	call print_sexpr
  1206                                  .Lvector_loop:
  1207                                  	; [rsp] index
  1208                                  	; [rsp + 8*1] limit
  1209                                  	; [rsp + 8*2] vector
  1210 00000CC5 488B0424                	mov rax, qword [rsp]
  1211 00000CC9 483B442408              	cmp rax, qword [rsp + 8*1]
  1212 00000CCE 7436                    	je .Lvector_end
  1213 00000CD0 48BF-                   	mov rdi, fmt_space
  1213 00000CD2 [F501000000000000] 
  1214 00000CDA B800000000              	mov rax, 0
  1215                                  	ENTER
  1215 00000CDF C8000000            <1>  enter 0, 0
  1215 00000CE3 4883E4F0            <1>  and rsp, ~15
  1216 00000CE7 E8(00000000)            	call printf
  1217                                  	LEAVE
  1217 00000CEC C9                  <1>  leave
  1218 00000CED 488B0424                	mov rax, qword [rsp]
  1219 00000CF1 488B5C2410              	mov rbx, qword [rsp + 8*2]
  1220 00000CF6 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  1221 00000CFB E8B2FCFFFF              	call print_sexpr
  1222 00000D00 48FF0424                	inc qword [rsp]
  1223 00000D04 EBBF                    	jmp .Lvector_loop
  1224                                  
  1225                                  .Lvector_end:
  1226 00000D06 4883C418                	add rsp, 8*3
  1227 00000D0A 48BF-                   	mov rdi, fmt_rparen
  1227 00000D0C [F301000000000000] 
  1228 00000D14 E9F8010000              	jmp .Lemit	
  1229                                  
  1230                                  .Lvector_empty:
  1231 00000D19 48BF-                   	mov rdi, fmt_empty_vector
  1231 00000D1B [F701000000000000] 
  1232 00000D23 E9E9010000              	jmp .Lemit
  1233                                  
  1234                                  .Lreal:
  1235 00000D28 FF7701                  	push qword [rdi + 1]
  1236 00000D2B F20F100424              	movsd xmm0, qword [rsp]
  1237 00000D30 4883C408                	add rsp, 8*1
  1238 00000D34 48BF-                   	mov rdi, fmt_real
  1238 00000D36 [FE01000000000000] 
  1239 00000D3E B801000000              	mov rax, 1
  1240                                  	ENTER
  1240 00000D43 C8000000            <1>  enter 0, 0
  1240 00000D47 4883E4F0            <1>  and rsp, ~15
  1241 00000D4B E8(00000000)            	call printf
  1242                                  	LEAVE
  1242 00000D50 C9                  <1>  leave
  1243 00000D51 E9D0010000              	jmp .Lend
  1244                                  
  1245                                  .Lrational:
  1246 00000D56 488B7701                	mov rsi, qword [rdi + 1]
  1247 00000D5A 488B5709                	mov rdx, qword [rdi + 1 + 8]
  1248 00000D5E 4883FE00                	cmp rsi, 0
  1249 00000D62 7415                    	je .Lrat_zero
  1250 00000D64 4883FA01                	cmp rdx, 1
  1251 00000D68 741E                    	je .Lrat_int
  1252 00000D6A 48BF-                   	mov rdi, fmt_fraction
  1252 00000D6C [0102000000000000] 
  1253 00000D74 E998010000              	jmp .Lemit
  1254                                  
  1255                                  .Lrat_zero:
  1256 00000D79 48BF-                   	mov rdi, fmt_zero
  1256 00000D7B [0902000000000000] 
  1257 00000D83 E989010000              	jmp .Lemit
  1258                                  
  1259                                  .Lrat_int:
  1260 00000D88 48BF-                   	mov rdi, fmt_int
  1260 00000D8A [0B02000000000000] 
  1261 00000D92 E97A010000              	jmp .Lemit
  1262                                  
  1263                                  .Lstring:
  1264 00000D97 488D4709                	lea rax, [rdi + 1 + 8]
  1265 00000D9B 50                      	push rax
  1266 00000D9C FF7701                  	push qword [rdi + 1]
  1267 00000D9F 48BF-                   	mov rdi, fmt_dquote
  1267 00000DA1 [4F02000000000000] 
  1268 00000DA9 B800000000              	mov rax, 0
  1269                                  	ENTER
  1269 00000DAE C8000000            <1>  enter 0, 0
  1269 00000DB2 4883E4F0            <1>  and rsp, ~15
  1270 00000DB6 E8(00000000)            	call printf
  1271                                  	LEAVE
  1271 00000DBB C9                  <1>  leave
  1272                                  .Lstring_loop:
  1273                                  	; qword [rsp]: limit
  1274                                  	; qword [rsp + 8*1]: char *
  1275 00000DBC 48833C2400              	cmp qword [rsp], 0
  1276 00000DC1 0F84FD000000            	je .Lstring_end
  1277 00000DC7 488B442408              	mov rax, qword [rsp + 8*1]
  1278 00000DCC 8A00                    	mov al, byte [rax]
  1279 00000DCE 4825FF000000            	and rax, 255
  1280 00000DD4 3C07                    	cmp al, 7
  1281 00000DD6 7468                            je .Lstring_char_7
  1282 00000DD8 3C08                            cmp al, 8
  1283 00000DDA 7470                            je .Lstring_char_8
  1284 00000DDC 3C09                            cmp al, 9
  1285 00000DDE 7478                            je .Lstring_char_9
  1286 00000DE0 3C0A                            cmp al, 10
  1287 00000DE2 0F847C000000                    je .Lstring_char_10
  1288 00000DE8 3C0B                            cmp al, 11
  1289 00000DEA 0F8480000000                    je .Lstring_char_11
  1290 00000DF0 3C0C                            cmp al, 12
  1291 00000DF2 0F8484000000                    je .Lstring_char_12
  1292 00000DF8 3C0D                            cmp al, 13
  1293 00000DFA 0F8488000000                    je .Lstring_char_13
  1294 00000E00 3C22                            cmp al, 34
  1295 00000E02 0F848C000000                    je .Lstring_char_34
  1297 00000E08 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1298 00000E0A 3C20                            cmp al, ' '
  1299 00000E0C 0F8CA0000000                    jl .Lstring_char_hex
  1300 00000E12 48BF-                           mov rdi, fmt_string_char
  1300 00000E14 [5102000000000000] 
  1301 00000E1C 4889C6                          mov rsi, rax
  1302                                  .Lstring_char_emit:
  1303 00000E1F B800000000                      mov rax, 0
  1304                                          ENTER
  1304 00000E24 C8000000            <1>  enter 0, 0
  1304 00000E28 4883E4F0            <1>  and rsp, ~15
  1305 00000E2C E8(00000000)                    call printf
  1306                                          LEAVE
  1306 00000E31 C9                  <1>  leave
  1307 00000E32 48FF0C24                        dec qword [rsp]
  1308 00000E36 48FF442408                      inc qword [rsp + 8*1]
  1309 00000E3B E97CFFFFFF                      jmp .Lstring_loop
  1310                                  
  1311                                  .Lstring_char_7:
  1312 00000E40 48BF-                           mov rdi, fmt_string_char_7
  1312 00000E42 [5402000000000000] 
  1313 00000E4A EBD3                            jmp .Lstring_char_emit
  1314                                  
  1315                                  .Lstring_char_8:
  1316 00000E4C 48BF-                           mov rdi, fmt_string_char_8
  1316 00000E4E [5702000000000000] 
  1317 00000E56 EBC7                            jmp .Lstring_char_emit
  1318                                          
  1319                                  .Lstring_char_9:
  1320 00000E58 48BF-                           mov rdi, fmt_string_char_9
  1320 00000E5A [5A02000000000000] 
  1321 00000E62 EBBB                            jmp .Lstring_char_emit
  1322                                  
  1323                                  .Lstring_char_10:
  1324 00000E64 48BF-                           mov rdi, fmt_string_char_10
  1324 00000E66 [5D02000000000000] 
  1325 00000E6E EBAF                            jmp .Lstring_char_emit
  1326                                  
  1327                                  .Lstring_char_11:
  1328 00000E70 48BF-                           mov rdi, fmt_string_char_11
  1328 00000E72 [6002000000000000] 
  1329 00000E7A EBA3                            jmp .Lstring_char_emit
  1330                                  
  1331                                  .Lstring_char_12:
  1332 00000E7C 48BF-                           mov rdi, fmt_string_char_12
  1332 00000E7E [6302000000000000] 
  1333 00000E86 EB97                            jmp .Lstring_char_emit
  1334                                  
  1335                                  .Lstring_char_13:
  1336 00000E88 48BF-                           mov rdi, fmt_string_char_13
  1336 00000E8A [6602000000000000] 
  1337 00000E92 EB8B                            jmp .Lstring_char_emit
  1338                                  
  1339                                  .Lstring_char_34:
  1340 00000E94 48BF-                           mov rdi, fmt_string_char_34
  1340 00000E96 [6902000000000000] 
  1341 00000E9E E97CFFFFFF                      jmp .Lstring_char_emit
  1342                                  
  1343                                  .Lstring_char_92:
  1344 00000EA3 48BF-                           mov rdi, fmt_string_char_92
  1344 00000EA5 [6C02000000000000] 
  1345 00000EAD E96DFFFFFF                      jmp .Lstring_char_emit
  1346                                  
  1347                                  .Lstring_char_hex:
  1348 00000EB2 48BF-                           mov rdi, fmt_string_char_hex
  1348 00000EB4 [6F02000000000000] 
  1349 00000EBC 4889C6                          mov rsi, rax
  1350 00000EBF E95BFFFFFF                      jmp .Lstring_char_emit        
  1351                                  
  1352                                  .Lstring_end:
  1353 00000EC4 4883C410                	add rsp, 8 * 2
  1354 00000EC8 48BF-                   	mov rdi, fmt_dquote
  1354 00000ECA [4F02000000000000] 
  1355 00000ED2 EB3D                    	jmp .Lemit
  1356                                  
  1357                                  .Lunknown_sexpr_type:
  1358 00000ED4 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1358 00000ED6 [0F02000000000000] 
  1359 00000EDE 4825FF000000            	and rax, 255
  1360 00000EE4 4889C2                  	mov rdx, rax
  1361 00000EE7 4889F9                  	mov rcx, rdi
  1362 00000EEA 488B3C25[00000000]      	mov rdi, qword [stderr]
  1363 00000EF2 B800000000              	mov rax, 0
  1364                                  	ENTER
  1364 00000EF7 C8000000            <1>  enter 0, 0
  1364 00000EFB 4883E4F0            <1>  and rsp, ~15
  1365 00000EFF E8(00000000)            	call fprintf
  1366                                  	LEAVE
  1366 00000F04 C9                  <1>  leave
  1367 00000F05 48C7C0FFFFFFFF          	mov rax, -1
  1368 00000F0C E8(00000000)            	call exit
  1369                                  
  1370                                  .Lemit:
  1371 00000F11 B800000000              	mov rax, 0
  1372                                  	ENTER
  1372 00000F16 C8000000            <1>  enter 0, 0
  1372 00000F1A 4883E4F0            <1>  and rsp, ~15
  1373 00000F1E E8(00000000)            	call printf
  1374                                  	LEAVE
  1374 00000F23 C9                  <1>  leave
  1375 00000F24 EB00                    	jmp .Lend
  1376                                  
  1377                                  .Lend:
  1378                                  	LEAVE
  1378 00000F26 C9                  <1>  leave
  1379 00000F27 C3                      	ret
  1380                                  
  1381                                  ;;; rdi: address of free variable
  1382                                  ;;; rsi: address of code-pointer
  1383                                  bind_primitive:
  1384                                          ENTER
  1384 00000F28 C8000000            <1>  enter 0, 0
  1384 00000F2C 4883E4F0            <1>  and rsp, ~15
  1385 00000F30 57                              push rdi
  1386 00000F31 BF11000000                      mov rdi, (1 + 8 + 8)
  1387 00000F36 E85CFAFFFF                      call malloc
  1388 00000F3B 5F                              pop rdi
  1389 00000F3C C60005                          mov byte [rax], T_closure
  1390 00000F3F 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1391 00000F47 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1392 00000F4B 488907                          mov qword [rdi], rax
  1393                                          LEAVE
  1393 00000F4E C9                  <1>  leave
  1394 00000F4F C3                              ret
  1395                                  
  1396                                  
  1397                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1398                                  ; (* cuurent version!*)
  1399                                  L_code_ptr_bin_apply:
  1400 00000F50 488B0C24                        mov rcx, qword [rsp]
  1401 00000F54 4C8B442410                      mov r8, [rsp +  2 * 8]                          ; r8 <- num_of_args
  1402 00000F59 4983F802                        cmp byte r8, 2       
  1402          ******************       warning: register size specification ignored [-w+other]
  1403 00000F5D 0F858F110000                    jne L_error_arg_count_2                         ; check right number of parameters.           
  1404                                  
  1405 00000F63 4C8B442420                      mov r8, qword [rsp + 4 * 8]                     ; r8 <- list_of_args
  1406                                          assert_pair(r8)
  1406 00000F68 41803821            <1>  cmp byte [%1], %2
  1406 00000F6C 0F851F120000        <1>  jne L_error_incorrect_type
  1407                                  ; bul_bul
  1408 00000F72 41803801                        cmp byte [r8], T_nil 
  1409 00000F76 0F840C110000                    je L_error_arg_count_0                       ; list.length == 0 ?
  1410                                  
  1411 00000F7C 41BB00000000                    mov r11, 0                                      ; list_asrgs_counter init
  1412                                  
  1413 00000F82 4C8B642418                      mov r12, qword [rsp + 3 * 8]                    ; r12 <- proc
  1414 00000F87 803805                          cmp byte [rax], T_closure
  1415 00000F8A 0F855EF9FFFF                    jne L_error_non_closure
  1416                                  
  1417 00000F90 4C8B3424                        mov r14, qword [rsp]                            ; r14 <- ret address
  1418 00000F94 4883C428                        add rsp, 5 * 8                                  ; set rsp to override the last args
  1419                                                                                          ; similliar to 4 pops.
  1420                                  
  1421                                  .L_list_of_args_not_empty_yet:
  1422                                  
  1423                                          assert_pair(r8)
  1423 00000F98 41803821            <1>  cmp byte [%1], %2
  1423 00000F9C 0F85EF110000        <1>  jne L_error_incorrect_type
  1424 00000FA2 4D8B4801                        mov r9, qword SOB_PAIR_CAR(r8)                  ; r9 <- car(list)
  1425 00000FA6 4151                            push r9                                         ; * push arg *
  1426                                          
  1427 00000FA8 4983C301                        add r11, 1                                      ; args_counter ++
  1428                                  
  1429 00000FAC 4D8B5009                        mov r10, qword SOB_PAIR_CDR(r8)                 
  1430 00000FB0 4D89D0                          mov r8, qword r10                               ; r8 <- cdr(list)
  1431                                   
  1432 00000FB3 41803801                        cmp byte [r8], T_nil                            ; rest of the list is empty?
  1433 00000FB7 75DF                            jne .L_list_of_args_not_empty_yet               
  1434                                  
  1435                                  .L_list_of_args_totally_pushed:
  1436                                  
  1437 00000FB9 4153                            push r11                                        ; * push args_counter *
  1438                                  
  1439 00000FBB 4D8B6C2401                      mov r13, SOB_CLOSURE_ENV(r12)                   ; r13 <- proc.env
  1440 00000FC0 4155                            push r13                                        ; * push proc env *
  1441                                  
  1442 00000FC2 4156                            push r14                                        ; * push return address *
  1443                                  
  1444                                  
  1445                                  .L_flip_args_order:
  1446 00000FC4 4D89D8                          mov r8, r11  
  1447 00000FC7 4983C0FF                        add r8, -1                                      ; limit                              
  1448 00000FCB 41BA00000000                    mov r10, qword 0
  1449                                          
  1450                                  .L_flip_loop:
  1451 00000FD1 4983F800                        cmp r8, 0
  1452 00000FD5 7426                            je .L_end_of_flip_loop
  1453 00000FD7 4E8B7CDC10                      mov r15, qword [rsp + (2 + r11) * 8]                    ; r15 <- top
  1454 00000FDC 4E8B74D418                      mov r14, qword [rsp + (3 + r10) * 8]                    ;  r14 <- down
  1455 00000FE1 4E8974DC10                      mov [rsp + (2 + r11) * 8], qword r14                    ; swap
  1456 00000FE6 4E897CD418                      mov [rsp + (3 + r10) * 8], qword r15                    
  1457                                  
  1458 00000FEB 4983C201                        add r10, 1
  1459 00000FEF 4983C3FF                        add r11, -1
  1460                                  
  1461 00000FF3 4983C0FE                        add r8, -2                                      ; arg_left_to_swap -= 2
  1462                                  
  1463 00000FF7 4983F800                        cmp r8, 0
  1464 00000FFB 7FD4                            jg .L_flip_loop
  1465                                  
  1466                                  .L_end_of_flip_loop:
  1467                                  
  1468                                          
  1469                                        
  1470                                  
  1471                                  .L_all_args_are_flipped:
  1472                                  
  1473 00000FFD 4D8B6C2409                      mov r13, SOB_CLOSURE_CODE(r12)
  1474 00001002 41FFE5                          jmp r13
  1475                                  
  1476                                  	
  1477                                  L_code_ptr_is_null:
  1478                                          ENTER
  1478 00001005 C8000000            <1>  enter 0, 0
  1478 00001009 4883E4F0            <1>  and rsp, ~15
  1479 0000100D 48837D1801                      cmp COUNT, 1
  1480 00001012 0F85A5100000                    jne L_error_arg_count_1
  1481 00001018 488B4520                        mov rax, PARAM(0)
  1482 0000101C 803801                          cmp byte [rax], T_nil
  1483 0000101F 750C                            jne .L_false
  1484 00001021 48B8-                           mov rax, sob_boolean_true
  1484 00001023 [0300000000000000] 
  1485 0000102B EB0A                            jmp .L_end
  1486                                  .L_false:
  1487 0000102D 48B8-                           mov rax, sob_boolean_false
  1487 0000102F [0200000000000000] 
  1488                                  .L_end:
  1489                                          LEAVE
  1489 00001037 C9                  <1>  leave
  1490 00001038 C21800                          ret AND_KILL_FRAME(1)
  1491                                  
  1492                                  L_code_ptr_is_pair:
  1493                                          ENTER
  1493 0000103B C8000000            <1>  enter 0, 0
  1493 0000103F 4883E4F0            <1>  and rsp, ~15
  1494 00001043 48837D1801                      cmp COUNT, 1
  1495 00001048 0F856F100000                    jne L_error_arg_count_1
  1496 0000104E 488B4520                        mov rax, PARAM(0)
  1497 00001052 803821                          cmp byte [rax], T_pair
  1498 00001055 750C                            jne .L_false
  1499 00001057 48B8-                           mov rax, sob_boolean_true
  1499 00001059 [0300000000000000] 
  1500 00001061 EB0A                            jmp .L_end
  1501                                  .L_false:
  1502 00001063 48B8-                           mov rax, sob_boolean_false
  1502 00001065 [0200000000000000] 
  1503                                  .L_end:
  1504                                          LEAVE
  1504 0000106D C9                  <1>  leave
  1505 0000106E C21800                          ret AND_KILL_FRAME(1)
  1506                                          
  1507                                  L_code_ptr_is_void:
  1508                                          ENTER
  1508 00001071 C8000000            <1>  enter 0, 0
  1508 00001075 4883E4F0            <1>  and rsp, ~15
  1509 00001079 48837D1801                      cmp COUNT, 1
  1510 0000107E 0F8539100000                    jne L_error_arg_count_1
  1511 00001084 488B4520                        mov rax, PARAM(0)
  1512 00001088 803800                          cmp byte [rax], T_void
  1513 0000108B 750C                            jne .L_false
  1514 0000108D 48B8-                           mov rax, sob_boolean_true
  1514 0000108F [0300000000000000] 
  1515 00001097 EB0A                            jmp .L_end
  1516                                  .L_false:
  1517 00001099 48B8-                           mov rax, sob_boolean_false
  1517 0000109B [0200000000000000] 
  1518                                  .L_end:
  1519                                          LEAVE
  1519 000010A3 C9                  <1>  leave
  1520 000010A4 C21800                          ret AND_KILL_FRAME(1)
  1521                                  
  1522                                  L_code_ptr_is_char:
  1523                                          ENTER
  1523 000010A7 C8000000            <1>  enter 0, 0
  1523 000010AB 4883E4F0            <1>  and rsp, ~15
  1524 000010AF 48837D1801                      cmp COUNT, 1
  1525 000010B4 0F8503100000                    jne L_error_arg_count_1
  1526 000010BA 488B4520                        mov rax, PARAM(0)
  1527 000010BE 803802                          cmp byte [rax], T_char
  1528 000010C1 750C                            jne .L_false
  1529 000010C3 48B8-                           mov rax, sob_boolean_true
  1529 000010C5 [0300000000000000] 
  1530 000010CD EB0A                            jmp .L_end
  1531                                  .L_false:
  1532 000010CF 48B8-                           mov rax, sob_boolean_false
  1532 000010D1 [0200000000000000] 
  1533                                  .L_end:
  1534                                          LEAVE
  1534 000010D9 C9                  <1>  leave
  1535 000010DA C21800                          ret AND_KILL_FRAME(1)
  1536                                  
  1537                                  L_code_ptr_is_string:
  1538                                          ENTER
  1538 000010DD C8000000            <1>  enter 0, 0
  1538 000010E1 4883E4F0            <1>  and rsp, ~15
  1539 000010E5 48837D1801                      cmp COUNT, 1
  1540 000010EA 0F85CD0F0000                    jne L_error_arg_count_1
  1541 000010F0 488B4520                        mov rax, PARAM(0)
  1542 000010F4 803803                          cmp byte [rax], T_string
  1543 000010F7 750C                            jne .L_false
  1544 000010F9 48B8-                           mov rax, sob_boolean_true
  1544 000010FB [0300000000000000] 
  1545 00001103 EB0A                            jmp .L_end
  1546                                  .L_false:
  1547 00001105 48B8-                           mov rax, sob_boolean_false
  1547 00001107 [0200000000000000] 
  1548                                  .L_end:
  1549                                          LEAVE
  1549 0000110F C9                  <1>  leave
  1550 00001110 C21800                          ret AND_KILL_FRAME(1)
  1551                                  
  1552                                  L_code_ptr_is_symbol:
  1553                                          ENTER
  1553 00001113 C8000000            <1>  enter 0, 0
  1553 00001117 4883E4F0            <1>  and rsp, ~15
  1554 0000111B 48837D1801                      cmp COUNT, 1
  1555 00001120 0F85970F0000                    jne L_error_arg_count_1
  1556 00001126 488B4520                        mov rax, PARAM(0)
  1557 0000112A 803804                          cmp byte [rax], T_symbol
  1558 0000112D 750C                            jne .L_false
  1559 0000112F 48B8-                           mov rax, sob_boolean_true
  1559 00001131 [0300000000000000] 
  1560 00001139 EB0A                            jmp .L_end
  1561                                  .L_false:
  1562 0000113B 48B8-                           mov rax, sob_boolean_false
  1562 0000113D [0200000000000000] 
  1563                                  .L_end:
  1564                                          LEAVE
  1564 00001145 C9                  <1>  leave
  1565 00001146 C21800                          ret AND_KILL_FRAME(1)
  1566                                  
  1567                                  L_code_ptr_is_vector:
  1568                                          ENTER
  1568 00001149 C8000000            <1>  enter 0, 0
  1568 0000114D 4883E4F0            <1>  and rsp, ~15
  1569 00001151 48837D1801                      cmp COUNT, 1
  1570 00001156 0F85610F0000                    jne L_error_arg_count_1
  1571 0000115C 488B4520                        mov rax, PARAM(0)
  1572 00001160 803822                          cmp byte [rax], T_vector
  1573 00001163 750C                            jne .L_false
  1574 00001165 48B8-                           mov rax, sob_boolean_true
  1574 00001167 [0300000000000000] 
  1575 0000116F EB0A                            jmp .L_end
  1576                                  .L_false:
  1577 00001171 48B8-                           mov rax, sob_boolean_false
  1577 00001173 [0200000000000000] 
  1578                                  .L_end:
  1579                                          LEAVE
  1579 0000117B C9                  <1>  leave
  1580 0000117C C21800                          ret AND_KILL_FRAME(1)
  1581                                  
  1582                                  L_code_ptr_is_closure:
  1583                                          ENTER
  1583 0000117F C8000000            <1>  enter 0, 0
  1583 00001183 4883E4F0            <1>  and rsp, ~15
  1584 00001187 48837D1801                      cmp COUNT, 1
  1585 0000118C 0F852B0F0000                    jne L_error_arg_count_1
  1586 00001192 488B4520                        mov rax, PARAM(0)
  1587 00001196 803805                          cmp byte [rax], T_closure
  1588 00001199 750C                            jne .L_false
  1589 0000119B 48B8-                           mov rax, sob_boolean_true
  1589 0000119D [0300000000000000] 
  1590 000011A5 EB0A                            jmp .L_end
  1591                                  .L_false:
  1592 000011A7 48B8-                           mov rax, sob_boolean_false
  1592 000011A9 [0200000000000000] 
  1593                                  .L_end:
  1594                                          LEAVE
  1594 000011B1 C9                  <1>  leave
  1595 000011B2 C21800                          ret AND_KILL_FRAME(1)
  1596                                  
  1597                                  L_code_ptr_is_real:
  1598                                          ENTER
  1598 000011B5 C8000000            <1>  enter 0, 0
  1598 000011B9 4883E4F0            <1>  and rsp, ~15
  1599 000011BD 48837D1801                      cmp COUNT, 1
  1600 000011C2 0F85F50E0000                    jne L_error_arg_count_1
  1601 000011C8 488B4520                        mov rax, PARAM(0)
  1602 000011CC 803812                          cmp byte [rax], T_real
  1603 000011CF 750C                            jne .L_false
  1604 000011D1 48B8-                           mov rax, sob_boolean_true
  1604 000011D3 [0300000000000000] 
  1605 000011DB EB0A                            jmp .L_end
  1606                                  .L_false:
  1607 000011DD 48B8-                           mov rax, sob_boolean_false
  1607 000011DF [0200000000000000] 
  1608                                  .L_end:
  1609                                          LEAVE
  1609 000011E7 C9                  <1>  leave
  1610 000011E8 C21800                          ret AND_KILL_FRAME(1)
  1611                                  
  1612                                  L_code_ptr_is_rational:
  1613                                          ENTER
  1613 000011EB C8000000            <1>  enter 0, 0
  1613 000011EF 4883E4F0            <1>  and rsp, ~15
  1614 000011F3 48837D1801                      cmp COUNT, 1
  1615 000011F8 0F85BF0E0000                    jne L_error_arg_count_1
  1616 000011FE 488B4520                        mov rax, PARAM(0)
  1617 00001202 803811                          cmp byte [rax], T_rational
  1618 00001205 750C                            jne .L_false
  1619 00001207 48B8-                           mov rax, sob_boolean_true
  1619 00001209 [0300000000000000] 
  1620 00001211 EB0A                            jmp .L_end
  1621                                  .L_false:
  1622 00001213 48B8-                           mov rax, sob_boolean_false
  1622 00001215 [0200000000000000] 
  1623                                  .L_end:
  1624                                          LEAVE
  1624 0000121D C9                  <1>  leave
  1625 0000121E C21800                          ret AND_KILL_FRAME(1)
  1626                                  
  1627                                  L_code_ptr_is_boolean:
  1628                                          ENTER
  1628 00001221 C8000000            <1>  enter 0, 0
  1628 00001225 4883E4F0            <1>  and rsp, ~15
  1629 00001229 48837D1801                      cmp COUNT, 1
  1630 0000122E 0F85890E0000                    jne L_error_arg_count_1
  1631 00001234 488B4520                        mov rax, PARAM(0)
  1632 00001238 8A18                            mov bl, byte [rax]
  1633 0000123A 80E308                          and bl, T_boolean
  1634 0000123D 740C                            je .L_false
  1635 0000123F 48B8-                           mov rax, sob_boolean_true
  1635 00001241 [0300000000000000] 
  1636 00001249 EB0A                            jmp .L_end
  1637                                  .L_false:
  1638 0000124B 48B8-                           mov rax, sob_boolean_false
  1638 0000124D [0200000000000000] 
  1639                                  .L_end:
  1640                                          LEAVE
  1640 00001255 C9                  <1>  leave
  1641 00001256 C21800                          ret AND_KILL_FRAME(1)
  1642                                          
  1643                                  L_code_ptr_is_number:
  1644                                          ENTER
  1644 00001259 C8000000            <1>  enter 0, 0
  1644 0000125D 4883E4F0            <1>  and rsp, ~15
  1645 00001261 48837D1801                      cmp COUNT, 1
  1646 00001266 0F85510E0000                    jne L_error_arg_count_1
  1647 0000126C 488B4520                        mov rax, PARAM(0)
  1648 00001270 8A18                            mov bl, byte [rax]
  1649 00001272 80E310                          and bl, T_number
  1650 00001275 740C                            je .L_false
  1651 00001277 48B8-                           mov rax, sob_boolean_true
  1651 00001279 [0300000000000000] 
  1652 00001281 EB0A                            jmp .L_end
  1653                                  .L_false:
  1654 00001283 48B8-                           mov rax, sob_boolean_false
  1654 00001285 [0200000000000000] 
  1655                                  .L_end:
  1656                                          LEAVE
  1656 0000128D C9                  <1>  leave
  1657 0000128E C21800                          ret AND_KILL_FRAME(1)
  1658                                          
  1659                                  L_code_ptr_is_collection:
  1660                                          ENTER
  1660 00001291 C8000000            <1>  enter 0, 0
  1660 00001295 4883E4F0            <1>  and rsp, ~15
  1661 00001299 48837D1801                      cmp COUNT, 1
  1662 0000129E 0F85190E0000                    jne L_error_arg_count_1
  1663 000012A4 488B4520                        mov rax, PARAM(0)
  1664 000012A8 8A18                            mov bl, byte [rax]
  1665 000012AA 80E320                          and bl, T_collection
  1666 000012AD 740C                            je .L_false
  1667 000012AF 48B8-                           mov rax, sob_boolean_true
  1667 000012B1 [0300000000000000] 
  1668 000012B9 EB0A                            jmp .L_end
  1669                                  .L_false:
  1670 000012BB 48B8-                           mov rax, sob_boolean_false
  1670 000012BD [0200000000000000] 
  1671                                  .L_end:
  1672                                          LEAVE
  1672 000012C5 C9                  <1>  leave
  1673 000012C6 C21800                          ret AND_KILL_FRAME(1)
  1674                                  
  1675                                  L_code_ptr_cons:
  1676                                          ENTER
  1676 000012C9 C8000000            <1>  enter 0, 0
  1676 000012CD 4883E4F0            <1>  and rsp, ~15
  1677 000012D1 48837D1802                      cmp COUNT, 2
  1678 000012D6 0F85160E0000                    jne L_error_arg_count_2
  1679 000012DC BF11000000                      mov rdi, (1 + 8 + 8)
  1680 000012E1 E8B1F6FFFF                      call malloc
  1681 000012E6 C60021                          mov byte [rax], T_pair
  1682 000012E9 488B5D20                        mov rbx, PARAM(0)
  1683 000012ED 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1684 000012F1 488B5D28                        mov rbx, PARAM(1)
  1685 000012F5 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1686                                          LEAVE
  1686 000012F9 C9                  <1>  leave
  1687 000012FA C22000                          ret AND_KILL_FRAME(2)
  1688                                  
  1689                                  L_code_ptr_display_sexpr:
  1690                                          ENTER
  1690 000012FD C8000000            <1>  enter 0, 0
  1690 00001301 4883E4F0            <1>  and rsp, ~15
  1691 00001305 48837D1801                      cmp COUNT, 1
  1692 0000130A 0F85AD0D0000                    jne L_error_arg_count_1
  1693 00001310 488B7D20                        mov rdi, PARAM(0)
  1694 00001314 E899F6FFFF                      call print_sexpr
  1695 00001319 48B8-                           mov rax, sob_void
  1695 0000131B [0000000000000000] 
  1696                                          LEAVE
  1696 00001323 C9                  <1>  leave
  1697 00001324 C21800                          ret AND_KILL_FRAME(1)
  1698                                  
  1699                                  L_code_ptr_write_char:
  1700                                          ENTER
  1700 00001327 C8000000            <1>  enter 0, 0
  1700 0000132B 4883E4F0            <1>  and rsp, ~15
  1701 0000132F 48837D1801                      cmp COUNT, 1
  1702 00001334 0F85830D0000                    jne L_error_arg_count_1
  1703 0000133A 488B4520                        mov rax, PARAM(0)
  1704                                          assert_char(rax)
  1704 0000133E 803802              <1>  cmp byte [%1], %2
  1704 00001341 0F854A0E0000        <1>  jne L_error_incorrect_type
  1705 00001347 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1706 0000134A 4825FF000000                    and rax, 255
  1707 00001350 48BF-                           mov rdi, fmt_char
  1707 00001352 [7502000000000000] 
  1708 0000135A 4889C6                          mov rsi, rax
  1709 0000135D B800000000                      mov rax, 0
  1710                                  	ENTER
  1710 00001362 C8000000            <1>  enter 0, 0
  1710 00001366 4883E4F0            <1>  and rsp, ~15
  1711 0000136A E8(00000000)                    call printf
  1712                                  	LEAVE
  1712 0000136F C9                  <1>  leave
  1713 00001370 48B8-                           mov rax, sob_void
  1713 00001372 [0000000000000000] 
  1714                                          LEAVE
  1714 0000137A C9                  <1>  leave
  1715 0000137B C21800                          ret AND_KILL_FRAME(1)
  1716                                  
  1717                                  L_code_ptr_car:
  1718                                          ENTER
  1718 0000137E C8000000            <1>  enter 0, 0
  1718 00001382 4883E4F0            <1>  and rsp, ~15
  1719 00001386 48837D1801                      cmp COUNT, 1
  1720 0000138B 0F852C0D0000                    jne L_error_arg_count_1
  1721 00001391 488B4520                        mov rax, PARAM(0)
  1722                                          assert_pair(rax)
  1722 00001395 803821              <1>  cmp byte [%1], %2
  1722 00001398 0F85F30D0000        <1>  jne L_error_incorrect_type
  1723 0000139E 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1724                                          LEAVE
  1724 000013A2 C9                  <1>  leave
  1725 000013A3 C21800                          ret AND_KILL_FRAME(1)
  1726                                          
  1727                                  L_code_ptr_cdr:
  1728                                          ENTER
  1728 000013A6 C8000000            <1>  enter 0, 0
  1728 000013AA 4883E4F0            <1>  and rsp, ~15
  1729 000013AE 48837D1801                      cmp COUNT, 1
  1730 000013B3 0F85040D0000                    jne L_error_arg_count_1
  1731 000013B9 488B4520                        mov rax, PARAM(0)
  1732                                          assert_pair(rax)
  1732 000013BD 803821              <1>  cmp byte [%1], %2
  1732 000013C0 0F85CB0D0000        <1>  jne L_error_incorrect_type
  1733 000013C6 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1734                                          LEAVE
  1734 000013CA C9                  <1>  leave
  1735 000013CB C21800                          ret AND_KILL_FRAME(1)
  1736                                          
  1737                                  L_code_ptr_string_length:
  1738                                          ENTER
  1738 000013CE C8000000            <1>  enter 0, 0
  1738 000013D2 4883E4F0            <1>  and rsp, ~15
  1739 000013D6 48837D1801                      cmp COUNT, 1
  1740 000013DB 0F85DC0C0000                    jne L_error_arg_count_1
  1741 000013E1 488B4520                        mov rax, PARAM(0)
  1742                                          assert_string(rax)
  1742 000013E5 803803              <1>  cmp byte [%1], %2
  1742 000013E8 0F85A30D0000        <1>  jne L_error_incorrect_type
  1743 000013EE 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1744 000013F2 E83A0C0000                      call make_integer
  1745                                          LEAVE
  1745 000013F7 C9                  <1>  leave
  1746 000013F8 C21800                          ret AND_KILL_FRAME(1)
  1747                                  
  1748                                  L_code_ptr_vector_length:
  1749                                          ENTER
  1749 000013FB C8000000            <1>  enter 0, 0
  1749 000013FF 4883E4F0            <1>  and rsp, ~15
  1750 00001403 48837D1801                      cmp COUNT, 1
  1751 00001408 0F85AF0C0000                    jne L_error_arg_count_1
  1752 0000140E 488B4520                        mov rax, PARAM(0)
  1753                                          assert_vector(rax)
  1753 00001412 803822              <1>  cmp byte [%1], %2
  1753 00001415 0F85760D0000        <1>  jne L_error_incorrect_type
  1754 0000141B 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1755 0000141F E80D0C0000                      call make_integer
  1756                                          LEAVE
  1756 00001424 C9                  <1>  leave
  1757 00001425 C21800                          ret AND_KILL_FRAME(1)
  1758                                  
  1759                                  L_code_ptr_real_to_integer:
  1760                                          ENTER
  1760 00001428 C8000000            <1>  enter 0, 0
  1760 0000142C 4883E4F0            <1>  and rsp, ~15
  1761 00001430 48837D1801                      cmp COUNT, 1
  1762 00001435 0F85820C0000                    jne L_error_arg_count_1
  1763 0000143B 488B5D20                        mov rbx, PARAM(0)
  1764                                          assert_real(rbx)
  1764 0000143F 803B12              <1>  cmp byte [%1], %2
  1764 00001442 0F85490D0000        <1>  jne L_error_incorrect_type
  1765 00001448 F20F104301                      movsd xmm0, qword [rbx + 1]
  1766 0000144D F2480F2CF8                      cvttsd2si rdi, xmm0
  1767 00001452 E8DA0B0000                      call make_integer
  1768                                          LEAVE
  1768 00001457 C9                  <1>  leave
  1769 00001458 C21800                          ret AND_KILL_FRAME(1)
  1770                                  
  1771                                  L_code_ptr_exit:
  1772                                          ENTER
  1772 0000145B C8000000            <1>  enter 0, 0
  1772 0000145F 4883E4F0            <1>  and rsp, ~15
  1773 00001463 48837D1800                      cmp COUNT, 0
  1774 00001468 0F851A0C0000                    jne L_error_arg_count_0
  1775 0000146E B800000000                      mov rax, 0
  1776 00001473 E8(00000000)                    call exit
  1777                                  
  1778                                  L_code_ptr_integer_to_real:
  1779                                          ENTER
  1779 00001478 C8000000            <1>  enter 0, 0
  1779 0000147C 4883E4F0            <1>  and rsp, ~15
  1780 00001480 48837D1801                      cmp COUNT, 1
  1781 00001485 0F85320C0000                    jne L_error_arg_count_1
  1782 0000148B 488B4520                        mov rax, PARAM(0)
  1783                                          assert_integer(rax)
  1783                              <1>  assert_rational(%1)
  1783 0000148F 803811              <2>  cmp byte [%1], %2
  1783 00001492 0F85F90C0000        <2>  jne L_error_incorrect_type
  1783 00001498 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
  1783 0000149D 0F85EE0C0000        <1>  jne L_error_incorrect_type
  1784 000014A3 FF7001                          push qword [rax + 1]
  1785 000014A6 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1786 000014AC E8640B0000                      call make_real
  1787                                          LEAVE
  1787 000014B1 C9                  <1>  leave
  1788 000014B2 C21800                          ret AND_KILL_FRAME(1)
  1789                                  
  1790                                  L_code_ptr_rational_to_real:
  1791                                          ENTER
  1791 000014B5 C8000000            <1>  enter 0, 0
  1791 000014B9 4883E4F0            <1>  and rsp, ~15
  1792 000014BD 48837D1801                      cmp COUNT, 1
  1793 000014C2 0F85F50B0000                    jne L_error_arg_count_1
  1794 000014C8 488B4520                        mov rax, PARAM(0)
  1795                                          assert_rational(rax)
  1795 000014CC 803811              <1>  cmp byte [%1], %2
  1795 000014CF 0F85BC0C0000        <1>  jne L_error_incorrect_type
  1796 000014D5 FF7001                          push qword [rax + 1]
  1797 000014D8 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1798 000014DE FF7009                          push qword [rax + 1 + 8]
  1799 000014E1 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1800 000014E7 F20F5EC1                        divsd xmm0, xmm1
  1801 000014EB E8250B0000                      call make_real
  1802                                          LEAVE
  1802 000014F0 C9                  <1>  leave
  1803 000014F1 C21800                          ret AND_KILL_FRAME(1)
  1804                                  
  1805                                  L_code_ptr_char_to_integer:
  1806                                          ENTER
  1806 000014F4 C8000000            <1>  enter 0, 0
  1806 000014F8 4883E4F0            <1>  and rsp, ~15
  1807 000014FC 48837D1801                      cmp COUNT, 1
  1808 00001501 0F85B60B0000                    jne L_error_arg_count_1
  1809 00001507 488B4520                        mov rax, PARAM(0)
  1810                                          assert_char(rax)
  1810 0000150B 803802              <1>  cmp byte [%1], %2
  1810 0000150E 0F857D0C0000        <1>  jne L_error_incorrect_type
  1811 00001514 8A4001                          mov al, byte [rax + 1]
  1812 00001517 4825FF000000                    and rax, 255
  1813 0000151D 4889C7                          mov rdi, rax
  1814 00001520 E80C0B0000                      call make_integer
  1815                                          LEAVE
  1815 00001525 C9                  <1>  leave
  1816 00001526 C21800                          ret AND_KILL_FRAME(1)
  1817                                  
  1818                                  L_code_ptr_integer_to_char:
  1819                                          ENTER
  1819 00001529 C8000000            <1>  enter 0, 0
  1819 0000152D 4883E4F0            <1>  and rsp, ~15
  1820 00001531 48837D1801                      cmp COUNT, 1
  1821 00001536 0F85810B0000                    jne L_error_arg_count_1
  1822 0000153C 488B4520                        mov rax, PARAM(0)
  1823                                          assert_integer(rax)
  1823                              <1>  assert_rational(%1)
  1823 00001540 803811              <2>  cmp byte [%1], %2
  1823 00001543 0F85480C0000        <2>  jne L_error_incorrect_type
  1823 00001549 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
  1823 0000154E 0F853D0C0000        <1>  jne L_error_incorrect_type
  1824 00001554 488B5801                        mov rbx, qword [rax + 1]
  1825 00001558 4883FB00                        cmp rbx, 0
  1826 0000155C 0F8EF50A0000                    jle L_error_integer_range
  1827 00001562 4881FB00010000                  cmp rbx, 256
  1828 00001569 0F8DE80A0000                    jge L_error_integer_range
  1829 0000156F BF02000000                      mov rdi, (1 + 1)
  1830 00001574 E81EF4FFFF                      call malloc
  1831 00001579 C60002                          mov byte [rax], T_char
  1832 0000157C 885801                          mov byte [rax + 1], bl
  1833                                          LEAVE
  1833 0000157F C9                  <1>  leave
  1834 00001580 C21800                          ret AND_KILL_FRAME(1)
  1835                                  
  1836                                  L_code_ptr_trng:
  1837                                          ENTER
  1837 00001583 C8000000            <1>  enter 0, 0
  1837 00001587 4883E4F0            <1>  and rsp, ~15
  1838 0000158B 48837D1800                      cmp COUNT, 0
  1839 00001590 0F85F20A0000                    jne L_error_arg_count_0
  1840 00001596 480FC7F7                        rdrand rdi
  1841 0000159A 48D1EF                          shr rdi, 1
  1842 0000159D E88F0A0000                      call make_integer
  1843                                          LEAVE
  1843 000015A2 C9                  <1>  leave
  1844 000015A3 C21000                          ret AND_KILL_FRAME(0)
  1845                                  
  1846                                  L_code_ptr_is_zero:
  1847                                          ENTER
  1847 000015A6 C8000000            <1>  enter 0, 0
  1847 000015AA 4883E4F0            <1>  and rsp, ~15
  1848 000015AE 48837D1801                      cmp COUNT, 1
  1849 000015B3 0F85040B0000                    jne L_error_arg_count_1
  1850 000015B9 488B4520                        mov rax, PARAM(0)
  1851 000015BD 803811                          cmp byte [rax], T_rational
  1852 000015C0 740A                            je .L_rational
  1853 000015C2 803812                          cmp byte [rax], T_real
  1854 000015C5 740E                            je .L_real
  1855 000015C7 E9C50B0000                      jmp L_error_incorrect_type
  1856                                  .L_rational:
  1857 000015CC 4883780100                      cmp qword [rax + 1], 0
  1858 000015D1 7420                            je .L_zero
  1859 000015D3 EB12                            jmp .L_not_zero
  1860                                  .L_real:
  1861 000015D5 660FEFC0                        pxor xmm0, xmm0
  1862 000015D9 FF7001                          push qword [rax + 1]
  1863 000015DC F20F100C24                      movsd xmm1, qword [rsp]
  1864 000015E1 660F2EC1                        ucomisd xmm0, xmm1
  1865 000015E5 740C                            je .L_zero
  1866                                  .L_not_zero:
  1867 000015E7 48B8-                           mov rax, sob_boolean_false
  1867 000015E9 [0200000000000000] 
  1868 000015F1 EB0A                            jmp .L_end
  1869                                  .L_zero:
  1870 000015F3 48B8-                           mov rax, sob_boolean_true
  1870 000015F5 [0300000000000000] 
  1871                                  .L_end:
  1872                                          LEAVE
  1872 000015FD C9                  <1>  leave
  1873 000015FE C21800                          ret AND_KILL_FRAME(1)
  1874                                  
  1875                                  L_code_ptr_is_integer:
  1876                                          ENTER
  1876 00001601 C8000000            <1>  enter 0, 0
  1876 00001605 4883E4F0            <1>  and rsp, ~15
  1877 00001609 48837D1801                      cmp COUNT, 1
  1878 0000160E 0F85A90A0000                    jne L_error_arg_count_1
  1879 00001614 488B4520                        mov rax, PARAM(0)
  1880 00001618 803811                          cmp byte [rax], T_rational
  1881 0000161B 7513                            jne .L_false
  1882 0000161D 4883780901                      cmp qword [rax + 1 + 8], 1
  1883 00001622 750C                            jne .L_false
  1884 00001624 48B8-                           mov rax, sob_boolean_true
  1884 00001626 [0300000000000000] 
  1885 0000162E EB0A                            jmp .L_exit
  1886                                  .L_false:
  1887 00001630 48B8-                           mov rax, sob_boolean_false
  1887 00001632 [0200000000000000] 
  1888                                  .L_exit:
  1889                                          LEAVE
  1889 0000163A C9                  <1>  leave
  1890 0000163B C21800                          ret AND_KILL_FRAME(1)
  1891                                  
  1892                                  L_code_ptr_raw_bin_add_rr:
  1893                                          ENTER
  1893 0000163E C8000000            <1>  enter 0, 0
  1893 00001642 4883E4F0            <1>  and rsp, ~15
  1894 00001646 48837D1802                      cmp COUNT, 2
  1895 0000164B 0F85A10A0000                    jne L_error_arg_count_2
  1896 00001651 488B5D20                        mov rbx, PARAM(0)
  1897                                          assert_real(rbx)
  1897 00001655 803B12              <1>  cmp byte [%1], %2
  1897 00001658 0F85330B0000        <1>  jne L_error_incorrect_type
  1898 0000165E 488B4D28                        mov rcx, PARAM(1)
  1899                                          assert_real(rcx)
  1899 00001662 803912              <1>  cmp byte [%1], %2
  1899 00001665 0F85260B0000        <1>  jne L_error_incorrect_type
  1900 0000166B F20F104301                      movsd xmm0, qword [rbx + 1]
  1901 00001670 F20F104901                      movsd xmm1, qword [rcx + 1]
  1902 00001675 F20F58C1                        addsd xmm0, xmm1
  1903 00001679 E897090000                      call make_real
  1904                                          LEAVE
  1904 0000167E C9                  <1>  leave
  1905 0000167F C22000                          ret AND_KILL_FRAME(2)
  1906                                  
  1907                                  L_code_ptr_raw_bin_sub_rr:
  1908                                          ENTER
  1908 00001682 C8000000            <1>  enter 0, 0
  1908 00001686 4883E4F0            <1>  and rsp, ~15
  1909 0000168A 48837D1802                      cmp COUNT, 2
  1910 0000168F 0F855D0A0000                    jne L_error_arg_count_2
  1911 00001695 488B5D20                        mov rbx, PARAM(0)
  1912                                          assert_real(rbx)
  1912 00001699 803B12              <1>  cmp byte [%1], %2
  1912 0000169C 0F85EF0A0000        <1>  jne L_error_incorrect_type
  1913 000016A2 488B4D28                        mov rcx, PARAM(1)
  1914                                          assert_real(rcx)
  1914 000016A6 803912              <1>  cmp byte [%1], %2
  1914 000016A9 0F85E20A0000        <1>  jne L_error_incorrect_type
  1915 000016AF F20F104301                      movsd xmm0, qword [rbx + 1]
  1916 000016B4 F20F104901                      movsd xmm1, qword [rcx + 1]
  1917 000016B9 F20F5CC1                        subsd xmm0, xmm1
  1918 000016BD E853090000                      call make_real
  1919                                          LEAVE
  1919 000016C2 C9                  <1>  leave
  1920 000016C3 C22000                          ret AND_KILL_FRAME(2)
  1921                                  
  1922                                  L_code_ptr_raw_bin_mul_rr:
  1923                                          ENTER
  1923 000016C6 C8000000            <1>  enter 0, 0
  1923 000016CA 4883E4F0            <1>  and rsp, ~15
  1924 000016CE 48837D1802                      cmp COUNT, 2
  1925 000016D3 0F85190A0000                    jne L_error_arg_count_2
  1926 000016D9 488B5D20                        mov rbx, PARAM(0)
  1927                                          assert_real(rbx)
  1927 000016DD 803B12              <1>  cmp byte [%1], %2
  1927 000016E0 0F85AB0A0000        <1>  jne L_error_incorrect_type
  1928 000016E6 488B4D28                        mov rcx, PARAM(1)
  1929                                          assert_real(rcx)
  1929 000016EA 803912              <1>  cmp byte [%1], %2
  1929 000016ED 0F859E0A0000        <1>  jne L_error_incorrect_type
  1930 000016F3 F20F104301                      movsd xmm0, qword [rbx + 1]
  1931 000016F8 F20F104901                      movsd xmm1, qword [rcx + 1]
  1932 000016FD F20F59C1                        mulsd xmm0, xmm1
  1933 00001701 E80F090000                      call make_real
  1934                                          LEAVE
  1934 00001706 C9                  <1>  leave
  1935 00001707 C22000                          ret AND_KILL_FRAME(2)
  1936                                  
  1937                                  L_code_ptr_raw_bin_div_rr:
  1938                                          ENTER
  1938 0000170A C8000000            <1>  enter 0, 0
  1938 0000170E 4883E4F0            <1>  and rsp, ~15
  1939 00001712 48837D1802                      cmp COUNT, 2
  1940 00001717 0F85D5090000                    jne L_error_arg_count_2
  1941 0000171D 488B5D20                        mov rbx, PARAM(0)
  1942                                          assert_real(rbx)
  1942 00001721 803B12              <1>  cmp byte [%1], %2
  1942 00001724 0F85670A0000        <1>  jne L_error_incorrect_type
  1943 0000172A 488B4D28                        mov rcx, PARAM(1)
  1944                                          assert_real(rcx)
  1944 0000172E 803912              <1>  cmp byte [%1], %2
  1944 00001731 0F855A0A0000        <1>  jne L_error_incorrect_type
  1945 00001737 F20F104301                      movsd xmm0, qword [rbx + 1]
  1946 0000173C F20F104901                      movsd xmm1, qword [rcx + 1]
  1947 00001741 660FEFD2                        pxor xmm2, xmm2
  1948 00001745 660F2ECA                        ucomisd xmm1, xmm2
  1949 00001749 0F84730A0000                    je L_error_division_by_zero
  1950 0000174F F20F5EC1                        divsd xmm0, xmm1
  1951 00001753 E8BD080000                      call make_real
  1952                                          LEAVE
  1952 00001758 C9                  <1>  leave
  1953 00001759 C22000                          ret AND_KILL_FRAME(2)
  1954                                  
  1955                                  L_code_ptr_raw_bin_add_qq:
  1956                                          ENTER
  1956 0000175C C8000000            <1>  enter 0, 0
  1956 00001760 4883E4F0            <1>  and rsp, ~15
  1957 00001764 48837D1802                      cmp COUNT, 2
  1958 00001769 0F8583090000                    jne L_error_arg_count_2
  1959 0000176F 4C8B4520                        mov r8, PARAM(0)
  1960                                          assert_rational(r8)
  1960 00001773 41803811            <1>  cmp byte [%1], %2
  1960 00001777 0F85140A0000        <1>  jne L_error_incorrect_type
  1961 0000177D 4C8B4D28                        mov r9, PARAM(1)
  1962                                          assert_rational(r9)
  1962 00001781 41803911            <1>  cmp byte [%1], %2
  1962 00001785 0F85060A0000        <1>  jne L_error_incorrect_type
  1963 0000178B 498B4001                        mov rax, qword [r8 + 1] ; num1
  1964 0000178F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1965 00001793 4899                            cqo
  1966 00001795 48F7EB                          imul rbx
  1967 00001798 4889C6                          mov rsi, rax
  1968 0000179B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1969 0000179F 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1970 000017A3 4899                            cqo
  1971 000017A5 48F7EB                          imul rbx
  1972 000017A8 4801C6                          add rsi, rax
  1973 000017AB 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1974 000017AF 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1975 000017B3 4899                            cqo
  1976 000017B5 48F7EB                          imul rbx
  1977 000017B8 4889C7                          mov rdi, rax
  1978 000017BB E827010000                      call normalize_rational
  1979                                          LEAVE
  1979 000017C0 C9                  <1>  leave
  1980 000017C1 C22000                          ret AND_KILL_FRAME(2)
  1981                                  
  1982                                  L_code_ptr_raw_bin_sub_qq:
  1983                                          ENTER
  1983 000017C4 C8000000            <1>  enter 0, 0
  1983 000017C8 4883E4F0            <1>  and rsp, ~15
  1984 000017CC 48837D1802                      cmp COUNT, 2
  1985 000017D1 0F851B090000                    jne L_error_arg_count_2
  1986 000017D7 4C8B4520                        mov r8, PARAM(0)
  1987                                          assert_rational(r8)
  1987 000017DB 41803811            <1>  cmp byte [%1], %2
  1987 000017DF 0F85AC090000        <1>  jne L_error_incorrect_type
  1988 000017E5 4C8B4D28                        mov r9, PARAM(1)
  1989                                          assert_rational(r9)
  1989 000017E9 41803911            <1>  cmp byte [%1], %2
  1989 000017ED 0F859E090000        <1>  jne L_error_incorrect_type
  1990 000017F3 498B4001                        mov rax, qword [r8 + 1] ; num1
  1991 000017F7 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1992 000017FB 4899                            cqo
  1993 000017FD 48F7EB                          imul rbx
  1994 00001800 4889C6                          mov rsi, rax
  1995 00001803 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1996 00001807 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1997 0000180B 4899                            cqo
  1998 0000180D 48F7EB                          imul rbx
  1999 00001810 4829C6                          sub rsi, rax
  2000 00001813 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2001 00001817 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2002 0000181B 4899                            cqo
  2003 0000181D 48F7EB                          imul rbx
  2004 00001820 4889C7                          mov rdi, rax
  2005 00001823 E8BF000000                      call normalize_rational
  2006                                          LEAVE
  2006 00001828 C9                  <1>  leave
  2007 00001829 C22000                          ret AND_KILL_FRAME(2)
  2008                                  
  2009                                  L_code_ptr_raw_bin_mul_qq:
  2010                                          ENTER
  2010 0000182C C8000000            <1>  enter 0, 0
  2010 00001830 4883E4F0            <1>  and rsp, ~15
  2011 00001834 48837D1802                      cmp COUNT, 2
  2012 00001839 0F85B3080000                    jne L_error_arg_count_2
  2013 0000183F 4C8B4520                        mov r8, PARAM(0)
  2014                                          assert_rational(r8)
  2014 00001843 41803811            <1>  cmp byte [%1], %2
  2014 00001847 0F8544090000        <1>  jne L_error_incorrect_type
  2015 0000184D 4C8B4D28                        mov r9, PARAM(1)
  2016                                          assert_rational(r9)
  2016 00001851 41803911            <1>  cmp byte [%1], %2
  2016 00001855 0F8536090000        <1>  jne L_error_incorrect_type
  2017 0000185B 498B4001                        mov rax, qword [r8 + 1] ; num1
  2018 0000185F 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2019 00001863 4899                            cqo
  2020 00001865 48F7EB                          imul rbx
  2021 00001868 4889C6                          mov rsi, rax
  2022 0000186B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2023 0000186F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2024 00001873 4899                            cqo
  2025 00001875 48F7EB                          imul rbx
  2026 00001878 4889C7                          mov rdi, rax
  2027 0000187B E867000000                      call normalize_rational
  2028                                          LEAVE
  2028 00001880 C9                  <1>  leave
  2029 00001881 C22000                          ret AND_KILL_FRAME(2)
  2030                                          
  2031                                  L_code_ptr_raw_bin_div_qq:
  2032                                          ENTER
  2032 00001884 C8000000            <1>  enter 0, 0
  2032 00001888 4883E4F0            <1>  and rsp, ~15
  2033 0000188C 48837D1802                      cmp COUNT, 2
  2034 00001891 0F855B080000                    jne L_error_arg_count_2
  2035 00001897 4C8B4520                        mov r8, PARAM(0)
  2036                                          assert_rational(r8)
  2036 0000189B 41803811            <1>  cmp byte [%1], %2
  2036 0000189F 0F85EC080000        <1>  jne L_error_incorrect_type
  2037 000018A5 4C8B4D28                        mov r9, PARAM(1)
  2038                                          assert_rational(r9)
  2038 000018A9 41803911            <1>  cmp byte [%1], %2
  2038 000018AD 0F85DE080000        <1>  jne L_error_incorrect_type
  2039 000018B3 4983790100                      cmp qword [r9 + 1], 0
  2040 000018B8 0F8404090000                    je L_error_division_by_zero
  2041 000018BE 498B4001                        mov rax, qword [r8 + 1] ; num1
  2042 000018C2 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2043 000018C6 4899                            cqo
  2044 000018C8 48F7EB                          imul rbx
  2045 000018CB 4889C6                          mov rsi, rax
  2046 000018CE 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2047 000018D2 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2048 000018D6 4899                            cqo
  2049 000018D8 48F7EB                          imul rbx
  2050 000018DB 4889C7                          mov rdi, rax
  2051 000018DE E804000000                      call normalize_rational
  2052                                          LEAVE
  2052 000018E3 C9                  <1>  leave
  2053 000018E4 C22000                          ret AND_KILL_FRAME(2)
  2054                                          
  2055                                  normalize_rational:
  2056 000018E7 56                              push rsi
  2057 000018E8 57                              push rdi
  2058 000018E9 E839000000                      call gcd
  2059 000018EE 4889C3                          mov rbx, rax
  2060 000018F1 58                              pop rax
  2061 000018F2 4899                            cqo
  2062 000018F4 48F7FB                          idiv rbx
  2063 000018F7 4989C0                          mov r8, rax
  2064 000018FA 58                              pop rax
  2065 000018FB 4899                            cqo
  2066 000018FD 48F7FB                          idiv rbx
  2067 00001900 4989C1                          mov r9, rax
  2068 00001903 BF11000000                      mov rdi, (1 + 8 + 8)
  2069 00001908 E88AF0FFFF                      call malloc
  2070 0000190D C60011                          mov byte [rax], T_rational
  2071 00001910 4C894801                        mov qword [rax + 1], r9
  2072 00001914 4C894009                        mov qword [rax + 1 + 8], r8
  2073 00001918 C3                              ret
  2074                                  
  2075                                  iabs:
  2076 00001919 4889F8                          mov rax, rdi
  2077 0000191C 4883F800                        cmp rax, 0
  2078 00001920 7C01                            jl .Lneg
  2079 00001922 C3                              ret
  2080                                  .Lneg:
  2081 00001923 48F7D8                          neg rax
  2082 00001926 C3                              ret
  2083                                  
  2084                                  gcd:
  2085 00001927 E8EDFFFFFF                      call iabs
  2086 0000192C 4889C3                          mov rbx, rax
  2087 0000192F 4889F7                          mov rdi, rsi
  2088 00001932 E8E2FFFFFF                      call iabs
  2089 00001937 4883F800                        cmp rax, 0
  2090 0000193B 7502                            jne .L0
  2091 0000193D 4893                            xchg rax, rbx
  2092                                  .L0:
  2093 0000193F 4883FB00                        cmp rbx, 0
  2094 00001943 740C                            je .L1
  2095 00001945 4899                            cqo
  2096 00001947 48F7F3                          div rbx
  2097 0000194A 4889D0                          mov rax, rdx
  2098 0000194D 4893                            xchg rax, rbx
  2099 0000194F EBEE                            jmp .L0
  2100                                  .L1:
  2101 00001951 C3                              ret
  2102                                  
  2103                                  L_code_ptr_error:
  2104                                          ENTER
  2104 00001952 C8000000            <1>  enter 0, 0
  2104 00001956 4883E4F0            <1>  and rsp, ~15
  2105 0000195A 48837D1802                      cmp COUNT, 2
  2106 0000195F 0F858D070000                    jne L_error_arg_count_2
  2107 00001965 488B7520                        mov rsi, PARAM(0)
  2108                                          assert_symbol(rsi)
  2108 00001969 803E04              <1>  cmp byte [%1], %2
  2108 0000196C 0F851F080000        <1>  jne L_error_incorrect_type
  2109 00001972 488B7528                        mov rsi, PARAM(1)
  2110                                          assert_string(rsi)
  2110 00001976 803E03              <1>  cmp byte [%1], %2
  2110 00001979 0F8512080000        <1>  jne L_error_incorrect_type
  2111 0000197F 48BF-                           mov rdi, fmt_scheme_error_part_1
  2111 00001981 [AD03000000000000] 
  2112 00001989 B800000000                      mov rax, 0
  2113                                  	ENTER
  2113 0000198E C8000000            <1>  enter 0, 0
  2113 00001992 4883E4F0            <1>  and rsp, ~15
  2114 00001996 E8(00000000)                    call printf
  2115                                  	LEAVE
  2115 0000199B C9                  <1>  leave
  2116 0000199C 488B7D20                        mov rdi, PARAM(0)
  2117 000019A0 E80DF0FFFF                      call print_sexpr
  2118 000019A5 48BF-                           mov rdi, fmt_scheme_error_part_2
  2118 000019A7 [C103000000000000] 
  2119 000019AF B800000000                      mov rax, 0
  2120                                  	ENTER
  2120 000019B4 C8000000            <1>  enter 0, 0
  2120 000019B8 4883E4F0            <1>  and rsp, ~15
  2121 000019BC E8(00000000)                    call printf
  2122                                  	LEAVE
  2122 000019C1 C9                  <1>  leave
  2123 000019C2 488B4528                        mov rax, PARAM(1)       ; sob_string
  2124 000019C6 BE01000000                      mov rsi, 1              ; size = 1 byte
  2125 000019CB 488B5001                        mov rdx, qword [rax + 1] ; length
  2126 000019CF 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  2127 000019D3 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  2128 000019DB E8(00000000)                    call fwrite
  2129 000019E0 48BF-                           mov rdi, fmt_scheme_error_part_3
  2129 000019E2 [0304000000000000] 
  2130 000019EA B800000000                      mov rax, 0
  2131                                  	ENTER
  2131 000019EF C8000000            <1>  enter 0, 0
  2131 000019F3 4883E4F0            <1>  and rsp, ~15
  2132 000019F7 E8(00000000)                    call printf
  2133                                  	LEAVE
  2133 000019FC C9                  <1>  leave
  2134 000019FD 48C7C0F7FFFFFF                  mov rax, -9
  2135 00001A04 E8(00000000)                    call exit
  2136                                  
  2137                                  L_code_ptr_raw_less_than_rr:
  2138                                          ENTER
  2138 00001A09 C8000000            <1>  enter 0, 0
  2138 00001A0D 4883E4F0            <1>  and rsp, ~15
  2139 00001A11 48837D1802                      cmp COUNT, 2
  2140 00001A16 0F85D6060000                    jne L_error_arg_count_2
  2141 00001A1C 488B7520                        mov rsi, PARAM(0)
  2142                                          assert_real(rsi)
  2142 00001A20 803E12              <1>  cmp byte [%1], %2
  2142 00001A23 0F8568070000        <1>  jne L_error_incorrect_type
  2143 00001A29 488B7D28                        mov rdi, PARAM(1)
  2144                                          assert_real(rdi)
  2144 00001A2D 803F12              <1>  cmp byte [%1], %2
  2144 00001A30 0F855B070000        <1>  jne L_error_incorrect_type
  2145 00001A36 F20F104601                      movsd xmm0, qword [rsi + 1]
  2146 00001A3B F20F104F01                      movsd xmm1, qword [rdi + 1]
  2147 00001A40 660F2FC1                        comisd xmm0, xmm1
  2148 00001A44 730C                            jae .L_false
  2149 00001A46 48B8-                           mov rax, sob_boolean_true
  2149 00001A48 [0300000000000000] 
  2150 00001A50 EB0A                            jmp .L_exit
  2151                                  .L_false:
  2152 00001A52 48B8-                           mov rax, sob_boolean_false
  2152 00001A54 [0200000000000000] 
  2153                                  .L_exit:
  2154                                          LEAVE
  2154 00001A5C C9                  <1>  leave
  2155 00001A5D C22000                          ret AND_KILL_FRAME(2)
  2156                                          
  2157                                  L_code_ptr_raw_less_than_qq:
  2158                                          ENTER
  2158 00001A60 C8000000            <1>  enter 0, 0
  2158 00001A64 4883E4F0            <1>  and rsp, ~15
  2159 00001A68 48837D1802                      cmp COUNT, 2
  2160 00001A6D 0F857F060000                    jne L_error_arg_count_2
  2161 00001A73 488B7520                        mov rsi, PARAM(0)
  2162                                          assert_rational(rsi)
  2162 00001A77 803E11              <1>  cmp byte [%1], %2
  2162 00001A7A 0F8511070000        <1>  jne L_error_incorrect_type
  2163 00001A80 488B7D28                        mov rdi, PARAM(1)
  2164                                          assert_rational(rdi)
  2164 00001A84 803F11              <1>  cmp byte [%1], %2
  2164 00001A87 0F8504070000        <1>  jne L_error_incorrect_type
  2165 00001A8D 488B4601                        mov rax, qword [rsi + 1] ; num1
  2166 00001A91 4899                            cqo
  2167 00001A93 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2168 00001A97 4889C1                          mov rcx, rax
  2169 00001A9A 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  2170 00001A9E 4899                            cqo
  2171 00001AA0 48F76F01                        imul qword [rdi + 1]          ; num2
  2172 00001AA4 4829C1                          sub rcx, rax
  2173 00001AA7 7D0C                            jge .L_false
  2174 00001AA9 48B8-                           mov rax, sob_boolean_true
  2174 00001AAB [0300000000000000] 
  2175 00001AB3 EB0A                            jmp .L_exit
  2176                                  .L_false:
  2177 00001AB5 48B8-                           mov rax, sob_boolean_false
  2177 00001AB7 [0200000000000000] 
  2178                                  .L_exit:
  2179                                          LEAVE
  2179 00001ABF C9                  <1>  leave
  2180 00001AC0 C22000                          ret AND_KILL_FRAME(2)
  2181                                  
  2182                                  L_code_ptr_raw_equal_rr:
  2183                                          ENTER
  2183 00001AC3 C8000000            <1>  enter 0, 0
  2183 00001AC7 4883E4F0            <1>  and rsp, ~15
  2184 00001ACB 48837D1802                      cmp COUNT, 2
  2185 00001AD0 0F851C060000                    jne L_error_arg_count_2
  2186 00001AD6 488B7520                        mov rsi, PARAM(0)
  2187                                          assert_real(rsi)
  2187 00001ADA 803E12              <1>  cmp byte [%1], %2
  2187 00001ADD 0F85AE060000        <1>  jne L_error_incorrect_type
  2188 00001AE3 488B7D28                        mov rdi, PARAM(1)
  2189                                          assert_real(rdi)
  2189 00001AE7 803F12              <1>  cmp byte [%1], %2
  2189 00001AEA 0F85A1060000        <1>  jne L_error_incorrect_type
  2190 00001AF0 F20F104601                      movsd xmm0, qword [rsi + 1]
  2191 00001AF5 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2192 00001AFA 660F2FC1                        comisd xmm0, xmm1
  2193 00001AFE 750C                            jne .L_false
  2194 00001B00 48B8-                           mov rax, sob_boolean_true
  2194 00001B02 [0300000000000000] 
  2195 00001B0A EB0A                            jmp .L_exit
  2196                                  .L_false:
  2197 00001B0C 48B8-                           mov rax, sob_boolean_false
  2197 00001B0E [0200000000000000] 
  2198                                  .L_exit:
  2199                                          LEAVE
  2199 00001B16 C9                  <1>  leave
  2200 00001B17 C22000                          ret AND_KILL_FRAME(2)
  2201                                          
  2202                                  L_code_ptr_raw_equal_qq:
  2203                                          ENTER
  2203 00001B1A C8000000            <1>  enter 0, 0
  2203 00001B1E 4883E4F0            <1>  and rsp, ~15
  2204 00001B22 48837D1802                      cmp COUNT, 2
  2205 00001B27 0F85C5050000                    jne L_error_arg_count_2
  2206 00001B2D 488B7520                        mov rsi, PARAM(0)
  2207                                          assert_rational(rsi)
  2207 00001B31 803E11              <1>  cmp byte [%1], %2
  2207 00001B34 0F8557060000        <1>  jne L_error_incorrect_type
  2208 00001B3A 488B7D28                        mov rdi, PARAM(1)
  2209                                          assert_rational(rdi)
  2209 00001B3E 803F11              <1>  cmp byte [%1], %2
  2209 00001B41 0F854A060000        <1>  jne L_error_incorrect_type
  2210 00001B47 488B4601                        mov rax, qword [rsi + 1] ; num1
  2211 00001B4B 4899                            cqo
  2212 00001B4D 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2213 00001B51 4889C1                          mov rcx, rax
  2214 00001B54 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  2215 00001B58 4899                            cqo
  2216 00001B5A 48F76F01                        imul qword [rdi + 1]          ; num2
  2217 00001B5E 4829C1                          sub rcx, rax
  2218 00001B61 750C                            jne .L_false
  2219 00001B63 48B8-                           mov rax, sob_boolean_true
  2219 00001B65 [0300000000000000] 
  2220 00001B6D EB0A                            jmp .L_exit
  2221                                  .L_false:
  2222 00001B6F 48B8-                           mov rax, sob_boolean_false
  2222 00001B71 [0200000000000000] 
  2223                                  .L_exit:
  2224                                          LEAVE
  2224 00001B79 C9                  <1>  leave
  2225 00001B7A C22000                          ret AND_KILL_FRAME(2)
  2226                                  
  2227                                  L_code_ptr_quotient:
  2228                                          ENTER
  2228 00001B7D C8000000            <1>  enter 0, 0
  2228 00001B81 4883E4F0            <1>  and rsp, ~15
  2229 00001B85 48837D1802                      cmp COUNT, 2
  2230 00001B8A 0F8562050000                    jne L_error_arg_count_2
  2231 00001B90 488B7520                        mov rsi, PARAM(0)
  2232                                          assert_integer(rsi)
  2232                              <1>  assert_rational(%1)
  2232 00001B94 803E11              <2>  cmp byte [%1], %2
  2232 00001B97 0F85F4050000        <2>  jne L_error_incorrect_type
  2232 00001B9D 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2232 00001BA2 0F85E9050000        <1>  jne L_error_incorrect_type
  2233 00001BA8 488B7D28                        mov rdi, PARAM(1)
  2234                                          assert_integer(rdi)
  2234                              <1>  assert_rational(%1)
  2234 00001BAC 803F11              <2>  cmp byte [%1], %2
  2234 00001BAF 0F85DC050000        <2>  jne L_error_incorrect_type
  2234 00001BB5 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
  2234 00001BBA 0F85D1050000        <1>  jne L_error_incorrect_type
  2235 00001BC0 488B4601                        mov rax, qword [rsi + 1]
  2236 00001BC4 488B5F01                        mov rbx, qword [rdi + 1]
  2237 00001BC8 4883FB00                        cmp rbx, 0
  2238 00001BCC 0F84F0050000                    je L_error_division_by_zero
  2239 00001BD2 4899                            cqo
  2240 00001BD4 48F7FB                          idiv rbx
  2241 00001BD7 4889C7                          mov rdi, rax
  2242 00001BDA E852040000                      call make_integer
  2243                                          LEAVE
  2243 00001BDF C9                  <1>  leave
  2244 00001BE0 C22000                          ret AND_KILL_FRAME(2)
  2245                                          
  2246                                  L_code_ptr_remainder:
  2247                                          ENTER
  2247 00001BE3 C8000000            <1>  enter 0, 0
  2247 00001BE7 4883E4F0            <1>  and rsp, ~15
  2248 00001BEB 48837D1802                      cmp COUNT, 2
  2249 00001BF0 0F85FC040000                    jne L_error_arg_count_2
  2250 00001BF6 488B7520                        mov rsi, PARAM(0)
  2251                                          assert_integer(rsi)
  2251                              <1>  assert_rational(%1)
  2251 00001BFA 803E11              <2>  cmp byte [%1], %2
  2251 00001BFD 0F858E050000        <2>  jne L_error_incorrect_type
  2251 00001C03 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2251 00001C08 0F8583050000        <1>  jne L_error_incorrect_type
  2252 00001C0E 488B7D28                        mov rdi, PARAM(1)
  2253                                          assert_integer(rdi)
  2253                              <1>  assert_rational(%1)
  2253 00001C12 803F11              <2>  cmp byte [%1], %2
  2253 00001C15 0F8576050000        <2>  jne L_error_incorrect_type
  2253 00001C1B 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
  2253 00001C20 0F856B050000        <1>  jne L_error_incorrect_type
  2254 00001C26 488B4601                        mov rax, qword [rsi + 1]
  2255 00001C2A 488B5F01                        mov rbx, qword [rdi + 1]
  2256 00001C2E 4883FB00                        cmp rbx, 0
  2257 00001C32 0F848A050000                    je L_error_division_by_zero
  2258 00001C38 4899                            cqo
  2259 00001C3A 48F7FB                          idiv rbx
  2260 00001C3D 4889D7                          mov rdi, rdx
  2261 00001C40 E8EC030000                      call make_integer
  2262                                          LEAVE
  2262 00001C45 C9                  <1>  leave
  2263 00001C46 C22000                          ret AND_KILL_FRAME(2)
  2264                                  
  2265                                  L_code_ptr_set_car:
  2266                                          ENTER
  2266 00001C49 C8000000            <1>  enter 0, 0
  2266 00001C4D 4883E4F0            <1>  and rsp, ~15
  2267 00001C51 48837D1802                      cmp COUNT, 2
  2268 00001C56 0F8596040000                    jne L_error_arg_count_2
  2269 00001C5C 488B4520                        mov rax, PARAM(0)
  2270                                          assert_pair(rax)
  2270 00001C60 803821              <1>  cmp byte [%1], %2
  2270 00001C63 0F8528050000        <1>  jne L_error_incorrect_type
  2271 00001C69 488B5D28                        mov rbx, PARAM(1)
  2272 00001C6D 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2273 00001C71 48B8-                           mov rax, sob_void
  2273 00001C73 [0000000000000000] 
  2274                                          LEAVE
  2274 00001C7B C9                  <1>  leave
  2275 00001C7C C22000                          ret AND_KILL_FRAME(2)
  2276                                  
  2277                                  L_code_ptr_set_cdr:
  2278                                          ENTER
  2278 00001C7F C8000000            <1>  enter 0, 0
  2278 00001C83 4883E4F0            <1>  and rsp, ~15
  2279 00001C87 48837D1802                      cmp COUNT, 2
  2280 00001C8C 0F8560040000                    jne L_error_arg_count_2
  2281 00001C92 488B4520                        mov rax, PARAM(0)
  2282                                          assert_pair(rax)
  2282 00001C96 803821              <1>  cmp byte [%1], %2
  2282 00001C99 0F85F2040000        <1>  jne L_error_incorrect_type
  2283 00001C9F 488B5D28                        mov rbx, PARAM(1)
  2284 00001CA3 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2285 00001CA7 48B8-                           mov rax, sob_void
  2285 00001CA9 [0000000000000000] 
  2286                                          LEAVE
  2286 00001CB1 C9                  <1>  leave
  2287 00001CB2 C22000                          ret AND_KILL_FRAME(2)
  2288                                  
  2289                                  L_code_ptr_string_ref:
  2290                                          ENTER
  2290 00001CB5 C8000000            <1>  enter 0, 0
  2290 00001CB9 4883E4F0            <1>  and rsp, ~15
  2291 00001CBD 48837D1802                      cmp COUNT, 2
  2292 00001CC2 0F852A040000                    jne L_error_arg_count_2
  2293 00001CC8 488B7D20                        mov rdi, PARAM(0)
  2294                                          assert_string(rdi)
  2294 00001CCC 803F03              <1>  cmp byte [%1], %2
  2294 00001CCF 0F85BC040000        <1>  jne L_error_incorrect_type
  2295 00001CD5 488B7528                        mov rsi, PARAM(1)
  2296                                          assert_integer(rsi)
  2296                              <1>  assert_rational(%1)
  2296 00001CD9 803E11              <2>  cmp byte [%1], %2
  2296 00001CDC 0F85AF040000        <2>  jne L_error_incorrect_type
  2296 00001CE2 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2296 00001CE7 0F85A4040000        <1>  jne L_error_incorrect_type
  2297 00001CED 488B5701                        mov rdx, qword [rdi + 1]
  2298 00001CF1 488B4E01                        mov rcx, qword [rsi + 1]
  2299 00001CF5 4839D1                          cmp rcx, rdx
  2300 00001CF8 0F8D59030000                    jge L_error_integer_range
  2301 00001CFE 4883F900                        cmp rcx, 0
  2302 00001D02 0F8C4F030000                    jl L_error_integer_range
  2303 00001D08 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2304 00001D0C BF02000000                      mov rdi, 2
  2305 00001D11 E881ECFFFF                      call malloc
  2306 00001D16 C60002                          mov byte [rax], T_char
  2307 00001D19 885801                          mov byte [rax + 1], bl
  2308                                          LEAVE
  2308 00001D1C C9                  <1>  leave
  2309 00001D1D C22000                          ret AND_KILL_FRAME(2)
  2310                                  
  2311                                  L_code_ptr_vector_ref:
  2312                                          ENTER
  2312 00001D20 C8000000            <1>  enter 0, 0
  2312 00001D24 4883E4F0            <1>  and rsp, ~15
  2313 00001D28 48837D1802                      cmp COUNT, 2
  2314 00001D2D 0F85BF030000                    jne L_error_arg_count_2
  2315 00001D33 488B7D20                        mov rdi, PARAM(0)
  2316                                          assert_vector(rdi)
  2316 00001D37 803F22              <1>  cmp byte [%1], %2
  2316 00001D3A 0F8551040000        <1>  jne L_error_incorrect_type
  2317 00001D40 488B7528                        mov rsi, PARAM(1)
  2318                                          assert_integer(rsi)
  2318                              <1>  assert_rational(%1)
  2318 00001D44 803E11              <2>  cmp byte [%1], %2
  2318 00001D47 0F8544040000        <2>  jne L_error_incorrect_type
  2318 00001D4D 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2318 00001D52 0F8539040000        <1>  jne L_error_incorrect_type
  2319 00001D58 488B5701                        mov rdx, qword [rdi + 1]
  2320 00001D5C 488B4E01                        mov rcx, qword [rsi + 1]
  2321 00001D60 4839D1                          cmp rcx, rdx
  2322 00001D63 0F8DEE020000                    jge L_error_integer_range
  2323 00001D69 4883F900                        cmp rcx, 0
  2324 00001D6D 0F8CE4020000                    jl L_error_integer_range
  2325 00001D73 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2326                                          LEAVE
  2326 00001D78 C9                  <1>  leave
  2327 00001D79 C22000                          ret AND_KILL_FRAME(2)
  2328                                  
  2329                                  L_code_ptr_vector_set:
  2330                                          ENTER
  2330 00001D7C C8000000            <1>  enter 0, 0
  2330 00001D80 4883E4F0            <1>  and rsp, ~15
  2331 00001D84 48837D1803                      cmp COUNT, 3
  2332 00001D89 0F85CD030000                    jne L_error_arg_count_3
  2333 00001D8F 488B7D20                        mov rdi, PARAM(0)
  2334                                          assert_vector(rdi)
  2334 00001D93 803F22              <1>  cmp byte [%1], %2
  2334 00001D96 0F85F5030000        <1>  jne L_error_incorrect_type
  2335 00001D9C 488B7528                        mov rsi, PARAM(1)
  2336                                          assert_integer(rsi)
  2336                              <1>  assert_rational(%1)
  2336 00001DA0 803E11              <2>  cmp byte [%1], %2
  2336 00001DA3 0F85E8030000        <2>  jne L_error_incorrect_type
  2336 00001DA9 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2336 00001DAE 0F85DD030000        <1>  jne L_error_incorrect_type
  2337 00001DB4 488B5701                        mov rdx, qword [rdi + 1]
  2338 00001DB8 488B4E01                        mov rcx, qword [rsi + 1]
  2339 00001DBC 4839D1                          cmp rcx, rdx
  2340 00001DBF 0F8D92020000                    jge L_error_integer_range
  2341 00001DC5 4883F900                        cmp rcx, 0
  2342 00001DC9 0F8C88020000                    jl L_error_integer_range
  2343 00001DCF 488B4530                        mov rax, PARAM(2)
  2344 00001DD3 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2345 00001DD8 48B8-                           mov rax, sob_void
  2345 00001DDA [0000000000000000] 
  2346                                          LEAVE
  2346 00001DE2 C9                  <1>  leave
  2347 00001DE3 C22800                          ret AND_KILL_FRAME(3)
  2348                                  
  2349                                  L_code_ptr_string_set:
  2350                                          ENTER
  2350 00001DE6 C8000000            <1>  enter 0, 0
  2350 00001DEA 4883E4F0            <1>  and rsp, ~15
  2351 00001DEE 48837D1803                      cmp COUNT, 3
  2352 00001DF3 0F8563030000                    jne L_error_arg_count_3
  2353 00001DF9 488B7D20                        mov rdi, PARAM(0)
  2354                                          assert_string(rdi)
  2354 00001DFD 803F03              <1>  cmp byte [%1], %2
  2354 00001E00 0F858B030000        <1>  jne L_error_incorrect_type
  2355 00001E06 488B7528                        mov rsi, PARAM(1)
  2356                                          assert_integer(rsi)
  2356                              <1>  assert_rational(%1)
  2356 00001E0A 803E11              <2>  cmp byte [%1], %2
  2356 00001E0D 0F857E030000        <2>  jne L_error_incorrect_type
  2356 00001E13 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2356 00001E18 0F8573030000        <1>  jne L_error_incorrect_type
  2357 00001E1E 488B5701                        mov rdx, qword [rdi + 1]
  2358 00001E22 488B4E01                        mov rcx, qword [rsi + 1]
  2359 00001E26 4839D1                          cmp rcx, rdx
  2360 00001E29 0F8D28020000                    jge L_error_integer_range
  2361 00001E2F 4883F900                        cmp rcx, 0
  2362 00001E33 0F8C1E020000                    jl L_error_integer_range
  2363 00001E39 488B4530                        mov rax, PARAM(2)
  2364                                          assert_char(rax)
  2364 00001E3D 803802              <1>  cmp byte [%1], %2
  2364 00001E40 0F854B030000        <1>  jne L_error_incorrect_type
  2365 00001E46 8A4001                          mov al, byte [rax + 1]
  2366 00001E49 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2367 00001E4D 48B8-                           mov rax, sob_void
  2367 00001E4F [0000000000000000] 
  2368                                          LEAVE
  2368 00001E57 C9                  <1>  leave
  2369 00001E58 C22800                          ret AND_KILL_FRAME(3)
  2370                                  
  2371                                  L_code_ptr_make_vector:
  2372                                          ENTER
  2372 00001E5B C8000000            <1>  enter 0, 0
  2372 00001E5F 4883E4F0            <1>  and rsp, ~15
  2373 00001E63 48837D1802                      cmp COUNT, 2
  2374 00001E68 0F8584020000                    jne L_error_arg_count_2
  2375 00001E6E 488B4D20                        mov rcx, PARAM(0)
  2376                                          assert_integer(rcx)
  2376                              <1>  assert_rational(%1)
  2376 00001E72 803911              <2>  cmp byte [%1], %2
  2376 00001E75 0F8516030000        <2>  jne L_error_incorrect_type
  2376 00001E7B 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
  2376 00001E80 0F850B030000        <1>  jne L_error_incorrect_type
  2377 00001E86 488B4901                        mov rcx, qword [rcx + 1]
  2378 00001E8A 4883F900                        cmp rcx, 0
  2379 00001E8E 0F8CC3010000                    jl L_error_integer_range
  2380 00001E94 488B5528                        mov rdx, PARAM(1)
  2381 00001E98 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2382 00001EA0 E8F2EAFFFF                      call malloc
  2383 00001EA5 C60022                          mov byte [rax], T_vector
  2384 00001EA8 48894801                        mov qword [rax + 1], rcx
  2385 00001EAC 41B800000000                    mov r8, 0
  2386                                  .L0:
  2387 00001EB2 4939C8                          cmp r8, rcx
  2388 00001EB5 740A                            je .L1
  2389 00001EB7 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2390 00001EBC 49FFC0                          inc r8
  2391 00001EBF EBF1                            jmp .L0
  2392                                  .L1:
  2393                                          LEAVE
  2393 00001EC1 C9                  <1>  leave
  2394 00001EC2 C22000                          ret AND_KILL_FRAME(2)
  2395                                          
  2396                                  L_code_ptr_make_string:
  2397                                          ENTER
  2397 00001EC5 C8000000            <1>  enter 0, 0
  2397 00001EC9 4883E4F0            <1>  and rsp, ~15
  2398 00001ECD 48837D1802                      cmp COUNT, 2
  2399 00001ED2 0F851A020000                    jne L_error_arg_count_2
  2400 00001ED8 488B4D20                        mov rcx, PARAM(0)
  2401                                          assert_integer(rcx)
  2401                              <1>  assert_rational(%1)
  2401 00001EDC 803911              <2>  cmp byte [%1], %2
  2401 00001EDF 0F85AC020000        <2>  jne L_error_incorrect_type
  2401 00001EE5 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
  2401 00001EEA 0F85A1020000        <1>  jne L_error_incorrect_type
  2402 00001EF0 488B4901                        mov rcx, qword [rcx + 1]
  2403 00001EF4 4883F900                        cmp rcx, 0
  2404 00001EF8 0F8C59010000                    jl L_error_integer_range
  2405 00001EFE 488B5528                        mov rdx, PARAM(1)
  2406                                          assert_char(rdx)
  2406 00001F02 803A02              <1>  cmp byte [%1], %2
  2406 00001F05 0F8586020000        <1>  jne L_error_incorrect_type
  2407 00001F0B 8A5201                          mov dl, byte [rdx + 1]
  2408 00001F0E 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2409 00001F12 E880EAFFFF                      call malloc
  2410 00001F17 C60003                          mov byte [rax], T_string
  2411 00001F1A 48894801                        mov qword [rax + 1], rcx
  2412 00001F1E 41B800000000                    mov r8, 0
  2413                                  .L0:
  2414 00001F24 4939C8                          cmp r8, rcx
  2415 00001F27 740A                            je .L1
  2416 00001F29 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2417 00001F2E 49FFC0                          inc r8
  2418 00001F31 EBF1                            jmp .L0
  2419                                  .L1:
  2420                                          LEAVE
  2420 00001F33 C9                  <1>  leave
  2421 00001F34 C22000                          ret AND_KILL_FRAME(2)
  2422                                  
  2423                                  L_code_ptr_numerator:
  2424                                          ENTER
  2424 00001F37 C8000000            <1>  enter 0, 0
  2424 00001F3B 4883E4F0            <1>  and rsp, ~15
  2425 00001F3F 48837D1801                      cmp COUNT, 1
  2426 00001F44 0F8573010000                    jne L_error_arg_count_1
  2427 00001F4A 488B4520                        mov rax, PARAM(0)
  2428                                          assert_rational(rax)
  2428 00001F4E 803811              <1>  cmp byte [%1], %2
  2428 00001F51 0F853A020000        <1>  jne L_error_incorrect_type
  2429 00001F57 488B7801                        mov rdi, qword [rax + 1]
  2430 00001F5B E8D1000000                      call make_integer
  2431                                          LEAVE
  2431 00001F60 C9                  <1>  leave
  2432 00001F61 C21800                          ret AND_KILL_FRAME(1)
  2433                                          
  2434                                  L_code_ptr_denominator:
  2435                                          ENTER
  2435 00001F64 C8000000            <1>  enter 0, 0
  2435 00001F68 4883E4F0            <1>  and rsp, ~15
  2436 00001F6C 48837D1801                      cmp COUNT, 1
  2437 00001F71 0F8546010000                    jne L_error_arg_count_1
  2438 00001F77 488B4520                        mov rax, PARAM(0)
  2439                                          assert_rational(rax)
  2439 00001F7B 803811              <1>  cmp byte [%1], %2
  2439 00001F7E 0F850D020000        <1>  jne L_error_incorrect_type
  2440 00001F84 488B7809                        mov rdi, qword [rax + 1 + 8]
  2441 00001F88 E8A4000000                      call make_integer
  2442                                          LEAVE
  2442 00001F8D C9                  <1>  leave
  2443 00001F8E C21800                          ret AND_KILL_FRAME(1)
  2444                                  
  2445                                  L_code_ptr_eq:
  2446                                  	ENTER
  2446 00001F91 C8000000            <1>  enter 0, 0
  2446 00001F95 4883E4F0            <1>  and rsp, ~15
  2447 00001F99 48837D1802              	cmp COUNT, 2
  2448 00001F9E 0F854E010000            	jne L_error_arg_count_2
  2449 00001FA4 488B7D20                	mov rdi, PARAM(0)
  2450 00001FA8 488B7528                	mov rsi, PARAM(1)
  2451 00001FAC 4839F7                  	cmp rdi, rsi
  2452 00001FAF 744A                    	je .L_eq_true
  2453 00001FB1 8A17                    	mov dl, byte [rdi]
  2454 00001FB3 3A16                    	cmp dl, byte [rsi]
  2455 00001FB5 7550                    	jne .L_eq_false
  2456 00001FB7 80FA02                  	cmp dl, T_char
  2457 00001FBA 7437                    	je .L_char
  2458 00001FBC 80FA04                  	cmp dl, T_symbol
  2459 00001FBF 742A                    	je .L_symbol
  2460 00001FC1 80FA12                  	cmp dl, T_real
  2461 00001FC4 741D                    	je .L_real
  2462 00001FC6 80FA11                  	cmp dl, T_rational
  2463 00001FC9 7402                    	je .L_rational
  2464 00001FCB EB3A                    	jmp .L_eq_false
  2465                                  .L_rational:
  2466 00001FCD 488B4601                	mov rax, qword [rsi + 1]
  2467 00001FD1 483B4701                	cmp rax, qword [rdi + 1]
  2468 00001FD5 7530                    	jne .L_eq_false
  2469 00001FD7 488B4609                	mov rax, qword [rsi + 1 + 8]
  2470 00001FDB 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2471 00001FDF 7526                    	jne .L_eq_false
  2472 00001FE1 EB18                    	jmp .L_eq_true
  2473                                  .L_real:
  2474 00001FE3 488B4601                	mov rax, qword [rsi + 1]
  2475 00001FE7 483B4701                	cmp rax, qword [rdi + 1]
  2476                                  .L_symbol:
  2477                                  	; never reached, because symbols are static!
  2478                                  	; but I'm keeping it in case, I'll ever change
  2479                                  	; the implementation
  2480 00001FEB 488B4601                	mov rax, qword [rsi + 1]
  2481 00001FEF 483B4701                	cmp rax, qword [rdi + 1]
  2482                                  .L_char:
  2483 00001FF3 8A5E01                  	mov bl, byte [rsi + 1]
  2484 00001FF6 3A5F01                  	cmp bl, byte [rdi + 1]
  2485 00001FF9 750C                    	jne .L_eq_false
  2486                                  .L_eq_true:
  2487 00001FFB 48B8-                   	mov rax, sob_boolean_true
  2487 00001FFD [0300000000000000] 
  2488 00002005 EB0A                    	jmp .L_eq_exit
  2489                                  .L_eq_false:
  2490 00002007 48B8-                   	mov rax, sob_boolean_false
  2490 00002009 [0200000000000000] 
  2491                                  .L_eq_exit:
  2492                                  	LEAVE
  2492 00002011 C9                  <1>  leave
  2493 00002012 C22000                  	ret AND_KILL_FRAME(2)
  2494                                  
  2495                                  make_real:
  2496                                          ENTER
  2496 00002015 C8000000            <1>  enter 0, 0
  2496 00002019 4883E4F0            <1>  and rsp, ~15
  2497 0000201D BF09000000                      mov rdi, (1 + 8)
  2498 00002022 E870E9FFFF                      call malloc
  2499 00002027 C60012                          mov byte [rax], T_real
  2500 0000202A F20F114001                      movsd qword [rax + 1], xmm0
  2501                                          LEAVE
  2501 0000202F C9                  <1>  leave
  2502 00002030 C3                              ret
  2503                                          
  2504                                  make_integer:
  2505                                          ENTER
  2505 00002031 C8000000            <1>  enter 0, 0
  2505 00002035 4883E4F0            <1>  and rsp, ~15
  2506 00002039 4889FE                          mov rsi, rdi
  2507 0000203C BF11000000                      mov rdi, (1 + 8 + 8)
  2508 00002041 E851E9FFFF                      call malloc
  2509 00002046 C60011                          mov byte [rax], T_rational
  2510 00002049 48897001                        mov qword [rax + 1], rsi
  2511 0000204D 48C7400901000000                mov qword [rax + 1 + 8], 1
  2512                                          LEAVE
  2512 00002055 C9                  <1>  leave
  2513 00002056 C3                              ret
  2514                                          
  2515                                  L_error_integer_range:
  2516 00002057 488B3C25[00000000]              mov rdi, qword [stderr]
  2517 0000205F 48BE-                           mov rsi, fmt_integer_range
  2517 00002061 [7A03000000000000] 
  2518 00002069 B800000000                      mov rax, 0
  2519                                  	ENTER
  2519 0000206E C8000000            <1>  enter 0, 0
  2519 00002072 4883E4F0            <1>  and rsp, ~15
  2520 00002076 E8(00000000)                    call fprintf
  2521                                  	LEAVE
  2521 0000207B C9                  <1>  leave
  2522 0000207C 48C7C0FBFFFFFF                  mov rax, -5
  2523 00002083 E8(00000000)                    call exit
  2524                                  
  2525                                  L_error_arg_count_0:
  2526 00002088 488B3C25[00000000]              mov rdi, qword [stderr]
  2527 00002090 48BE-                           mov rsi, fmt_arg_count_0
  2527 00002092 [7802000000000000] 
  2528 0000209A 488B5518                        mov rdx, COUNT
  2529 0000209E B800000000                      mov rax, 0
  2530                                  	ENTER
  2530 000020A3 C8000000            <1>  enter 0, 0
  2530 000020A7 4883E4F0            <1>  and rsp, ~15
  2531 000020AB E8(00000000)                    call fprintf
  2532                                  	LEAVE
  2532 000020B0 C9                  <1>  leave
  2533 000020B1 48C7C0FDFFFFFF                  mov rax, -3
  2534 000020B8 E8(00000000)                    call exit
  2535                                  
  2536                                  L_error_arg_count_1:
  2537 000020BD 488B3C25[00000000]              mov rdi, qword [stderr]
  2538 000020C5 48BE-                           mov rsi, fmt_arg_count_1
  2538 000020C7 [A002000000000000] 
  2539 000020CF 488B5518                        mov rdx, COUNT
  2540 000020D3 B800000000                      mov rax, 0
  2541                                  	ENTER
  2541 000020D8 C8000000            <1>  enter 0, 0
  2541 000020DC 4883E4F0            <1>  and rsp, ~15
  2542 000020E0 E8(00000000)                    call fprintf
  2543                                  	LEAVE
  2543 000020E5 C9                  <1>  leave
  2544 000020E6 48C7C0FDFFFFFF                  mov rax, -3
  2545 000020ED E8(00000000)                    call exit
  2546                                  
  2547                                  L_error_arg_count_2:
  2548 000020F2 488B3C25[00000000]              mov rdi, qword [stderr]
  2549 000020FA 48BE-                           mov rsi, fmt_arg_count_2
  2549 000020FC [0603000000000000] 
  2550 00002104 488B5518                        mov rdx, COUNT
  2551 00002108 B800000000                      mov rax, 0
  2552                                  	ENTER
  2552 0000210D C8000000            <1>  enter 0, 0
  2552 00002111 4883E4F0            <1>  and rsp, ~15
  2553 00002115 E8(00000000)                    call fprintf
  2554                                  	LEAVE
  2554 0000211A C9                  <1>  leave
  2555 0000211B 48C7C0FDFFFFFF                  mov rax, -3
  2556 00002122 E8(00000000)                    call exit
  2557                                  
  2558                                  L_error_arg_count_12:
  2559 00002127 488B3C25[00000000]              mov rdi, qword [stderr]
  2560 0000212F 48BE-                           mov rsi, fmt_arg_count_12
  2560 00002131 [C602000000000000] 
  2561 00002139 488B5518                        mov rdx, COUNT
  2562 0000213D B800000000                      mov rax, 0
  2563                                  	ENTER
  2563 00002142 C8000000            <1>  enter 0, 0
  2563 00002146 4883E4F0            <1>  and rsp, ~15
  2564 0000214A E8(00000000)                    call fprintf
  2565                                  	LEAVE
  2565 0000214F C9                  <1>  leave
  2566 00002150 48C7C0FDFFFFFF                  mov rax, -3
  2567 00002157 E8(00000000)                    call exit
  2568                                  
  2569                                  L_error_arg_count_3:
  2570 0000215C 488B3C25[00000000]              mov rdi, qword [stderr]
  2571 00002164 48BE-                           mov rsi, fmt_arg_count_3
  2571 00002166 [2D03000000000000] 
  2572 0000216E 488B5518                        mov rdx, COUNT
  2573 00002172 B800000000                      mov rax, 0
  2574                                  	ENTER
  2574 00002177 C8000000            <1>  enter 0, 0
  2574 0000217B 4883E4F0            <1>  and rsp, ~15
  2575 0000217F E8(00000000)                    call fprintf
  2576                                  	LEAVE
  2576 00002184 C9                  <1>  leave
  2577 00002185 48C7C0FDFFFFFF                  mov rax, -3
  2578 0000218C E8(00000000)                    call exit
  2579                                          
  2580                                  L_error_incorrect_type:
  2581 00002191 488B3C25[00000000]              mov rdi, qword [stderr]
  2582 00002199 48BE-                           mov rsi, fmt_type
  2582 0000219B [5603000000000000] 
  2583 000021A3 B800000000                      mov rax, 0
  2584                                  	ENTER
  2584 000021A8 C8000000            <1>  enter 0, 0
  2584 000021AC 4883E4F0            <1>  and rsp, ~15
  2585 000021B0 E8(00000000)                    call fprintf
  2586                                  	LEAVE
  2586 000021B5 C9                  <1>  leave
  2587 000021B6 48C7C0FCFFFFFF                  mov rax, -4
  2588 000021BD E8(00000000)                    call exit
  2589                                  
  2590                                  L_error_division_by_zero:
  2591 000021C2 488B3C25[00000000]              mov rdi, qword [stderr]
  2592 000021CA 48BE-                           mov rsi, fmt_division_by_zero
  2592 000021CC [9703000000000000] 
  2593 000021D4 B800000000                      mov rax, 0
  2594                                  	ENTER
  2594 000021D9 C8000000            <1>  enter 0, 0
  2594 000021DD 4883E4F0            <1>  and rsp, ~15
  2595 000021E1 E8(00000000)                    call fprintf
  2596                                  	LEAVE
  2596 000021E6 C9                  <1>  leave
  2597 000021E7 48C7C0F8FFFFFF                  mov rax, -8
  2598 000021EE E8(00000000)                    call exit
  2599                                  
  2600                                  section .data
  2601                                  fmt_char:
  2602 00000275 256300                          db `%c\0`
  2603                                  fmt_arg_count_0:
  2604 00000278 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2604 00000281 74696E67207A65726F-
  2604 0000028A 20617267756D656E74-
  2604 00000293 732E20466F756E6420-
  2604 0000029C 25640A00           
  2605                                  fmt_arg_count_1:
  2606 000002A0 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2606 000002A9 74696E67206F6E6520-
  2606 000002B2 617267756D656E742E-
  2606 000002BB 20466F756E64202564-
  2606 000002C4 0A00               
  2607                                  fmt_arg_count_12:
  2608 000002C6 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2608 000002CF 74696E67206F6E6520-
  2608 000002D8 726571756972656420-
  2608 000002E1 616E64206F6E65206F-
  2608 000002EA 7074696F6E616C2061-
  2608 000002F3 7267756D656E742E20-
  2608 000002FC 466F756E642025640A-
  2608 00000305 00                 
  2609                                  fmt_arg_count_2:
  2610 00000306 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2610 0000030F 74696E672074776F20-
  2610 00000318 617267756D656E7473-
  2610 00000321 2E20466F756E642025-
  2610 0000032A 640A00             
  2611                                  fmt_arg_count_3:
  2612 0000032D 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2612 00000336 74696E672074687265-
  2612 0000033F 6520617267756D656E-
  2612 00000348 74732E20466F756E64-
  2612 00000351 2025640A00         
  2613                                  fmt_type:
  2614 00000356 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2614 0000035F 696F6E207061737365-
  2614 00000368 6420696E636F727265-
  2614 00000371 637420747970650A00 
  2615                                  fmt_integer_range:
  2616 0000037A 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2616 00000383 7265637420696E7465-
  2616 0000038C 6765722072616E6765-
  2616 00000395 0A00               
  2617                                  fmt_division_by_zero:
  2618 00000397 212121204469766973-             db `!!! Division by zero\n\0`
  2618 000003A0 696F6E206279207A65-
  2618 000003A9 726F0A00           
  2619                                  fmt_scheme_error_part_1:
  2620 000003AD 0A2121212054686520-             db `\n!!! The procedure \0`
  2620 000003B6 70726F636564757265-
  2620 000003BF 2000               
  2621                                  fmt_scheme_error_part_2:
  2622 000003C1 2061736B656420746F-             db ` asked to terminate the program\n`
  2622 000003CA 207465726D696E6174-
  2622 000003D3 65207468652070726F-
  2622 000003DC 6772616D0A         
  2623 000003E1 202020207769746820-             db `    with the following message:\n\n\0`
  2623 000003EA 74686520666F6C6C6F-
  2623 000003F3 77696E67206D657373-
  2623 000003FC 6167653A0A0A00     
  2624                                  fmt_scheme_error_part_3:
  2625 00000403 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2625 0000040C 210A0A00           
