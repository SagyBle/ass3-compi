     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 11                      	db T_rational	; 2
    84 00000007 020000000000000001-     	dq 2, 1
    84 00000010 00000000000000     
    85 00000017 11                      	db T_rational	; 47
    86 00000018 2F0000000000000001-     	dq 47, 1
    86 00000021 00000000000000     
    87                                  
    88                                  section .bss
    89                                  free_var_0:	; location of null?
    90 00000000 <res 00000008>          	resq 1
    91                                  free_var_1:	; location of pair?
    92 00000008 <res 00000008>          	resq 1
    93                                  free_var_2:	; location of void?
    94 00000010 <res 00000008>          	resq 1
    95                                  free_var_3:	; location of char?
    96 00000018 <res 00000008>          	resq 1
    97                                  free_var_4:	; location of string?
    98 00000020 <res 00000008>          	resq 1
    99                                  free_var_5:	; location of symbol?
   100 00000028 <res 00000008>          	resq 1
   101                                  free_var_6:	; location of vector?
   102 00000030 <res 00000008>          	resq 1
   103                                  free_var_7:	; location of procedure?
   104 00000038 <res 00000008>          	resq 1
   105                                  free_var_8:	; location of real?
   106 00000040 <res 00000008>          	resq 1
   107                                  free_var_9:	; location of rational?
   108 00000048 <res 00000008>          	resq 1
   109                                  free_var_10:	; location of boolean?
   110 00000050 <res 00000008>          	resq 1
   111                                  free_var_11:	; location of number?
   112 00000058 <res 00000008>          	resq 1
   113                                  free_var_12:	; location of collection?
   114 00000060 <res 00000008>          	resq 1
   115                                  free_var_13:	; location of cons
   116 00000068 <res 00000008>          	resq 1
   117                                  free_var_14:	; location of display-sexpr
   118 00000070 <res 00000008>          	resq 1
   119                                  free_var_15:	; location of write-char
   120 00000078 <res 00000008>          	resq 1
   121                                  free_var_16:	; location of car
   122 00000080 <res 00000008>          	resq 1
   123                                  free_var_17:	; location of cdr
   124 00000088 <res 00000008>          	resq 1
   125                                  free_var_18:	; location of string-length
   126 00000090 <res 00000008>          	resq 1
   127                                  free_var_19:	; location of vector-length
   128 00000098 <res 00000008>          	resq 1
   129                                  free_var_20:	; location of real->integer
   130 000000A0 <res 00000008>          	resq 1
   131                                  free_var_21:	; location of exit
   132 000000A8 <res 00000008>          	resq 1
   133                                  free_var_22:	; location of integer->real
   134 000000B0 <res 00000008>          	resq 1
   135                                  free_var_23:	; location of rational->real
   136 000000B8 <res 00000008>          	resq 1
   137                                  free_var_24:	; location of char->integer
   138 000000C0 <res 00000008>          	resq 1
   139                                  free_var_25:	; location of integer->char
   140 000000C8 <res 00000008>          	resq 1
   141                                  free_var_26:	; location of trng
   142 000000D0 <res 00000008>          	resq 1
   143                                  free_var_27:	; location of zero?
   144 000000D8 <res 00000008>          	resq 1
   145                                  free_var_28:	; location of integer?
   146 000000E0 <res 00000008>          	resq 1
   147                                  free_var_29:	; location of __bin-apply
   148 000000E8 <res 00000008>          	resq 1
   149                                  free_var_30:	; location of __bin-add-rr
   150 000000F0 <res 00000008>          	resq 1
   151                                  free_var_31:	; location of __bin-sub-rr
   152 000000F8 <res 00000008>          	resq 1
   153                                  free_var_32:	; location of __bin-mul-rr
   154 00000100 <res 00000008>          	resq 1
   155                                  free_var_33:	; location of __bin-div-rr
   156 00000108 <res 00000008>          	resq 1
   157                                  free_var_34:	; location of __bin-add-qq
   158 00000110 <res 00000008>          	resq 1
   159                                  free_var_35:	; location of __bin-sub-qq
   160 00000118 <res 00000008>          	resq 1
   161                                  free_var_36:	; location of __bin-mul-qq
   162 00000120 <res 00000008>          	resq 1
   163                                  free_var_37:	; location of __bin-div-qq
   164 00000128 <res 00000008>          	resq 1
   165                                  free_var_38:	; location of error
   166 00000130 <res 00000008>          	resq 1
   167                                  free_var_39:	; location of __bin-less-than-rr
   168 00000138 <res 00000008>          	resq 1
   169                                  free_var_40:	; location of __bin-less-than-qq
   170 00000140 <res 00000008>          	resq 1
   171                                  free_var_41:	; location of __bin-equal-rr
   172 00000148 <res 00000008>          	resq 1
   173                                  free_var_42:	; location of __bin-equal-qq
   174 00000150 <res 00000008>          	resq 1
   175                                  free_var_43:	; location of quotient
   176 00000158 <res 00000008>          	resq 1
   177                                  free_var_44:	; location of remainder
   178 00000160 <res 00000008>          	resq 1
   179                                  free_var_45:	; location of set-car!
   180 00000168 <res 00000008>          	resq 1
   181                                  free_var_46:	; location of set-cdr!
   182 00000170 <res 00000008>          	resq 1
   183                                  free_var_47:	; location of string-ref
   184 00000178 <res 00000008>          	resq 1
   185                                  free_var_48:	; location of vector-ref
   186 00000180 <res 00000008>          	resq 1
   187                                  free_var_49:	; location of vector-set!
   188 00000188 <res 00000008>          	resq 1
   189                                  free_var_50:	; location of string-set!
   190 00000190 <res 00000008>          	resq 1
   191                                  free_var_51:	; location of make-vector
   192 00000198 <res 00000008>          	resq 1
   193                                  free_var_52:	; location of make-string
   194 000001A0 <res 00000008>          	resq 1
   195                                  free_var_53:	; location of numerator
   196 000001A8 <res 00000008>          	resq 1
   197                                  free_var_54:	; location of denominator
   198 000001B0 <res 00000008>          	resq 1
   199                                  free_var_55:	; location of eq?
   200 000001B8 <res 00000008>          	resq 1
   201                                  
   202                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   203                                  global main
   204                                  section .text
   205                                  main:
   206 00000000 C8000000                        enter 0, 0
   207                                          
   208                                  	; building closure for null?
   209 00000004 48BF-                   	mov rdi, free_var_0
   209 00000006 [0000000000000000] 
   210 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   210 00000010 [EA0C000000000000] 
   211 00000018 E8A50C0000              	call bind_primitive
   212                                  
   213                                  	; building closure for pair?
   214 0000001D 48BF-                   	mov rdi, free_var_1
   214 0000001F [0800000000000000] 
   215 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   215 00000029 [200D000000000000] 
   216 00000031 E88C0C0000              	call bind_primitive
   217                                  
   218                                  	; building closure for void?
   219 00000036 48BF-                   	mov rdi, free_var_2
   219 00000038 [1000000000000000] 
   220 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   220 00000042 [560D000000000000] 
   221 0000004A E8730C0000              	call bind_primitive
   222                                  
   223                                  	; building closure for char?
   224 0000004F 48BF-                   	mov rdi, free_var_3
   224 00000051 [1800000000000000] 
   225 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   225 0000005B [8C0D000000000000] 
   226 00000063 E85A0C0000              	call bind_primitive
   227                                  
   228                                  	; building closure for string?
   229 00000068 48BF-                   	mov rdi, free_var_4
   229 0000006A [2000000000000000] 
   230 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   230 00000074 [C20D000000000000] 
   231 0000007C E8410C0000              	call bind_primitive
   232                                  
   233                                  	; building closure for symbol?
   234 00000081 48BF-                   	mov rdi, free_var_5
   234 00000083 [2800000000000000] 
   235 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   235 0000008D [F80D000000000000] 
   236 00000095 E8280C0000              	call bind_primitive
   237                                  
   238                                  	; building closure for vector?
   239 0000009A 48BF-                   	mov rdi, free_var_6
   239 0000009C [3000000000000000] 
   240 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   240 000000A6 [2E0E000000000000] 
   241 000000AE E80F0C0000              	call bind_primitive
   242                                  
   243                                  	; building closure for procedure?
   244 000000B3 48BF-                   	mov rdi, free_var_7
   244 000000B5 [3800000000000000] 
   245 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   245 000000BF [640E000000000000] 
   246 000000C7 E8F60B0000              	call bind_primitive
   247                                  
   248                                  	; building closure for real?
   249 000000CC 48BF-                   	mov rdi, free_var_8
   249 000000CE [4000000000000000] 
   250 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   250 000000D8 [9A0E000000000000] 
   251 000000E0 E8DD0B0000              	call bind_primitive
   252                                  
   253                                  	; building closure for rational?
   254 000000E5 48BF-                   	mov rdi, free_var_9
   254 000000E7 [4800000000000000] 
   255 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   255 000000F1 [D00E000000000000] 
   256 000000F9 E8C40B0000              	call bind_primitive
   257                                  
   258                                  	; building closure for boolean?
   259 000000FE 48BF-                   	mov rdi, free_var_10
   259 00000100 [5000000000000000] 
   260 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   260 0000010A [060F000000000000] 
   261 00000112 E8AB0B0000              	call bind_primitive
   262                                  
   263                                  	; building closure for number?
   264 00000117 48BF-                   	mov rdi, free_var_11
   264 00000119 [5800000000000000] 
   265 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   265 00000123 [3E0F000000000000] 
   266 0000012B E8920B0000              	call bind_primitive
   267                                  
   268                                  	; building closure for collection?
   269 00000130 48BF-                   	mov rdi, free_var_12
   269 00000132 [6000000000000000] 
   270 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   270 0000013C [760F000000000000] 
   271 00000144 E8790B0000              	call bind_primitive
   272                                  
   273                                  	; building closure for cons
   274 00000149 48BF-                   	mov rdi, free_var_13
   274 0000014B [6800000000000000] 
   275 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   275 00000155 [AE0F000000000000] 
   276 0000015D E8600B0000              	call bind_primitive
   277                                  
   278                                  	; building closure for display-sexpr
   279 00000162 48BF-                   	mov rdi, free_var_14
   279 00000164 [7000000000000000] 
   280 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   280 0000016E [E20F000000000000] 
   281 00000176 E8470B0000              	call bind_primitive
   282                                  
   283                                  	; building closure for write-char
   284 0000017B 48BF-                   	mov rdi, free_var_15
   284 0000017D [7800000000000000] 
   285 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   285 00000187 [0C10000000000000] 
   286 0000018F E82E0B0000              	call bind_primitive
   287                                  
   288                                  	; building closure for car
   289 00000194 48BF-                   	mov rdi, free_var_16
   289 00000196 [8000000000000000] 
   290 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   290 000001A0 [6310000000000000] 
   291 000001A8 E8150B0000              	call bind_primitive
   292                                  
   293                                  	; building closure for cdr
   294 000001AD 48BF-                   	mov rdi, free_var_17
   294 000001AF [8800000000000000] 
   295 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   295 000001B9 [8B10000000000000] 
   296 000001C1 E8FC0A0000              	call bind_primitive
   297                                  
   298                                  	; building closure for string-length
   299 000001C6 48BF-                   	mov rdi, free_var_18
   299 000001C8 [9000000000000000] 
   300 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   300 000001D2 [B310000000000000] 
   301 000001DA E8E30A0000              	call bind_primitive
   302                                  
   303                                  	; building closure for vector-length
   304 000001DF 48BF-                   	mov rdi, free_var_19
   304 000001E1 [9800000000000000] 
   305 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   305 000001EB [E010000000000000] 
   306 000001F3 E8CA0A0000              	call bind_primitive
   307                                  
   308                                  	; building closure for real->integer
   309 000001F8 48BF-                   	mov rdi, free_var_20
   309 000001FA [A000000000000000] 
   310 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   310 00000204 [0D11000000000000] 
   311 0000020C E8B10A0000              	call bind_primitive
   312                                  
   313                                  	; building closure for exit
   314 00000211 48BF-                   	mov rdi, free_var_21
   314 00000213 [A800000000000000] 
   315 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   315 0000021D [4011000000000000] 
   316 00000225 E8980A0000              	call bind_primitive
   317                                  
   318                                  	; building closure for integer->real
   319 0000022A 48BF-                   	mov rdi, free_var_22
   319 0000022C [B000000000000000] 
   320 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   320 00000236 [5D11000000000000] 
   321 0000023E E87F0A0000              	call bind_primitive
   322                                  
   323                                  	; building closure for rational->real
   324 00000243 48BF-                   	mov rdi, free_var_23
   324 00000245 [B800000000000000] 
   325 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   325 0000024F [9A11000000000000] 
   326 00000257 E8660A0000              	call bind_primitive
   327                                  
   328                                  	; building closure for char->integer
   329 0000025C 48BF-                   	mov rdi, free_var_24
   329 0000025E [C000000000000000] 
   330 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   330 00000268 [D911000000000000] 
   331 00000270 E84D0A0000              	call bind_primitive
   332                                  
   333                                  	; building closure for integer->char
   334 00000275 48BF-                   	mov rdi, free_var_25
   334 00000277 [C800000000000000] 
   335 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   335 00000281 [0E12000000000000] 
   336 00000289 E8340A0000              	call bind_primitive
   337                                  
   338                                  	; building closure for trng
   339 0000028E 48BF-                   	mov rdi, free_var_26
   339 00000290 [D000000000000000] 
   340 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   340 0000029A [6812000000000000] 
   341 000002A2 E81B0A0000              	call bind_primitive
   342                                  
   343                                  	; building closure for zero?
   344 000002A7 48BF-                   	mov rdi, free_var_27
   344 000002A9 [D800000000000000] 
   345 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   345 000002B3 [8B12000000000000] 
   346 000002BB E8020A0000              	call bind_primitive
   347                                  
   348                                  	; building closure for integer?
   349 000002C0 48BF-                   	mov rdi, free_var_28
   349 000002C2 [E000000000000000] 
   350 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   350 000002CC [E612000000000000] 
   351 000002D4 E8E9090000              	call bind_primitive
   352                                  
   353                                  	; building closure for __bin-apply
   354 000002D9 48BF-                   	mov rdi, free_var_29
   354 000002DB [E800000000000000] 
   355 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   355 000002E5 [EA0C000000000000] 
   356 000002ED E8D0090000              	call bind_primitive
   357                                  
   358                                  	; building closure for __bin-add-rr
   359 000002F2 48BF-                   	mov rdi, free_var_30
   359 000002F4 [F000000000000000] 
   360 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   360 000002FE [2313000000000000] 
   361 00000306 E8B7090000              	call bind_primitive
   362                                  
   363                                  	; building closure for __bin-sub-rr
   364 0000030B 48BF-                   	mov rdi, free_var_31
   364 0000030D [F800000000000000] 
   365 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   365 00000317 [6713000000000000] 
   366 0000031F E89E090000              	call bind_primitive
   367                                  
   368                                  	; building closure for __bin-mul-rr
   369 00000324 48BF-                   	mov rdi, free_var_32
   369 00000326 [0001000000000000] 
   370 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   370 00000330 [AB13000000000000] 
   371 00000338 E885090000              	call bind_primitive
   372                                  
   373                                  	; building closure for __bin-div-rr
   374 0000033D 48BF-                   	mov rdi, free_var_33
   374 0000033F [0801000000000000] 
   375 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   375 00000349 [EF13000000000000] 
   376 00000351 E86C090000              	call bind_primitive
   377                                  
   378                                  	; building closure for __bin-add-qq
   379 00000356 48BF-                   	mov rdi, free_var_34
   379 00000358 [1001000000000000] 
   380 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   380 00000362 [4114000000000000] 
   381 0000036A E853090000              	call bind_primitive
   382                                  
   383                                  	; building closure for __bin-sub-qq
   384 0000036F 48BF-                   	mov rdi, free_var_35
   384 00000371 [1801000000000000] 
   385 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   385 0000037B [A914000000000000] 
   386 00000383 E83A090000              	call bind_primitive
   387                                  
   388                                  	; building closure for __bin-mul-qq
   389 00000388 48BF-                   	mov rdi, free_var_36
   389 0000038A [2001000000000000] 
   390 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   390 00000394 [1115000000000000] 
   391 0000039C E821090000              	call bind_primitive
   392                                  
   393                                  	; building closure for __bin-div-qq
   394 000003A1 48BF-                   	mov rdi, free_var_37
   394 000003A3 [2801000000000000] 
   395 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   395 000003AD [6915000000000000] 
   396 000003B5 E808090000              	call bind_primitive
   397                                  
   398                                  	; building closure for error
   399 000003BA 48BF-                   	mov rdi, free_var_38
   399 000003BC [3001000000000000] 
   400 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   400 000003C6 [3716000000000000] 
   401 000003CE E8EF080000              	call bind_primitive
   402                                  
   403                                  	; building closure for __bin-less-than-rr
   404 000003D3 48BF-                   	mov rdi, free_var_39
   404 000003D5 [3801000000000000] 
   405 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   405 000003DF [EE16000000000000] 
   406 000003E7 E8D6080000              	call bind_primitive
   407                                  
   408                                  	; building closure for __bin-less-than-qq
   409 000003EC 48BF-                   	mov rdi, free_var_40
   409 000003EE [4001000000000000] 
   410 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   410 000003F8 [4517000000000000] 
   411 00000400 E8BD080000              	call bind_primitive
   412                                  
   413                                  	; building closure for __bin-equal-rr
   414 00000405 48BF-                   	mov rdi, free_var_41
   414 00000407 [4801000000000000] 
   415 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   415 00000411 [A817000000000000] 
   416 00000419 E8A4080000              	call bind_primitive
   417                                  
   418                                  	; building closure for __bin-equal-qq
   419 0000041E 48BF-                   	mov rdi, free_var_42
   419 00000420 [5001000000000000] 
   420 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   420 0000042A [FF17000000000000] 
   421 00000432 E88B080000              	call bind_primitive
   422                                  
   423                                  	; building closure for quotient
   424 00000437 48BF-                   	mov rdi, free_var_43
   424 00000439 [5801000000000000] 
   425 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   425 00000443 [6218000000000000] 
   426 0000044B E872080000              	call bind_primitive
   427                                  
   428                                  	; building closure for remainder
   429 00000450 48BF-                   	mov rdi, free_var_44
   429 00000452 [6001000000000000] 
   430 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   430 0000045C [C818000000000000] 
   431 00000464 E859080000              	call bind_primitive
   432                                  
   433                                  	; building closure for set-car!
   434 00000469 48BF-                   	mov rdi, free_var_45
   434 0000046B [6801000000000000] 
   435 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   435 00000475 [2E19000000000000] 
   436 0000047D E840080000              	call bind_primitive
   437                                  
   438                                  	; building closure for set-cdr!
   439 00000482 48BF-                   	mov rdi, free_var_46
   439 00000484 [7001000000000000] 
   440 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   440 0000048E [6419000000000000] 
   441 00000496 E827080000              	call bind_primitive
   442                                  
   443                                  	; building closure for string-ref
   444 0000049B 48BF-                   	mov rdi, free_var_47
   444 0000049D [7801000000000000] 
   445 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   445 000004A7 [9A19000000000000] 
   446 000004AF E80E080000              	call bind_primitive
   447                                  
   448                                  	; building closure for vector-ref
   449 000004B4 48BF-                   	mov rdi, free_var_48
   449 000004B6 [8001000000000000] 
   450 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   450 000004C0 [051A000000000000] 
   451 000004C8 E8F5070000              	call bind_primitive
   452                                  
   453                                  	; building closure for vector-set!
   454 000004CD 48BF-                   	mov rdi, free_var_49
   454 000004CF [8801000000000000] 
   455 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   455 000004D9 [611A000000000000] 
   456 000004E1 E8DC070000              	call bind_primitive
   457                                  
   458                                  	; building closure for string-set!
   459 000004E6 48BF-                   	mov rdi, free_var_50
   459 000004E8 [9001000000000000] 
   460 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   460 000004F2 [CB1A000000000000] 
   461 000004FA E8C3070000              	call bind_primitive
   462                                  
   463                                  	; building closure for make-vector
   464 000004FF 48BF-                   	mov rdi, free_var_51
   464 00000501 [9801000000000000] 
   465 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   465 0000050B [401B000000000000] 
   466 00000513 E8AA070000              	call bind_primitive
   467                                  
   468                                  	; building closure for make-string
   469 00000518 48BF-                   	mov rdi, free_var_52
   469 0000051A [A001000000000000] 
   470 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   470 00000524 [AA1B000000000000] 
   471 0000052C E891070000              	call bind_primitive
   472                                  
   473                                  	; building closure for numerator
   474 00000531 48BF-                   	mov rdi, free_var_53
   474 00000533 [A801000000000000] 
   475 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   475 0000053D [1C1C000000000000] 
   476 00000545 E878070000              	call bind_primitive
   477                                  
   478                                  	; building closure for denominator
   479 0000054A 48BF-                   	mov rdi, free_var_54
   479 0000054C [B001000000000000] 
   480 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   480 00000556 [491C000000000000] 
   481 0000055E E85F070000              	call bind_primitive
   482                                  
   483                                  	; building closure for eq?
   484 00000563 48BF-                   	mov rdi, free_var_55
   484 00000565 [B801000000000000] 
   485 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   485 0000056F [761C000000000000] 
   486 00000577 E846070000              	call bind_primitive
   487                                  
   488 0000057C 48B8-                   	mov rax, qword (L_constants + 23)
   488 0000057E [1700000000000000] 
   489 00000586 50                      	push rax
   490 00000587 48B8-                   	mov rax, qword (L_constants + 23)
   490 00000589 [1700000000000000] 
   491 00000591 50                      	push rax
   492 00000592 6A02                    	push 2
   493 00000594 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   494 00000599 E893010000              	call malloc
   495 0000059E 50                      	push rax
   496 0000059F BF00000000              	mov rdi, 8 * 0	; new rib
   497 000005A4 E888010000              	call malloc
   498 000005A9 50                      	push rax
   499 000005AA BF08000000              	mov rdi, 8 * 1	; extended env
   500 000005AF E87D010000              	call malloc
   501 000005B4 488B7D10                	mov rdi, ENV
   502 000005B8 BE00000000              	mov rsi, 0
   503 000005BD BA01000000              	mov rdx, 1
   504                                  .L_lambda_simple_env_loop_0001:	; ext_env[i + 1] <-- env[i]
   505 000005C2 4883FE00                	cmp rsi, 0
   506 000005C6 7410                    	je .L_lambda_simple_env_end_0001
   507 000005C8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   508 000005CC 48890CD0                	mov qword [rax + 8 * rdx], rcx
   509 000005D0 48FFC6                  	inc rsi
   510 000005D3 48FFC2                  	inc rdx
   511 000005D6 EBEA                    	jmp .L_lambda_simple_env_loop_0001
   512                                  .L_lambda_simple_env_end_0001:
   513 000005D8 5B                      	pop rbx
   514 000005D9 BE00000000              	mov rsi, 0
   515                                  .L_lambda_simple_params_loop_0001:	; copy params
   516 000005DE 4883FE00                	cmp rsi, 0
   517 000005E2 740E                    	je .L_lambda_simple_params_end_0001
   518 000005E4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   519 000005E9 488914F3                	mov qword [rbx + 8 * rsi], rdx
   520 000005ED 48FFC6                  	inc rsi
   521 000005F0 EBEC                    	jmp .L_lambda_simple_params_loop_0001
   522                                  .L_lambda_simple_params_end_0001:
   523 000005F2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   524 000005F5 4889C3                  	mov rbx, rax
   525 000005F8 58                      	pop rax
   526 000005F9 C60005                  	mov byte [rax], T_closure
   527 000005FC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   528 00000600 48C74009[0A060000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0001
   529 00000608 EB37                    	jmp .L_lambda_simple_end_0001
   530                                  .L_lambda_simple_code_0001:	; lambda-simple body
   531 0000060A 48837C241002            	cmp qword [rsp + 8 * 2], 2
   532 00000610 740B                    	je .L_lambda_simple_arity_check_ok_0001
   533 00000612 FF742410                	push qword [rsp + 8 * 2]
   534 00000616 6A02                    	push 2
   535 00000618 E9CD000000              	jmp L_error_incorrect_arity_simple
   536                                  .L_lambda_simple_arity_check_ok_0001:
   537 0000061D C8000000                	enter 0, 0
   538 00000621 488B4520                mov rax, qword [rbp + 32]
   539 00000625 483D[02000000]          	cmp rax, sob_boolean_false
   540 0000062B 7406                    	je .L_if_else_0001
   541 0000062D 488B4528                mov rax, qword [rbp + 40]
   542 00000631 EB0A                    	jmp .L_if_end_0001
   543                                  	.L_if_else_0001:
   544 00000633 48B8-                   		mov rax, qword (L_constants + 6)
   544 00000635 [0600000000000000] 
   545                                  	.L_if_end_0001:
   546 0000063D C9                      	leave
   547 0000063E C22000                  	ret 8 * (2 + 2)
   548                                  .L_lambda_simple_end_0001:	; new closure is in rax
   549 00000641 803805                  	cmp byte [rax], T_closure 
   550 00000644 0F85ED0F0000                    jne L_code_ptr_error
   551                                  
   552 0000064A 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
   553                                  
   554 0000064E 53                              push rbx
   555                                  
   556 0000064F FF5009                          call SOB_CLOSURE_CODE(rax)
   557                                  
   558                                          
   559 00000652 4889C7                  	mov rdi, rax
   560 00000655 E8E8000000              	call print_sexpr_if_not_void
   561                                  
   562 0000065A 48BF-                           mov rdi, fmt_memory_usage
   562 0000065C [8700000000000000] 
   563 00000664 488B3425[0E010000]              mov rsi, qword [top_of_memory]
   564 0000066C 4881EE[C0010000]                sub rsi, memory
   565 00000673 B800000000                      mov rax, 0
   566                                  	ENTER
   566 00000678 C8000000            <1>  enter 0, 0
   566 0000067C 4883E4F0            <1>  and rsp, ~15
   567 00000680 E8(00000000)                    call printf
   568                                  	LEAVE
   568 00000685 C9                  <1>  leave
   569 00000686 C9                      	leave
   570 00000687 C3                      	ret
   571                                  
   572                                  L_error_non_closure:
   573 00000688 488B3C25[00000000]              mov rdi, qword [stderr]
   574 00000690 48BE-                           mov rsi, fmt_non_closure
   574 00000692 [BE00000000000000] 
   575 0000069A B800000000                      mov rax, 0
   576                                  	ENTER
   576 0000069F C8000000            <1>  enter 0, 0
   576 000006A3 4883E4F0            <1>  and rsp, ~15
   577 000006A7 E8(00000000)                    call fprintf
   578                                  	LEAVE
   578 000006AC C9                  <1>  leave
   579 000006AD 48C7C0FEFFFFFF                  mov rax, -2
   580 000006B4 E8(00000000)                    call exit
   581                                  
   582                                  L_error_improper_list:
   583 000006B9 488B3C25[00000000]      	mov rdi, qword [stderr]
   584 000006C1 48BE-                   	mov rsi, fmt_error_improper_list
   584 000006C3 [E600000000000000] 
   585 000006CB B800000000              	mov rax, 0
   586                                  	ENTER
   586 000006D0 C8000000            <1>  enter 0, 0
   586 000006D4 4883E4F0            <1>  and rsp, ~15
   587 000006D8 E8(00000000)            	call fprintf
   588                                  	LEAVE
   588 000006DD C9                  <1>  leave
   589 000006DE 48C7C0F9FFFFFF          	mov rax, -7
   590 000006E5 E8(00000000)            	call exit
   591                                  
   592                                  L_error_incorrect_arity_simple:
   593 000006EA 488B3C25[00000000]              mov rdi, qword [stderr]
   594 000006F2 48BE-                           mov rsi, fmt_incorrect_arity_simple
   594 000006F4 [2800000000000000] 
   595 000006FC EB12                            jmp L_error_incorrect_arity_common
   596                                  L_error_incorrect_arity_opt:
   597 000006FE 488B3C25[00000000]              mov rdi, qword [stderr]
   598 00000706 48BE-                           mov rsi, fmt_incorrect_arity_opt
   598 00000708 [5300000000000000] 
   599                                  L_error_incorrect_arity_common:
   600 00000710 5A                              pop rdx
   601 00000711 59                              pop rcx
   602 00000712 B800000000                      mov rax, 0
   603                                  	ENTER
   603 00000717 C8000000            <1>  enter 0, 0
   603 0000071B 4883E4F0            <1>  and rsp, ~15
   604 0000071F E8(00000000)                    call fprintf
   605                                  	LEAVE
   605 00000724 C9                  <1>  leave
   606 00000725 48C7C0FAFFFFFF                  mov rax, -6
   607 0000072C E8(00000000)                    call exit
   608                                  
   609                                  section .data
   610                                  fmt_incorrect_arity_simple:
   611 00000028 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   611 00000031 74656420256C642061-
   611 0000003A 7267756D656E74732C-
   611 00000043 206275742067697665-
   611 0000004C 6E20256C640A00     
   612                                  fmt_incorrect_arity_opt:
   613 00000053 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   613 0000005C 746564206174206C65-
   613 00000065 61737420256C642061-
   613 0000006E 7267756D656E74732C-
   613 00000077 206275742067697665-
   613 00000080 6E20256C640A00     
   614                                  fmt_memory_usage:
   615 00000087 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   615 00000090 6420256C6420627974-
   615 00000099 6573206F662064796E-
   615 000000A2 616D6963616C6C792D-
   615 000000AB 616C6C6F6361746564-
   615 000000B4 206D656D6F72790A0A-
   615 000000BD 00                 
   616                                  fmt_non_closure:
   617 000000BE 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   617 000000C7 7074696E6720746F20-
   617 000000D0 6170706C792061206E-
   617 000000D9 6F6E2D636C6F737572-
   617 000000E2 65210A00           
   618                                  fmt_error_improper_list:
   619 000000E6 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   619 000000EF 7267756D656E742069-
   619 000000F8 73206E6F7420612070-
   619 00000101 726F706572206C6973-
   619 0000010A 74210A00           
   620                                  
   621                                  section .bss
   622                                  memory:
   623 000001C0 <res 40000000>          	resb gbytes(1)
   624                                  
   625                                  section .data
   626                                  top_of_memory:
   627 0000010E [C001000000000000]              dq memory
   628                                  
   629                                  section .text
   630                                  malloc:
   631 00000731 488B0425[0E010000]              mov rax, qword [top_of_memory]
   632 00000739 48013C25[0E010000]              add qword [top_of_memory], rdi
   633 00000741 C3                              ret
   634                                          
   635                                  print_sexpr_if_not_void:
   636 00000742 4881FF[00000000]        	cmp rdi, sob_void
   637 00000749 7501                    	jne print_sexpr
   638 0000074B C3                      	ret
   639                                  
   640                                  section .data
   641                                  fmt_void:
   642 00000116 233C766F69643E00        	db `#<void>\0`
   643                                  fmt_nil:
   644 0000011E 282900                  	db `()\0`
   645                                  fmt_boolean_false:
   646 00000121 236600                  	db `#f\0`
   647                                  fmt_boolean_true:
   648 00000124 237400                  	db `#t\0`
   649                                  fmt_char_backslash:
   650 00000127 235C5C00                	db `#\\\\\0`
   651                                  fmt_char_dquote:
   652 0000012B 235C2200                	db `#\\"\0`
   653                                  fmt_char_simple:
   654 0000012F 235C256300              	db `#\\%c\0`
   655                                  fmt_char_null:
   656 00000134 235C6E756C00            	db `#\\nul\0`
   657                                  fmt_char_bell:
   658 0000013A 235C62656C6C00          	db `#\\bell\0`
   659                                  fmt_char_backspace:
   660 00000141 235C6261636B737061-     	db `#\\backspace\0`
   660 0000014A 636500             
   661                                  fmt_char_tab:
   662 0000014D 235C74616200            	db `#\\tab\0`
   663                                  fmt_char_newline:
   664 00000153 235C6E65776C696E65-     	db `#\\newline\0`
   664 0000015C 00                 
   665                                  fmt_char_formfeed:
   666 0000015D 235C7061676500          	db `#\\page\0`
   667                                  fmt_char_return:
   668 00000164 235C72657475726E00      	db `#\\return\0`
   669                                  fmt_char_escape:
   670 0000016D 235C65736300            	db `#\\esc\0`
   671                                  fmt_char_space:
   672 00000173 235C737061636500        	db `#\\space\0`
   673                                  fmt_char_hex:
   674 0000017B 235C782530325800        	db `#\\x%02X\0`
   675                                  fmt_closure:
   676 00000183 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   676 0000018C 206174203078253038-
   676 00000195 5820656E763D307825-
   676 0000019E 30385820636F64653D-
   676 000001A7 3078253038583E00   
   677                                  fmt_lparen:
   678 000001AF 2800                    	db `(\0`
   679                                  fmt_dotted_pair:
   680 000001B1 202E2000                	db ` . \0`
   681                                  fmt_rparen:
   682 000001B5 2900                    	db `)\0`
   683                                  fmt_space:
   684 000001B7 2000                    	db ` \0`
   685                                  fmt_empty_vector:
   686 000001B9 23282900                	db `#()\0`
   687                                  fmt_vector:
   688 000001BD 232800                  	db `#(\0`
   689                                  fmt_real:
   690 000001C0 256600                  	db `%f\0`
   691                                  fmt_fraction:
   692 000001C3 256C642F256C6400        	db `%ld/%ld\0`
   693                                  fmt_zero:
   694 000001CB 3000                    	db `0\0`
   695                                  fmt_int:
   696 000001CD 256C6400                	db `%ld\0`
   697                                  fmt_unknown_sexpr_error:
   698 000001D1 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   698 000001DA 6F723A20556E6B6E6F-
   698 000001E3 776E2074797065206F-
   698 000001EC 662073657870722028-
   698 000001F5 3078253032582920   
   699 000001FD 617420616464726573-     	db `at address 0x%08X\n\n\0`
   699 00000206 73203078253038580A-
   699 0000020F 0A00               
   700                                  fmt_dquote:
   701 00000211 2200                    	db `\"\0`
   702                                  fmt_string_char:
   703 00000213 256300                          db `%c\0`
   704                                  fmt_string_char_7:
   705 00000216 5C6100                          db `\\a\0`
   706                                  fmt_string_char_8:
   707 00000219 5C6200                          db `\\b\0`
   708                                  fmt_string_char_9:
   709 0000021C 5C7400                          db `\\t\0`
   710                                  fmt_string_char_10:
   711 0000021F 5C6E00                          db `\\n\0`
   712                                  fmt_string_char_11:
   713 00000222 5C7600                          db `\\v\0`
   714                                  fmt_string_char_12:
   715 00000225 5C6600                          db `\\f\0`
   716                                  fmt_string_char_13:
   717 00000228 5C7200                          db `\\r\0`
   718                                  fmt_string_char_34:
   719 0000022B 5C2200                          db `\\"\0`
   720                                  fmt_string_char_92:
   721 0000022E 5C5C00                          db `\\\\\0`
   722                                  fmt_string_char_hex:
   723 00000231 5C7825583B00                    db `\\x%X;\0`
   724                                  
   725                                  section .text
   726                                  
   727                                  print_sexpr:
   728                                  	ENTER
   728 0000074C C8000000            <1>  enter 0, 0
   728 00000750 4883E4F0            <1>  and rsp, ~15
   729 00000754 8A07                    	mov al, byte [rdi]
   730 00000756 3C00                    	cmp al, T_void
   731 00000758 744D                    	je .Lvoid
   732 0000075A 3C01                    	cmp al, T_nil
   733 0000075C 7458                    	je .Lnil
   734 0000075E 3C09                    	cmp al, T_boolean_false
   735 00000760 7463                    	je .Lboolean_false
   736 00000762 3C0A                    	cmp al, T_boolean_true
   737 00000764 746E                    	je .Lboolean_true
   738 00000766 3C02                    	cmp al, T_char
   739 00000768 7479                    	je .Lchar
   740 0000076A 3C04                    	cmp al, T_symbol
   741 0000076C 0F84BB010000            	je .Lsymbol
   742 00000772 3C21                    	cmp al, T_pair
   743 00000774 0F84D6010000            	je .Lpair
   744 0000077A 3C22                    	cmp al, T_vector
   745 0000077C 0F849F020000            	je .Lvector
   746 00000782 3C05                    	cmp al, T_closure
   747 00000784 0F8489010000            	je .Lclosure
   748 0000078A 3C12                    	cmp al, T_real
   749 0000078C 0F8430030000            	je .Lreal
   750 00000792 3C11                    	cmp al, T_rational
   751 00000794 0F8456030000            	je .Lrational
   752 0000079A 3C03                    	cmp al, T_string
   753 0000079C 0F848F030000            	je .Lstring
   754                                  
   755 000007A2 E9C7040000              	jmp .Lunknown_sexpr_type
   756                                  
   757                                  .Lvoid:
   758 000007A7 48BF-                   	mov rdi, fmt_void
   758 000007A9 [1601000000000000] 
   759 000007B1 E9F5040000              	jmp .Lemit
   760                                  
   761                                  .Lnil:
   762 000007B6 48BF-                   	mov rdi, fmt_nil
   762 000007B8 [1E01000000000000] 
   763 000007C0 E9E6040000              	jmp .Lemit
   764                                  
   765                                  .Lboolean_false:
   766 000007C5 48BF-                   	mov rdi, fmt_boolean_false
   766 000007C7 [2101000000000000] 
   767 000007CF E9D7040000              	jmp .Lemit
   768                                  
   769                                  .Lboolean_true:
   770 000007D4 48BF-                   	mov rdi, fmt_boolean_true
   770 000007D6 [2401000000000000] 
   771 000007DE E9C8040000              	jmp .Lemit
   772                                  
   773                                  .Lchar:
   774 000007E3 8A4701                  	mov al, byte [rdi + 1]
   775 000007E6 3C20                    	cmp al, ' '
   776 000007E8 7E28                    	jle .Lchar_whitespace
   777 000007EA 3C5C                    	cmp al, 92 		; backslash
   778 000007EC 0F847C000000            	je .Lchar_backslash
   779 000007F2 3C22                    	cmp al, '"'
   780 000007F4 0F8483000000            	je .Lchar_dquote
   781 000007FA 4825FF000000            	and rax, 255
   782 00000800 48BF-                   	mov rdi, fmt_char_simple
   782 00000802 [2F01000000000000] 
   783 0000080A 4889C6                  	mov rsi, rax
   784 0000080D E999040000              	jmp .Lemit
   785                                  
   786                                  .Lchar_whitespace:
   787 00000812 3C00                    	cmp al, 0
   788 00000814 7476                    	je .Lchar_null
   789 00000816 3C07                    	cmp al, 7
   790 00000818 0F847D000000            	je .Lchar_bell
   791 0000081E 3C08                    	cmp al, 8
   792 00000820 0F8484000000            	je .Lchar_backspace
   793 00000826 3C09                    	cmp al, 9
   794 00000828 0F848B000000            	je .Lchar_tab
   795 0000082E 3C0A                    	cmp al, 10
   796 00000830 0F8492000000            	je .Lchar_newline
   797 00000836 3C0C                    	cmp al, 12
   798 00000838 0F8499000000            	je .Lchar_formfeed
   799 0000083E 3C0D                    	cmp al, 13
   800 00000840 0F84A0000000            	je .Lchar_return
   801 00000846 3C1B                    	cmp al, 27
   802 00000848 0F84A7000000            	je .Lchar_escape
   803 0000084E 4825FF000000            	and rax, 255
   804 00000854 3C20                    	cmp al, ' '
   805 00000856 0F84A8000000            	je .Lchar_space
   806 0000085C 48BF-                   	mov rdi, fmt_char_hex
   806 0000085E [7B01000000000000] 
   807 00000866 4889C6                  	mov rsi, rax
   808 00000869 E93D040000              	jmp .Lemit	
   809                                  
   810                                  .Lchar_backslash:
   811 0000086E 48BF-                   	mov rdi, fmt_char_backslash
   811 00000870 [2701000000000000] 
   812 00000878 E92E040000              	jmp .Lemit
   813                                  
   814                                  .Lchar_dquote:
   815 0000087D 48BF-                   	mov rdi, fmt_char_dquote
   815 0000087F [2B01000000000000] 
   816 00000887 E91F040000              	jmp .Lemit
   817                                  
   818                                  .Lchar_null:
   819 0000088C 48BF-                   	mov rdi, fmt_char_null
   819 0000088E [3401000000000000] 
   820 00000896 E910040000              	jmp .Lemit
   821                                  
   822                                  .Lchar_bell:
   823 0000089B 48BF-                   	mov rdi, fmt_char_bell
   823 0000089D [3A01000000000000] 
   824 000008A5 E901040000              	jmp .Lemit
   825                                  
   826                                  .Lchar_backspace:
   827 000008AA 48BF-                   	mov rdi, fmt_char_backspace
   827 000008AC [4101000000000000] 
   828 000008B4 E9F2030000              	jmp .Lemit
   829                                  
   830                                  .Lchar_tab:
   831 000008B9 48BF-                   	mov rdi, fmt_char_tab
   831 000008BB [4D01000000000000] 
   832 000008C3 E9E3030000              	jmp .Lemit
   833                                  
   834                                  .Lchar_newline:
   835 000008C8 48BF-                   	mov rdi, fmt_char_newline
   835 000008CA [5301000000000000] 
   836 000008D2 E9D4030000              	jmp .Lemit
   837                                  
   838                                  .Lchar_formfeed:
   839 000008D7 48BF-                   	mov rdi, fmt_char_formfeed
   839 000008D9 [5D01000000000000] 
   840 000008E1 E9C5030000              	jmp .Lemit
   841                                  
   842                                  .Lchar_return:
   843 000008E6 48BF-                   	mov rdi, fmt_char_return
   843 000008E8 [6401000000000000] 
   844 000008F0 E9B6030000              	jmp .Lemit
   845                                  
   846                                  .Lchar_escape:
   847 000008F5 48BF-                   	mov rdi, fmt_char_escape
   847 000008F7 [6D01000000000000] 
   848 000008FF E9A7030000              	jmp .Lemit
   849                                  
   850                                  .Lchar_space:
   851 00000904 48BF-                   	mov rdi, fmt_char_space
   851 00000906 [7301000000000000] 
   852 0000090E E998030000              	jmp .Lemit
   853                                  
   854                                  .Lclosure:
   855 00000913 4889FE                  	mov rsi, qword rdi
   856 00000916 48BF-                   	mov rdi, fmt_closure
   856 00000918 [8301000000000000] 
   857 00000920 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   858 00000924 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   859 00000928 E97E030000              	jmp .Lemit
   860                                  
   861                                  .Lsymbol:
   862 0000092D 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   863 00000931 BE01000000              	mov rsi, 1		 ; size = 1 byte
   864 00000936 488B5701                	mov rdx, qword [rdi + 1] ; length
   865 0000093A 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   866 0000093E 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   867 00000946 E8(00000000)            	call fwrite
   868 0000094B E970030000              	jmp .Lend
   869                                  	
   870                                  .Lpair:
   871 00000950 57                      	push rdi
   872 00000951 48BF-                   	mov rdi, fmt_lparen
   872 00000953 [AF01000000000000] 
   873 0000095B B800000000              	mov rax, 0
   874                                          ENTER
   874 00000960 C8000000            <1>  enter 0, 0
   874 00000964 4883E4F0            <1>  and rsp, ~15
   875 00000968 E8(00000000)            	call printf
   876                                          LEAVE
   876 0000096D C9                  <1>  leave
   877 0000096E 488B3C24                	mov rdi, qword [rsp] 	; pair
   878 00000972 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   879 00000976 E8D1FDFFFF              	call print_sexpr
   880 0000097B 5F                      	pop rdi 		; pair
   881 0000097C 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   882                                  .Lcdr:
   883 00000980 8A07                    	mov al, byte [rdi]
   884 00000982 3C01                    	cmp al, T_nil
   885 00000984 7447                    	je .Lcdr_nil
   886 00000986 3C21                    	cmp al, T_pair
   887 00000988 7462                    	je .Lcdr_pair
   888 0000098A 57                      	push rdi
   889 0000098B 48BF-                   	mov rdi, fmt_dotted_pair
   889 0000098D [B101000000000000] 
   890 00000995 B800000000              	mov rax, 0
   891                                  	ENTER
   891 0000099A C8000000            <1>  enter 0, 0
   891 0000099E 4883E4F0            <1>  and rsp, ~15
   892 000009A2 E8(00000000)            	call printf
   893                                  	LEAVE
   893 000009A7 C9                  <1>  leave
   894 000009A8 5F                      	pop rdi
   895 000009A9 E89EFDFFFF              	call print_sexpr
   896 000009AE 48BF-                   	mov rdi, fmt_rparen
   896 000009B0 [B501000000000000] 
   897 000009B8 B800000000              	mov rax, 0
   898                                  	ENTER
   898 000009BD C8000000            <1>  enter 0, 0
   898 000009C1 4883E4F0            <1>  and rsp, ~15
   899 000009C5 E8(00000000)            	call printf
   900                                  	LEAVE
   900 000009CA C9                  <1>  leave
   901                                  	LEAVE
   901 000009CB C9                  <1>  leave
   902 000009CC C3                      	ret
   903                                  
   904                                  .Lcdr_nil:
   905 000009CD 48BF-                   	mov rdi, fmt_rparen
   905 000009CF [B501000000000000] 
   906 000009D7 B800000000              	mov rax, 0
   907                                  	ENTER
   907 000009DC C8000000            <1>  enter 0, 0
   907 000009E0 4883E4F0            <1>  and rsp, ~15
   908 000009E4 E8(00000000)            	call printf
   909                                  	LEAVE
   909 000009E9 C9                  <1>  leave
   910                                  	LEAVE
   910 000009EA C9                  <1>  leave
   911 000009EB C3                      	ret
   912                                  
   913                                  .Lcdr_pair:
   914 000009EC 57                      	push rdi
   915 000009ED 48BF-                   	mov rdi, fmt_space
   915 000009EF [B701000000000000] 
   916 000009F7 B800000000              	mov rax, 0
   917                                  	ENTER
   917 000009FC C8000000            <1>  enter 0, 0
   917 00000A00 4883E4F0            <1>  and rsp, ~15
   918 00000A04 E8(00000000)            	call printf
   919                                  	LEAVE
   919 00000A09 C9                  <1>  leave
   920 00000A0A 488B3C24                	mov rdi, qword [rsp]
   921 00000A0E 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   922 00000A12 E835FDFFFF              	call print_sexpr
   923 00000A17 5F                      	pop rdi
   924 00000A18 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   925 00000A1C E95FFFFFFF              	jmp .Lcdr
   926                                  
   927                                  .Lvector:
   928 00000A21 488B4701                	mov rax, qword [rdi + 1] ; length
   929 00000A25 4883F800                	cmp rax, 0
   930 00000A29 0F8484000000            	je .Lvector_empty
   931 00000A2F 57                      	push rdi
   932 00000A30 48BF-                   	mov rdi, fmt_vector
   932 00000A32 [BD01000000000000] 
   933 00000A3A B800000000              	mov rax, 0
   934                                  	ENTER
   934 00000A3F C8000000            <1>  enter 0, 0
   934 00000A43 4883E4F0            <1>  and rsp, ~15
   935 00000A47 E8(00000000)            	call printf
   936                                  	LEAVE
   936 00000A4C C9                  <1>  leave
   937 00000A4D 488B3C24                	mov rdi, qword [rsp]
   938 00000A51 FF7701                  	push qword [rdi + 1]
   939 00000A54 6A01                    	push 1
   940 00000A56 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   941 00000A5A E8EDFCFFFF              	call print_sexpr
   942                                  .Lvector_loop:
   943                                  	; [rsp] index
   944                                  	; [rsp + 8*1] limit
   945                                  	; [rsp + 8*2] vector
   946 00000A5F 488B0424                	mov rax, qword [rsp]
   947 00000A63 483B442408              	cmp rax, qword [rsp + 8*1]
   948 00000A68 7436                    	je .Lvector_end
   949 00000A6A 48BF-                   	mov rdi, fmt_space
   949 00000A6C [B701000000000000] 
   950 00000A74 B800000000              	mov rax, 0
   951                                  	ENTER
   951 00000A79 C8000000            <1>  enter 0, 0
   951 00000A7D 4883E4F0            <1>  and rsp, ~15
   952 00000A81 E8(00000000)            	call printf
   953                                  	LEAVE
   953 00000A86 C9                  <1>  leave
   954 00000A87 488B0424                	mov rax, qword [rsp]
   955 00000A8B 488B5C2410              	mov rbx, qword [rsp + 8*2]
   956 00000A90 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   957 00000A95 E8B2FCFFFF              	call print_sexpr
   958 00000A9A 48FF0424                	inc qword [rsp]
   959 00000A9E EBBF                    	jmp .Lvector_loop
   960                                  
   961                                  .Lvector_end:
   962 00000AA0 4883C418                	add rsp, 8*3
   963 00000AA4 48BF-                   	mov rdi, fmt_rparen
   963 00000AA6 [B501000000000000] 
   964 00000AAE E9F8010000              	jmp .Lemit	
   965                                  
   966                                  .Lvector_empty:
   967 00000AB3 48BF-                   	mov rdi, fmt_empty_vector
   967 00000AB5 [B901000000000000] 
   968 00000ABD E9E9010000              	jmp .Lemit
   969                                  
   970                                  .Lreal:
   971 00000AC2 FF7701                  	push qword [rdi + 1]
   972 00000AC5 F20F100424              	movsd xmm0, qword [rsp]
   973 00000ACA 4883C408                	add rsp, 8*1
   974 00000ACE 48BF-                   	mov rdi, fmt_real
   974 00000AD0 [C001000000000000] 
   975 00000AD8 B801000000              	mov rax, 1
   976                                  	ENTER
   976 00000ADD C8000000            <1>  enter 0, 0
   976 00000AE1 4883E4F0            <1>  and rsp, ~15
   977 00000AE5 E8(00000000)            	call printf
   978                                  	LEAVE
   978 00000AEA C9                  <1>  leave
   979 00000AEB E9D0010000              	jmp .Lend
   980                                  
   981                                  .Lrational:
   982 00000AF0 488B7701                	mov rsi, qword [rdi + 1]
   983 00000AF4 488B5709                	mov rdx, qword [rdi + 1 + 8]
   984 00000AF8 4883FE00                	cmp rsi, 0
   985 00000AFC 7415                    	je .Lrat_zero
   986 00000AFE 4883FA01                	cmp rdx, 1
   987 00000B02 741E                    	je .Lrat_int
   988 00000B04 48BF-                   	mov rdi, fmt_fraction
   988 00000B06 [C301000000000000] 
   989 00000B0E E998010000              	jmp .Lemit
   990                                  
   991                                  .Lrat_zero:
   992 00000B13 48BF-                   	mov rdi, fmt_zero
   992 00000B15 [CB01000000000000] 
   993 00000B1D E989010000              	jmp .Lemit
   994                                  
   995                                  .Lrat_int:
   996 00000B22 48BF-                   	mov rdi, fmt_int
   996 00000B24 [CD01000000000000] 
   997 00000B2C E97A010000              	jmp .Lemit
   998                                  
   999                                  .Lstring:
  1000 00000B31 488D4709                	lea rax, [rdi + 1 + 8]
  1001 00000B35 50                      	push rax
  1002 00000B36 FF7701                  	push qword [rdi + 1]
  1003 00000B39 48BF-                   	mov rdi, fmt_dquote
  1003 00000B3B [1102000000000000] 
  1004 00000B43 B800000000              	mov rax, 0
  1005                                  	ENTER
  1005 00000B48 C8000000            <1>  enter 0, 0
  1005 00000B4C 4883E4F0            <1>  and rsp, ~15
  1006 00000B50 E8(00000000)            	call printf
  1007                                  	LEAVE
  1007 00000B55 C9                  <1>  leave
  1008                                  .Lstring_loop:
  1009                                  	; qword [rsp]: limit
  1010                                  	; qword [rsp + 8*1]: char *
  1011 00000B56 48833C2400              	cmp qword [rsp], 0
  1012 00000B5B 0F84FD000000            	je .Lstring_end
  1013 00000B61 488B442408              	mov rax, qword [rsp + 8*1]
  1014 00000B66 8A00                    	mov al, byte [rax]
  1015 00000B68 4825FF000000            	and rax, 255
  1016 00000B6E 3C07                    	cmp al, 7
  1017 00000B70 7468                            je .Lstring_char_7
  1018 00000B72 3C08                            cmp al, 8
  1019 00000B74 7470                            je .Lstring_char_8
  1020 00000B76 3C09                            cmp al, 9
  1021 00000B78 7478                            je .Lstring_char_9
  1022 00000B7A 3C0A                            cmp al, 10
  1023 00000B7C 0F847C000000                    je .Lstring_char_10
  1024 00000B82 3C0B                            cmp al, 11
  1025 00000B84 0F8480000000                    je .Lstring_char_11
  1026 00000B8A 3C0C                            cmp al, 12
  1027 00000B8C 0F8484000000                    je .Lstring_char_12
  1028 00000B92 3C0D                            cmp al, 13
  1029 00000B94 0F8488000000                    je .Lstring_char_13
  1030 00000B9A 3C22                            cmp al, 34
  1031 00000B9C 0F848C000000                    je .Lstring_char_34
  1033 00000BA2 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1034 00000BA4 3C20                            cmp al, ' '
  1035 00000BA6 0F8CA0000000                    jl .Lstring_char_hex
  1036 00000BAC 48BF-                           mov rdi, fmt_string_char
  1036 00000BAE [1302000000000000] 
  1037 00000BB6 4889C6                          mov rsi, rax
  1038                                  .Lstring_char_emit:
  1039 00000BB9 B800000000                      mov rax, 0
  1040                                          ENTER
  1040 00000BBE C8000000            <1>  enter 0, 0
  1040 00000BC2 4883E4F0            <1>  and rsp, ~15
  1041 00000BC6 E8(00000000)                    call printf
  1042                                          LEAVE
  1042 00000BCB C9                  <1>  leave
  1043 00000BCC 48FF0C24                        dec qword [rsp]
  1044 00000BD0 48FF442408                      inc qword [rsp + 8*1]
  1045 00000BD5 E97CFFFFFF                      jmp .Lstring_loop
  1046                                  
  1047                                  .Lstring_char_7:
  1048 00000BDA 48BF-                           mov rdi, fmt_string_char_7
  1048 00000BDC [1602000000000000] 
  1049 00000BE4 EBD3                            jmp .Lstring_char_emit
  1050                                  
  1051                                  .Lstring_char_8:
  1052 00000BE6 48BF-                           mov rdi, fmt_string_char_8
  1052 00000BE8 [1902000000000000] 
  1053 00000BF0 EBC7                            jmp .Lstring_char_emit
  1054                                          
  1055                                  .Lstring_char_9:
  1056 00000BF2 48BF-                           mov rdi, fmt_string_char_9
  1056 00000BF4 [1C02000000000000] 
  1057 00000BFC EBBB                            jmp .Lstring_char_emit
  1058                                  
  1059                                  .Lstring_char_10:
  1060 00000BFE 48BF-                           mov rdi, fmt_string_char_10
  1060 00000C00 [1F02000000000000] 
  1061 00000C08 EBAF                            jmp .Lstring_char_emit
  1062                                  
  1063                                  .Lstring_char_11:
  1064 00000C0A 48BF-                           mov rdi, fmt_string_char_11
  1064 00000C0C [2202000000000000] 
  1065 00000C14 EBA3                            jmp .Lstring_char_emit
  1066                                  
  1067                                  .Lstring_char_12:
  1068 00000C16 48BF-                           mov rdi, fmt_string_char_12
  1068 00000C18 [2502000000000000] 
  1069 00000C20 EB97                            jmp .Lstring_char_emit
  1070                                  
  1071                                  .Lstring_char_13:
  1072 00000C22 48BF-                           mov rdi, fmt_string_char_13
  1072 00000C24 [2802000000000000] 
  1073 00000C2C EB8B                            jmp .Lstring_char_emit
  1074                                  
  1075                                  .Lstring_char_34:
  1076 00000C2E 48BF-                           mov rdi, fmt_string_char_34
  1076 00000C30 [2B02000000000000] 
  1077 00000C38 E97CFFFFFF                      jmp .Lstring_char_emit
  1078                                  
  1079                                  .Lstring_char_92:
  1080 00000C3D 48BF-                           mov rdi, fmt_string_char_92
  1080 00000C3F [2E02000000000000] 
  1081 00000C47 E96DFFFFFF                      jmp .Lstring_char_emit
  1082                                  
  1083                                  .Lstring_char_hex:
  1084 00000C4C 48BF-                           mov rdi, fmt_string_char_hex
  1084 00000C4E [3102000000000000] 
  1085 00000C56 4889C6                          mov rsi, rax
  1086 00000C59 E95BFFFFFF                      jmp .Lstring_char_emit        
  1087                                  
  1088                                  .Lstring_end:
  1089 00000C5E 4883C410                	add rsp, 8 * 2
  1090 00000C62 48BF-                   	mov rdi, fmt_dquote
  1090 00000C64 [1102000000000000] 
  1091 00000C6C EB3D                    	jmp .Lemit
  1092                                  
  1093                                  .Lunknown_sexpr_type:
  1094 00000C6E 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1094 00000C70 [D101000000000000] 
  1095 00000C78 4825FF000000            	and rax, 255
  1096 00000C7E 4889C2                  	mov rdx, rax
  1097 00000C81 4889F9                  	mov rcx, rdi
  1098 00000C84 488B3C25[00000000]      	mov rdi, qword [stderr]
  1099 00000C8C B800000000              	mov rax, 0
  1100                                  	ENTER
  1100 00000C91 C8000000            <1>  enter 0, 0
  1100 00000C95 4883E4F0            <1>  and rsp, ~15
  1101 00000C99 E8(00000000)            	call fprintf
  1102                                  	LEAVE
  1102 00000C9E C9                  <1>  leave
  1103 00000C9F 48C7C0FFFFFFFF          	mov rax, -1
  1104 00000CA6 E8(00000000)            	call exit
  1105                                  
  1106                                  .Lemit:
  1107 00000CAB B800000000              	mov rax, 0
  1108                                  	ENTER
  1108 00000CB0 C8000000            <1>  enter 0, 0
  1108 00000CB4 4883E4F0            <1>  and rsp, ~15
  1109 00000CB8 E8(00000000)            	call printf
  1110                                  	LEAVE
  1110 00000CBD C9                  <1>  leave
  1111 00000CBE EB00                    	jmp .Lend
  1112                                  
  1113                                  .Lend:
  1114                                  	LEAVE
  1114 00000CC0 C9                  <1>  leave
  1115 00000CC1 C3                      	ret
  1116                                  
  1117                                  ;;; rdi: address of free variable
  1118                                  ;;; rsi: address of code-pointer
  1119                                  bind_primitive:
  1120                                          ENTER
  1120 00000CC2 C8000000            <1>  enter 0, 0
  1120 00000CC6 4883E4F0            <1>  and rsp, ~15
  1121 00000CCA 57                              push rdi
  1122 00000CCB BF11000000                      mov rdi, (1 + 8 + 8)
  1123 00000CD0 E85CFAFFFF                      call malloc
  1124 00000CD5 5F                              pop rdi
  1125 00000CD6 C60005                          mov byte [rax], T_closure
  1126 00000CD9 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1127 00000CE1 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1128 00000CE5 488907                          mov qword [rdi], rax
  1129                                          LEAVE
  1129 00000CE8 C9                  <1>  leave
  1130 00000CE9 C3                              ret
  1131                                  
  1132                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1133                                  L_code_ptr_bin_apply:
  1134                                  ;         ENTER
  1135                                  ;         cmp COUNT, 2
  1136                                  ;         jne L_error_arg_count_2
  1137                                  
  1138                                  ;         mov r11, 0                                              ; init args_counter with 0
  1139                                  
  1140                                  ;         ;; push all args that in the list
  1141                                  
  1142                                  ;         mov r9, qword PARAM(1)                                  ; r9 <- args_list
  1143                                  ;         ; assert_pair(r9)
  1144                                  ;         cmp byte [r9], T_nil 
  1145                                  ;         je .L_error_with_args_count
  1146                                  
  1147                                  
  1148                                  ;         assert_pair(r9)                                         ;
  1149                                  ;         mov rcx, qword SOB_PAIR_CAR(r9)                         ; rcx <- car(args_list)
  1150                                  ;         push rcx                                                ; push first arg to stack
  1151                                  
  1152                                  ;         mov r11, (r11 +1)                                      ; increament args_counter
  1153                                          
  1154                                  
  1155                                  ;         assert_pair(r9)
  1156                                  ;         mov rcx, qword SOB_PAIR_CDR(r9)                         ; rcx <- rest of the list
  1157                                  ;         mov r9, qword rcx                                       ; r9 <- rest of the list
  1158                                          
  1159                                  ;         cmp byte [r9], T_nil                                    ; check if rest of the list is empty
  1160                                  ;         je .L_error_with_args_count                             ; if empty go to args error, have to be at least 2
  1161                                          
  1162                                  ; .L_list_is_not_done:
  1163                                  
  1164                                  ;         assert_pair(r9)
  1165                                  ;         mov rcx, qword SOB_PAIR_CAR(r9)                         ; rcx <- car of rest of the list
  1166                                  ;         push rcx                                                ; push arg
  1167                                  
  1168                                  ;         mov r11, (r11 + 1)                                      ; args_counter++
  1169                                  
  1170                                  ;         assert_pair(r9)
  1171                                  ;         mov rcx, qword SOB_PAIR_CDR(r9)                         ; rcx <- rest of rest of the list
  1172                                  ;         mov r9, qword rcx                                       ; r9 <- rest of rest of the list
  1173                                  
  1174                                  ;         cmp byte [r9], T_nil                                    ; check if rest of the list is empty
  1175                                  ;         jne .L_list_is_not_done 
  1176                                  
  1177                                  ; .L_list_is_done:
  1178                                          
  1179                                  ;         push r11                                                ; push num_of_args
  1180                                  
  1181                                  ;         ; invriant: r9 has the proc code
  1182                                  ;         mov r9, qword PARAM(0)                                  ; arg_proc to r9
  1183                                  ;         cmp byte [rax], T_closure                               ;  is it a closure? 
  1184                                  ;         jne L_error_non_closure                                 ; if not closure jmp kibinimat
  1185                                  
  1186                                  ;         mov r10, SOB_CLOSURE_ENV(r9)                            ; get proc env
  1187                                  ;         push r10                                                ; push closure env to stack
  1188                                  
  1189                                  
  1190                                  ;         ; ??? need to push retaddress, which is it ???
  1191                                  ;         ; ??? need to think about rbp ???
  1192                                  
  1193                                  ;         ;get proc code and jmp
  1194                                  ;         mov r9, qword PARAM(0)                                  ; arg_proc to r9
  1195                                  ;         mov r10, SOB_CLOSURE_CODE(r9)
  1196                                  ;         jmp r10               
  1197                                  	
  1198                                  L_code_ptr_is_null:
  1199                                          ENTER
  1199 00000CEA C8000000            <1>  enter 0, 0
  1199 00000CEE 4883E4F0            <1>  and rsp, ~15
  1200 00000CF2 48837D1801                      cmp COUNT, 1
  1201 00000CF7 0F85A5100000                    jne L_error_arg_count_1
  1202 00000CFD 488B4520                        mov rax, PARAM(0)
  1203 00000D01 803801                          cmp byte [rax], T_nil
  1204 00000D04 750C                            jne .L_false
  1205 00000D06 48B8-                           mov rax, sob_boolean_true
  1205 00000D08 [0300000000000000] 
  1206 00000D10 EB0A                            jmp .L_end
  1207                                  .L_false:
  1208 00000D12 48B8-                           mov rax, sob_boolean_false
  1208 00000D14 [0200000000000000] 
  1209                                  .L_end:
  1210                                          LEAVE
  1210 00000D1C C9                  <1>  leave
  1211 00000D1D C21800                          ret AND_KILL_FRAME(1)
  1212                                  
  1213                                  L_code_ptr_is_pair:
  1214                                          ENTER
  1214 00000D20 C8000000            <1>  enter 0, 0
  1214 00000D24 4883E4F0            <1>  and rsp, ~15
  1215 00000D28 48837D1801                      cmp COUNT, 1
  1216 00000D2D 0F856F100000                    jne L_error_arg_count_1
  1217 00000D33 488B4520                        mov rax, PARAM(0)
  1218 00000D37 803821                          cmp byte [rax], T_pair
  1219 00000D3A 750C                            jne .L_false
  1220 00000D3C 48B8-                           mov rax, sob_boolean_true
  1220 00000D3E [0300000000000000] 
  1221 00000D46 EB0A                            jmp .L_end
  1222                                  .L_false:
  1223 00000D48 48B8-                           mov rax, sob_boolean_false
  1223 00000D4A [0200000000000000] 
  1224                                  .L_end:
  1225                                          LEAVE
  1225 00000D52 C9                  <1>  leave
  1226 00000D53 C21800                          ret AND_KILL_FRAME(1)
  1227                                          
  1228                                  L_code_ptr_is_void:
  1229                                          ENTER
  1229 00000D56 C8000000            <1>  enter 0, 0
  1229 00000D5A 4883E4F0            <1>  and rsp, ~15
  1230 00000D5E 48837D1801                      cmp COUNT, 1
  1231 00000D63 0F8539100000                    jne L_error_arg_count_1
  1232 00000D69 488B4520                        mov rax, PARAM(0)
  1233 00000D6D 803800                          cmp byte [rax], T_void
  1234 00000D70 750C                            jne .L_false
  1235 00000D72 48B8-                           mov rax, sob_boolean_true
  1235 00000D74 [0300000000000000] 
  1236 00000D7C EB0A                            jmp .L_end
  1237                                  .L_false:
  1238 00000D7E 48B8-                           mov rax, sob_boolean_false
  1238 00000D80 [0200000000000000] 
  1239                                  .L_end:
  1240                                          LEAVE
  1240 00000D88 C9                  <1>  leave
  1241 00000D89 C21800                          ret AND_KILL_FRAME(1)
  1242                                  
  1243                                  L_code_ptr_is_char:
  1244                                          ENTER
  1244 00000D8C C8000000            <1>  enter 0, 0
  1244 00000D90 4883E4F0            <1>  and rsp, ~15
  1245 00000D94 48837D1801                      cmp COUNT, 1
  1246 00000D99 0F8503100000                    jne L_error_arg_count_1
  1247 00000D9F 488B4520                        mov rax, PARAM(0)
  1248 00000DA3 803802                          cmp byte [rax], T_char
  1249 00000DA6 750C                            jne .L_false
  1250 00000DA8 48B8-                           mov rax, sob_boolean_true
  1250 00000DAA [0300000000000000] 
  1251 00000DB2 EB0A                            jmp .L_end
  1252                                  .L_false:
  1253 00000DB4 48B8-                           mov rax, sob_boolean_false
  1253 00000DB6 [0200000000000000] 
  1254                                  .L_end:
  1255                                          LEAVE
  1255 00000DBE C9                  <1>  leave
  1256 00000DBF C21800                          ret AND_KILL_FRAME(1)
  1257                                  
  1258                                  L_code_ptr_is_string:
  1259                                          ENTER
  1259 00000DC2 C8000000            <1>  enter 0, 0
  1259 00000DC6 4883E4F0            <1>  and rsp, ~15
  1260 00000DCA 48837D1801                      cmp COUNT, 1
  1261 00000DCF 0F85CD0F0000                    jne L_error_arg_count_1
  1262 00000DD5 488B4520                        mov rax, PARAM(0)
  1263 00000DD9 803803                          cmp byte [rax], T_string
  1264 00000DDC 750C                            jne .L_false
  1265 00000DDE 48B8-                           mov rax, sob_boolean_true
  1265 00000DE0 [0300000000000000] 
  1266 00000DE8 EB0A                            jmp .L_end
  1267                                  .L_false:
  1268 00000DEA 48B8-                           mov rax, sob_boolean_false
  1268 00000DEC [0200000000000000] 
  1269                                  .L_end:
  1270                                          LEAVE
  1270 00000DF4 C9                  <1>  leave
  1271 00000DF5 C21800                          ret AND_KILL_FRAME(1)
  1272                                  
  1273                                  L_code_ptr_is_symbol:
  1274                                          ENTER
  1274 00000DF8 C8000000            <1>  enter 0, 0
  1274 00000DFC 4883E4F0            <1>  and rsp, ~15
  1275 00000E00 48837D1801                      cmp COUNT, 1
  1276 00000E05 0F85970F0000                    jne L_error_arg_count_1
  1277 00000E0B 488B4520                        mov rax, PARAM(0)
  1278 00000E0F 803804                          cmp byte [rax], T_symbol
  1279 00000E12 750C                            jne .L_false
  1280 00000E14 48B8-                           mov rax, sob_boolean_true
  1280 00000E16 [0300000000000000] 
  1281 00000E1E EB0A                            jmp .L_end
  1282                                  .L_false:
  1283 00000E20 48B8-                           mov rax, sob_boolean_false
  1283 00000E22 [0200000000000000] 
  1284                                  .L_end:
  1285                                          LEAVE
  1285 00000E2A C9                  <1>  leave
  1286 00000E2B C21800                          ret AND_KILL_FRAME(1)
  1287                                  
  1288                                  L_code_ptr_is_vector:
  1289                                          ENTER
  1289 00000E2E C8000000            <1>  enter 0, 0
  1289 00000E32 4883E4F0            <1>  and rsp, ~15
  1290 00000E36 48837D1801                      cmp COUNT, 1
  1291 00000E3B 0F85610F0000                    jne L_error_arg_count_1
  1292 00000E41 488B4520                        mov rax, PARAM(0)
  1293 00000E45 803822                          cmp byte [rax], T_vector
  1294 00000E48 750C                            jne .L_false
  1295 00000E4A 48B8-                           mov rax, sob_boolean_true
  1295 00000E4C [0300000000000000] 
  1296 00000E54 EB0A                            jmp .L_end
  1297                                  .L_false:
  1298 00000E56 48B8-                           mov rax, sob_boolean_false
  1298 00000E58 [0200000000000000] 
  1299                                  .L_end:
  1300                                          LEAVE
  1300 00000E60 C9                  <1>  leave
  1301 00000E61 C21800                          ret AND_KILL_FRAME(1)
  1302                                  
  1303                                  L_code_ptr_is_closure:
  1304                                          ENTER
  1304 00000E64 C8000000            <1>  enter 0, 0
  1304 00000E68 4883E4F0            <1>  and rsp, ~15
  1305 00000E6C 48837D1801                      cmp COUNT, 1
  1306 00000E71 0F852B0F0000                    jne L_error_arg_count_1
  1307 00000E77 488B4520                        mov rax, PARAM(0)
  1308 00000E7B 803805                          cmp byte [rax], T_closure
  1309 00000E7E 750C                            jne .L_false
  1310 00000E80 48B8-                           mov rax, sob_boolean_true
  1310 00000E82 [0300000000000000] 
  1311 00000E8A EB0A                            jmp .L_end
  1312                                  .L_false:
  1313 00000E8C 48B8-                           mov rax, sob_boolean_false
  1313 00000E8E [0200000000000000] 
  1314                                  .L_end:
  1315                                          LEAVE
  1315 00000E96 C9                  <1>  leave
  1316 00000E97 C21800                          ret AND_KILL_FRAME(1)
  1317                                  
  1318                                  L_code_ptr_is_real:
  1319                                          ENTER
  1319 00000E9A C8000000            <1>  enter 0, 0
  1319 00000E9E 4883E4F0            <1>  and rsp, ~15
  1320 00000EA2 48837D1801                      cmp COUNT, 1
  1321 00000EA7 0F85F50E0000                    jne L_error_arg_count_1
  1322 00000EAD 488B4520                        mov rax, PARAM(0)
  1323 00000EB1 803812                          cmp byte [rax], T_real
  1324 00000EB4 750C                            jne .L_false
  1325 00000EB6 48B8-                           mov rax, sob_boolean_true
  1325 00000EB8 [0300000000000000] 
  1326 00000EC0 EB0A                            jmp .L_end
  1327                                  .L_false:
  1328 00000EC2 48B8-                           mov rax, sob_boolean_false
  1328 00000EC4 [0200000000000000] 
  1329                                  .L_end:
  1330                                          LEAVE
  1330 00000ECC C9                  <1>  leave
  1331 00000ECD C21800                          ret AND_KILL_FRAME(1)
  1332                                  
  1333                                  L_code_ptr_is_rational:
  1334                                          ENTER
  1334 00000ED0 C8000000            <1>  enter 0, 0
  1334 00000ED4 4883E4F0            <1>  and rsp, ~15
  1335 00000ED8 48837D1801                      cmp COUNT, 1
  1336 00000EDD 0F85BF0E0000                    jne L_error_arg_count_1
  1337 00000EE3 488B4520                        mov rax, PARAM(0)
  1338 00000EE7 803811                          cmp byte [rax], T_rational
  1339 00000EEA 750C                            jne .L_false
  1340 00000EEC 48B8-                           mov rax, sob_boolean_true
  1340 00000EEE [0300000000000000] 
  1341 00000EF6 EB0A                            jmp .L_end
  1342                                  .L_false:
  1343 00000EF8 48B8-                           mov rax, sob_boolean_false
  1343 00000EFA [0200000000000000] 
  1344                                  .L_end:
  1345                                          LEAVE
  1345 00000F02 C9                  <1>  leave
  1346 00000F03 C21800                          ret AND_KILL_FRAME(1)
  1347                                  
  1348                                  L_code_ptr_is_boolean:
  1349                                          ENTER
  1349 00000F06 C8000000            <1>  enter 0, 0
  1349 00000F0A 4883E4F0            <1>  and rsp, ~15
  1350 00000F0E 48837D1801                      cmp COUNT, 1
  1351 00000F13 0F85890E0000                    jne L_error_arg_count_1
  1352 00000F19 488B4520                        mov rax, PARAM(0)
  1353 00000F1D 8A18                            mov bl, byte [rax]
  1354 00000F1F 80E308                          and bl, T_boolean
  1355 00000F22 740C                            je .L_false
  1356 00000F24 48B8-                           mov rax, sob_boolean_true
  1356 00000F26 [0300000000000000] 
  1357 00000F2E EB0A                            jmp .L_end
  1358                                  .L_false:
  1359 00000F30 48B8-                           mov rax, sob_boolean_false
  1359 00000F32 [0200000000000000] 
  1360                                  .L_end:
  1361                                          LEAVE
  1361 00000F3A C9                  <1>  leave
  1362 00000F3B C21800                          ret AND_KILL_FRAME(1)
  1363                                          
  1364                                  L_code_ptr_is_number:
  1365                                          ENTER
  1365 00000F3E C8000000            <1>  enter 0, 0
  1365 00000F42 4883E4F0            <1>  and rsp, ~15
  1366 00000F46 48837D1801                      cmp COUNT, 1
  1367 00000F4B 0F85510E0000                    jne L_error_arg_count_1
  1368 00000F51 488B4520                        mov rax, PARAM(0)
  1369 00000F55 8A18                            mov bl, byte [rax]
  1370 00000F57 80E310                          and bl, T_number
  1371 00000F5A 740C                            je .L_false
  1372 00000F5C 48B8-                           mov rax, sob_boolean_true
  1372 00000F5E [0300000000000000] 
  1373 00000F66 EB0A                            jmp .L_end
  1374                                  .L_false:
  1375 00000F68 48B8-                           mov rax, sob_boolean_false
  1375 00000F6A [0200000000000000] 
  1376                                  .L_end:
  1377                                          LEAVE
  1377 00000F72 C9                  <1>  leave
  1378 00000F73 C21800                          ret AND_KILL_FRAME(1)
  1379                                          
  1380                                  L_code_ptr_is_collection:
  1381                                          ENTER
  1381 00000F76 C8000000            <1>  enter 0, 0
  1381 00000F7A 4883E4F0            <1>  and rsp, ~15
  1382 00000F7E 48837D1801                      cmp COUNT, 1
  1383 00000F83 0F85190E0000                    jne L_error_arg_count_1
  1384 00000F89 488B4520                        mov rax, PARAM(0)
  1385 00000F8D 8A18                            mov bl, byte [rax]
  1386 00000F8F 80E320                          and bl, T_collection
  1387 00000F92 740C                            je .L_false
  1388 00000F94 48B8-                           mov rax, sob_boolean_true
  1388 00000F96 [0300000000000000] 
  1389 00000F9E EB0A                            jmp .L_end
  1390                                  .L_false:
  1391 00000FA0 48B8-                           mov rax, sob_boolean_false
  1391 00000FA2 [0200000000000000] 
  1392                                  .L_end:
  1393                                          LEAVE
  1393 00000FAA C9                  <1>  leave
  1394 00000FAB C21800                          ret AND_KILL_FRAME(1)
  1395                                  
  1396                                  L_code_ptr_cons:
  1397                                          ENTER
  1397 00000FAE C8000000            <1>  enter 0, 0
  1397 00000FB2 4883E4F0            <1>  and rsp, ~15
  1398 00000FB6 48837D1802                      cmp COUNT, 2
  1399 00000FBB 0F85160E0000                    jne L_error_arg_count_2
  1400 00000FC1 BF11000000                      mov rdi, (1 + 8 + 8)
  1401 00000FC6 E866F7FFFF                      call malloc
  1402 00000FCB C60021                          mov byte [rax], T_pair
  1403 00000FCE 488B5D20                        mov rbx, PARAM(0)
  1404 00000FD2 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1405 00000FD6 488B5D28                        mov rbx, PARAM(1)
  1406 00000FDA 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1407                                          LEAVE
  1407 00000FDE C9                  <1>  leave
  1408 00000FDF C22000                          ret AND_KILL_FRAME(2)
  1409                                  
  1410                                  L_code_ptr_display_sexpr:
  1411                                          ENTER
  1411 00000FE2 C8000000            <1>  enter 0, 0
  1411 00000FE6 4883E4F0            <1>  and rsp, ~15
  1412 00000FEA 48837D1801                      cmp COUNT, 1
  1413 00000FEF 0F85AD0D0000                    jne L_error_arg_count_1
  1414 00000FF5 488B7D20                        mov rdi, PARAM(0)
  1415 00000FF9 E84EF7FFFF                      call print_sexpr
  1416 00000FFE 48B8-                           mov rax, sob_void
  1416 00001000 [0000000000000000] 
  1417                                          LEAVE
  1417 00001008 C9                  <1>  leave
  1418 00001009 C21800                          ret AND_KILL_FRAME(1)
  1419                                  
  1420                                  L_code_ptr_write_char:
  1421                                          ENTER
  1421 0000100C C8000000            <1>  enter 0, 0
  1421 00001010 4883E4F0            <1>  and rsp, ~15
  1422 00001014 48837D1801                      cmp COUNT, 1
  1423 00001019 0F85830D0000                    jne L_error_arg_count_1
  1424 0000101F 488B4520                        mov rax, PARAM(0)
  1425                                          assert_char(rax)
  1425 00001023 803802              <1>  cmp byte [%1], %2
  1425 00001026 0F854A0E0000        <1>  jne L_error_incorrect_type
  1426 0000102C 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1427 0000102F 4825FF000000                    and rax, 255
  1428 00001035 48BF-                           mov rdi, fmt_char
  1428 00001037 [3702000000000000] 
  1429 0000103F 4889C6                          mov rsi, rax
  1430 00001042 B800000000                      mov rax, 0
  1431                                  	ENTER
  1431 00001047 C8000000            <1>  enter 0, 0
  1431 0000104B 4883E4F0            <1>  and rsp, ~15
  1432 0000104F E8(00000000)                    call printf
  1433                                  	LEAVE
  1433 00001054 C9                  <1>  leave
  1434 00001055 48B8-                           mov rax, sob_void
  1434 00001057 [0000000000000000] 
  1435                                          LEAVE
  1435 0000105F C9                  <1>  leave
  1436 00001060 C21800                          ret AND_KILL_FRAME(1)
  1437                                  
  1438                                  L_code_ptr_car:
  1439                                          ENTER
  1439 00001063 C8000000            <1>  enter 0, 0
  1439 00001067 4883E4F0            <1>  and rsp, ~15
  1440 0000106B 48837D1801                      cmp COUNT, 1
  1441 00001070 0F852C0D0000                    jne L_error_arg_count_1
  1442 00001076 488B4520                        mov rax, PARAM(0)
  1443                                          assert_pair(rax)
  1443 0000107A 803821              <1>  cmp byte [%1], %2
  1443 0000107D 0F85F30D0000        <1>  jne L_error_incorrect_type
  1444 00001083 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1445                                          LEAVE
  1445 00001087 C9                  <1>  leave
  1446 00001088 C21800                          ret AND_KILL_FRAME(1)
  1447                                          
  1448                                  L_code_ptr_cdr:
  1449                                          ENTER
  1449 0000108B C8000000            <1>  enter 0, 0
  1449 0000108F 4883E4F0            <1>  and rsp, ~15
  1450 00001093 48837D1801                      cmp COUNT, 1
  1451 00001098 0F85040D0000                    jne L_error_arg_count_1
  1452 0000109E 488B4520                        mov rax, PARAM(0)
  1453                                          assert_pair(rax)
  1453 000010A2 803821              <1>  cmp byte [%1], %2
  1453 000010A5 0F85CB0D0000        <1>  jne L_error_incorrect_type
  1454 000010AB 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1455                                          LEAVE
  1455 000010AF C9                  <1>  leave
  1456 000010B0 C21800                          ret AND_KILL_FRAME(1)
  1457                                          
  1458                                  L_code_ptr_string_length:
  1459                                          ENTER
  1459 000010B3 C8000000            <1>  enter 0, 0
  1459 000010B7 4883E4F0            <1>  and rsp, ~15
  1460 000010BB 48837D1801                      cmp COUNT, 1
  1461 000010C0 0F85DC0C0000                    jne L_error_arg_count_1
  1462 000010C6 488B4520                        mov rax, PARAM(0)
  1463                                          assert_string(rax)
  1463 000010CA 803803              <1>  cmp byte [%1], %2
  1463 000010CD 0F85A30D0000        <1>  jne L_error_incorrect_type
  1464 000010D3 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1465 000010D7 E83A0C0000                      call make_integer
  1466                                          LEAVE
  1466 000010DC C9                  <1>  leave
  1467 000010DD C21800                          ret AND_KILL_FRAME(1)
  1468                                  
  1469                                  L_code_ptr_vector_length:
  1470                                          ENTER
  1470 000010E0 C8000000            <1>  enter 0, 0
  1470 000010E4 4883E4F0            <1>  and rsp, ~15
  1471 000010E8 48837D1801                      cmp COUNT, 1
  1472 000010ED 0F85AF0C0000                    jne L_error_arg_count_1
  1473 000010F3 488B4520                        mov rax, PARAM(0)
  1474                                          assert_vector(rax)
  1474 000010F7 803822              <1>  cmp byte [%1], %2
  1474 000010FA 0F85760D0000        <1>  jne L_error_incorrect_type
  1475 00001100 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1476 00001104 E80D0C0000                      call make_integer
  1477                                          LEAVE
  1477 00001109 C9                  <1>  leave
  1478 0000110A C21800                          ret AND_KILL_FRAME(1)
  1479                                  
  1480                                  L_code_ptr_real_to_integer:
  1481                                          ENTER
  1481 0000110D C8000000            <1>  enter 0, 0
  1481 00001111 4883E4F0            <1>  and rsp, ~15
  1482 00001115 48837D1801                      cmp COUNT, 1
  1483 0000111A 0F85820C0000                    jne L_error_arg_count_1
  1484 00001120 488B5D20                        mov rbx, PARAM(0)
  1485                                          assert_real(rbx)
  1485 00001124 803B12              <1>  cmp byte [%1], %2
  1485 00001127 0F85490D0000        <1>  jne L_error_incorrect_type
  1486 0000112D F20F104301                      movsd xmm0, qword [rbx + 1]
  1487 00001132 F2480F2CF8                      cvttsd2si rdi, xmm0
  1488 00001137 E8DA0B0000                      call make_integer
  1489                                          LEAVE
  1489 0000113C C9                  <1>  leave
  1490 0000113D C21800                          ret AND_KILL_FRAME(1)
  1491                                  
  1492                                  L_code_ptr_exit:
  1493                                          ENTER
  1493 00001140 C8000000            <1>  enter 0, 0
  1493 00001144 4883E4F0            <1>  and rsp, ~15
  1494 00001148 48837D1800                      cmp COUNT, 0
  1495 0000114D 0F851A0C0000                    jne L_error_arg_count_0
  1496 00001153 B800000000                      mov rax, 0
  1497 00001158 E8(00000000)                    call exit
  1498                                  
  1499                                  L_code_ptr_integer_to_real:
  1500                                          ENTER
  1500 0000115D C8000000            <1>  enter 0, 0
  1500 00001161 4883E4F0            <1>  and rsp, ~15
  1501 00001165 48837D1801                      cmp COUNT, 1
  1502 0000116A 0F85320C0000                    jne L_error_arg_count_1
  1503 00001170 488B4520                        mov rax, PARAM(0)
  1504                                          assert_integer(rax)
  1504                              <1>  assert_rational(%1)
  1504 00001174 803811              <2>  cmp byte [%1], %2
  1504 00001177 0F85F90C0000        <2>  jne L_error_incorrect_type
  1504 0000117D 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
  1504 00001182 0F85EE0C0000        <1>  jne L_error_incorrect_type
  1505 00001188 FF7001                          push qword [rax + 1]
  1506 0000118B F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1507 00001191 E8640B0000                      call make_real
  1508                                          LEAVE
  1508 00001196 C9                  <1>  leave
  1509 00001197 C21800                          ret AND_KILL_FRAME(1)
  1510                                  
  1511                                  L_code_ptr_rational_to_real:
  1512                                          ENTER
  1512 0000119A C8000000            <1>  enter 0, 0
  1512 0000119E 4883E4F0            <1>  and rsp, ~15
  1513 000011A2 48837D1801                      cmp COUNT, 1
  1514 000011A7 0F85F50B0000                    jne L_error_arg_count_1
  1515 000011AD 488B4520                        mov rax, PARAM(0)
  1516                                          assert_rational(rax)
  1516 000011B1 803811              <1>  cmp byte [%1], %2
  1516 000011B4 0F85BC0C0000        <1>  jne L_error_incorrect_type
  1517 000011BA FF7001                          push qword [rax + 1]
  1518 000011BD F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1519 000011C3 FF7009                          push qword [rax + 1 + 8]
  1520 000011C6 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1521 000011CC F20F5EC1                        divsd xmm0, xmm1
  1522 000011D0 E8250B0000                      call make_real
  1523                                          LEAVE
  1523 000011D5 C9                  <1>  leave
  1524 000011D6 C21800                          ret AND_KILL_FRAME(1)
  1525                                  
  1526                                  L_code_ptr_char_to_integer:
  1527                                          ENTER
  1527 000011D9 C8000000            <1>  enter 0, 0
  1527 000011DD 4883E4F0            <1>  and rsp, ~15
  1528 000011E1 48837D1801                      cmp COUNT, 1
  1529 000011E6 0F85B60B0000                    jne L_error_arg_count_1
  1530 000011EC 488B4520                        mov rax, PARAM(0)
  1531                                          assert_char(rax)
  1531 000011F0 803802              <1>  cmp byte [%1], %2
  1531 000011F3 0F857D0C0000        <1>  jne L_error_incorrect_type
  1532 000011F9 8A4001                          mov al, byte [rax + 1]
  1533 000011FC 4825FF000000                    and rax, 255
  1534 00001202 4889C7                          mov rdi, rax
  1535 00001205 E80C0B0000                      call make_integer
  1536                                          LEAVE
  1536 0000120A C9                  <1>  leave
  1537 0000120B C21800                          ret AND_KILL_FRAME(1)
  1538                                  
  1539                                  L_code_ptr_integer_to_char:
  1540                                          ENTER
  1540 0000120E C8000000            <1>  enter 0, 0
  1540 00001212 4883E4F0            <1>  and rsp, ~15
  1541 00001216 48837D1801                      cmp COUNT, 1
  1542 0000121B 0F85810B0000                    jne L_error_arg_count_1
  1543 00001221 488B4520                        mov rax, PARAM(0)
  1544                                          assert_integer(rax)
  1544                              <1>  assert_rational(%1)
  1544 00001225 803811              <2>  cmp byte [%1], %2
  1544 00001228 0F85480C0000        <2>  jne L_error_incorrect_type
  1544 0000122E 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
  1544 00001233 0F853D0C0000        <1>  jne L_error_incorrect_type
  1545 00001239 488B5801                        mov rbx, qword [rax + 1]
  1546 0000123D 4883FB00                        cmp rbx, 0
  1547 00001241 0F8EF50A0000                    jle L_error_integer_range
  1548 00001247 4881FB00010000                  cmp rbx, 256
  1549 0000124E 0F8DE80A0000                    jge L_error_integer_range
  1550 00001254 BF02000000                      mov rdi, (1 + 1)
  1551 00001259 E8D3F4FFFF                      call malloc
  1552 0000125E C60002                          mov byte [rax], T_char
  1553 00001261 885801                          mov byte [rax + 1], bl
  1554                                          LEAVE
  1554 00001264 C9                  <1>  leave
  1555 00001265 C21800                          ret AND_KILL_FRAME(1)
  1556                                  
  1557                                  L_code_ptr_trng:
  1558                                          ENTER
  1558 00001268 C8000000            <1>  enter 0, 0
  1558 0000126C 4883E4F0            <1>  and rsp, ~15
  1559 00001270 48837D1800                      cmp COUNT, 0
  1560 00001275 0F85F20A0000                    jne L_error_arg_count_0
  1561 0000127B 480FC7F7                        rdrand rdi
  1562 0000127F 48D1EF                          shr rdi, 1
  1563 00001282 E88F0A0000                      call make_integer
  1564                                          LEAVE
  1564 00001287 C9                  <1>  leave
  1565 00001288 C21000                          ret AND_KILL_FRAME(0)
  1566                                  
  1567                                  L_code_ptr_is_zero:
  1568                                          ENTER
  1568 0000128B C8000000            <1>  enter 0, 0
  1568 0000128F 4883E4F0            <1>  and rsp, ~15
  1569 00001293 48837D1801                      cmp COUNT, 1
  1570 00001298 0F85040B0000                    jne L_error_arg_count_1
  1571 0000129E 488B4520                        mov rax, PARAM(0)
  1572 000012A2 803811                          cmp byte [rax], T_rational
  1573 000012A5 740A                            je .L_rational
  1574 000012A7 803812                          cmp byte [rax], T_real
  1575 000012AA 740E                            je .L_real
  1576 000012AC E9C50B0000                      jmp L_error_incorrect_type
  1577                                  .L_rational:
  1578 000012B1 4883780100                      cmp qword [rax + 1], 0
  1579 000012B6 7420                            je .L_zero
  1580 000012B8 EB12                            jmp .L_not_zero
  1581                                  .L_real:
  1582 000012BA 660FEFC0                        pxor xmm0, xmm0
  1583 000012BE FF7001                          push qword [rax + 1]
  1584 000012C1 F20F100C24                      movsd xmm1, qword [rsp]
  1585 000012C6 660F2EC1                        ucomisd xmm0, xmm1
  1586 000012CA 740C                            je .L_zero
  1587                                  .L_not_zero:
  1588 000012CC 48B8-                           mov rax, sob_boolean_false
  1588 000012CE [0200000000000000] 
  1589 000012D6 EB0A                            jmp .L_end
  1590                                  .L_zero:
  1591 000012D8 48B8-                           mov rax, sob_boolean_true
  1591 000012DA [0300000000000000] 
  1592                                  .L_end:
  1593                                          LEAVE
  1593 000012E2 C9                  <1>  leave
  1594 000012E3 C21800                          ret AND_KILL_FRAME(1)
  1595                                  
  1596                                  L_code_ptr_is_integer:
  1597                                          ENTER
  1597 000012E6 C8000000            <1>  enter 0, 0
  1597 000012EA 4883E4F0            <1>  and rsp, ~15
  1598 000012EE 48837D1801                      cmp COUNT, 1
  1599 000012F3 0F85A90A0000                    jne L_error_arg_count_1
  1600 000012F9 488B4520                        mov rax, PARAM(0)
  1601 000012FD 803811                          cmp byte [rax], T_rational
  1602 00001300 7513                            jne .L_false
  1603 00001302 4883780901                      cmp qword [rax + 1 + 8], 1
  1604 00001307 750C                            jne .L_false
  1605 00001309 48B8-                           mov rax, sob_boolean_true
  1605 0000130B [0300000000000000] 
  1606 00001313 EB0A                            jmp .L_exit
  1607                                  .L_false:
  1608 00001315 48B8-                           mov rax, sob_boolean_false
  1608 00001317 [0200000000000000] 
  1609                                  .L_exit:
  1610                                          LEAVE
  1610 0000131F C9                  <1>  leave
  1611 00001320 C21800                          ret AND_KILL_FRAME(1)
  1612                                  
  1613                                  L_code_ptr_raw_bin_add_rr:
  1614                                          ENTER
  1614 00001323 C8000000            <1>  enter 0, 0
  1614 00001327 4883E4F0            <1>  and rsp, ~15
  1615 0000132B 48837D1802                      cmp COUNT, 2
  1616 00001330 0F85A10A0000                    jne L_error_arg_count_2
  1617 00001336 488B5D20                        mov rbx, PARAM(0)
  1618                                          assert_real(rbx)
  1618 0000133A 803B12              <1>  cmp byte [%1], %2
  1618 0000133D 0F85330B0000        <1>  jne L_error_incorrect_type
  1619 00001343 488B4D28                        mov rcx, PARAM(1)
  1620                                          assert_real(rcx)
  1620 00001347 803912              <1>  cmp byte [%1], %2
  1620 0000134A 0F85260B0000        <1>  jne L_error_incorrect_type
  1621 00001350 F20F104301                      movsd xmm0, qword [rbx + 1]
  1622 00001355 F20F104901                      movsd xmm1, qword [rcx + 1]
  1623 0000135A F20F58C1                        addsd xmm0, xmm1
  1624 0000135E E897090000                      call make_real
  1625                                          LEAVE
  1625 00001363 C9                  <1>  leave
  1626 00001364 C22000                          ret AND_KILL_FRAME(2)
  1627                                  
  1628                                  L_code_ptr_raw_bin_sub_rr:
  1629                                          ENTER
  1629 00001367 C8000000            <1>  enter 0, 0
  1629 0000136B 4883E4F0            <1>  and rsp, ~15
  1630 0000136F 48837D1802                      cmp COUNT, 2
  1631 00001374 0F855D0A0000                    jne L_error_arg_count_2
  1632 0000137A 488B5D20                        mov rbx, PARAM(0)
  1633                                          assert_real(rbx)
  1633 0000137E 803B12              <1>  cmp byte [%1], %2
  1633 00001381 0F85EF0A0000        <1>  jne L_error_incorrect_type
  1634 00001387 488B4D28                        mov rcx, PARAM(1)
  1635                                          assert_real(rcx)
  1635 0000138B 803912              <1>  cmp byte [%1], %2
  1635 0000138E 0F85E20A0000        <1>  jne L_error_incorrect_type
  1636 00001394 F20F104301                      movsd xmm0, qword [rbx + 1]
  1637 00001399 F20F104901                      movsd xmm1, qword [rcx + 1]
  1638 0000139E F20F5CC1                        subsd xmm0, xmm1
  1639 000013A2 E853090000                      call make_real
  1640                                          LEAVE
  1640 000013A7 C9                  <1>  leave
  1641 000013A8 C22000                          ret AND_KILL_FRAME(2)
  1642                                  
  1643                                  L_code_ptr_raw_bin_mul_rr:
  1644                                          ENTER
  1644 000013AB C8000000            <1>  enter 0, 0
  1644 000013AF 4883E4F0            <1>  and rsp, ~15
  1645 000013B3 48837D1802                      cmp COUNT, 2
  1646 000013B8 0F85190A0000                    jne L_error_arg_count_2
  1647 000013BE 488B5D20                        mov rbx, PARAM(0)
  1648                                          assert_real(rbx)
  1648 000013C2 803B12              <1>  cmp byte [%1], %2
  1648 000013C5 0F85AB0A0000        <1>  jne L_error_incorrect_type
  1649 000013CB 488B4D28                        mov rcx, PARAM(1)
  1650                                          assert_real(rcx)
  1650 000013CF 803912              <1>  cmp byte [%1], %2
  1650 000013D2 0F859E0A0000        <1>  jne L_error_incorrect_type
  1651 000013D8 F20F104301                      movsd xmm0, qword [rbx + 1]
  1652 000013DD F20F104901                      movsd xmm1, qword [rcx + 1]
  1653 000013E2 F20F59C1                        mulsd xmm0, xmm1
  1654 000013E6 E80F090000                      call make_real
  1655                                          LEAVE
  1655 000013EB C9                  <1>  leave
  1656 000013EC C22000                          ret AND_KILL_FRAME(2)
  1657                                  
  1658                                  L_code_ptr_raw_bin_div_rr:
  1659                                          ENTER
  1659 000013EF C8000000            <1>  enter 0, 0
  1659 000013F3 4883E4F0            <1>  and rsp, ~15
  1660 000013F7 48837D1802                      cmp COUNT, 2
  1661 000013FC 0F85D5090000                    jne L_error_arg_count_2
  1662 00001402 488B5D20                        mov rbx, PARAM(0)
  1663                                          assert_real(rbx)
  1663 00001406 803B12              <1>  cmp byte [%1], %2
  1663 00001409 0F85670A0000        <1>  jne L_error_incorrect_type
  1664 0000140F 488B4D28                        mov rcx, PARAM(1)
  1665                                          assert_real(rcx)
  1665 00001413 803912              <1>  cmp byte [%1], %2
  1665 00001416 0F855A0A0000        <1>  jne L_error_incorrect_type
  1666 0000141C F20F104301                      movsd xmm0, qword [rbx + 1]
  1667 00001421 F20F104901                      movsd xmm1, qword [rcx + 1]
  1668 00001426 660FEFD2                        pxor xmm2, xmm2
  1669 0000142A 660F2ECA                        ucomisd xmm1, xmm2
  1670 0000142E 0F84730A0000                    je L_error_division_by_zero
  1671 00001434 F20F5EC1                        divsd xmm0, xmm1
  1672 00001438 E8BD080000                      call make_real
  1673                                          LEAVE
  1673 0000143D C9                  <1>  leave
  1674 0000143E C22000                          ret AND_KILL_FRAME(2)
  1675                                  
  1676                                  L_code_ptr_raw_bin_add_qq:
  1677                                          ENTER
  1677 00001441 C8000000            <1>  enter 0, 0
  1677 00001445 4883E4F0            <1>  and rsp, ~15
  1678 00001449 48837D1802                      cmp COUNT, 2
  1679 0000144E 0F8583090000                    jne L_error_arg_count_2
  1680 00001454 4C8B4520                        mov r8, PARAM(0)
  1681                                          assert_rational(r8)
  1681 00001458 41803811            <1>  cmp byte [%1], %2
  1681 0000145C 0F85140A0000        <1>  jne L_error_incorrect_type
  1682 00001462 4C8B4D28                        mov r9, PARAM(1)
  1683                                          assert_rational(r9)
  1683 00001466 41803911            <1>  cmp byte [%1], %2
  1683 0000146A 0F85060A0000        <1>  jne L_error_incorrect_type
  1684 00001470 498B4001                        mov rax, qword [r8 + 1] ; num1
  1685 00001474 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1686 00001478 4899                            cqo
  1687 0000147A 48F7EB                          imul rbx
  1688 0000147D 4889C6                          mov rsi, rax
  1689 00001480 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1690 00001484 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1691 00001488 4899                            cqo
  1692 0000148A 48F7EB                          imul rbx
  1693 0000148D 4801C6                          add rsi, rax
  1694 00001490 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1695 00001494 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1696 00001498 4899                            cqo
  1697 0000149A 48F7EB                          imul rbx
  1698 0000149D 4889C7                          mov rdi, rax
  1699 000014A0 E827010000                      call normalize_rational
  1700                                          LEAVE
  1700 000014A5 C9                  <1>  leave
  1701 000014A6 C22000                          ret AND_KILL_FRAME(2)
  1702                                  
  1703                                  L_code_ptr_raw_bin_sub_qq:
  1704                                          ENTER
  1704 000014A9 C8000000            <1>  enter 0, 0
  1704 000014AD 4883E4F0            <1>  and rsp, ~15
  1705 000014B1 48837D1802                      cmp COUNT, 2
  1706 000014B6 0F851B090000                    jne L_error_arg_count_2
  1707 000014BC 4C8B4520                        mov r8, PARAM(0)
  1708                                          assert_rational(r8)
  1708 000014C0 41803811            <1>  cmp byte [%1], %2
  1708 000014C4 0F85AC090000        <1>  jne L_error_incorrect_type
  1709 000014CA 4C8B4D28                        mov r9, PARAM(1)
  1710                                          assert_rational(r9)
  1710 000014CE 41803911            <1>  cmp byte [%1], %2
  1710 000014D2 0F859E090000        <1>  jne L_error_incorrect_type
  1711 000014D8 498B4001                        mov rax, qword [r8 + 1] ; num1
  1712 000014DC 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1713 000014E0 4899                            cqo
  1714 000014E2 48F7EB                          imul rbx
  1715 000014E5 4889C6                          mov rsi, rax
  1716 000014E8 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1717 000014EC 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1718 000014F0 4899                            cqo
  1719 000014F2 48F7EB                          imul rbx
  1720 000014F5 4829C6                          sub rsi, rax
  1721 000014F8 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1722 000014FC 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1723 00001500 4899                            cqo
  1724 00001502 48F7EB                          imul rbx
  1725 00001505 4889C7                          mov rdi, rax
  1726 00001508 E8BF000000                      call normalize_rational
  1727                                          LEAVE
  1727 0000150D C9                  <1>  leave
  1728 0000150E C22000                          ret AND_KILL_FRAME(2)
  1729                                  
  1730                                  L_code_ptr_raw_bin_mul_qq:
  1731                                          ENTER
  1731 00001511 C8000000            <1>  enter 0, 0
  1731 00001515 4883E4F0            <1>  and rsp, ~15
  1732 00001519 48837D1802                      cmp COUNT, 2
  1733 0000151E 0F85B3080000                    jne L_error_arg_count_2
  1734 00001524 4C8B4520                        mov r8, PARAM(0)
  1735                                          assert_rational(r8)
  1735 00001528 41803811            <1>  cmp byte [%1], %2
  1735 0000152C 0F8544090000        <1>  jne L_error_incorrect_type
  1736 00001532 4C8B4D28                        mov r9, PARAM(1)
  1737                                          assert_rational(r9)
  1737 00001536 41803911            <1>  cmp byte [%1], %2
  1737 0000153A 0F8536090000        <1>  jne L_error_incorrect_type
  1738 00001540 498B4001                        mov rax, qword [r8 + 1] ; num1
  1739 00001544 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1740 00001548 4899                            cqo
  1741 0000154A 48F7EB                          imul rbx
  1742 0000154D 4889C6                          mov rsi, rax
  1743 00001550 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1744 00001554 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1745 00001558 4899                            cqo
  1746 0000155A 48F7EB                          imul rbx
  1747 0000155D 4889C7                          mov rdi, rax
  1748 00001560 E867000000                      call normalize_rational
  1749                                          LEAVE
  1749 00001565 C9                  <1>  leave
  1750 00001566 C22000                          ret AND_KILL_FRAME(2)
  1751                                          
  1752                                  L_code_ptr_raw_bin_div_qq:
  1753                                          ENTER
  1753 00001569 C8000000            <1>  enter 0, 0
  1753 0000156D 4883E4F0            <1>  and rsp, ~15
  1754 00001571 48837D1802                      cmp COUNT, 2
  1755 00001576 0F855B080000                    jne L_error_arg_count_2
  1756 0000157C 4C8B4520                        mov r8, PARAM(0)
  1757                                          assert_rational(r8)
  1757 00001580 41803811            <1>  cmp byte [%1], %2
  1757 00001584 0F85EC080000        <1>  jne L_error_incorrect_type
  1758 0000158A 4C8B4D28                        mov r9, PARAM(1)
  1759                                          assert_rational(r9)
  1759 0000158E 41803911            <1>  cmp byte [%1], %2
  1759 00001592 0F85DE080000        <1>  jne L_error_incorrect_type
  1760 00001598 4983790100                      cmp qword [r9 + 1], 0
  1761 0000159D 0F8404090000                    je L_error_division_by_zero
  1762 000015A3 498B4001                        mov rax, qword [r8 + 1] ; num1
  1763 000015A7 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1764 000015AB 4899                            cqo
  1765 000015AD 48F7EB                          imul rbx
  1766 000015B0 4889C6                          mov rsi, rax
  1767 000015B3 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1768 000015B7 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1769 000015BB 4899                            cqo
  1770 000015BD 48F7EB                          imul rbx
  1771 000015C0 4889C7                          mov rdi, rax
  1772 000015C3 E804000000                      call normalize_rational
  1773                                          LEAVE
  1773 000015C8 C9                  <1>  leave
  1774 000015C9 C22000                          ret AND_KILL_FRAME(2)
  1775                                          
  1776                                  normalize_rational:
  1777 000015CC 56                              push rsi
  1778 000015CD 57                              push rdi
  1779 000015CE E839000000                      call gcd
  1780 000015D3 4889C3                          mov rbx, rax
  1781 000015D6 58                              pop rax
  1782 000015D7 4899                            cqo
  1783 000015D9 48F7FB                          idiv rbx
  1784 000015DC 4989C0                          mov r8, rax
  1785 000015DF 58                              pop rax
  1786 000015E0 4899                            cqo
  1787 000015E2 48F7FB                          idiv rbx
  1788 000015E5 4989C1                          mov r9, rax
  1789 000015E8 BF11000000                      mov rdi, (1 + 8 + 8)
  1790 000015ED E83FF1FFFF                      call malloc
  1791 000015F2 C60011                          mov byte [rax], T_rational
  1792 000015F5 4C894801                        mov qword [rax + 1], r9
  1793 000015F9 4C894009                        mov qword [rax + 1 + 8], r8
  1794 000015FD C3                              ret
  1795                                  
  1796                                  iabs:
  1797 000015FE 4889F8                          mov rax, rdi
  1798 00001601 4883F800                        cmp rax, 0
  1799 00001605 7C01                            jl .Lneg
  1800 00001607 C3                              ret
  1801                                  .Lneg:
  1802 00001608 48F7D8                          neg rax
  1803 0000160B C3                              ret
  1804                                  
  1805                                  gcd:
  1806 0000160C E8EDFFFFFF                      call iabs
  1807 00001611 4889C3                          mov rbx, rax
  1808 00001614 4889F7                          mov rdi, rsi
  1809 00001617 E8E2FFFFFF                      call iabs
  1810 0000161C 4883F800                        cmp rax, 0
  1811 00001620 7502                            jne .L0
  1812 00001622 4893                            xchg rax, rbx
  1813                                  .L0:
  1814 00001624 4883FB00                        cmp rbx, 0
  1815 00001628 740C                            je .L1
  1816 0000162A 4899                            cqo
  1817 0000162C 48F7F3                          div rbx
  1818 0000162F 4889D0                          mov rax, rdx
  1819 00001632 4893                            xchg rax, rbx
  1820 00001634 EBEE                            jmp .L0
  1821                                  .L1:
  1822 00001636 C3                              ret
  1823                                  
  1824                                  L_code_ptr_error:
  1825                                          ENTER
  1825 00001637 C8000000            <1>  enter 0, 0
  1825 0000163B 4883E4F0            <1>  and rsp, ~15
  1826 0000163F 48837D1802                      cmp COUNT, 2
  1827 00001644 0F858D070000                    jne L_error_arg_count_2
  1828 0000164A 488B7520                        mov rsi, PARAM(0)
  1829                                          assert_symbol(rsi)
  1829 0000164E 803E04              <1>  cmp byte [%1], %2
  1829 00001651 0F851F080000        <1>  jne L_error_incorrect_type
  1830 00001657 488B7528                        mov rsi, PARAM(1)
  1831                                          assert_string(rsi)
  1831 0000165B 803E03              <1>  cmp byte [%1], %2
  1831 0000165E 0F8512080000        <1>  jne L_error_incorrect_type
  1832 00001664 48BF-                           mov rdi, fmt_scheme_error_part_1
  1832 00001666 [6F03000000000000] 
  1833 0000166E B800000000                      mov rax, 0
  1834                                  	ENTER
  1834 00001673 C8000000            <1>  enter 0, 0
  1834 00001677 4883E4F0            <1>  and rsp, ~15
  1835 0000167B E8(00000000)                    call printf
  1836                                  	LEAVE
  1836 00001680 C9                  <1>  leave
  1837 00001681 488B7D20                        mov rdi, PARAM(0)
  1838 00001685 E8C2F0FFFF                      call print_sexpr
  1839 0000168A 48BF-                           mov rdi, fmt_scheme_error_part_2
  1839 0000168C [8303000000000000] 
  1840 00001694 B800000000                      mov rax, 0
  1841                                  	ENTER
  1841 00001699 C8000000            <1>  enter 0, 0
  1841 0000169D 4883E4F0            <1>  and rsp, ~15
  1842 000016A1 E8(00000000)                    call printf
  1843                                  	LEAVE
  1843 000016A6 C9                  <1>  leave
  1844 000016A7 488B4528                        mov rax, PARAM(1)       ; sob_string
  1845 000016AB BE01000000                      mov rsi, 1              ; size = 1 byte
  1846 000016B0 488B5001                        mov rdx, qword [rax + 1] ; length
  1847 000016B4 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1848 000016B8 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1849 000016C0 E8(00000000)                    call fwrite
  1850 000016C5 48BF-                           mov rdi, fmt_scheme_error_part_3
  1850 000016C7 [C503000000000000] 
  1851 000016CF B800000000                      mov rax, 0
  1852                                  	ENTER
  1852 000016D4 C8000000            <1>  enter 0, 0
  1852 000016D8 4883E4F0            <1>  and rsp, ~15
  1853 000016DC E8(00000000)                    call printf
  1854                                  	LEAVE
  1854 000016E1 C9                  <1>  leave
  1855 000016E2 48C7C0F7FFFFFF                  mov rax, -9
  1856 000016E9 E8(00000000)                    call exit
  1857                                  
  1858                                  L_code_ptr_raw_less_than_rr:
  1859                                          ENTER
  1859 000016EE C8000000            <1>  enter 0, 0
  1859 000016F2 4883E4F0            <1>  and rsp, ~15
  1860 000016F6 48837D1802                      cmp COUNT, 2
  1861 000016FB 0F85D6060000                    jne L_error_arg_count_2
  1862 00001701 488B7520                        mov rsi, PARAM(0)
  1863                                          assert_real(rsi)
  1863 00001705 803E12              <1>  cmp byte [%1], %2
  1863 00001708 0F8568070000        <1>  jne L_error_incorrect_type
  1864 0000170E 488B7D28                        mov rdi, PARAM(1)
  1865                                          assert_real(rdi)
  1865 00001712 803F12              <1>  cmp byte [%1], %2
  1865 00001715 0F855B070000        <1>  jne L_error_incorrect_type
  1866 0000171B F20F104601                      movsd xmm0, qword [rsi + 1]
  1867 00001720 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1868 00001725 660F2FC1                        comisd xmm0, xmm1
  1869 00001729 730C                            jae .L_false
  1870 0000172B 48B8-                           mov rax, sob_boolean_true
  1870 0000172D [0300000000000000] 
  1871 00001735 EB0A                            jmp .L_exit
  1872                                  .L_false:
  1873 00001737 48B8-                           mov rax, sob_boolean_false
  1873 00001739 [0200000000000000] 
  1874                                  .L_exit:
  1875                                          LEAVE
  1875 00001741 C9                  <1>  leave
  1876 00001742 C22000                          ret AND_KILL_FRAME(2)
  1877                                          
  1878                                  L_code_ptr_raw_less_than_qq:
  1879                                          ENTER
  1879 00001745 C8000000            <1>  enter 0, 0
  1879 00001749 4883E4F0            <1>  and rsp, ~15
  1880 0000174D 48837D1802                      cmp COUNT, 2
  1881 00001752 0F857F060000                    jne L_error_arg_count_2
  1882 00001758 488B7520                        mov rsi, PARAM(0)
  1883                                          assert_rational(rsi)
  1883 0000175C 803E11              <1>  cmp byte [%1], %2
  1883 0000175F 0F8511070000        <1>  jne L_error_incorrect_type
  1884 00001765 488B7D28                        mov rdi, PARAM(1)
  1885                                          assert_rational(rdi)
  1885 00001769 803F11              <1>  cmp byte [%1], %2
  1885 0000176C 0F8504070000        <1>  jne L_error_incorrect_type
  1886 00001772 488B4601                        mov rax, qword [rsi + 1] ; num1
  1887 00001776 4899                            cqo
  1888 00001778 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1889 0000177C 4889C1                          mov rcx, rax
  1890 0000177F 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1891 00001783 4899                            cqo
  1892 00001785 48F76F01                        imul qword [rdi + 1]          ; num2
  1893 00001789 4829C1                          sub rcx, rax
  1894 0000178C 7D0C                            jge .L_false
  1895 0000178E 48B8-                           mov rax, sob_boolean_true
  1895 00001790 [0300000000000000] 
  1896 00001798 EB0A                            jmp .L_exit
  1897                                  .L_false:
  1898 0000179A 48B8-                           mov rax, sob_boolean_false
  1898 0000179C [0200000000000000] 
  1899                                  .L_exit:
  1900                                          LEAVE
  1900 000017A4 C9                  <1>  leave
  1901 000017A5 C22000                          ret AND_KILL_FRAME(2)
  1902                                  
  1903                                  L_code_ptr_raw_equal_rr:
  1904                                          ENTER
  1904 000017A8 C8000000            <1>  enter 0, 0
  1904 000017AC 4883E4F0            <1>  and rsp, ~15
  1905 000017B0 48837D1802                      cmp COUNT, 2
  1906 000017B5 0F851C060000                    jne L_error_arg_count_2
  1907 000017BB 488B7520                        mov rsi, PARAM(0)
  1908                                          assert_real(rsi)
  1908 000017BF 803E12              <1>  cmp byte [%1], %2
  1908 000017C2 0F85AE060000        <1>  jne L_error_incorrect_type
  1909 000017C8 488B7D28                        mov rdi, PARAM(1)
  1910                                          assert_real(rdi)
  1910 000017CC 803F12              <1>  cmp byte [%1], %2
  1910 000017CF 0F85A1060000        <1>  jne L_error_incorrect_type
  1911 000017D5 F20F104601                      movsd xmm0, qword [rsi + 1]
  1912 000017DA F20F104F01                      movsd xmm1, qword [rdi + 1]
  1913 000017DF 660F2FC1                        comisd xmm0, xmm1
  1914 000017E3 750C                            jne .L_false
  1915 000017E5 48B8-                           mov rax, sob_boolean_true
  1915 000017E7 [0300000000000000] 
  1916 000017EF EB0A                            jmp .L_exit
  1917                                  .L_false:
  1918 000017F1 48B8-                           mov rax, sob_boolean_false
  1918 000017F3 [0200000000000000] 
  1919                                  .L_exit:
  1920                                          LEAVE
  1920 000017FB C9                  <1>  leave
  1921 000017FC C22000                          ret AND_KILL_FRAME(2)
  1922                                          
  1923                                  L_code_ptr_raw_equal_qq:
  1924                                          ENTER
  1924 000017FF C8000000            <1>  enter 0, 0
  1924 00001803 4883E4F0            <1>  and rsp, ~15
  1925 00001807 48837D1802                      cmp COUNT, 2
  1926 0000180C 0F85C5050000                    jne L_error_arg_count_2
  1927 00001812 488B7520                        mov rsi, PARAM(0)
  1928                                          assert_rational(rsi)
  1928 00001816 803E11              <1>  cmp byte [%1], %2
  1928 00001819 0F8557060000        <1>  jne L_error_incorrect_type
  1929 0000181F 488B7D28                        mov rdi, PARAM(1)
  1930                                          assert_rational(rdi)
  1930 00001823 803F11              <1>  cmp byte [%1], %2
  1930 00001826 0F854A060000        <1>  jne L_error_incorrect_type
  1931 0000182C 488B4601                        mov rax, qword [rsi + 1] ; num1
  1932 00001830 4899                            cqo
  1933 00001832 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1934 00001836 4889C1                          mov rcx, rax
  1935 00001839 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1936 0000183D 4899                            cqo
  1937 0000183F 48F76F01                        imul qword [rdi + 1]          ; num2
  1938 00001843 4829C1                          sub rcx, rax
  1939 00001846 750C                            jne .L_false
  1940 00001848 48B8-                           mov rax, sob_boolean_true
  1940 0000184A [0300000000000000] 
  1941 00001852 EB0A                            jmp .L_exit
  1942                                  .L_false:
  1943 00001854 48B8-                           mov rax, sob_boolean_false
  1943 00001856 [0200000000000000] 
  1944                                  .L_exit:
  1945                                          LEAVE
  1945 0000185E C9                  <1>  leave
  1946 0000185F C22000                          ret AND_KILL_FRAME(2)
  1947                                  
  1948                                  L_code_ptr_quotient:
  1949                                          ENTER
  1949 00001862 C8000000            <1>  enter 0, 0
  1949 00001866 4883E4F0            <1>  and rsp, ~15
  1950 0000186A 48837D1802                      cmp COUNT, 2
  1951 0000186F 0F8562050000                    jne L_error_arg_count_2
  1952 00001875 488B7520                        mov rsi, PARAM(0)
  1953                                          assert_integer(rsi)
  1953                              <1>  assert_rational(%1)
  1953 00001879 803E11              <2>  cmp byte [%1], %2
  1953 0000187C 0F85F4050000        <2>  jne L_error_incorrect_type
  1953 00001882 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  1953 00001887 0F85E9050000        <1>  jne L_error_incorrect_type
  1954 0000188D 488B7D28                        mov rdi, PARAM(1)
  1955                                          assert_integer(rdi)
  1955                              <1>  assert_rational(%1)
  1955 00001891 803F11              <2>  cmp byte [%1], %2
  1955 00001894 0F85DC050000        <2>  jne L_error_incorrect_type
  1955 0000189A 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
  1955 0000189F 0F85D1050000        <1>  jne L_error_incorrect_type
  1956 000018A5 488B4601                        mov rax, qword [rsi + 1]
  1957 000018A9 488B5F01                        mov rbx, qword [rdi + 1]
  1958 000018AD 4883FB00                        cmp rbx, 0
  1959 000018B1 0F84F0050000                    je L_error_division_by_zero
  1960 000018B7 4899                            cqo
  1961 000018B9 48F7FB                          idiv rbx
  1962 000018BC 4889C7                          mov rdi, rax
  1963 000018BF E852040000                      call make_integer
  1964                                          LEAVE
  1964 000018C4 C9                  <1>  leave
  1965 000018C5 C22000                          ret AND_KILL_FRAME(2)
  1966                                          
  1967                                  L_code_ptr_remainder:
  1968                                          ENTER
  1968 000018C8 C8000000            <1>  enter 0, 0
  1968 000018CC 4883E4F0            <1>  and rsp, ~15
  1969 000018D0 48837D1802                      cmp COUNT, 2
  1970 000018D5 0F85FC040000                    jne L_error_arg_count_2
  1971 000018DB 488B7520                        mov rsi, PARAM(0)
  1972                                          assert_integer(rsi)
  1972                              <1>  assert_rational(%1)
  1972 000018DF 803E11              <2>  cmp byte [%1], %2
  1972 000018E2 0F858E050000        <2>  jne L_error_incorrect_type
  1972 000018E8 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  1972 000018ED 0F8583050000        <1>  jne L_error_incorrect_type
  1973 000018F3 488B7D28                        mov rdi, PARAM(1)
  1974                                          assert_integer(rdi)
  1974                              <1>  assert_rational(%1)
  1974 000018F7 803F11              <2>  cmp byte [%1], %2
  1974 000018FA 0F8576050000        <2>  jne L_error_incorrect_type
  1974 00001900 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
  1974 00001905 0F856B050000        <1>  jne L_error_incorrect_type
  1975 0000190B 488B4601                        mov rax, qword [rsi + 1]
  1976 0000190F 488B5F01                        mov rbx, qword [rdi + 1]
  1977 00001913 4883FB00                        cmp rbx, 0
  1978 00001917 0F848A050000                    je L_error_division_by_zero
  1979 0000191D 4899                            cqo
  1980 0000191F 48F7FB                          idiv rbx
  1981 00001922 4889D7                          mov rdi, rdx
  1982 00001925 E8EC030000                      call make_integer
  1983                                          LEAVE
  1983 0000192A C9                  <1>  leave
  1984 0000192B C22000                          ret AND_KILL_FRAME(2)
  1985                                  
  1986                                  L_code_ptr_set_car:
  1987                                          ENTER
  1987 0000192E C8000000            <1>  enter 0, 0
  1987 00001932 4883E4F0            <1>  and rsp, ~15
  1988 00001936 48837D1802                      cmp COUNT, 2
  1989 0000193B 0F8596040000                    jne L_error_arg_count_2
  1990 00001941 488B4520                        mov rax, PARAM(0)
  1991                                          assert_pair(rax)
  1991 00001945 803821              <1>  cmp byte [%1], %2
  1991 00001948 0F8528050000        <1>  jne L_error_incorrect_type
  1992 0000194E 488B5D28                        mov rbx, PARAM(1)
  1993 00001952 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1994 00001956 48B8-                           mov rax, sob_void
  1994 00001958 [0000000000000000] 
  1995                                          LEAVE
  1995 00001960 C9                  <1>  leave
  1996 00001961 C22000                          ret AND_KILL_FRAME(2)
  1997                                  
  1998                                  L_code_ptr_set_cdr:
  1999                                          ENTER
  1999 00001964 C8000000            <1>  enter 0, 0
  1999 00001968 4883E4F0            <1>  and rsp, ~15
  2000 0000196C 48837D1802                      cmp COUNT, 2
  2001 00001971 0F8560040000                    jne L_error_arg_count_2
  2002 00001977 488B4520                        mov rax, PARAM(0)
  2003                                          assert_pair(rax)
  2003 0000197B 803821              <1>  cmp byte [%1], %2
  2003 0000197E 0F85F2040000        <1>  jne L_error_incorrect_type
  2004 00001984 488B5D28                        mov rbx, PARAM(1)
  2005 00001988 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2006 0000198C 48B8-                           mov rax, sob_void
  2006 0000198E [0000000000000000] 
  2007                                          LEAVE
  2007 00001996 C9                  <1>  leave
  2008 00001997 C22000                          ret AND_KILL_FRAME(2)
  2009                                  
  2010                                  L_code_ptr_string_ref:
  2011                                          ENTER
  2011 0000199A C8000000            <1>  enter 0, 0
  2011 0000199E 4883E4F0            <1>  and rsp, ~15
  2012 000019A2 48837D1802                      cmp COUNT, 2
  2013 000019A7 0F852A040000                    jne L_error_arg_count_2
  2014 000019AD 488B7D20                        mov rdi, PARAM(0)
  2015                                          assert_string(rdi)
  2015 000019B1 803F03              <1>  cmp byte [%1], %2
  2015 000019B4 0F85BC040000        <1>  jne L_error_incorrect_type
  2016 000019BA 488B7528                        mov rsi, PARAM(1)
  2017                                          assert_integer(rsi)
  2017                              <1>  assert_rational(%1)
  2017 000019BE 803E11              <2>  cmp byte [%1], %2
  2017 000019C1 0F85AF040000        <2>  jne L_error_incorrect_type
  2017 000019C7 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2017 000019CC 0F85A4040000        <1>  jne L_error_incorrect_type
  2018 000019D2 488B5701                        mov rdx, qword [rdi + 1]
  2019 000019D6 488B4E01                        mov rcx, qword [rsi + 1]
  2020 000019DA 4839D1                          cmp rcx, rdx
  2021 000019DD 0F8D59030000                    jge L_error_integer_range
  2022 000019E3 4883F900                        cmp rcx, 0
  2023 000019E7 0F8C4F030000                    jl L_error_integer_range
  2024 000019ED 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2025 000019F1 BF02000000                      mov rdi, 2
  2026 000019F6 E836EDFFFF                      call malloc
  2027 000019FB C60002                          mov byte [rax], T_char
  2028 000019FE 885801                          mov byte [rax + 1], bl
  2029                                          LEAVE
  2029 00001A01 C9                  <1>  leave
  2030 00001A02 C22000                          ret AND_KILL_FRAME(2)
  2031                                  
  2032                                  L_code_ptr_vector_ref:
  2033                                          ENTER
  2033 00001A05 C8000000            <1>  enter 0, 0
  2033 00001A09 4883E4F0            <1>  and rsp, ~15
  2034 00001A0D 48837D1802                      cmp COUNT, 2
  2035 00001A12 0F85BF030000                    jne L_error_arg_count_2
  2036 00001A18 488B7D20                        mov rdi, PARAM(0)
  2037                                          assert_vector(rdi)
  2037 00001A1C 803F22              <1>  cmp byte [%1], %2
  2037 00001A1F 0F8551040000        <1>  jne L_error_incorrect_type
  2038 00001A25 488B7528                        mov rsi, PARAM(1)
  2039                                          assert_integer(rsi)
  2039                              <1>  assert_rational(%1)
  2039 00001A29 803E11              <2>  cmp byte [%1], %2
  2039 00001A2C 0F8544040000        <2>  jne L_error_incorrect_type
  2039 00001A32 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2039 00001A37 0F8539040000        <1>  jne L_error_incorrect_type
  2040 00001A3D 488B5701                        mov rdx, qword [rdi + 1]
  2041 00001A41 488B4E01                        mov rcx, qword [rsi + 1]
  2042 00001A45 4839D1                          cmp rcx, rdx
  2043 00001A48 0F8DEE020000                    jge L_error_integer_range
  2044 00001A4E 4883F900                        cmp rcx, 0
  2045 00001A52 0F8CE4020000                    jl L_error_integer_range
  2046 00001A58 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2047                                          LEAVE
  2047 00001A5D C9                  <1>  leave
  2048 00001A5E C22000                          ret AND_KILL_FRAME(2)
  2049                                  
  2050                                  L_code_ptr_vector_set:
  2051                                          ENTER
  2051 00001A61 C8000000            <1>  enter 0, 0
  2051 00001A65 4883E4F0            <1>  and rsp, ~15
  2052 00001A69 48837D1803                      cmp COUNT, 3
  2053 00001A6E 0F85CD030000                    jne L_error_arg_count_3
  2054 00001A74 488B7D20                        mov rdi, PARAM(0)
  2055                                          assert_vector(rdi)
  2055 00001A78 803F22              <1>  cmp byte [%1], %2
  2055 00001A7B 0F85F5030000        <1>  jne L_error_incorrect_type
  2056 00001A81 488B7528                        mov rsi, PARAM(1)
  2057                                          assert_integer(rsi)
  2057                              <1>  assert_rational(%1)
  2057 00001A85 803E11              <2>  cmp byte [%1], %2
  2057 00001A88 0F85E8030000        <2>  jne L_error_incorrect_type
  2057 00001A8E 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2057 00001A93 0F85DD030000        <1>  jne L_error_incorrect_type
  2058 00001A99 488B5701                        mov rdx, qword [rdi + 1]
  2059 00001A9D 488B4E01                        mov rcx, qword [rsi + 1]
  2060 00001AA1 4839D1                          cmp rcx, rdx
  2061 00001AA4 0F8D92020000                    jge L_error_integer_range
  2062 00001AAA 4883F900                        cmp rcx, 0
  2063 00001AAE 0F8C88020000                    jl L_error_integer_range
  2064 00001AB4 488B4530                        mov rax, PARAM(2)
  2065 00001AB8 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2066 00001ABD 48B8-                           mov rax, sob_void
  2066 00001ABF [0000000000000000] 
  2067                                          LEAVE
  2067 00001AC7 C9                  <1>  leave
  2068 00001AC8 C22800                          ret AND_KILL_FRAME(3)
  2069                                  
  2070                                  L_code_ptr_string_set:
  2071                                          ENTER
  2071 00001ACB C8000000            <1>  enter 0, 0
  2071 00001ACF 4883E4F0            <1>  and rsp, ~15
  2072 00001AD3 48837D1803                      cmp COUNT, 3
  2073 00001AD8 0F8563030000                    jne L_error_arg_count_3
  2074 00001ADE 488B7D20                        mov rdi, PARAM(0)
  2075                                          assert_string(rdi)
  2075 00001AE2 803F03              <1>  cmp byte [%1], %2
  2075 00001AE5 0F858B030000        <1>  jne L_error_incorrect_type
  2076 00001AEB 488B7528                        mov rsi, PARAM(1)
  2077                                          assert_integer(rsi)
  2077                              <1>  assert_rational(%1)
  2077 00001AEF 803E11              <2>  cmp byte [%1], %2
  2077 00001AF2 0F857E030000        <2>  jne L_error_incorrect_type
  2077 00001AF8 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2077 00001AFD 0F8573030000        <1>  jne L_error_incorrect_type
  2078 00001B03 488B5701                        mov rdx, qword [rdi + 1]
  2079 00001B07 488B4E01                        mov rcx, qword [rsi + 1]
  2080 00001B0B 4839D1                          cmp rcx, rdx
  2081 00001B0E 0F8D28020000                    jge L_error_integer_range
  2082 00001B14 4883F900                        cmp rcx, 0
  2083 00001B18 0F8C1E020000                    jl L_error_integer_range
  2084 00001B1E 488B4530                        mov rax, PARAM(2)
  2085                                          assert_char(rax)
  2085 00001B22 803802              <1>  cmp byte [%1], %2
  2085 00001B25 0F854B030000        <1>  jne L_error_incorrect_type
  2086 00001B2B 8A4001                          mov al, byte [rax + 1]
  2087 00001B2E 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2088 00001B32 48B8-                           mov rax, sob_void
  2088 00001B34 [0000000000000000] 
  2089                                          LEAVE
  2089 00001B3C C9                  <1>  leave
  2090 00001B3D C22800                          ret AND_KILL_FRAME(3)
  2091                                  
  2092                                  L_code_ptr_make_vector:
  2093                                          ENTER
  2093 00001B40 C8000000            <1>  enter 0, 0
  2093 00001B44 4883E4F0            <1>  and rsp, ~15
  2094 00001B48 48837D1802                      cmp COUNT, 2
  2095 00001B4D 0F8584020000                    jne L_error_arg_count_2
  2096 00001B53 488B4D20                        mov rcx, PARAM(0)
  2097                                          assert_integer(rcx)
  2097                              <1>  assert_rational(%1)
  2097 00001B57 803911              <2>  cmp byte [%1], %2
  2097 00001B5A 0F8516030000        <2>  jne L_error_incorrect_type
  2097 00001B60 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
  2097 00001B65 0F850B030000        <1>  jne L_error_incorrect_type
  2098 00001B6B 488B4901                        mov rcx, qword [rcx + 1]
  2099 00001B6F 4883F900                        cmp rcx, 0
  2100 00001B73 0F8CC3010000                    jl L_error_integer_range
  2101 00001B79 488B5528                        mov rdx, PARAM(1)
  2102 00001B7D 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2103 00001B85 E8A7EBFFFF                      call malloc
  2104 00001B8A C60022                          mov byte [rax], T_vector
  2105 00001B8D 48894801                        mov qword [rax + 1], rcx
  2106 00001B91 41B800000000                    mov r8, 0
  2107                                  .L0:
  2108 00001B97 4939C8                          cmp r8, rcx
  2109 00001B9A 740A                            je .L1
  2110 00001B9C 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2111 00001BA1 49FFC0                          inc r8
  2112 00001BA4 EBF1                            jmp .L0
  2113                                  .L1:
  2114                                          LEAVE
  2114 00001BA6 C9                  <1>  leave
  2115 00001BA7 C22000                          ret AND_KILL_FRAME(2)
  2116                                          
  2117                                  L_code_ptr_make_string:
  2118                                          ENTER
  2118 00001BAA C8000000            <1>  enter 0, 0
  2118 00001BAE 4883E4F0            <1>  and rsp, ~15
  2119 00001BB2 48837D1802                      cmp COUNT, 2
  2120 00001BB7 0F851A020000                    jne L_error_arg_count_2
  2121 00001BBD 488B4D20                        mov rcx, PARAM(0)
  2122                                          assert_integer(rcx)
  2122                              <1>  assert_rational(%1)
  2122 00001BC1 803911              <2>  cmp byte [%1], %2
  2122 00001BC4 0F85AC020000        <2>  jne L_error_incorrect_type
  2122 00001BCA 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
  2122 00001BCF 0F85A1020000        <1>  jne L_error_incorrect_type
  2123 00001BD5 488B4901                        mov rcx, qword [rcx + 1]
  2124 00001BD9 4883F900                        cmp rcx, 0
  2125 00001BDD 0F8C59010000                    jl L_error_integer_range
  2126 00001BE3 488B5528                        mov rdx, PARAM(1)
  2127                                          assert_char(rdx)
  2127 00001BE7 803A02              <1>  cmp byte [%1], %2
  2127 00001BEA 0F8586020000        <1>  jne L_error_incorrect_type
  2128 00001BF0 8A5201                          mov dl, byte [rdx + 1]
  2129 00001BF3 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2130 00001BF7 E835EBFFFF                      call malloc
  2131 00001BFC C60003                          mov byte [rax], T_string
  2132 00001BFF 48894801                        mov qword [rax + 1], rcx
  2133 00001C03 41B800000000                    mov r8, 0
  2134                                  .L0:
  2135 00001C09 4939C8                          cmp r8, rcx
  2136 00001C0C 740A                            je .L1
  2137 00001C0E 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2138 00001C13 49FFC0                          inc r8
  2139 00001C16 EBF1                            jmp .L0
  2140                                  .L1:
  2141                                          LEAVE
  2141 00001C18 C9                  <1>  leave
  2142 00001C19 C22000                          ret AND_KILL_FRAME(2)
  2143                                  
  2144                                  L_code_ptr_numerator:
  2145                                          ENTER
  2145 00001C1C C8000000            <1>  enter 0, 0
  2145 00001C20 4883E4F0            <1>  and rsp, ~15
  2146 00001C24 48837D1801                      cmp COUNT, 1
  2147 00001C29 0F8573010000                    jne L_error_arg_count_1
  2148 00001C2F 488B4520                        mov rax, PARAM(0)
  2149                                          assert_rational(rax)
  2149 00001C33 803811              <1>  cmp byte [%1], %2
  2149 00001C36 0F853A020000        <1>  jne L_error_incorrect_type
  2150 00001C3C 488B7801                        mov rdi, qword [rax + 1]
  2151 00001C40 E8D1000000                      call make_integer
  2152                                          LEAVE
  2152 00001C45 C9                  <1>  leave
  2153 00001C46 C21800                          ret AND_KILL_FRAME(1)
  2154                                          
  2155                                  L_code_ptr_denominator:
  2156                                          ENTER
  2156 00001C49 C8000000            <1>  enter 0, 0
  2156 00001C4D 4883E4F0            <1>  and rsp, ~15
  2157 00001C51 48837D1801                      cmp COUNT, 1
  2158 00001C56 0F8546010000                    jne L_error_arg_count_1
  2159 00001C5C 488B4520                        mov rax, PARAM(0)
  2160                                          assert_rational(rax)
  2160 00001C60 803811              <1>  cmp byte [%1], %2
  2160 00001C63 0F850D020000        <1>  jne L_error_incorrect_type
  2161 00001C69 488B7809                        mov rdi, qword [rax + 1 + 8]
  2162 00001C6D E8A4000000                      call make_integer
  2163                                          LEAVE
  2163 00001C72 C9                  <1>  leave
  2164 00001C73 C21800                          ret AND_KILL_FRAME(1)
  2165                                  
  2166                                  L_code_ptr_eq:
  2167                                  	ENTER
  2167 00001C76 C8000000            <1>  enter 0, 0
  2167 00001C7A 4883E4F0            <1>  and rsp, ~15
  2168 00001C7E 48837D1802              	cmp COUNT, 2
  2169 00001C83 0F854E010000            	jne L_error_arg_count_2
  2170 00001C89 488B7D20                	mov rdi, PARAM(0)
  2171 00001C8D 488B7528                	mov rsi, PARAM(1)
  2172 00001C91 4839F7                  	cmp rdi, rsi
  2173 00001C94 744A                    	je .L_eq_true
  2174 00001C96 8A17                    	mov dl, byte [rdi]
  2175 00001C98 3A16                    	cmp dl, byte [rsi]
  2176 00001C9A 7550                    	jne .L_eq_false
  2177 00001C9C 80FA02                  	cmp dl, T_char
  2178 00001C9F 7437                    	je .L_char
  2179 00001CA1 80FA04                  	cmp dl, T_symbol
  2180 00001CA4 742A                    	je .L_symbol
  2181 00001CA6 80FA12                  	cmp dl, T_real
  2182 00001CA9 741D                    	je .L_real
  2183 00001CAB 80FA11                  	cmp dl, T_rational
  2184 00001CAE 7402                    	je .L_rational
  2185 00001CB0 EB3A                    	jmp .L_eq_false
  2186                                  .L_rational:
  2187 00001CB2 488B4601                	mov rax, qword [rsi + 1]
  2188 00001CB6 483B4701                	cmp rax, qword [rdi + 1]
  2189 00001CBA 7530                    	jne .L_eq_false
  2190 00001CBC 488B4609                	mov rax, qword [rsi + 1 + 8]
  2191 00001CC0 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2192 00001CC4 7526                    	jne .L_eq_false
  2193 00001CC6 EB18                    	jmp .L_eq_true
  2194                                  .L_real:
  2195 00001CC8 488B4601                	mov rax, qword [rsi + 1]
  2196 00001CCC 483B4701                	cmp rax, qword [rdi + 1]
  2197                                  .L_symbol:
  2198                                  	; never reached, because symbols are static!
  2199                                  	; but I'm keeping it in case, I'll ever change
  2200                                  	; the implementation
  2201 00001CD0 488B4601                	mov rax, qword [rsi + 1]
  2202 00001CD4 483B4701                	cmp rax, qword [rdi + 1]
  2203                                  .L_char:
  2204 00001CD8 8A5E01                  	mov bl, byte [rsi + 1]
  2205 00001CDB 3A5F01                  	cmp bl, byte [rdi + 1]
  2206 00001CDE 750C                    	jne .L_eq_false
  2207                                  .L_eq_true:
  2208 00001CE0 48B8-                   	mov rax, sob_boolean_true
  2208 00001CE2 [0300000000000000] 
  2209 00001CEA EB0A                    	jmp .L_eq_exit
  2210                                  .L_eq_false:
  2211 00001CEC 48B8-                   	mov rax, sob_boolean_false
  2211 00001CEE [0200000000000000] 
  2212                                  .L_eq_exit:
  2213                                  	LEAVE
  2213 00001CF6 C9                  <1>  leave
  2214 00001CF7 C22000                  	ret AND_KILL_FRAME(2)
  2215                                  
  2216                                  make_real:
  2217                                          ENTER
  2217 00001CFA C8000000            <1>  enter 0, 0
  2217 00001CFE 4883E4F0            <1>  and rsp, ~15
  2218 00001D02 BF09000000                      mov rdi, (1 + 8)
  2219 00001D07 E825EAFFFF                      call malloc
  2220 00001D0C C60012                          mov byte [rax], T_real
  2221 00001D0F F20F114001                      movsd qword [rax + 1], xmm0
  2222                                          LEAVE
  2222 00001D14 C9                  <1>  leave
  2223 00001D15 C3                              ret
  2224                                          
  2225                                  make_integer:
  2226                                          ENTER
  2226 00001D16 C8000000            <1>  enter 0, 0
  2226 00001D1A 4883E4F0            <1>  and rsp, ~15
  2227 00001D1E 4889FE                          mov rsi, rdi
  2228 00001D21 BF11000000                      mov rdi, (1 + 8 + 8)
  2229 00001D26 E806EAFFFF                      call malloc
  2230 00001D2B C60011                          mov byte [rax], T_rational
  2231 00001D2E 48897001                        mov qword [rax + 1], rsi
  2232 00001D32 48C7400901000000                mov qword [rax + 1 + 8], 1
  2233                                          LEAVE
  2233 00001D3A C9                  <1>  leave
  2234 00001D3B C3                              ret
  2235                                          
  2236                                  L_error_integer_range:
  2237 00001D3C 488B3C25[00000000]              mov rdi, qword [stderr]
  2238 00001D44 48BE-                           mov rsi, fmt_integer_range
  2238 00001D46 [3C03000000000000] 
  2239 00001D4E B800000000                      mov rax, 0
  2240                                  	ENTER
  2240 00001D53 C8000000            <1>  enter 0, 0
  2240 00001D57 4883E4F0            <1>  and rsp, ~15
  2241 00001D5B E8(00000000)                    call fprintf
  2242                                  	LEAVE
  2242 00001D60 C9                  <1>  leave
  2243 00001D61 48C7C0FBFFFFFF                  mov rax, -5
  2244 00001D68 E8(00000000)                    call exit
  2245                                  
  2246                                  L_error_arg_count_0:
  2247 00001D6D 488B3C25[00000000]              mov rdi, qword [stderr]
  2248 00001D75 48BE-                           mov rsi, fmt_arg_count_0
  2248 00001D77 [3A02000000000000] 
  2249 00001D7F 488B5518                        mov rdx, COUNT
  2250 00001D83 B800000000                      mov rax, 0
  2251                                  	ENTER
  2251 00001D88 C8000000            <1>  enter 0, 0
  2251 00001D8C 4883E4F0            <1>  and rsp, ~15
  2252 00001D90 E8(00000000)                    call fprintf
  2253                                  	LEAVE
  2253 00001D95 C9                  <1>  leave
  2254 00001D96 48C7C0FDFFFFFF                  mov rax, -3
  2255 00001D9D E8(00000000)                    call exit
  2256                                  
  2257                                  L_error_arg_count_1:
  2258 00001DA2 488B3C25[00000000]              mov rdi, qword [stderr]
  2259 00001DAA 48BE-                           mov rsi, fmt_arg_count_1
  2259 00001DAC [6202000000000000] 
  2260 00001DB4 488B5518                        mov rdx, COUNT
  2261 00001DB8 B800000000                      mov rax, 0
  2262                                  	ENTER
  2262 00001DBD C8000000            <1>  enter 0, 0
  2262 00001DC1 4883E4F0            <1>  and rsp, ~15
  2263 00001DC5 E8(00000000)                    call fprintf
  2264                                  	LEAVE
  2264 00001DCA C9                  <1>  leave
  2265 00001DCB 48C7C0FDFFFFFF                  mov rax, -3
  2266 00001DD2 E8(00000000)                    call exit
  2267                                  
  2268                                  L_error_arg_count_2:
  2269 00001DD7 488B3C25[00000000]              mov rdi, qword [stderr]
  2270 00001DDF 48BE-                           mov rsi, fmt_arg_count_2
  2270 00001DE1 [C802000000000000] 
  2271 00001DE9 488B5518                        mov rdx, COUNT
  2272 00001DED B800000000                      mov rax, 0
  2273                                  	ENTER
  2273 00001DF2 C8000000            <1>  enter 0, 0
  2273 00001DF6 4883E4F0            <1>  and rsp, ~15
  2274 00001DFA E8(00000000)                    call fprintf
  2275                                  	LEAVE
  2275 00001DFF C9                  <1>  leave
  2276 00001E00 48C7C0FDFFFFFF                  mov rax, -3
  2277 00001E07 E8(00000000)                    call exit
  2278                                  
  2279                                  L_error_arg_count_12:
  2280 00001E0C 488B3C25[00000000]              mov rdi, qword [stderr]
  2281 00001E14 48BE-                           mov rsi, fmt_arg_count_12
  2281 00001E16 [8802000000000000] 
  2282 00001E1E 488B5518                        mov rdx, COUNT
  2283 00001E22 B800000000                      mov rax, 0
  2284                                  	ENTER
  2284 00001E27 C8000000            <1>  enter 0, 0
  2284 00001E2B 4883E4F0            <1>  and rsp, ~15
  2285 00001E2F E8(00000000)                    call fprintf
  2286                                  	LEAVE
  2286 00001E34 C9                  <1>  leave
  2287 00001E35 48C7C0FDFFFFFF                  mov rax, -3
  2288 00001E3C E8(00000000)                    call exit
  2289                                  
  2290                                  L_error_arg_count_3:
  2291 00001E41 488B3C25[00000000]              mov rdi, qword [stderr]
  2292 00001E49 48BE-                           mov rsi, fmt_arg_count_3
  2292 00001E4B [EF02000000000000] 
  2293 00001E53 488B5518                        mov rdx, COUNT
  2294 00001E57 B800000000                      mov rax, 0
  2295                                  	ENTER
  2295 00001E5C C8000000            <1>  enter 0, 0
  2295 00001E60 4883E4F0            <1>  and rsp, ~15
  2296 00001E64 E8(00000000)                    call fprintf
  2297                                  	LEAVE
  2297 00001E69 C9                  <1>  leave
  2298 00001E6A 48C7C0FDFFFFFF                  mov rax, -3
  2299 00001E71 E8(00000000)                    call exit
  2300                                          
  2301                                  L_error_incorrect_type:
  2302 00001E76 488B3C25[00000000]              mov rdi, qword [stderr]
  2303 00001E7E 48BE-                           mov rsi, fmt_type
  2303 00001E80 [1803000000000000] 
  2304 00001E88 B800000000                      mov rax, 0
  2305                                  	ENTER
  2305 00001E8D C8000000            <1>  enter 0, 0
  2305 00001E91 4883E4F0            <1>  and rsp, ~15
  2306 00001E95 E8(00000000)                    call fprintf
  2307                                  	LEAVE
  2307 00001E9A C9                  <1>  leave
  2308 00001E9B 48C7C0FCFFFFFF                  mov rax, -4
  2309 00001EA2 E8(00000000)                    call exit
  2310                                  
  2311                                  L_error_division_by_zero:
  2312 00001EA7 488B3C25[00000000]              mov rdi, qword [stderr]
  2313 00001EAF 48BE-                           mov rsi, fmt_division_by_zero
  2313 00001EB1 [5903000000000000] 
  2314 00001EB9 B800000000                      mov rax, 0
  2315                                  	ENTER
  2315 00001EBE C8000000            <1>  enter 0, 0
  2315 00001EC2 4883E4F0            <1>  and rsp, ~15
  2316 00001EC6 E8(00000000)                    call fprintf
  2317                                  	LEAVE
  2317 00001ECB C9                  <1>  leave
  2318 00001ECC 48C7C0F8FFFFFF                  mov rax, -8
  2319 00001ED3 E8(00000000)                    call exit
  2320                                  
  2321                                  section .data
  2322                                  fmt_char:
  2323 00000237 256300                          db `%c\0`
  2324                                  fmt_arg_count_0:
  2325 0000023A 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2325 00000243 74696E67207A65726F-
  2325 0000024C 20617267756D656E74-
  2325 00000255 732E20466F756E6420-
  2325 0000025E 25640A00           
  2326                                  fmt_arg_count_1:
  2327 00000262 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2327 0000026B 74696E67206F6E6520-
  2327 00000274 617267756D656E742E-
  2327 0000027D 20466F756E64202564-
  2327 00000286 0A00               
  2328                                  fmt_arg_count_12:
  2329 00000288 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2329 00000291 74696E67206F6E6520-
  2329 0000029A 726571756972656420-
  2329 000002A3 616E64206F6E65206F-
  2329 000002AC 7074696F6E616C2061-
  2329 000002B5 7267756D656E742E20-
  2329 000002BE 466F756E642025640A-
  2329 000002C7 00                 
  2330                                  fmt_arg_count_2:
  2331 000002C8 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2331 000002D1 74696E672074776F20-
  2331 000002DA 617267756D656E7473-
  2331 000002E3 2E20466F756E642025-
  2331 000002EC 640A00             
  2332                                  fmt_arg_count_3:
  2333 000002EF 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2333 000002F8 74696E672074687265-
  2333 00000301 6520617267756D656E-
  2333 0000030A 74732E20466F756E64-
  2333 00000313 2025640A00         
  2334                                  fmt_type:
  2335 00000318 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2335 00000321 696F6E207061737365-
  2335 0000032A 6420696E636F727265-
  2335 00000333 637420747970650A00 
  2336                                  fmt_integer_range:
  2337 0000033C 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2337 00000345 7265637420696E7465-
  2337 0000034E 6765722072616E6765-
  2337 00000357 0A00               
  2338                                  fmt_division_by_zero:
  2339 00000359 212121204469766973-             db `!!! Division by zero\n\0`
  2339 00000362 696F6E206279207A65-
  2339 0000036B 726F0A00           
  2340                                  fmt_scheme_error_part_1:
  2341 0000036F 0A2121212054686520-             db `\n!!! The procedure \0`
  2341 00000378 70726F636564757265-
  2341 00000381 2000               
  2342                                  fmt_scheme_error_part_2:
  2343 00000383 2061736B656420746F-             db ` asked to terminate the program\n`
  2343 0000038C 207465726D696E6174-
  2343 00000395 65207468652070726F-
  2343 0000039E 6772616D0A         
  2344 000003A3 202020207769746820-             db `    with the following message:\n\n\0`
  2344 000003AC 74686520666F6C6C6F-
  2344 000003B5 77696E67206D657373-
  2344 000003BE 6167653A0A0A00     
  2345                                  fmt_scheme_error_part_3:
  2346 000003C5 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2346 000003CE 210A0A00           
