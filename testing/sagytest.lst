     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 11                      	db T_rational	; 190
    84 00000007 BE0000000000000001-     	dq 190, 1
    84 00000010 00000000000000     
    85 00000017 11                      	db T_rational	; 191
    86 00000018 BF0000000000000001-     	dq 191, 1
    86 00000021 00000000000000     
    87 00000028 11                      	db T_rational	; 192
    88 00000029 C00000000000000001-     	dq 192, 1
    88 00000032 00000000000000     
    89 00000039 11                      	db T_rational	; 193
    90 0000003A C10000000000000001-     	dq 193, 1
    90 00000043 00000000000000     
    91                                  
    92                                  section .bss
    93                                  free_var_0:	; location of null?
    94 00000000 <res 00000008>          	resq 1
    95                                  free_var_1:	; location of pair?
    96 00000008 <res 00000008>          	resq 1
    97                                  free_var_2:	; location of void?
    98 00000010 <res 00000008>          	resq 1
    99                                  free_var_3:	; location of char?
   100 00000018 <res 00000008>          	resq 1
   101                                  free_var_4:	; location of string?
   102 00000020 <res 00000008>          	resq 1
   103                                  free_var_5:	; location of symbol?
   104 00000028 <res 00000008>          	resq 1
   105                                  free_var_6:	; location of vector?
   106 00000030 <res 00000008>          	resq 1
   107                                  free_var_7:	; location of procedure?
   108 00000038 <res 00000008>          	resq 1
   109                                  free_var_8:	; location of real?
   110 00000040 <res 00000008>          	resq 1
   111                                  free_var_9:	; location of rational?
   112 00000048 <res 00000008>          	resq 1
   113                                  free_var_10:	; location of boolean?
   114 00000050 <res 00000008>          	resq 1
   115                                  free_var_11:	; location of number?
   116 00000058 <res 00000008>          	resq 1
   117                                  free_var_12:	; location of collection?
   118 00000060 <res 00000008>          	resq 1
   119                                  free_var_13:	; location of cons
   120 00000068 <res 00000008>          	resq 1
   121                                  free_var_14:	; location of display-sexpr
   122 00000070 <res 00000008>          	resq 1
   123                                  free_var_15:	; location of write-char
   124 00000078 <res 00000008>          	resq 1
   125                                  free_var_16:	; location of car
   126 00000080 <res 00000008>          	resq 1
   127                                  free_var_17:	; location of cdr
   128 00000088 <res 00000008>          	resq 1
   129                                  free_var_18:	; location of string-length
   130 00000090 <res 00000008>          	resq 1
   131                                  free_var_19:	; location of vector-length
   132 00000098 <res 00000008>          	resq 1
   133                                  free_var_20:	; location of real->integer
   134 000000A0 <res 00000008>          	resq 1
   135                                  free_var_21:	; location of exit
   136 000000A8 <res 00000008>          	resq 1
   137                                  free_var_22:	; location of integer->real
   138 000000B0 <res 00000008>          	resq 1
   139                                  free_var_23:	; location of rational->real
   140 000000B8 <res 00000008>          	resq 1
   141                                  free_var_24:	; location of char->integer
   142 000000C0 <res 00000008>          	resq 1
   143                                  free_var_25:	; location of integer->char
   144 000000C8 <res 00000008>          	resq 1
   145                                  free_var_26:	; location of trng
   146 000000D0 <res 00000008>          	resq 1
   147                                  free_var_27:	; location of zero?
   148 000000D8 <res 00000008>          	resq 1
   149                                  free_var_28:	; location of integer?
   150 000000E0 <res 00000008>          	resq 1
   151                                  free_var_29:	; location of __bin-apply
   152 000000E8 <res 00000008>          	resq 1
   153                                  free_var_30:	; location of __bin-add-rr
   154 000000F0 <res 00000008>          	resq 1
   155                                  free_var_31:	; location of __bin-sub-rr
   156 000000F8 <res 00000008>          	resq 1
   157                                  free_var_32:	; location of __bin-mul-rr
   158 00000100 <res 00000008>          	resq 1
   159                                  free_var_33:	; location of __bin-div-rr
   160 00000108 <res 00000008>          	resq 1
   161                                  free_var_34:	; location of __bin-add-qq
   162 00000110 <res 00000008>          	resq 1
   163                                  free_var_35:	; location of __bin-sub-qq
   164 00000118 <res 00000008>          	resq 1
   165                                  free_var_36:	; location of __bin-mul-qq
   166 00000120 <res 00000008>          	resq 1
   167                                  free_var_37:	; location of __bin-div-qq
   168 00000128 <res 00000008>          	resq 1
   169                                  free_var_38:	; location of error
   170 00000130 <res 00000008>          	resq 1
   171                                  free_var_39:	; location of __bin-less-than-rr
   172 00000138 <res 00000008>          	resq 1
   173                                  free_var_40:	; location of __bin-less-than-qq
   174 00000140 <res 00000008>          	resq 1
   175                                  free_var_41:	; location of __bin-equal-rr
   176 00000148 <res 00000008>          	resq 1
   177                                  free_var_42:	; location of __bin-equal-qq
   178 00000150 <res 00000008>          	resq 1
   179                                  free_var_43:	; location of quotient
   180 00000158 <res 00000008>          	resq 1
   181                                  free_var_44:	; location of remainder
   182 00000160 <res 00000008>          	resq 1
   183                                  free_var_45:	; location of set-car!
   184 00000168 <res 00000008>          	resq 1
   185                                  free_var_46:	; location of set-cdr!
   186 00000170 <res 00000008>          	resq 1
   187                                  free_var_47:	; location of string-ref
   188 00000178 <res 00000008>          	resq 1
   189                                  free_var_48:	; location of vector-ref
   190 00000180 <res 00000008>          	resq 1
   191                                  free_var_49:	; location of vector-set!
   192 00000188 <res 00000008>          	resq 1
   193                                  free_var_50:	; location of string-set!
   194 00000190 <res 00000008>          	resq 1
   195                                  free_var_51:	; location of make-vector
   196 00000198 <res 00000008>          	resq 1
   197                                  free_var_52:	; location of make-string
   198 000001A0 <res 00000008>          	resq 1
   199                                  free_var_53:	; location of numerator
   200 000001A8 <res 00000008>          	resq 1
   201                                  free_var_54:	; location of denominator
   202 000001B0 <res 00000008>          	resq 1
   203                                  free_var_55:	; location of eq?
   204 000001B8 <res 00000008>          	resq 1
   205                                  
   206                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   207                                  global main
   208                                  section .text
   209                                  main:
   210 00000000 C8000000                        enter 0, 0
   211                                          
   212                                  	; building closure for null?
   213 00000004 48BF-                   	mov rdi, free_var_0
   213 00000006 [0000000000000000] 
   214 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   214 00000010 [B90D000000000000] 
   215 00000018 E8740D0000              	call bind_primitive
   216                                  
   217                                  	; building closure for pair?
   218 0000001D 48BF-                   	mov rdi, free_var_1
   218 0000001F [0800000000000000] 
   219 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   219 00000029 [EF0D000000000000] 
   220 00000031 E85B0D0000              	call bind_primitive
   221                                  
   222                                  	; building closure for void?
   223 00000036 48BF-                   	mov rdi, free_var_2
   223 00000038 [1000000000000000] 
   224 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   224 00000042 [250E000000000000] 
   225 0000004A E8420D0000              	call bind_primitive
   226                                  
   227                                  	; building closure for char?
   228 0000004F 48BF-                   	mov rdi, free_var_3
   228 00000051 [1800000000000000] 
   229 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   229 0000005B [5B0E000000000000] 
   230 00000063 E8290D0000              	call bind_primitive
   231                                  
   232                                  	; building closure for string?
   233 00000068 48BF-                   	mov rdi, free_var_4
   233 0000006A [2000000000000000] 
   234 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   234 00000074 [910E000000000000] 
   235 0000007C E8100D0000              	call bind_primitive
   236                                  
   237                                  	; building closure for symbol?
   238 00000081 48BF-                   	mov rdi, free_var_5
   238 00000083 [2800000000000000] 
   239 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   239 0000008D [C70E000000000000] 
   240 00000095 E8F70C0000              	call bind_primitive
   241                                  
   242                                  	; building closure for vector?
   243 0000009A 48BF-                   	mov rdi, free_var_6
   243 0000009C [3000000000000000] 
   244 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   244 000000A6 [FD0E000000000000] 
   245 000000AE E8DE0C0000              	call bind_primitive
   246                                  
   247                                  	; building closure for procedure?
   248 000000B3 48BF-                   	mov rdi, free_var_7
   248 000000B5 [3800000000000000] 
   249 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   249 000000BF [330F000000000000] 
   250 000000C7 E8C50C0000              	call bind_primitive
   251                                  
   252                                  	; building closure for real?
   253 000000CC 48BF-                   	mov rdi, free_var_8
   253 000000CE [4000000000000000] 
   254 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   254 000000D8 [690F000000000000] 
   255 000000E0 E8AC0C0000              	call bind_primitive
   256                                  
   257                                  	; building closure for rational?
   258 000000E5 48BF-                   	mov rdi, free_var_9
   258 000000E7 [4800000000000000] 
   259 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   259 000000F1 [9F0F000000000000] 
   260 000000F9 E8930C0000              	call bind_primitive
   261                                  
   262                                  	; building closure for boolean?
   263 000000FE 48BF-                   	mov rdi, free_var_10
   263 00000100 [5000000000000000] 
   264 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   264 0000010A [D50F000000000000] 
   265 00000112 E87A0C0000              	call bind_primitive
   266                                  
   267                                  	; building closure for number?
   268 00000117 48BF-                   	mov rdi, free_var_11
   268 00000119 [5800000000000000] 
   269 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   269 00000123 [0D10000000000000] 
   270 0000012B E8610C0000              	call bind_primitive
   271                                  
   272                                  	; building closure for collection?
   273 00000130 48BF-                   	mov rdi, free_var_12
   273 00000132 [6000000000000000] 
   274 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   274 0000013C [4510000000000000] 
   275 00000144 E8480C0000              	call bind_primitive
   276                                  
   277                                  	; building closure for cons
   278 00000149 48BF-                   	mov rdi, free_var_13
   278 0000014B [6800000000000000] 
   279 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   279 00000155 [7D10000000000000] 
   280 0000015D E82F0C0000              	call bind_primitive
   281                                  
   282                                  	; building closure for display-sexpr
   283 00000162 48BF-                   	mov rdi, free_var_14
   283 00000164 [7000000000000000] 
   284 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   284 0000016E [B110000000000000] 
   285 00000176 E8160C0000              	call bind_primitive
   286                                  
   287                                  	; building closure for write-char
   288 0000017B 48BF-                   	mov rdi, free_var_15
   288 0000017D [7800000000000000] 
   289 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   289 00000187 [DB10000000000000] 
   290 0000018F E8FD0B0000              	call bind_primitive
   291                                  
   292                                  	; building closure for car
   293 00000194 48BF-                   	mov rdi, free_var_16
   293 00000196 [8000000000000000] 
   294 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   294 000001A0 [3211000000000000] 
   295 000001A8 E8E40B0000              	call bind_primitive
   296                                  
   297                                  	; building closure for cdr
   298 000001AD 48BF-                   	mov rdi, free_var_17
   298 000001AF [8800000000000000] 
   299 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   299 000001B9 [5A11000000000000] 
   300 000001C1 E8CB0B0000              	call bind_primitive
   301                                  
   302                                  	; building closure for string-length
   303 000001C6 48BF-                   	mov rdi, free_var_18
   303 000001C8 [9000000000000000] 
   304 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   304 000001D2 [8211000000000000] 
   305 000001DA E8B20B0000              	call bind_primitive
   306                                  
   307                                  	; building closure for vector-length
   308 000001DF 48BF-                   	mov rdi, free_var_19
   308 000001E1 [9800000000000000] 
   309 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   309 000001EB [AF11000000000000] 
   310 000001F3 E8990B0000              	call bind_primitive
   311                                  
   312                                  	; building closure for real->integer
   313 000001F8 48BF-                   	mov rdi, free_var_20
   313 000001FA [A000000000000000] 
   314 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   314 00000204 [DC11000000000000] 
   315 0000020C E8800B0000              	call bind_primitive
   316                                  
   317                                  	; building closure for exit
   318 00000211 48BF-                   	mov rdi, free_var_21
   318 00000213 [A800000000000000] 
   319 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   319 0000021D [0F12000000000000] 
   320 00000225 E8670B0000              	call bind_primitive
   321                                  
   322                                  	; building closure for integer->real
   323 0000022A 48BF-                   	mov rdi, free_var_22
   323 0000022C [B000000000000000] 
   324 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   324 00000236 [2C12000000000000] 
   325 0000023E E84E0B0000              	call bind_primitive
   326                                  
   327                                  	; building closure for rational->real
   328 00000243 48BF-                   	mov rdi, free_var_23
   328 00000245 [B800000000000000] 
   329 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   329 0000024F [6912000000000000] 
   330 00000257 E8350B0000              	call bind_primitive
   331                                  
   332                                  	; building closure for char->integer
   333 0000025C 48BF-                   	mov rdi, free_var_24
   333 0000025E [C000000000000000] 
   334 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   334 00000268 [A812000000000000] 
   335 00000270 E81C0B0000              	call bind_primitive
   336                                  
   337                                  	; building closure for integer->char
   338 00000275 48BF-                   	mov rdi, free_var_25
   338 00000277 [C800000000000000] 
   339 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   339 00000281 [DD12000000000000] 
   340 00000289 E8030B0000              	call bind_primitive
   341                                  
   342                                  	; building closure for trng
   343 0000028E 48BF-                   	mov rdi, free_var_26
   343 00000290 [D000000000000000] 
   344 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   344 0000029A [3713000000000000] 
   345 000002A2 E8EA0A0000              	call bind_primitive
   346                                  
   347                                  	; building closure for zero?
   348 000002A7 48BF-                   	mov rdi, free_var_27
   348 000002A9 [D800000000000000] 
   349 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   349 000002B3 [5A13000000000000] 
   350 000002BB E8D10A0000              	call bind_primitive
   351                                  
   352                                  	; building closure for integer?
   353 000002C0 48BF-                   	mov rdi, free_var_28
   353 000002C2 [E000000000000000] 
   354 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   354 000002CC [B513000000000000] 
   355 000002D4 E8B80A0000              	call bind_primitive
   356                                  
   357                                  	; building closure for __bin-apply
   358 000002D9 48BF-                   	mov rdi, free_var_29
   358 000002DB [E800000000000000] 
   359 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   359 000002E5 [B90D000000000000] 
   360 000002ED E89F0A0000              	call bind_primitive
   361                                  
   362                                  	; building closure for __bin-add-rr
   363 000002F2 48BF-                   	mov rdi, free_var_30
   363 000002F4 [F000000000000000] 
   364 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   364 000002FE [F213000000000000] 
   365 00000306 E8860A0000              	call bind_primitive
   366                                  
   367                                  	; building closure for __bin-sub-rr
   368 0000030B 48BF-                   	mov rdi, free_var_31
   368 0000030D [F800000000000000] 
   369 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   369 00000317 [3614000000000000] 
   370 0000031F E86D0A0000              	call bind_primitive
   371                                  
   372                                  	; building closure for __bin-mul-rr
   373 00000324 48BF-                   	mov rdi, free_var_32
   373 00000326 [0001000000000000] 
   374 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   374 00000330 [7A14000000000000] 
   375 00000338 E8540A0000              	call bind_primitive
   376                                  
   377                                  	; building closure for __bin-div-rr
   378 0000033D 48BF-                   	mov rdi, free_var_33
   378 0000033F [0801000000000000] 
   379 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   379 00000349 [BE14000000000000] 
   380 00000351 E83B0A0000              	call bind_primitive
   381                                  
   382                                  	; building closure for __bin-add-qq
   383 00000356 48BF-                   	mov rdi, free_var_34
   383 00000358 [1001000000000000] 
   384 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   384 00000362 [1015000000000000] 
   385 0000036A E8220A0000              	call bind_primitive
   386                                  
   387                                  	; building closure for __bin-sub-qq
   388 0000036F 48BF-                   	mov rdi, free_var_35
   388 00000371 [1801000000000000] 
   389 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   389 0000037B [7815000000000000] 
   390 00000383 E8090A0000              	call bind_primitive
   391                                  
   392                                  	; building closure for __bin-mul-qq
   393 00000388 48BF-                   	mov rdi, free_var_36
   393 0000038A [2001000000000000] 
   394 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   394 00000394 [E015000000000000] 
   395 0000039C E8F0090000              	call bind_primitive
   396                                  
   397                                  	; building closure for __bin-div-qq
   398 000003A1 48BF-                   	mov rdi, free_var_37
   398 000003A3 [2801000000000000] 
   399 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   399 000003AD [3816000000000000] 
   400 000003B5 E8D7090000              	call bind_primitive
   401                                  
   402                                  	; building closure for error
   403 000003BA 48BF-                   	mov rdi, free_var_38
   403 000003BC [3001000000000000] 
   404 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   404 000003C6 [0617000000000000] 
   405 000003CE E8BE090000              	call bind_primitive
   406                                  
   407                                  	; building closure for __bin-less-than-rr
   408 000003D3 48BF-                   	mov rdi, free_var_39
   408 000003D5 [3801000000000000] 
   409 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   409 000003DF [BD17000000000000] 
   410 000003E7 E8A5090000              	call bind_primitive
   411                                  
   412                                  	; building closure for __bin-less-than-qq
   413 000003EC 48BF-                   	mov rdi, free_var_40
   413 000003EE [4001000000000000] 
   414 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   414 000003F8 [1418000000000000] 
   415 00000400 E88C090000              	call bind_primitive
   416                                  
   417                                  	; building closure for __bin-equal-rr
   418 00000405 48BF-                   	mov rdi, free_var_41
   418 00000407 [4801000000000000] 
   419 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   419 00000411 [7718000000000000] 
   420 00000419 E873090000              	call bind_primitive
   421                                  
   422                                  	; building closure for __bin-equal-qq
   423 0000041E 48BF-                   	mov rdi, free_var_42
   423 00000420 [5001000000000000] 
   424 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   424 0000042A [CE18000000000000] 
   425 00000432 E85A090000              	call bind_primitive
   426                                  
   427                                  	; building closure for quotient
   428 00000437 48BF-                   	mov rdi, free_var_43
   428 00000439 [5801000000000000] 
   429 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   429 00000443 [3119000000000000] 
   430 0000044B E841090000              	call bind_primitive
   431                                  
   432                                  	; building closure for remainder
   433 00000450 48BF-                   	mov rdi, free_var_44
   433 00000452 [6001000000000000] 
   434 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   434 0000045C [9719000000000000] 
   435 00000464 E828090000              	call bind_primitive
   436                                  
   437                                  	; building closure for set-car!
   438 00000469 48BF-                   	mov rdi, free_var_45
   438 0000046B [6801000000000000] 
   439 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   439 00000475 [FD19000000000000] 
   440 0000047D E80F090000              	call bind_primitive
   441                                  
   442                                  	; building closure for set-cdr!
   443 00000482 48BF-                   	mov rdi, free_var_46
   443 00000484 [7001000000000000] 
   444 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   444 0000048E [331A000000000000] 
   445 00000496 E8F6080000              	call bind_primitive
   446                                  
   447                                  	; building closure for string-ref
   448 0000049B 48BF-                   	mov rdi, free_var_47
   448 0000049D [7801000000000000] 
   449 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   449 000004A7 [691A000000000000] 
   450 000004AF E8DD080000              	call bind_primitive
   451                                  
   452                                  	; building closure for vector-ref
   453 000004B4 48BF-                   	mov rdi, free_var_48
   453 000004B6 [8001000000000000] 
   454 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   454 000004C0 [D41A000000000000] 
   455 000004C8 E8C4080000              	call bind_primitive
   456                                  
   457                                  	; building closure for vector-set!
   458 000004CD 48BF-                   	mov rdi, free_var_49
   458 000004CF [8801000000000000] 
   459 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   459 000004D9 [301B000000000000] 
   460 000004E1 E8AB080000              	call bind_primitive
   461                                  
   462                                  	; building closure for string-set!
   463 000004E6 48BF-                   	mov rdi, free_var_50
   463 000004E8 [9001000000000000] 
   464 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   464 000004F2 [9A1B000000000000] 
   465 000004FA E892080000              	call bind_primitive
   466                                  
   467                                  	; building closure for make-vector
   468 000004FF 48BF-                   	mov rdi, free_var_51
   468 00000501 [9801000000000000] 
   469 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   469 0000050B [0F1C000000000000] 
   470 00000513 E879080000              	call bind_primitive
   471                                  
   472                                  	; building closure for make-string
   473 00000518 48BF-                   	mov rdi, free_var_52
   473 0000051A [A001000000000000] 
   474 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   474 00000524 [791C000000000000] 
   475 0000052C E860080000              	call bind_primitive
   476                                  
   477                                  	; building closure for numerator
   478 00000531 48BF-                   	mov rdi, free_var_53
   478 00000533 [A801000000000000] 
   479 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   479 0000053D [EB1C000000000000] 
   480 00000545 E847080000              	call bind_primitive
   481                                  
   482                                  	; building closure for denominator
   483 0000054A 48BF-                   	mov rdi, free_var_54
   483 0000054C [B001000000000000] 
   484 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   484 00000556 [181D000000000000] 
   485 0000055E E82E080000              	call bind_primitive
   486                                  
   487                                  	; building closure for eq?
   488 00000563 48BF-                   	mov rdi, free_var_55
   488 00000565 [B801000000000000] 
   489 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   489 0000056F [451D000000000000] 
   490 00000577 E815080000              	call bind_primitive
   491                                  
   492 0000057C 6A00                    	push 0
   493 0000057E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   494 00000583 E878020000              	call malloc
   495 00000588 50                      	push rax
   496 00000589 BF00000000              	mov rdi, 8 * 0	; new rib
   497 0000058E E86D020000              	call malloc
   498 00000593 50                      	push rax
   499 00000594 BF08000000              	mov rdi, 8 * 1	; extended env
   500 00000599 E862020000              	call malloc
   501 0000059E 488B7D10                	mov rdi, ENV
   502 000005A2 BE00000000              	mov rsi, 0
   503 000005A7 BA01000000              	mov rdx, 1
   504                                  .L_lambda_simple_env_loop_0001:	; ext_env[i + 1] <-- env[i]
   505 000005AC 4883FE00                	cmp rsi, 0
   506 000005B0 7410                    	je .L_lambda_simple_env_end_0001
   507 000005B2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   508 000005B6 48890CD0                	mov qword [rax + 8 * rdx], rcx
   509 000005BA 48FFC6                  	inc rsi
   510 000005BD 48FFC2                  	inc rdx
   511 000005C0 EBEA                    	jmp .L_lambda_simple_env_loop_0001
   512                                  .L_lambda_simple_env_end_0001:
   513 000005C2 5B                      	pop rbx
   514 000005C3 BE00000000              	mov rsi, 0
   515                                  .L_lambda_simple_params_loop_0001:	; copy params
   516 000005C8 4883FE00                	cmp rsi, 0
   517 000005CC 740E                    	je .L_lambda_simple_params_end_0001
   518 000005CE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   519 000005D3 488914F3                	mov qword [rbx + 8 * rsi], rdx
   520 000005D7 48FFC6                  	inc rsi
   521 000005DA EBEC                    	jmp .L_lambda_simple_params_loop_0001
   522                                  .L_lambda_simple_params_end_0001:
   523 000005DC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   524 000005DF 4889C3                  	mov rbx, rax
   525 000005E2 58                      	pop rax
   526 000005E3 C60005                  	mov byte [rax], T_closure
   527 000005E6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   528 000005EA 48C74009[F7050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0001
   529 000005F2 E919010000              	jmp .L_lambda_simple_end_0001
   530                                  .L_lambda_simple_code_0001:	; lambda-simple body
   531 000005F7 48837C241000            	cmp qword [rsp + 8 * 2], 0
   532 000005FD 740B                    	je .L_lambda_simple_arity_check_ok_0001
   533 000005FF FF742410                	push qword [rsp + 8 * 2]
   534 00000603 6A00                    	push 0
   535 00000605 E9AF010000              	jmp L_error_incorrect_arity_simple
   536                                  .L_lambda_simple_arity_check_ok_0001:
   537 0000060A C8000000                	enter 0, 0
   538 0000060E 48B8-                   	mov rax, qword (L_constants + 3)
   538 00000610 [0300000000000000] 
   539 00000618 483D[02000000]          	cmp rax, sob_boolean_false
   540 0000061E 7477                    	je .L_if_else_0001
   541                                  .L_lambda_simple_arity_check_ok_0003:
   542 00000620 48B8-                   	mov rax, qword (L_constants + 23)
   542 00000622 [1700000000000000] 
   543 0000062A 50                      	push rax
   544 0000062B 48B8-                   	mov rax, qword (L_constants + 6)
   544 0000062D [0600000000000000] 
   545 00000635 50                      	push rax
   546 00000636 6A02                    	push 2
   547 00000638 488B0425[B8010000]      	mov rax, qword [free_var_55]
   548 00000640 803805                  	cmp byte [rax], T_closure
   549                                  
   550 00000643 0F85BD100000                    jne L_code_ptr_error                      ; rax <- proc
   551                                  
   552                                  
   553 00000649 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)             ; rbx <- env(proc)
   554                                  
   555 0000064D 53                              push rbx                                  ; env pushed
   556                                  
   557 0000064E FF7508                          push qword [ rbp + 8 * 1]                 ; old ret addr pushed
   558                                  
   559 00000651 FF7500                          push qword [ rbp ]                        ; the same old rbp pushed
   560                                  
   561                                          
   562 00000654 4C8B4518                        mov r8, [ rbp + 3 * 8]                    ; r8 <- old_code_num_of_args_n
   563                                  
   564 00000658 4C8B4C2418                      mov r9, [ rsp + 3 * 8 ]                   ; r9 <- new_code_num_of_args_m
   565                                  
   566                                  
   567 0000065D 4D89CA                          mov r10, r9
   568 00000660 4983C204                        add r10, 4                                ; total elemnts left to copy: num_of_args + 4 (num_of_args, lexenv retf, rbp in f)
   569                                  
   570                                                                                         
   571 00000664 4D89C4                          mov r12, r8                               ; r12 <- index in new code
   572 00000667 4983C404                        add r12, 4
   573                                  
   574 0000066B 41BE00000000                    mov r14, 0                                ; r14 <- 0 : init box: curr_arg_to_copy
   575                                  .L_tc_recycle_frame_loop_0002:
   576 00000671 4E8B34D4                mov r14, [rsp + (r10 * 8)]               ; r14 <- i_element_old_code
   577                                  
   578 00000675 4E8974D500                      mov [rbp + (r10 * 8)], r14
   579                                  
   580                                  
   581                                  
   582 0000067A 41BE00000000                    mov r14, 0                                ; clean box
   583                                  
   584                                  
   585                                                                  
   586 00000680 4983C2FF                        add r10, -1                               ; args_copied_counter--
   587                                  
   588 00000684 4983C4FF                        add r12, -1 
   589                                  
   590 00000688 4983FA00                        cmp r10, 0                                ; element_copied_counter == 0 ?
   591 0000068C 75E3                    jne .L_tc_recycle_frame_loop_0002
   592                                  .L_tc_recycle_frame_done_0002:
   593 0000068E 5D                      pop rbp                                  ; restore the old rbp
   594                                  
   595 0000068F 488B5809                        mov rbx, SOB_CLOSURE_CODE(rax)
   596                                            ; rbx <- code(proc)
   597                                  
   598 00000693 FFE3                            jmp rbx
   599 00000695 EB75                    	jmp .L_if_end_0001
   600                                  	.L_if_else_0001:
   601                                  	.L_lambda_simple_arity_check_ok_0002:
   602 00000697 48B8-                   	mov rax, qword (L_constants + 57)
   602 00000699 [3900000000000000] 
   603 000006A1 50                      	push rax
   604 000006A2 48B8-                   	mov rax, qword (L_constants + 40)
   604 000006A4 [2800000000000000] 
   605 000006AC 50                      	push rax
   606 000006AD 6A02                    	push 2
   607 000006AF 488B0425[B8010000]      	mov rax, qword [free_var_55]
   608 000006B7 803805                  	cmp byte [rax], T_closure
   609                                  
   610 000006BA 0F8546100000                    jne L_code_ptr_error                      ; rax <- proc
   611                                  
   612                                  
   613 000006C0 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)             ; rbx <- env(proc)
   614                                  
   615 000006C4 53                              push rbx                                  ; env pushed
   616                                  
   617 000006C5 FF7508                          push qword [ rbp + 8 * 1]                 ; old ret addr pushed
   618                                  
   619 000006C8 FF7500                          push qword [ rbp ]                        ; the same old rbp pushed
   620                                  
   621                                          
   622 000006CB 4C8B4518                        mov r8, [ rbp + 3 * 8]                    ; r8 <- old_code_num_of_args_n
   623                                  
   624 000006CF 4C8B4C2418                      mov r9, [ rsp + 3 * 8 ]                   ; r9 <- new_code_num_of_args_m
   625                                  
   626                                  
   627 000006D4 4D89CA                          mov r10, r9
   628 000006D7 4983C204                        add r10, 4                                ; total elemnts left to copy: num_of_args + 4 (num_of_args, lexenv retf, rbp in f)
   629                                  
   630                                                                                         
   631 000006DB 4D89C4                          mov r12, r8                               ; r12 <- index in new code
   632 000006DE 4983C404                        add r12, 4
   633                                  
   634 000006E2 41BE00000000                    mov r14, 0                                ; r14 <- 0 : init box: curr_arg_to_copy
   635                                  .L_tc_recycle_frame_loop_0001:
   636 000006E8 4E8B34D4                mov r14, [rsp + (r10 * 8)]               ; r14 <- i_element_old_code
   637                                  
   638 000006EC 4E8974D500                      mov [rbp + (r10 * 8)], r14
   639                                  
   640                                  
   641                                  
   642 000006F1 41BE00000000                    mov r14, 0                                ; clean box
   643                                  
   644                                  
   645                                                                  
   646 000006F7 4983C2FF                        add r10, -1                               ; args_copied_counter--
   647                                  
   648 000006FB 4983C4FF                        add r12, -1 
   649                                  
   650 000006FF 4983FA00                        cmp r10, 0                                ; element_copied_counter == 0 ?
   651 00000703 75E3                    jne .L_tc_recycle_frame_loop_0001
   652                                  .L_tc_recycle_frame_done_0001:
   653 00000705 5D                      pop rbp                                  ; restore the old rbp
   654                                  
   655 00000706 488B5809                        mov rbx, SOB_CLOSURE_CODE(rax)
   656                                            ; rbx <- code(proc)
   657                                  
   658 0000070A FFE3                            jmp rbx
   659                                  	.L_if_end_0001:
   660 0000070C C9                      	leave
   661 0000070D C21000                  	ret 8 * (2 + 0)
   662                                  .L_lambda_simple_end_0001:	; new closure is in rax
   663 00000710 803805                  	cmp byte [rax], T_closure 
   664 00000713 0F85ED0F0000                    jne L_code_ptr_error
   665                                  
   666 00000719 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
   667                                  
   668 0000071D 53                              push rbx
   669                                  
   670 0000071E FF5009                          call SOB_CLOSURE_CODE(rax)
   671                                  
   672                                          
   673 00000721 4889C7                  	mov rdi, rax
   674 00000724 E8E8000000              	call print_sexpr_if_not_void
   675                                  
   676 00000729 48BF-                           mov rdi, fmt_memory_usage
   676 0000072B [A900000000000000] 
   677 00000733 488B3425[30010000]              mov rsi, qword [top_of_memory]
   678 0000073B 4881EE[C0010000]                sub rsi, memory
   679 00000742 B800000000                      mov rax, 0
   680                                  	ENTER
   680 00000747 C8000000            <1>  enter 0, 0
   680 0000074B 4883E4F0            <1>  and rsp, ~15
   681 0000074F E8(00000000)                    call printf
   682                                  	LEAVE
   682 00000754 C9                  <1>  leave
   683 00000755 C9                      	leave
   684 00000756 C3                      	ret
   685                                  
   686                                  L_error_non_closure:
   687 00000757 488B3C25[00000000]              mov rdi, qword [stderr]
   688 0000075F 48BE-                           mov rsi, fmt_non_closure
   688 00000761 [E000000000000000] 
   689 00000769 B800000000                      mov rax, 0
   690                                  	ENTER
   690 0000076E C8000000            <1>  enter 0, 0
   690 00000772 4883E4F0            <1>  and rsp, ~15
   691 00000776 E8(00000000)                    call fprintf
   692                                  	LEAVE
   692 0000077B C9                  <1>  leave
   693 0000077C 48C7C0FEFFFFFF                  mov rax, -2
   694 00000783 E8(00000000)                    call exit
   695                                  
   696                                  L_error_improper_list:
   697 00000788 488B3C25[00000000]      	mov rdi, qword [stderr]
   698 00000790 48BE-                   	mov rsi, fmt_error_improper_list
   698 00000792 [0801000000000000] 
   699 0000079A B800000000              	mov rax, 0
   700                                  	ENTER
   700 0000079F C8000000            <1>  enter 0, 0
   700 000007A3 4883E4F0            <1>  and rsp, ~15
   701 000007A7 E8(00000000)            	call fprintf
   702                                  	LEAVE
   702 000007AC C9                  <1>  leave
   703 000007AD 48C7C0F9FFFFFF          	mov rax, -7
   704 000007B4 E8(00000000)            	call exit
   705                                  
   706                                  L_error_incorrect_arity_simple:
   707 000007B9 488B3C25[00000000]              mov rdi, qword [stderr]
   708 000007C1 48BE-                           mov rsi, fmt_incorrect_arity_simple
   708 000007C3 [4A00000000000000] 
   709 000007CB EB12                            jmp L_error_incorrect_arity_common
   710                                  L_error_incorrect_arity_opt:
   711 000007CD 488B3C25[00000000]              mov rdi, qword [stderr]
   712 000007D5 48BE-                           mov rsi, fmt_incorrect_arity_opt
   712 000007D7 [7500000000000000] 
   713                                  L_error_incorrect_arity_common:
   714 000007DF 5A                              pop rdx
   715 000007E0 59                              pop rcx
   716 000007E1 B800000000                      mov rax, 0
   717                                  	ENTER
   717 000007E6 C8000000            <1>  enter 0, 0
   717 000007EA 4883E4F0            <1>  and rsp, ~15
   718 000007EE E8(00000000)                    call fprintf
   719                                  	LEAVE
   719 000007F3 C9                  <1>  leave
   720 000007F4 48C7C0FAFFFFFF                  mov rax, -6
   721 000007FB E8(00000000)                    call exit
   722                                  
   723                                  section .data
   724                                  fmt_incorrect_arity_simple:
   725 0000004A 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   725 00000053 74656420256C642061-
   725 0000005C 7267756D656E74732C-
   725 00000065 206275742067697665-
   725 0000006E 6E20256C640A00     
   726                                  fmt_incorrect_arity_opt:
   727 00000075 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   727 0000007E 746564206174206C65-
   727 00000087 61737420256C642061-
   727 00000090 7267756D656E74732C-
   727 00000099 206275742067697665-
   727 000000A2 6E20256C640A00     
   728                                  fmt_memory_usage:
   729 000000A9 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   729 000000B2 6420256C6420627974-
   729 000000BB 6573206F662064796E-
   729 000000C4 616D6963616C6C792D-
   729 000000CD 616C6C6F6361746564-
   729 000000D6 206D656D6F72790A0A-
   729 000000DF 00                 
   730                                  fmt_non_closure:
   731 000000E0 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   731 000000E9 7074696E6720746F20-
   731 000000F2 6170706C792061206E-
   731 000000FB 6F6E2D636C6F737572-
   731 00000104 65210A00           
   732                                  fmt_error_improper_list:
   733 00000108 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   733 00000111 7267756D656E742069-
   733 0000011A 73206E6F7420612070-
   733 00000123 726F706572206C6973-
   733 0000012C 74210A00           
   734                                  
   735                                  section .bss
   736                                  memory:
   737 000001C0 <res 40000000>          	resb gbytes(1)
   738                                  
   739                                  section .data
   740                                  top_of_memory:
   741 00000130 [C001000000000000]              dq memory
   742                                  
   743                                  section .text
   744                                  malloc:
   745 00000800 488B0425[30010000]              mov rax, qword [top_of_memory]
   746 00000808 48013C25[30010000]              add qword [top_of_memory], rdi
   747 00000810 C3                              ret
   748                                          
   749                                  print_sexpr_if_not_void:
   750 00000811 4881FF[00000000]        	cmp rdi, sob_void
   751 00000818 7501                    	jne print_sexpr
   752 0000081A C3                      	ret
   753                                  
   754                                  section .data
   755                                  fmt_void:
   756 00000138 233C766F69643E00        	db `#<void>\0`
   757                                  fmt_nil:
   758 00000140 282900                  	db `()\0`
   759                                  fmt_boolean_false:
   760 00000143 236600                  	db `#f\0`
   761                                  fmt_boolean_true:
   762 00000146 237400                  	db `#t\0`
   763                                  fmt_char_backslash:
   764 00000149 235C5C00                	db `#\\\\\0`
   765                                  fmt_char_dquote:
   766 0000014D 235C2200                	db `#\\"\0`
   767                                  fmt_char_simple:
   768 00000151 235C256300              	db `#\\%c\0`
   769                                  fmt_char_null:
   770 00000156 235C6E756C00            	db `#\\nul\0`
   771                                  fmt_char_bell:
   772 0000015C 235C62656C6C00          	db `#\\bell\0`
   773                                  fmt_char_backspace:
   774 00000163 235C6261636B737061-     	db `#\\backspace\0`
   774 0000016C 636500             
   775                                  fmt_char_tab:
   776 0000016F 235C74616200            	db `#\\tab\0`
   777                                  fmt_char_newline:
   778 00000175 235C6E65776C696E65-     	db `#\\newline\0`
   778 0000017E 00                 
   779                                  fmt_char_formfeed:
   780 0000017F 235C7061676500          	db `#\\page\0`
   781                                  fmt_char_return:
   782 00000186 235C72657475726E00      	db `#\\return\0`
   783                                  fmt_char_escape:
   784 0000018F 235C65736300            	db `#\\esc\0`
   785                                  fmt_char_space:
   786 00000195 235C737061636500        	db `#\\space\0`
   787                                  fmt_char_hex:
   788 0000019D 235C782530325800        	db `#\\x%02X\0`
   789                                  fmt_closure:
   790 000001A5 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   790 000001AE 206174203078253038-
   790 000001B7 5820656E763D307825-
   790 000001C0 30385820636F64653D-
   790 000001C9 3078253038583E00   
   791                                  fmt_lparen:
   792 000001D1 2800                    	db `(\0`
   793                                  fmt_dotted_pair:
   794 000001D3 202E2000                	db ` . \0`
   795                                  fmt_rparen:
   796 000001D7 2900                    	db `)\0`
   797                                  fmt_space:
   798 000001D9 2000                    	db ` \0`
   799                                  fmt_empty_vector:
   800 000001DB 23282900                	db `#()\0`
   801                                  fmt_vector:
   802 000001DF 232800                  	db `#(\0`
   803                                  fmt_real:
   804 000001E2 256600                  	db `%f\0`
   805                                  fmt_fraction:
   806 000001E5 256C642F256C6400        	db `%ld/%ld\0`
   807                                  fmt_zero:
   808 000001ED 3000                    	db `0\0`
   809                                  fmt_int:
   810 000001EF 256C6400                	db `%ld\0`
   811                                  fmt_unknown_sexpr_error:
   812 000001F3 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   812 000001FC 6F723A20556E6B6E6F-
   812 00000205 776E2074797065206F-
   812 0000020E 662073657870722028-
   812 00000217 3078253032582920   
   813 0000021F 617420616464726573-     	db `at address 0x%08X\n\n\0`
   813 00000228 73203078253038580A-
   813 00000231 0A00               
   814                                  fmt_dquote:
   815 00000233 2200                    	db `\"\0`
   816                                  fmt_string_char:
   817 00000235 256300                          db `%c\0`
   818                                  fmt_string_char_7:
   819 00000238 5C6100                          db `\\a\0`
   820                                  fmt_string_char_8:
   821 0000023B 5C6200                          db `\\b\0`
   822                                  fmt_string_char_9:
   823 0000023E 5C7400                          db `\\t\0`
   824                                  fmt_string_char_10:
   825 00000241 5C6E00                          db `\\n\0`
   826                                  fmt_string_char_11:
   827 00000244 5C7600                          db `\\v\0`
   828                                  fmt_string_char_12:
   829 00000247 5C6600                          db `\\f\0`
   830                                  fmt_string_char_13:
   831 0000024A 5C7200                          db `\\r\0`
   832                                  fmt_string_char_34:
   833 0000024D 5C2200                          db `\\"\0`
   834                                  fmt_string_char_92:
   835 00000250 5C5C00                          db `\\\\\0`
   836                                  fmt_string_char_hex:
   837 00000253 5C7825583B00                    db `\\x%X;\0`
   838                                  
   839                                  section .text
   840                                  
   841                                  print_sexpr:
   842                                  	ENTER
   842 0000081B C8000000            <1>  enter 0, 0
   842 0000081F 4883E4F0            <1>  and rsp, ~15
   843 00000823 8A07                    	mov al, byte [rdi]
   844 00000825 3C00                    	cmp al, T_void
   845 00000827 744D                    	je .Lvoid
   846 00000829 3C01                    	cmp al, T_nil
   847 0000082B 7458                    	je .Lnil
   848 0000082D 3C09                    	cmp al, T_boolean_false
   849 0000082F 7463                    	je .Lboolean_false
   850 00000831 3C0A                    	cmp al, T_boolean_true
   851 00000833 746E                    	je .Lboolean_true
   852 00000835 3C02                    	cmp al, T_char
   853 00000837 7479                    	je .Lchar
   854 00000839 3C04                    	cmp al, T_symbol
   855 0000083B 0F84BB010000            	je .Lsymbol
   856 00000841 3C21                    	cmp al, T_pair
   857 00000843 0F84D6010000            	je .Lpair
   858 00000849 3C22                    	cmp al, T_vector
   859 0000084B 0F849F020000            	je .Lvector
   860 00000851 3C05                    	cmp al, T_closure
   861 00000853 0F8489010000            	je .Lclosure
   862 00000859 3C12                    	cmp al, T_real
   863 0000085B 0F8430030000            	je .Lreal
   864 00000861 3C11                    	cmp al, T_rational
   865 00000863 0F8456030000            	je .Lrational
   866 00000869 3C03                    	cmp al, T_string
   867 0000086B 0F848F030000            	je .Lstring
   868                                  
   869 00000871 E9C7040000              	jmp .Lunknown_sexpr_type
   870                                  
   871                                  .Lvoid:
   872 00000876 48BF-                   	mov rdi, fmt_void
   872 00000878 [3801000000000000] 
   873 00000880 E9F5040000              	jmp .Lemit
   874                                  
   875                                  .Lnil:
   876 00000885 48BF-                   	mov rdi, fmt_nil
   876 00000887 [4001000000000000] 
   877 0000088F E9E6040000              	jmp .Lemit
   878                                  
   879                                  .Lboolean_false:
   880 00000894 48BF-                   	mov rdi, fmt_boolean_false
   880 00000896 [4301000000000000] 
   881 0000089E E9D7040000              	jmp .Lemit
   882                                  
   883                                  .Lboolean_true:
   884 000008A3 48BF-                   	mov rdi, fmt_boolean_true
   884 000008A5 [4601000000000000] 
   885 000008AD E9C8040000              	jmp .Lemit
   886                                  
   887                                  .Lchar:
   888 000008B2 8A4701                  	mov al, byte [rdi + 1]
   889 000008B5 3C20                    	cmp al, ' '
   890 000008B7 7E28                    	jle .Lchar_whitespace
   891 000008B9 3C5C                    	cmp al, 92 		; backslash
   892 000008BB 0F847C000000            	je .Lchar_backslash
   893 000008C1 3C22                    	cmp al, '"'
   894 000008C3 0F8483000000            	je .Lchar_dquote
   895 000008C9 4825FF000000            	and rax, 255
   896 000008CF 48BF-                   	mov rdi, fmt_char_simple
   896 000008D1 [5101000000000000] 
   897 000008D9 4889C6                  	mov rsi, rax
   898 000008DC E999040000              	jmp .Lemit
   899                                  
   900                                  .Lchar_whitespace:
   901 000008E1 3C00                    	cmp al, 0
   902 000008E3 7476                    	je .Lchar_null
   903 000008E5 3C07                    	cmp al, 7
   904 000008E7 0F847D000000            	je .Lchar_bell
   905 000008ED 3C08                    	cmp al, 8
   906 000008EF 0F8484000000            	je .Lchar_backspace
   907 000008F5 3C09                    	cmp al, 9
   908 000008F7 0F848B000000            	je .Lchar_tab
   909 000008FD 3C0A                    	cmp al, 10
   910 000008FF 0F8492000000            	je .Lchar_newline
   911 00000905 3C0C                    	cmp al, 12
   912 00000907 0F8499000000            	je .Lchar_formfeed
   913 0000090D 3C0D                    	cmp al, 13
   914 0000090F 0F84A0000000            	je .Lchar_return
   915 00000915 3C1B                    	cmp al, 27
   916 00000917 0F84A7000000            	je .Lchar_escape
   917 0000091D 4825FF000000            	and rax, 255
   918 00000923 3C20                    	cmp al, ' '
   919 00000925 0F84A8000000            	je .Lchar_space
   920 0000092B 48BF-                   	mov rdi, fmt_char_hex
   920 0000092D [9D01000000000000] 
   921 00000935 4889C6                  	mov rsi, rax
   922 00000938 E93D040000              	jmp .Lemit	
   923                                  
   924                                  .Lchar_backslash:
   925 0000093D 48BF-                   	mov rdi, fmt_char_backslash
   925 0000093F [4901000000000000] 
   926 00000947 E92E040000              	jmp .Lemit
   927                                  
   928                                  .Lchar_dquote:
   929 0000094C 48BF-                   	mov rdi, fmt_char_dquote
   929 0000094E [4D01000000000000] 
   930 00000956 E91F040000              	jmp .Lemit
   931                                  
   932                                  .Lchar_null:
   933 0000095B 48BF-                   	mov rdi, fmt_char_null
   933 0000095D [5601000000000000] 
   934 00000965 E910040000              	jmp .Lemit
   935                                  
   936                                  .Lchar_bell:
   937 0000096A 48BF-                   	mov rdi, fmt_char_bell
   937 0000096C [5C01000000000000] 
   938 00000974 E901040000              	jmp .Lemit
   939                                  
   940                                  .Lchar_backspace:
   941 00000979 48BF-                   	mov rdi, fmt_char_backspace
   941 0000097B [6301000000000000] 
   942 00000983 E9F2030000              	jmp .Lemit
   943                                  
   944                                  .Lchar_tab:
   945 00000988 48BF-                   	mov rdi, fmt_char_tab
   945 0000098A [6F01000000000000] 
   946 00000992 E9E3030000              	jmp .Lemit
   947                                  
   948                                  .Lchar_newline:
   949 00000997 48BF-                   	mov rdi, fmt_char_newline
   949 00000999 [7501000000000000] 
   950 000009A1 E9D4030000              	jmp .Lemit
   951                                  
   952                                  .Lchar_formfeed:
   953 000009A6 48BF-                   	mov rdi, fmt_char_formfeed
   953 000009A8 [7F01000000000000] 
   954 000009B0 E9C5030000              	jmp .Lemit
   955                                  
   956                                  .Lchar_return:
   957 000009B5 48BF-                   	mov rdi, fmt_char_return
   957 000009B7 [8601000000000000] 
   958 000009BF E9B6030000              	jmp .Lemit
   959                                  
   960                                  .Lchar_escape:
   961 000009C4 48BF-                   	mov rdi, fmt_char_escape
   961 000009C6 [8F01000000000000] 
   962 000009CE E9A7030000              	jmp .Lemit
   963                                  
   964                                  .Lchar_space:
   965 000009D3 48BF-                   	mov rdi, fmt_char_space
   965 000009D5 [9501000000000000] 
   966 000009DD E998030000              	jmp .Lemit
   967                                  
   968                                  .Lclosure:
   969 000009E2 4889FE                  	mov rsi, qword rdi
   970 000009E5 48BF-                   	mov rdi, fmt_closure
   970 000009E7 [A501000000000000] 
   971 000009EF 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   972 000009F3 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   973 000009F7 E97E030000              	jmp .Lemit
   974                                  
   975                                  .Lsymbol:
   976 000009FC 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   977 00000A00 BE01000000              	mov rsi, 1		 ; size = 1 byte
   978 00000A05 488B5701                	mov rdx, qword [rdi + 1] ; length
   979 00000A09 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   980 00000A0D 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   981 00000A15 E8(00000000)            	call fwrite
   982 00000A1A E970030000              	jmp .Lend
   983                                  	
   984                                  .Lpair:
   985 00000A1F 57                      	push rdi
   986 00000A20 48BF-                   	mov rdi, fmt_lparen
   986 00000A22 [D101000000000000] 
   987 00000A2A B800000000              	mov rax, 0
   988                                          ENTER
   988 00000A2F C8000000            <1>  enter 0, 0
   988 00000A33 4883E4F0            <1>  and rsp, ~15
   989 00000A37 E8(00000000)            	call printf
   990                                          LEAVE
   990 00000A3C C9                  <1>  leave
   991 00000A3D 488B3C24                	mov rdi, qword [rsp] 	; pair
   992 00000A41 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   993 00000A45 E8D1FDFFFF              	call print_sexpr
   994 00000A4A 5F                      	pop rdi 		; pair
   995 00000A4B 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   996                                  .Lcdr:
   997 00000A4F 8A07                    	mov al, byte [rdi]
   998 00000A51 3C01                    	cmp al, T_nil
   999 00000A53 7447                    	je .Lcdr_nil
  1000 00000A55 3C21                    	cmp al, T_pair
  1001 00000A57 7462                    	je .Lcdr_pair
  1002 00000A59 57                      	push rdi
  1003 00000A5A 48BF-                   	mov rdi, fmt_dotted_pair
  1003 00000A5C [D301000000000000] 
  1004 00000A64 B800000000              	mov rax, 0
  1005                                  	ENTER
  1005 00000A69 C8000000            <1>  enter 0, 0
  1005 00000A6D 4883E4F0            <1>  and rsp, ~15
  1006 00000A71 E8(00000000)            	call printf
  1007                                  	LEAVE
  1007 00000A76 C9                  <1>  leave
  1008 00000A77 5F                      	pop rdi
  1009 00000A78 E89EFDFFFF              	call print_sexpr
  1010 00000A7D 48BF-                   	mov rdi, fmt_rparen
  1010 00000A7F [D701000000000000] 
  1011 00000A87 B800000000              	mov rax, 0
  1012                                  	ENTER
  1012 00000A8C C8000000            <1>  enter 0, 0
  1012 00000A90 4883E4F0            <1>  and rsp, ~15
  1013 00000A94 E8(00000000)            	call printf
  1014                                  	LEAVE
  1014 00000A99 C9                  <1>  leave
  1015                                  	LEAVE
  1015 00000A9A C9                  <1>  leave
  1016 00000A9B C3                      	ret
  1017                                  
  1018                                  .Lcdr_nil:
  1019 00000A9C 48BF-                   	mov rdi, fmt_rparen
  1019 00000A9E [D701000000000000] 
  1020 00000AA6 B800000000              	mov rax, 0
  1021                                  	ENTER
  1021 00000AAB C8000000            <1>  enter 0, 0
  1021 00000AAF 4883E4F0            <1>  and rsp, ~15
  1022 00000AB3 E8(00000000)            	call printf
  1023                                  	LEAVE
  1023 00000AB8 C9                  <1>  leave
  1024                                  	LEAVE
  1024 00000AB9 C9                  <1>  leave
  1025 00000ABA C3                      	ret
  1026                                  
  1027                                  .Lcdr_pair:
  1028 00000ABB 57                      	push rdi
  1029 00000ABC 48BF-                   	mov rdi, fmt_space
  1029 00000ABE [D901000000000000] 
  1030 00000AC6 B800000000              	mov rax, 0
  1031                                  	ENTER
  1031 00000ACB C8000000            <1>  enter 0, 0
  1031 00000ACF 4883E4F0            <1>  and rsp, ~15
  1032 00000AD3 E8(00000000)            	call printf
  1033                                  	LEAVE
  1033 00000AD8 C9                  <1>  leave
  1034 00000AD9 488B3C24                	mov rdi, qword [rsp]
  1035 00000ADD 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1036 00000AE1 E835FDFFFF              	call print_sexpr
  1037 00000AE6 5F                      	pop rdi
  1038 00000AE7 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1039 00000AEB E95FFFFFFF              	jmp .Lcdr
  1040                                  
  1041                                  .Lvector:
  1042 00000AF0 488B4701                	mov rax, qword [rdi + 1] ; length
  1043 00000AF4 4883F800                	cmp rax, 0
  1044 00000AF8 0F8484000000            	je .Lvector_empty
  1045 00000AFE 57                      	push rdi
  1046 00000AFF 48BF-                   	mov rdi, fmt_vector
  1046 00000B01 [DF01000000000000] 
  1047 00000B09 B800000000              	mov rax, 0
  1048                                  	ENTER
  1048 00000B0E C8000000            <1>  enter 0, 0
  1048 00000B12 4883E4F0            <1>  and rsp, ~15
  1049 00000B16 E8(00000000)            	call printf
  1050                                  	LEAVE
  1050 00000B1B C9                  <1>  leave
  1051 00000B1C 488B3C24                	mov rdi, qword [rsp]
  1052 00000B20 FF7701                  	push qword [rdi + 1]
  1053 00000B23 6A01                    	push 1
  1054 00000B25 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  1055 00000B29 E8EDFCFFFF              	call print_sexpr
  1056                                  .Lvector_loop:
  1057                                  	; [rsp] index
  1058                                  	; [rsp + 8*1] limit
  1059                                  	; [rsp + 8*2] vector
  1060 00000B2E 488B0424                	mov rax, qword [rsp]
  1061 00000B32 483B442408              	cmp rax, qword [rsp + 8*1]
  1062 00000B37 7436                    	je .Lvector_end
  1063 00000B39 48BF-                   	mov rdi, fmt_space
  1063 00000B3B [D901000000000000] 
  1064 00000B43 B800000000              	mov rax, 0
  1065                                  	ENTER
  1065 00000B48 C8000000            <1>  enter 0, 0
  1065 00000B4C 4883E4F0            <1>  and rsp, ~15
  1066 00000B50 E8(00000000)            	call printf
  1067                                  	LEAVE
  1067 00000B55 C9                  <1>  leave
  1068 00000B56 488B0424                	mov rax, qword [rsp]
  1069 00000B5A 488B5C2410              	mov rbx, qword [rsp + 8*2]
  1070 00000B5F 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  1071 00000B64 E8B2FCFFFF              	call print_sexpr
  1072 00000B69 48FF0424                	inc qword [rsp]
  1073 00000B6D EBBF                    	jmp .Lvector_loop
  1074                                  
  1075                                  .Lvector_end:
  1076 00000B6F 4883C418                	add rsp, 8*3
  1077 00000B73 48BF-                   	mov rdi, fmt_rparen
  1077 00000B75 [D701000000000000] 
  1078 00000B7D E9F8010000              	jmp .Lemit	
  1079                                  
  1080                                  .Lvector_empty:
  1081 00000B82 48BF-                   	mov rdi, fmt_empty_vector
  1081 00000B84 [DB01000000000000] 
  1082 00000B8C E9E9010000              	jmp .Lemit
  1083                                  
  1084                                  .Lreal:
  1085 00000B91 FF7701                  	push qword [rdi + 1]
  1086 00000B94 F20F100424              	movsd xmm0, qword [rsp]
  1087 00000B99 4883C408                	add rsp, 8*1
  1088 00000B9D 48BF-                   	mov rdi, fmt_real
  1088 00000B9F [E201000000000000] 
  1089 00000BA7 B801000000              	mov rax, 1
  1090                                  	ENTER
  1090 00000BAC C8000000            <1>  enter 0, 0
  1090 00000BB0 4883E4F0            <1>  and rsp, ~15
  1091 00000BB4 E8(00000000)            	call printf
  1092                                  	LEAVE
  1092 00000BB9 C9                  <1>  leave
  1093 00000BBA E9D0010000              	jmp .Lend
  1094                                  
  1095                                  .Lrational:
  1096 00000BBF 488B7701                	mov rsi, qword [rdi + 1]
  1097 00000BC3 488B5709                	mov rdx, qword [rdi + 1 + 8]
  1098 00000BC7 4883FE00                	cmp rsi, 0
  1099 00000BCB 7415                    	je .Lrat_zero
  1100 00000BCD 4883FA01                	cmp rdx, 1
  1101 00000BD1 741E                    	je .Lrat_int
  1102 00000BD3 48BF-                   	mov rdi, fmt_fraction
  1102 00000BD5 [E501000000000000] 
  1103 00000BDD E998010000              	jmp .Lemit
  1104                                  
  1105                                  .Lrat_zero:
  1106 00000BE2 48BF-                   	mov rdi, fmt_zero
  1106 00000BE4 [ED01000000000000] 
  1107 00000BEC E989010000              	jmp .Lemit
  1108                                  
  1109                                  .Lrat_int:
  1110 00000BF1 48BF-                   	mov rdi, fmt_int
  1110 00000BF3 [EF01000000000000] 
  1111 00000BFB E97A010000              	jmp .Lemit
  1112                                  
  1113                                  .Lstring:
  1114 00000C00 488D4709                	lea rax, [rdi + 1 + 8]
  1115 00000C04 50                      	push rax
  1116 00000C05 FF7701                  	push qword [rdi + 1]
  1117 00000C08 48BF-                   	mov rdi, fmt_dquote
  1117 00000C0A [3302000000000000] 
  1118 00000C12 B800000000              	mov rax, 0
  1119                                  	ENTER
  1119 00000C17 C8000000            <1>  enter 0, 0
  1119 00000C1B 4883E4F0            <1>  and rsp, ~15
  1120 00000C1F E8(00000000)            	call printf
  1121                                  	LEAVE
  1121 00000C24 C9                  <1>  leave
  1122                                  .Lstring_loop:
  1123                                  	; qword [rsp]: limit
  1124                                  	; qword [rsp + 8*1]: char *
  1125 00000C25 48833C2400              	cmp qword [rsp], 0
  1126 00000C2A 0F84FD000000            	je .Lstring_end
  1127 00000C30 488B442408              	mov rax, qword [rsp + 8*1]
  1128 00000C35 8A00                    	mov al, byte [rax]
  1129 00000C37 4825FF000000            	and rax, 255
  1130 00000C3D 3C07                    	cmp al, 7
  1131 00000C3F 7468                            je .Lstring_char_7
  1132 00000C41 3C08                            cmp al, 8
  1133 00000C43 7470                            je .Lstring_char_8
  1134 00000C45 3C09                            cmp al, 9
  1135 00000C47 7478                            je .Lstring_char_9
  1136 00000C49 3C0A                            cmp al, 10
  1137 00000C4B 0F847C000000                    je .Lstring_char_10
  1138 00000C51 3C0B                            cmp al, 11
  1139 00000C53 0F8480000000                    je .Lstring_char_11
  1140 00000C59 3C0C                            cmp al, 12
  1141 00000C5B 0F8484000000                    je .Lstring_char_12
  1142 00000C61 3C0D                            cmp al, 13
  1143 00000C63 0F8488000000                    je .Lstring_char_13
  1144 00000C69 3C22                            cmp al, 34
  1145 00000C6B 0F848C000000                    je .Lstring_char_34
  1147 00000C71 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1148 00000C73 3C20                            cmp al, ' '
  1149 00000C75 0F8CA0000000                    jl .Lstring_char_hex
  1150 00000C7B 48BF-                           mov rdi, fmt_string_char
  1150 00000C7D [3502000000000000] 
  1151 00000C85 4889C6                          mov rsi, rax
  1152                                  .Lstring_char_emit:
  1153 00000C88 B800000000                      mov rax, 0
  1154                                          ENTER
  1154 00000C8D C8000000            <1>  enter 0, 0
  1154 00000C91 4883E4F0            <1>  and rsp, ~15
  1155 00000C95 E8(00000000)                    call printf
  1156                                          LEAVE
  1156 00000C9A C9                  <1>  leave
  1157 00000C9B 48FF0C24                        dec qword [rsp]
  1158 00000C9F 48FF442408                      inc qword [rsp + 8*1]
  1159 00000CA4 E97CFFFFFF                      jmp .Lstring_loop
  1160                                  
  1161                                  .Lstring_char_7:
  1162 00000CA9 48BF-                           mov rdi, fmt_string_char_7
  1162 00000CAB [3802000000000000] 
  1163 00000CB3 EBD3                            jmp .Lstring_char_emit
  1164                                  
  1165                                  .Lstring_char_8:
  1166 00000CB5 48BF-                           mov rdi, fmt_string_char_8
  1166 00000CB7 [3B02000000000000] 
  1167 00000CBF EBC7                            jmp .Lstring_char_emit
  1168                                          
  1169                                  .Lstring_char_9:
  1170 00000CC1 48BF-                           mov rdi, fmt_string_char_9
  1170 00000CC3 [3E02000000000000] 
  1171 00000CCB EBBB                            jmp .Lstring_char_emit
  1172                                  
  1173                                  .Lstring_char_10:
  1174 00000CCD 48BF-                           mov rdi, fmt_string_char_10
  1174 00000CCF [4102000000000000] 
  1175 00000CD7 EBAF                            jmp .Lstring_char_emit
  1176                                  
  1177                                  .Lstring_char_11:
  1178 00000CD9 48BF-                           mov rdi, fmt_string_char_11
  1178 00000CDB [4402000000000000] 
  1179 00000CE3 EBA3                            jmp .Lstring_char_emit
  1180                                  
  1181                                  .Lstring_char_12:
  1182 00000CE5 48BF-                           mov rdi, fmt_string_char_12
  1182 00000CE7 [4702000000000000] 
  1183 00000CEF EB97                            jmp .Lstring_char_emit
  1184                                  
  1185                                  .Lstring_char_13:
  1186 00000CF1 48BF-                           mov rdi, fmt_string_char_13
  1186 00000CF3 [4A02000000000000] 
  1187 00000CFB EB8B                            jmp .Lstring_char_emit
  1188                                  
  1189                                  .Lstring_char_34:
  1190 00000CFD 48BF-                           mov rdi, fmt_string_char_34
  1190 00000CFF [4D02000000000000] 
  1191 00000D07 E97CFFFFFF                      jmp .Lstring_char_emit
  1192                                  
  1193                                  .Lstring_char_92:
  1194 00000D0C 48BF-                           mov rdi, fmt_string_char_92
  1194 00000D0E [5002000000000000] 
  1195 00000D16 E96DFFFFFF                      jmp .Lstring_char_emit
  1196                                  
  1197                                  .Lstring_char_hex:
  1198 00000D1B 48BF-                           mov rdi, fmt_string_char_hex
  1198 00000D1D [5302000000000000] 
  1199 00000D25 4889C6                          mov rsi, rax
  1200 00000D28 E95BFFFFFF                      jmp .Lstring_char_emit        
  1201                                  
  1202                                  .Lstring_end:
  1203 00000D2D 4883C410                	add rsp, 8 * 2
  1204 00000D31 48BF-                   	mov rdi, fmt_dquote
  1204 00000D33 [3302000000000000] 
  1205 00000D3B EB3D                    	jmp .Lemit
  1206                                  
  1207                                  .Lunknown_sexpr_type:
  1208 00000D3D 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1208 00000D3F [F301000000000000] 
  1209 00000D47 4825FF000000            	and rax, 255
  1210 00000D4D 4889C2                  	mov rdx, rax
  1211 00000D50 4889F9                  	mov rcx, rdi
  1212 00000D53 488B3C25[00000000]      	mov rdi, qword [stderr]
  1213 00000D5B B800000000              	mov rax, 0
  1214                                  	ENTER
  1214 00000D60 C8000000            <1>  enter 0, 0
  1214 00000D64 4883E4F0            <1>  and rsp, ~15
  1215 00000D68 E8(00000000)            	call fprintf
  1216                                  	LEAVE
  1216 00000D6D C9                  <1>  leave
  1217 00000D6E 48C7C0FFFFFFFF          	mov rax, -1
  1218 00000D75 E8(00000000)            	call exit
  1219                                  
  1220                                  .Lemit:
  1221 00000D7A B800000000              	mov rax, 0
  1222                                  	ENTER
  1222 00000D7F C8000000            <1>  enter 0, 0
  1222 00000D83 4883E4F0            <1>  and rsp, ~15
  1223 00000D87 E8(00000000)            	call printf
  1224                                  	LEAVE
  1224 00000D8C C9                  <1>  leave
  1225 00000D8D EB00                    	jmp .Lend
  1226                                  
  1227                                  .Lend:
  1228                                  	LEAVE
  1228 00000D8F C9                  <1>  leave
  1229 00000D90 C3                      	ret
  1230                                  
  1231                                  ;;; rdi: address of free variable
  1232                                  ;;; rsi: address of code-pointer
  1233                                  bind_primitive:
  1234                                          ENTER
  1234 00000D91 C8000000            <1>  enter 0, 0
  1234 00000D95 4883E4F0            <1>  and rsp, ~15
  1235 00000D99 57                              push rdi
  1236 00000D9A BF11000000                      mov rdi, (1 + 8 + 8)
  1237 00000D9F E85CFAFFFF                      call malloc
  1238 00000DA4 5F                              pop rdi
  1239 00000DA5 C60005                          mov byte [rax], T_closure
  1240 00000DA8 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1241 00000DB0 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1242 00000DB4 488907                          mov qword [rdi], rax
  1243                                          LEAVE
  1243 00000DB7 C9                  <1>  leave
  1244 00000DB8 C3                              ret
  1245                                  
  1246                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1247                                  L_code_ptr_bin_apply:
  1248                                  ;         ENTER
  1249                                  ;         cmp COUNT, 2
  1250                                  ;         jne L_error_arg_count_2
  1251                                  
  1252                                  ;         mov r11, 0                                              ; init args_counter with 0
  1253                                  
  1254                                  ;         ;; push all args that in the list
  1255                                  
  1256                                  ;         mov r9, qword PARAM(1)                                  ; r9 <- args_list
  1257                                  ;         ; assert_pair(r9)
  1258                                  ;         cmp byte [r9], T_nil 
  1259                                  ;         je .L_error_with_args_count
  1260                                  
  1261                                  
  1262                                  ;         assert_pair(r9)                                         ;
  1263                                  ;         mov rcx, qword SOB_PAIR_CAR(r9)                         ; rcx <- car(args_list)
  1264                                  ;         push rcx                                                ; push first arg to stack
  1265                                  
  1266                                  ;         mov r11, (r11 +1)                                      ; increament args_counter
  1267                                          
  1268                                  
  1269                                  ;         assert_pair(r9)
  1270                                  ;         mov rcx, qword SOB_PAIR_CDR(r9)                         ; rcx <- rest of the list
  1271                                  ;         mov r9, qword rcx                                       ; r9 <- rest of the list
  1272                                          
  1273                                  ;         cmp byte [r9], T_nil                                    ; check if rest of the list is empty
  1274                                  ;         je .L_error_with_args_count                             ; if empty go to args error, have to be at least 2
  1275                                          
  1276                                  ; .L_list_is_not_done:
  1277                                  
  1278                                  ;         assert_pair(r9)
  1279                                  ;         mov rcx, qword SOB_PAIR_CAR(r9)                         ; rcx <- car of rest of the list
  1280                                  ;         push rcx                                                ; push arg
  1281                                  
  1282                                  ;         mov r11, (r11 + 1)                                      ; args_counter++
  1283                                  
  1284                                  ;         assert_pair(r9)
  1285                                  ;         mov rcx, qword SOB_PAIR_CDR(r9)                         ; rcx <- rest of rest of the list
  1286                                  ;         mov r9, qword rcx                                       ; r9 <- rest of rest of the list
  1287                                  
  1288                                  ;         cmp byte [r9], T_nil                                    ; check if rest of the list is empty
  1289                                  ;         jne .L_list_is_not_done 
  1290                                  
  1291                                  ; .L_list_is_done:
  1292                                          
  1293                                  ;         push r11                                                ; push num_of_args
  1294                                  
  1295                                  ;         ; invriant: r9 has the proc code
  1296                                  ;         mov r9, qword PARAM(0)                                  ; arg_proc to r9
  1297                                  ;         cmp byte [rax], T_closure                               ;  is it a closure? 
  1298                                  ;         jne L_error_non_closure                                 ; if not closure jmp kibinimat
  1299                                  
  1300                                  ;         mov r10, SOB_CLOSURE_ENV(r9)                            ; get proc env
  1301                                  ;         push r10                                                ; push closure env to stack
  1302                                  
  1303                                  
  1304                                  ;         ; ??? need to push retaddress, which is it ???
  1305                                  ;         ; ??? need to think about rbp ???
  1306                                  
  1307                                  ;         ;get proc code and jmp
  1308                                  ;         mov r9, qword PARAM(0)                                  ; arg_proc to r9
  1309                                  ;         mov r10, SOB_CLOSURE_CODE(r9)
  1310                                  ;         jmp r10               
  1311                                  	
  1312                                  L_code_ptr_is_null:
  1313                                          ENTER
  1313 00000DB9 C8000000            <1>  enter 0, 0
  1313 00000DBD 4883E4F0            <1>  and rsp, ~15
  1314 00000DC1 48837D1801                      cmp COUNT, 1
  1315 00000DC6 0F85A5100000                    jne L_error_arg_count_1
  1316 00000DCC 488B4520                        mov rax, PARAM(0)
  1317 00000DD0 803801                          cmp byte [rax], T_nil
  1318 00000DD3 750C                            jne .L_false
  1319 00000DD5 48B8-                           mov rax, sob_boolean_true
  1319 00000DD7 [0300000000000000] 
  1320 00000DDF EB0A                            jmp .L_end
  1321                                  .L_false:
  1322 00000DE1 48B8-                           mov rax, sob_boolean_false
  1322 00000DE3 [0200000000000000] 
  1323                                  .L_end:
  1324                                          LEAVE
  1324 00000DEB C9                  <1>  leave
  1325 00000DEC C21800                          ret AND_KILL_FRAME(1)
  1326                                  
  1327                                  L_code_ptr_is_pair:
  1328                                          ENTER
  1328 00000DEF C8000000            <1>  enter 0, 0
  1328 00000DF3 4883E4F0            <1>  and rsp, ~15
  1329 00000DF7 48837D1801                      cmp COUNT, 1
  1330 00000DFC 0F856F100000                    jne L_error_arg_count_1
  1331 00000E02 488B4520                        mov rax, PARAM(0)
  1332 00000E06 803821                          cmp byte [rax], T_pair
  1333 00000E09 750C                            jne .L_false
  1334 00000E0B 48B8-                           mov rax, sob_boolean_true
  1334 00000E0D [0300000000000000] 
  1335 00000E15 EB0A                            jmp .L_end
  1336                                  .L_false:
  1337 00000E17 48B8-                           mov rax, sob_boolean_false
  1337 00000E19 [0200000000000000] 
  1338                                  .L_end:
  1339                                          LEAVE
  1339 00000E21 C9                  <1>  leave
  1340 00000E22 C21800                          ret AND_KILL_FRAME(1)
  1341                                          
  1342                                  L_code_ptr_is_void:
  1343                                          ENTER
  1343 00000E25 C8000000            <1>  enter 0, 0
  1343 00000E29 4883E4F0            <1>  and rsp, ~15
  1344 00000E2D 48837D1801                      cmp COUNT, 1
  1345 00000E32 0F8539100000                    jne L_error_arg_count_1
  1346 00000E38 488B4520                        mov rax, PARAM(0)
  1347 00000E3C 803800                          cmp byte [rax], T_void
  1348 00000E3F 750C                            jne .L_false
  1349 00000E41 48B8-                           mov rax, sob_boolean_true
  1349 00000E43 [0300000000000000] 
  1350 00000E4B EB0A                            jmp .L_end
  1351                                  .L_false:
  1352 00000E4D 48B8-                           mov rax, sob_boolean_false
  1352 00000E4F [0200000000000000] 
  1353                                  .L_end:
  1354                                          LEAVE
  1354 00000E57 C9                  <1>  leave
  1355 00000E58 C21800                          ret AND_KILL_FRAME(1)
  1356                                  
  1357                                  L_code_ptr_is_char:
  1358                                          ENTER
  1358 00000E5B C8000000            <1>  enter 0, 0
  1358 00000E5F 4883E4F0            <1>  and rsp, ~15
  1359 00000E63 48837D1801                      cmp COUNT, 1
  1360 00000E68 0F8503100000                    jne L_error_arg_count_1
  1361 00000E6E 488B4520                        mov rax, PARAM(0)
  1362 00000E72 803802                          cmp byte [rax], T_char
  1363 00000E75 750C                            jne .L_false
  1364 00000E77 48B8-                           mov rax, sob_boolean_true
  1364 00000E79 [0300000000000000] 
  1365 00000E81 EB0A                            jmp .L_end
  1366                                  .L_false:
  1367 00000E83 48B8-                           mov rax, sob_boolean_false
  1367 00000E85 [0200000000000000] 
  1368                                  .L_end:
  1369                                          LEAVE
  1369 00000E8D C9                  <1>  leave
  1370 00000E8E C21800                          ret AND_KILL_FRAME(1)
  1371                                  
  1372                                  L_code_ptr_is_string:
  1373                                          ENTER
  1373 00000E91 C8000000            <1>  enter 0, 0
  1373 00000E95 4883E4F0            <1>  and rsp, ~15
  1374 00000E99 48837D1801                      cmp COUNT, 1
  1375 00000E9E 0F85CD0F0000                    jne L_error_arg_count_1
  1376 00000EA4 488B4520                        mov rax, PARAM(0)
  1377 00000EA8 803803                          cmp byte [rax], T_string
  1378 00000EAB 750C                            jne .L_false
  1379 00000EAD 48B8-                           mov rax, sob_boolean_true
  1379 00000EAF [0300000000000000] 
  1380 00000EB7 EB0A                            jmp .L_end
  1381                                  .L_false:
  1382 00000EB9 48B8-                           mov rax, sob_boolean_false
  1382 00000EBB [0200000000000000] 
  1383                                  .L_end:
  1384                                          LEAVE
  1384 00000EC3 C9                  <1>  leave
  1385 00000EC4 C21800                          ret AND_KILL_FRAME(1)
  1386                                  
  1387                                  L_code_ptr_is_symbol:
  1388                                          ENTER
  1388 00000EC7 C8000000            <1>  enter 0, 0
  1388 00000ECB 4883E4F0            <1>  and rsp, ~15
  1389 00000ECF 48837D1801                      cmp COUNT, 1
  1390 00000ED4 0F85970F0000                    jne L_error_arg_count_1
  1391 00000EDA 488B4520                        mov rax, PARAM(0)
  1392 00000EDE 803804                          cmp byte [rax], T_symbol
  1393 00000EE1 750C                            jne .L_false
  1394 00000EE3 48B8-                           mov rax, sob_boolean_true
  1394 00000EE5 [0300000000000000] 
  1395 00000EED EB0A                            jmp .L_end
  1396                                  .L_false:
  1397 00000EEF 48B8-                           mov rax, sob_boolean_false
  1397 00000EF1 [0200000000000000] 
  1398                                  .L_end:
  1399                                          LEAVE
  1399 00000EF9 C9                  <1>  leave
  1400 00000EFA C21800                          ret AND_KILL_FRAME(1)
  1401                                  
  1402                                  L_code_ptr_is_vector:
  1403                                          ENTER
  1403 00000EFD C8000000            <1>  enter 0, 0
  1403 00000F01 4883E4F0            <1>  and rsp, ~15
  1404 00000F05 48837D1801                      cmp COUNT, 1
  1405 00000F0A 0F85610F0000                    jne L_error_arg_count_1
  1406 00000F10 488B4520                        mov rax, PARAM(0)
  1407 00000F14 803822                          cmp byte [rax], T_vector
  1408 00000F17 750C                            jne .L_false
  1409 00000F19 48B8-                           mov rax, sob_boolean_true
  1409 00000F1B [0300000000000000] 
  1410 00000F23 EB0A                            jmp .L_end
  1411                                  .L_false:
  1412 00000F25 48B8-                           mov rax, sob_boolean_false
  1412 00000F27 [0200000000000000] 
  1413                                  .L_end:
  1414                                          LEAVE
  1414 00000F2F C9                  <1>  leave
  1415 00000F30 C21800                          ret AND_KILL_FRAME(1)
  1416                                  
  1417                                  L_code_ptr_is_closure:
  1418                                          ENTER
  1418 00000F33 C8000000            <1>  enter 0, 0
  1418 00000F37 4883E4F0            <1>  and rsp, ~15
  1419 00000F3B 48837D1801                      cmp COUNT, 1
  1420 00000F40 0F852B0F0000                    jne L_error_arg_count_1
  1421 00000F46 488B4520                        mov rax, PARAM(0)
  1422 00000F4A 803805                          cmp byte [rax], T_closure
  1423 00000F4D 750C                            jne .L_false
  1424 00000F4F 48B8-                           mov rax, sob_boolean_true
  1424 00000F51 [0300000000000000] 
  1425 00000F59 EB0A                            jmp .L_end
  1426                                  .L_false:
  1427 00000F5B 48B8-                           mov rax, sob_boolean_false
  1427 00000F5D [0200000000000000] 
  1428                                  .L_end:
  1429                                          LEAVE
  1429 00000F65 C9                  <1>  leave
  1430 00000F66 C21800                          ret AND_KILL_FRAME(1)
  1431                                  
  1432                                  L_code_ptr_is_real:
  1433                                          ENTER
  1433 00000F69 C8000000            <1>  enter 0, 0
  1433 00000F6D 4883E4F0            <1>  and rsp, ~15
  1434 00000F71 48837D1801                      cmp COUNT, 1
  1435 00000F76 0F85F50E0000                    jne L_error_arg_count_1
  1436 00000F7C 488B4520                        mov rax, PARAM(0)
  1437 00000F80 803812                          cmp byte [rax], T_real
  1438 00000F83 750C                            jne .L_false
  1439 00000F85 48B8-                           mov rax, sob_boolean_true
  1439 00000F87 [0300000000000000] 
  1440 00000F8F EB0A                            jmp .L_end
  1441                                  .L_false:
  1442 00000F91 48B8-                           mov rax, sob_boolean_false
  1442 00000F93 [0200000000000000] 
  1443                                  .L_end:
  1444                                          LEAVE
  1444 00000F9B C9                  <1>  leave
  1445 00000F9C C21800                          ret AND_KILL_FRAME(1)
  1446                                  
  1447                                  L_code_ptr_is_rational:
  1448                                          ENTER
  1448 00000F9F C8000000            <1>  enter 0, 0
  1448 00000FA3 4883E4F0            <1>  and rsp, ~15
  1449 00000FA7 48837D1801                      cmp COUNT, 1
  1450 00000FAC 0F85BF0E0000                    jne L_error_arg_count_1
  1451 00000FB2 488B4520                        mov rax, PARAM(0)
  1452 00000FB6 803811                          cmp byte [rax], T_rational
  1453 00000FB9 750C                            jne .L_false
  1454 00000FBB 48B8-                           mov rax, sob_boolean_true
  1454 00000FBD [0300000000000000] 
  1455 00000FC5 EB0A                            jmp .L_end
  1456                                  .L_false:
  1457 00000FC7 48B8-                           mov rax, sob_boolean_false
  1457 00000FC9 [0200000000000000] 
  1458                                  .L_end:
  1459                                          LEAVE
  1459 00000FD1 C9                  <1>  leave
  1460 00000FD2 C21800                          ret AND_KILL_FRAME(1)
  1461                                  
  1462                                  L_code_ptr_is_boolean:
  1463                                          ENTER
  1463 00000FD5 C8000000            <1>  enter 0, 0
  1463 00000FD9 4883E4F0            <1>  and rsp, ~15
  1464 00000FDD 48837D1801                      cmp COUNT, 1
  1465 00000FE2 0F85890E0000                    jne L_error_arg_count_1
  1466 00000FE8 488B4520                        mov rax, PARAM(0)
  1467 00000FEC 8A18                            mov bl, byte [rax]
  1468 00000FEE 80E308                          and bl, T_boolean
  1469 00000FF1 740C                            je .L_false
  1470 00000FF3 48B8-                           mov rax, sob_boolean_true
  1470 00000FF5 [0300000000000000] 
  1471 00000FFD EB0A                            jmp .L_end
  1472                                  .L_false:
  1473 00000FFF 48B8-                           mov rax, sob_boolean_false
  1473 00001001 [0200000000000000] 
  1474                                  .L_end:
  1475                                          LEAVE
  1475 00001009 C9                  <1>  leave
  1476 0000100A C21800                          ret AND_KILL_FRAME(1)
  1477                                          
  1478                                  L_code_ptr_is_number:
  1479                                          ENTER
  1479 0000100D C8000000            <1>  enter 0, 0
  1479 00001011 4883E4F0            <1>  and rsp, ~15
  1480 00001015 48837D1801                      cmp COUNT, 1
  1481 0000101A 0F85510E0000                    jne L_error_arg_count_1
  1482 00001020 488B4520                        mov rax, PARAM(0)
  1483 00001024 8A18                            mov bl, byte [rax]
  1484 00001026 80E310                          and bl, T_number
  1485 00001029 740C                            je .L_false
  1486 0000102B 48B8-                           mov rax, sob_boolean_true
  1486 0000102D [0300000000000000] 
  1487 00001035 EB0A                            jmp .L_end
  1488                                  .L_false:
  1489 00001037 48B8-                           mov rax, sob_boolean_false
  1489 00001039 [0200000000000000] 
  1490                                  .L_end:
  1491                                          LEAVE
  1491 00001041 C9                  <1>  leave
  1492 00001042 C21800                          ret AND_KILL_FRAME(1)
  1493                                          
  1494                                  L_code_ptr_is_collection:
  1495                                          ENTER
  1495 00001045 C8000000            <1>  enter 0, 0
  1495 00001049 4883E4F0            <1>  and rsp, ~15
  1496 0000104D 48837D1801                      cmp COUNT, 1
  1497 00001052 0F85190E0000                    jne L_error_arg_count_1
  1498 00001058 488B4520                        mov rax, PARAM(0)
  1499 0000105C 8A18                            mov bl, byte [rax]
  1500 0000105E 80E320                          and bl, T_collection
  1501 00001061 740C                            je .L_false
  1502 00001063 48B8-                           mov rax, sob_boolean_true
  1502 00001065 [0300000000000000] 
  1503 0000106D EB0A                            jmp .L_end
  1504                                  .L_false:
  1505 0000106F 48B8-                           mov rax, sob_boolean_false
  1505 00001071 [0200000000000000] 
  1506                                  .L_end:
  1507                                          LEAVE
  1507 00001079 C9                  <1>  leave
  1508 0000107A C21800                          ret AND_KILL_FRAME(1)
  1509                                  
  1510                                  L_code_ptr_cons:
  1511                                          ENTER
  1511 0000107D C8000000            <1>  enter 0, 0
  1511 00001081 4883E4F0            <1>  and rsp, ~15
  1512 00001085 48837D1802                      cmp COUNT, 2
  1513 0000108A 0F85160E0000                    jne L_error_arg_count_2
  1514 00001090 BF11000000                      mov rdi, (1 + 8 + 8)
  1515 00001095 E866F7FFFF                      call malloc
  1516 0000109A C60021                          mov byte [rax], T_pair
  1517 0000109D 488B5D20                        mov rbx, PARAM(0)
  1518 000010A1 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1519 000010A5 488B5D28                        mov rbx, PARAM(1)
  1520 000010A9 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1521                                          LEAVE
  1521 000010AD C9                  <1>  leave
  1522 000010AE C22000                          ret AND_KILL_FRAME(2)
  1523                                  
  1524                                  L_code_ptr_display_sexpr:
  1525                                          ENTER
  1525 000010B1 C8000000            <1>  enter 0, 0
  1525 000010B5 4883E4F0            <1>  and rsp, ~15
  1526 000010B9 48837D1801                      cmp COUNT, 1
  1527 000010BE 0F85AD0D0000                    jne L_error_arg_count_1
  1528 000010C4 488B7D20                        mov rdi, PARAM(0)
  1529 000010C8 E84EF7FFFF                      call print_sexpr
  1530 000010CD 48B8-                           mov rax, sob_void
  1530 000010CF [0000000000000000] 
  1531                                          LEAVE
  1531 000010D7 C9                  <1>  leave
  1532 000010D8 C21800                          ret AND_KILL_FRAME(1)
  1533                                  
  1534                                  L_code_ptr_write_char:
  1535                                          ENTER
  1535 000010DB C8000000            <1>  enter 0, 0
  1535 000010DF 4883E4F0            <1>  and rsp, ~15
  1536 000010E3 48837D1801                      cmp COUNT, 1
  1537 000010E8 0F85830D0000                    jne L_error_arg_count_1
  1538 000010EE 488B4520                        mov rax, PARAM(0)
  1539                                          assert_char(rax)
  1539 000010F2 803802              <1>  cmp byte [%1], %2
  1539 000010F5 0F854A0E0000        <1>  jne L_error_incorrect_type
  1540 000010FB 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1541 000010FE 4825FF000000                    and rax, 255
  1542 00001104 48BF-                           mov rdi, fmt_char
  1542 00001106 [5902000000000000] 
  1543 0000110E 4889C6                          mov rsi, rax
  1544 00001111 B800000000                      mov rax, 0
  1545                                  	ENTER
  1545 00001116 C8000000            <1>  enter 0, 0
  1545 0000111A 4883E4F0            <1>  and rsp, ~15
  1546 0000111E E8(00000000)                    call printf
  1547                                  	LEAVE
  1547 00001123 C9                  <1>  leave
  1548 00001124 48B8-                           mov rax, sob_void
  1548 00001126 [0000000000000000] 
  1549                                          LEAVE
  1549 0000112E C9                  <1>  leave
  1550 0000112F C21800                          ret AND_KILL_FRAME(1)
  1551                                  
  1552                                  L_code_ptr_car:
  1553                                          ENTER
  1553 00001132 C8000000            <1>  enter 0, 0
  1553 00001136 4883E4F0            <1>  and rsp, ~15
  1554 0000113A 48837D1801                      cmp COUNT, 1
  1555 0000113F 0F852C0D0000                    jne L_error_arg_count_1
  1556 00001145 488B4520                        mov rax, PARAM(0)
  1557                                          assert_pair(rax)
  1557 00001149 803821              <1>  cmp byte [%1], %2
  1557 0000114C 0F85F30D0000        <1>  jne L_error_incorrect_type
  1558 00001152 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1559                                          LEAVE
  1559 00001156 C9                  <1>  leave
  1560 00001157 C21800                          ret AND_KILL_FRAME(1)
  1561                                          
  1562                                  L_code_ptr_cdr:
  1563                                          ENTER
  1563 0000115A C8000000            <1>  enter 0, 0
  1563 0000115E 4883E4F0            <1>  and rsp, ~15
  1564 00001162 48837D1801                      cmp COUNT, 1
  1565 00001167 0F85040D0000                    jne L_error_arg_count_1
  1566 0000116D 488B4520                        mov rax, PARAM(0)
  1567                                          assert_pair(rax)
  1567 00001171 803821              <1>  cmp byte [%1], %2
  1567 00001174 0F85CB0D0000        <1>  jne L_error_incorrect_type
  1568 0000117A 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1569                                          LEAVE
  1569 0000117E C9                  <1>  leave
  1570 0000117F C21800                          ret AND_KILL_FRAME(1)
  1571                                          
  1572                                  L_code_ptr_string_length:
  1573                                          ENTER
  1573 00001182 C8000000            <1>  enter 0, 0
  1573 00001186 4883E4F0            <1>  and rsp, ~15
  1574 0000118A 48837D1801                      cmp COUNT, 1
  1575 0000118F 0F85DC0C0000                    jne L_error_arg_count_1
  1576 00001195 488B4520                        mov rax, PARAM(0)
  1577                                          assert_string(rax)
  1577 00001199 803803              <1>  cmp byte [%1], %2
  1577 0000119C 0F85A30D0000        <1>  jne L_error_incorrect_type
  1578 000011A2 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1579 000011A6 E83A0C0000                      call make_integer
  1580                                          LEAVE
  1580 000011AB C9                  <1>  leave
  1581 000011AC C21800                          ret AND_KILL_FRAME(1)
  1582                                  
  1583                                  L_code_ptr_vector_length:
  1584                                          ENTER
  1584 000011AF C8000000            <1>  enter 0, 0
  1584 000011B3 4883E4F0            <1>  and rsp, ~15
  1585 000011B7 48837D1801                      cmp COUNT, 1
  1586 000011BC 0F85AF0C0000                    jne L_error_arg_count_1
  1587 000011C2 488B4520                        mov rax, PARAM(0)
  1588                                          assert_vector(rax)
  1588 000011C6 803822              <1>  cmp byte [%1], %2
  1588 000011C9 0F85760D0000        <1>  jne L_error_incorrect_type
  1589 000011CF 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1590 000011D3 E80D0C0000                      call make_integer
  1591                                          LEAVE
  1591 000011D8 C9                  <1>  leave
  1592 000011D9 C21800                          ret AND_KILL_FRAME(1)
  1593                                  
  1594                                  L_code_ptr_real_to_integer:
  1595                                          ENTER
  1595 000011DC C8000000            <1>  enter 0, 0
  1595 000011E0 4883E4F0            <1>  and rsp, ~15
  1596 000011E4 48837D1801                      cmp COUNT, 1
  1597 000011E9 0F85820C0000                    jne L_error_arg_count_1
  1598 000011EF 488B5D20                        mov rbx, PARAM(0)
  1599                                          assert_real(rbx)
  1599 000011F3 803B12              <1>  cmp byte [%1], %2
  1599 000011F6 0F85490D0000        <1>  jne L_error_incorrect_type
  1600 000011FC F20F104301                      movsd xmm0, qword [rbx + 1]
  1601 00001201 F2480F2CF8                      cvttsd2si rdi, xmm0
  1602 00001206 E8DA0B0000                      call make_integer
  1603                                          LEAVE
  1603 0000120B C9                  <1>  leave
  1604 0000120C C21800                          ret AND_KILL_FRAME(1)
  1605                                  
  1606                                  L_code_ptr_exit:
  1607                                          ENTER
  1607 0000120F C8000000            <1>  enter 0, 0
  1607 00001213 4883E4F0            <1>  and rsp, ~15
  1608 00001217 48837D1800                      cmp COUNT, 0
  1609 0000121C 0F851A0C0000                    jne L_error_arg_count_0
  1610 00001222 B800000000                      mov rax, 0
  1611 00001227 E8(00000000)                    call exit
  1612                                  
  1613                                  L_code_ptr_integer_to_real:
  1614                                          ENTER
  1614 0000122C C8000000            <1>  enter 0, 0
  1614 00001230 4883E4F0            <1>  and rsp, ~15
  1615 00001234 48837D1801                      cmp COUNT, 1
  1616 00001239 0F85320C0000                    jne L_error_arg_count_1
  1617 0000123F 488B4520                        mov rax, PARAM(0)
  1618                                          assert_integer(rax)
  1618                              <1>  assert_rational(%1)
  1618 00001243 803811              <2>  cmp byte [%1], %2
  1618 00001246 0F85F90C0000        <2>  jne L_error_incorrect_type
  1618 0000124C 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
  1618 00001251 0F85EE0C0000        <1>  jne L_error_incorrect_type
  1619 00001257 FF7001                          push qword [rax + 1]
  1620 0000125A F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1621 00001260 E8640B0000                      call make_real
  1622                                          LEAVE
  1622 00001265 C9                  <1>  leave
  1623 00001266 C21800                          ret AND_KILL_FRAME(1)
  1624                                  
  1625                                  L_code_ptr_rational_to_real:
  1626                                          ENTER
  1626 00001269 C8000000            <1>  enter 0, 0
  1626 0000126D 4883E4F0            <1>  and rsp, ~15
  1627 00001271 48837D1801                      cmp COUNT, 1
  1628 00001276 0F85F50B0000                    jne L_error_arg_count_1
  1629 0000127C 488B4520                        mov rax, PARAM(0)
  1630                                          assert_rational(rax)
  1630 00001280 803811              <1>  cmp byte [%1], %2
  1630 00001283 0F85BC0C0000        <1>  jne L_error_incorrect_type
  1631 00001289 FF7001                          push qword [rax + 1]
  1632 0000128C F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1633 00001292 FF7009                          push qword [rax + 1 + 8]
  1634 00001295 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1635 0000129B F20F5EC1                        divsd xmm0, xmm1
  1636 0000129F E8250B0000                      call make_real
  1637                                          LEAVE
  1637 000012A4 C9                  <1>  leave
  1638 000012A5 C21800                          ret AND_KILL_FRAME(1)
  1639                                  
  1640                                  L_code_ptr_char_to_integer:
  1641                                          ENTER
  1641 000012A8 C8000000            <1>  enter 0, 0
  1641 000012AC 4883E4F0            <1>  and rsp, ~15
  1642 000012B0 48837D1801                      cmp COUNT, 1
  1643 000012B5 0F85B60B0000                    jne L_error_arg_count_1
  1644 000012BB 488B4520                        mov rax, PARAM(0)
  1645                                          assert_char(rax)
  1645 000012BF 803802              <1>  cmp byte [%1], %2
  1645 000012C2 0F857D0C0000        <1>  jne L_error_incorrect_type
  1646 000012C8 8A4001                          mov al, byte [rax + 1]
  1647 000012CB 4825FF000000                    and rax, 255
  1648 000012D1 4889C7                          mov rdi, rax
  1649 000012D4 E80C0B0000                      call make_integer
  1650                                          LEAVE
  1650 000012D9 C9                  <1>  leave
  1651 000012DA C21800                          ret AND_KILL_FRAME(1)
  1652                                  
  1653                                  L_code_ptr_integer_to_char:
  1654                                          ENTER
  1654 000012DD C8000000            <1>  enter 0, 0
  1654 000012E1 4883E4F0            <1>  and rsp, ~15
  1655 000012E5 48837D1801                      cmp COUNT, 1
  1656 000012EA 0F85810B0000                    jne L_error_arg_count_1
  1657 000012F0 488B4520                        mov rax, PARAM(0)
  1658                                          assert_integer(rax)
  1658                              <1>  assert_rational(%1)
  1658 000012F4 803811              <2>  cmp byte [%1], %2
  1658 000012F7 0F85480C0000        <2>  jne L_error_incorrect_type
  1658 000012FD 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
  1658 00001302 0F853D0C0000        <1>  jne L_error_incorrect_type
  1659 00001308 488B5801                        mov rbx, qword [rax + 1]
  1660 0000130C 4883FB00                        cmp rbx, 0
  1661 00001310 0F8EF50A0000                    jle L_error_integer_range
  1662 00001316 4881FB00010000                  cmp rbx, 256
  1663 0000131D 0F8DE80A0000                    jge L_error_integer_range
  1664 00001323 BF02000000                      mov rdi, (1 + 1)
  1665 00001328 E8D3F4FFFF                      call malloc
  1666 0000132D C60002                          mov byte [rax], T_char
  1667 00001330 885801                          mov byte [rax + 1], bl
  1668                                          LEAVE
  1668 00001333 C9                  <1>  leave
  1669 00001334 C21800                          ret AND_KILL_FRAME(1)
  1670                                  
  1671                                  L_code_ptr_trng:
  1672                                          ENTER
  1672 00001337 C8000000            <1>  enter 0, 0
  1672 0000133B 4883E4F0            <1>  and rsp, ~15
  1673 0000133F 48837D1800                      cmp COUNT, 0
  1674 00001344 0F85F20A0000                    jne L_error_arg_count_0
  1675 0000134A 480FC7F7                        rdrand rdi
  1676 0000134E 48D1EF                          shr rdi, 1
  1677 00001351 E88F0A0000                      call make_integer
  1678                                          LEAVE
  1678 00001356 C9                  <1>  leave
  1679 00001357 C21000                          ret AND_KILL_FRAME(0)
  1680                                  
  1681                                  L_code_ptr_is_zero:
  1682                                          ENTER
  1682 0000135A C8000000            <1>  enter 0, 0
  1682 0000135E 4883E4F0            <1>  and rsp, ~15
  1683 00001362 48837D1801                      cmp COUNT, 1
  1684 00001367 0F85040B0000                    jne L_error_arg_count_1
  1685 0000136D 488B4520                        mov rax, PARAM(0)
  1686 00001371 803811                          cmp byte [rax], T_rational
  1687 00001374 740A                            je .L_rational
  1688 00001376 803812                          cmp byte [rax], T_real
  1689 00001379 740E                            je .L_real
  1690 0000137B E9C50B0000                      jmp L_error_incorrect_type
  1691                                  .L_rational:
  1692 00001380 4883780100                      cmp qword [rax + 1], 0
  1693 00001385 7420                            je .L_zero
  1694 00001387 EB12                            jmp .L_not_zero
  1695                                  .L_real:
  1696 00001389 660FEFC0                        pxor xmm0, xmm0
  1697 0000138D FF7001                          push qword [rax + 1]
  1698 00001390 F20F100C24                      movsd xmm1, qword [rsp]
  1699 00001395 660F2EC1                        ucomisd xmm0, xmm1
  1700 00001399 740C                            je .L_zero
  1701                                  .L_not_zero:
  1702 0000139B 48B8-                           mov rax, sob_boolean_false
  1702 0000139D [0200000000000000] 
  1703 000013A5 EB0A                            jmp .L_end
  1704                                  .L_zero:
  1705 000013A7 48B8-                           mov rax, sob_boolean_true
  1705 000013A9 [0300000000000000] 
  1706                                  .L_end:
  1707                                          LEAVE
  1707 000013B1 C9                  <1>  leave
  1708 000013B2 C21800                          ret AND_KILL_FRAME(1)
  1709                                  
  1710                                  L_code_ptr_is_integer:
  1711                                          ENTER
  1711 000013B5 C8000000            <1>  enter 0, 0
  1711 000013B9 4883E4F0            <1>  and rsp, ~15
  1712 000013BD 48837D1801                      cmp COUNT, 1
  1713 000013C2 0F85A90A0000                    jne L_error_arg_count_1
  1714 000013C8 488B4520                        mov rax, PARAM(0)
  1715 000013CC 803811                          cmp byte [rax], T_rational
  1716 000013CF 7513                            jne .L_false
  1717 000013D1 4883780901                      cmp qword [rax + 1 + 8], 1
  1718 000013D6 750C                            jne .L_false
  1719 000013D8 48B8-                           mov rax, sob_boolean_true
  1719 000013DA [0300000000000000] 
  1720 000013E2 EB0A                            jmp .L_exit
  1721                                  .L_false:
  1722 000013E4 48B8-                           mov rax, sob_boolean_false
  1722 000013E6 [0200000000000000] 
  1723                                  .L_exit:
  1724                                          LEAVE
  1724 000013EE C9                  <1>  leave
  1725 000013EF C21800                          ret AND_KILL_FRAME(1)
  1726                                  
  1727                                  L_code_ptr_raw_bin_add_rr:
  1728                                          ENTER
  1728 000013F2 C8000000            <1>  enter 0, 0
  1728 000013F6 4883E4F0            <1>  and rsp, ~15
  1729 000013FA 48837D1802                      cmp COUNT, 2
  1730 000013FF 0F85A10A0000                    jne L_error_arg_count_2
  1731 00001405 488B5D20                        mov rbx, PARAM(0)
  1732                                          assert_real(rbx)
  1732 00001409 803B12              <1>  cmp byte [%1], %2
  1732 0000140C 0F85330B0000        <1>  jne L_error_incorrect_type
  1733 00001412 488B4D28                        mov rcx, PARAM(1)
  1734                                          assert_real(rcx)
  1734 00001416 803912              <1>  cmp byte [%1], %2
  1734 00001419 0F85260B0000        <1>  jne L_error_incorrect_type
  1735 0000141F F20F104301                      movsd xmm0, qword [rbx + 1]
  1736 00001424 F20F104901                      movsd xmm1, qword [rcx + 1]
  1737 00001429 F20F58C1                        addsd xmm0, xmm1
  1738 0000142D E897090000                      call make_real
  1739                                          LEAVE
  1739 00001432 C9                  <1>  leave
  1740 00001433 C22000                          ret AND_KILL_FRAME(2)
  1741                                  
  1742                                  L_code_ptr_raw_bin_sub_rr:
  1743                                          ENTER
  1743 00001436 C8000000            <1>  enter 0, 0
  1743 0000143A 4883E4F0            <1>  and rsp, ~15
  1744 0000143E 48837D1802                      cmp COUNT, 2
  1745 00001443 0F855D0A0000                    jne L_error_arg_count_2
  1746 00001449 488B5D20                        mov rbx, PARAM(0)
  1747                                          assert_real(rbx)
  1747 0000144D 803B12              <1>  cmp byte [%1], %2
  1747 00001450 0F85EF0A0000        <1>  jne L_error_incorrect_type
  1748 00001456 488B4D28                        mov rcx, PARAM(1)
  1749                                          assert_real(rcx)
  1749 0000145A 803912              <1>  cmp byte [%1], %2
  1749 0000145D 0F85E20A0000        <1>  jne L_error_incorrect_type
  1750 00001463 F20F104301                      movsd xmm0, qword [rbx + 1]
  1751 00001468 F20F104901                      movsd xmm1, qword [rcx + 1]
  1752 0000146D F20F5CC1                        subsd xmm0, xmm1
  1753 00001471 E853090000                      call make_real
  1754                                          LEAVE
  1754 00001476 C9                  <1>  leave
  1755 00001477 C22000                          ret AND_KILL_FRAME(2)
  1756                                  
  1757                                  L_code_ptr_raw_bin_mul_rr:
  1758                                          ENTER
  1758 0000147A C8000000            <1>  enter 0, 0
  1758 0000147E 4883E4F0            <1>  and rsp, ~15
  1759 00001482 48837D1802                      cmp COUNT, 2
  1760 00001487 0F85190A0000                    jne L_error_arg_count_2
  1761 0000148D 488B5D20                        mov rbx, PARAM(0)
  1762                                          assert_real(rbx)
  1762 00001491 803B12              <1>  cmp byte [%1], %2
  1762 00001494 0F85AB0A0000        <1>  jne L_error_incorrect_type
  1763 0000149A 488B4D28                        mov rcx, PARAM(1)
  1764                                          assert_real(rcx)
  1764 0000149E 803912              <1>  cmp byte [%1], %2
  1764 000014A1 0F859E0A0000        <1>  jne L_error_incorrect_type
  1765 000014A7 F20F104301                      movsd xmm0, qword [rbx + 1]
  1766 000014AC F20F104901                      movsd xmm1, qword [rcx + 1]
  1767 000014B1 F20F59C1                        mulsd xmm0, xmm1
  1768 000014B5 E80F090000                      call make_real
  1769                                          LEAVE
  1769 000014BA C9                  <1>  leave
  1770 000014BB C22000                          ret AND_KILL_FRAME(2)
  1771                                  
  1772                                  L_code_ptr_raw_bin_div_rr:
  1773                                          ENTER
  1773 000014BE C8000000            <1>  enter 0, 0
  1773 000014C2 4883E4F0            <1>  and rsp, ~15
  1774 000014C6 48837D1802                      cmp COUNT, 2
  1775 000014CB 0F85D5090000                    jne L_error_arg_count_2
  1776 000014D1 488B5D20                        mov rbx, PARAM(0)
  1777                                          assert_real(rbx)
  1777 000014D5 803B12              <1>  cmp byte [%1], %2
  1777 000014D8 0F85670A0000        <1>  jne L_error_incorrect_type
  1778 000014DE 488B4D28                        mov rcx, PARAM(1)
  1779                                          assert_real(rcx)
  1779 000014E2 803912              <1>  cmp byte [%1], %2
  1779 000014E5 0F855A0A0000        <1>  jne L_error_incorrect_type
  1780 000014EB F20F104301                      movsd xmm0, qword [rbx + 1]
  1781 000014F0 F20F104901                      movsd xmm1, qword [rcx + 1]
  1782 000014F5 660FEFD2                        pxor xmm2, xmm2
  1783 000014F9 660F2ECA                        ucomisd xmm1, xmm2
  1784 000014FD 0F84730A0000                    je L_error_division_by_zero
  1785 00001503 F20F5EC1                        divsd xmm0, xmm1
  1786 00001507 E8BD080000                      call make_real
  1787                                          LEAVE
  1787 0000150C C9                  <1>  leave
  1788 0000150D C22000                          ret AND_KILL_FRAME(2)
  1789                                  
  1790                                  L_code_ptr_raw_bin_add_qq:
  1791                                          ENTER
  1791 00001510 C8000000            <1>  enter 0, 0
  1791 00001514 4883E4F0            <1>  and rsp, ~15
  1792 00001518 48837D1802                      cmp COUNT, 2
  1793 0000151D 0F8583090000                    jne L_error_arg_count_2
  1794 00001523 4C8B4520                        mov r8, PARAM(0)
  1795                                          assert_rational(r8)
  1795 00001527 41803811            <1>  cmp byte [%1], %2
  1795 0000152B 0F85140A0000        <1>  jne L_error_incorrect_type
  1796 00001531 4C8B4D28                        mov r9, PARAM(1)
  1797                                          assert_rational(r9)
  1797 00001535 41803911            <1>  cmp byte [%1], %2
  1797 00001539 0F85060A0000        <1>  jne L_error_incorrect_type
  1798 0000153F 498B4001                        mov rax, qword [r8 + 1] ; num1
  1799 00001543 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1800 00001547 4899                            cqo
  1801 00001549 48F7EB                          imul rbx
  1802 0000154C 4889C6                          mov rsi, rax
  1803 0000154F 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1804 00001553 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1805 00001557 4899                            cqo
  1806 00001559 48F7EB                          imul rbx
  1807 0000155C 4801C6                          add rsi, rax
  1808 0000155F 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1809 00001563 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1810 00001567 4899                            cqo
  1811 00001569 48F7EB                          imul rbx
  1812 0000156C 4889C7                          mov rdi, rax
  1813 0000156F E827010000                      call normalize_rational
  1814                                          LEAVE
  1814 00001574 C9                  <1>  leave
  1815 00001575 C22000                          ret AND_KILL_FRAME(2)
  1816                                  
  1817                                  L_code_ptr_raw_bin_sub_qq:
  1818                                          ENTER
  1818 00001578 C8000000            <1>  enter 0, 0
  1818 0000157C 4883E4F0            <1>  and rsp, ~15
  1819 00001580 48837D1802                      cmp COUNT, 2
  1820 00001585 0F851B090000                    jne L_error_arg_count_2
  1821 0000158B 4C8B4520                        mov r8, PARAM(0)
  1822                                          assert_rational(r8)
  1822 0000158F 41803811            <1>  cmp byte [%1], %2
  1822 00001593 0F85AC090000        <1>  jne L_error_incorrect_type
  1823 00001599 4C8B4D28                        mov r9, PARAM(1)
  1824                                          assert_rational(r9)
  1824 0000159D 41803911            <1>  cmp byte [%1], %2
  1824 000015A1 0F859E090000        <1>  jne L_error_incorrect_type
  1825 000015A7 498B4001                        mov rax, qword [r8 + 1] ; num1
  1826 000015AB 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1827 000015AF 4899                            cqo
  1828 000015B1 48F7EB                          imul rbx
  1829 000015B4 4889C6                          mov rsi, rax
  1830 000015B7 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1831 000015BB 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1832 000015BF 4899                            cqo
  1833 000015C1 48F7EB                          imul rbx
  1834 000015C4 4829C6                          sub rsi, rax
  1835 000015C7 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1836 000015CB 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1837 000015CF 4899                            cqo
  1838 000015D1 48F7EB                          imul rbx
  1839 000015D4 4889C7                          mov rdi, rax
  1840 000015D7 E8BF000000                      call normalize_rational
  1841                                          LEAVE
  1841 000015DC C9                  <1>  leave
  1842 000015DD C22000                          ret AND_KILL_FRAME(2)
  1843                                  
  1844                                  L_code_ptr_raw_bin_mul_qq:
  1845                                          ENTER
  1845 000015E0 C8000000            <1>  enter 0, 0
  1845 000015E4 4883E4F0            <1>  and rsp, ~15
  1846 000015E8 48837D1802                      cmp COUNT, 2
  1847 000015ED 0F85B3080000                    jne L_error_arg_count_2
  1848 000015F3 4C8B4520                        mov r8, PARAM(0)
  1849                                          assert_rational(r8)
  1849 000015F7 41803811            <1>  cmp byte [%1], %2
  1849 000015FB 0F8544090000        <1>  jne L_error_incorrect_type
  1850 00001601 4C8B4D28                        mov r9, PARAM(1)
  1851                                          assert_rational(r9)
  1851 00001605 41803911            <1>  cmp byte [%1], %2
  1851 00001609 0F8536090000        <1>  jne L_error_incorrect_type
  1852 0000160F 498B4001                        mov rax, qword [r8 + 1] ; num1
  1853 00001613 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1854 00001617 4899                            cqo
  1855 00001619 48F7EB                          imul rbx
  1856 0000161C 4889C6                          mov rsi, rax
  1857 0000161F 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1858 00001623 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1859 00001627 4899                            cqo
  1860 00001629 48F7EB                          imul rbx
  1861 0000162C 4889C7                          mov rdi, rax
  1862 0000162F E867000000                      call normalize_rational
  1863                                          LEAVE
  1863 00001634 C9                  <1>  leave
  1864 00001635 C22000                          ret AND_KILL_FRAME(2)
  1865                                          
  1866                                  L_code_ptr_raw_bin_div_qq:
  1867                                          ENTER
  1867 00001638 C8000000            <1>  enter 0, 0
  1867 0000163C 4883E4F0            <1>  and rsp, ~15
  1868 00001640 48837D1802                      cmp COUNT, 2
  1869 00001645 0F855B080000                    jne L_error_arg_count_2
  1870 0000164B 4C8B4520                        mov r8, PARAM(0)
  1871                                          assert_rational(r8)
  1871 0000164F 41803811            <1>  cmp byte [%1], %2
  1871 00001653 0F85EC080000        <1>  jne L_error_incorrect_type
  1872 00001659 4C8B4D28                        mov r9, PARAM(1)
  1873                                          assert_rational(r9)
  1873 0000165D 41803911            <1>  cmp byte [%1], %2
  1873 00001661 0F85DE080000        <1>  jne L_error_incorrect_type
  1874 00001667 4983790100                      cmp qword [r9 + 1], 0
  1875 0000166C 0F8404090000                    je L_error_division_by_zero
  1876 00001672 498B4001                        mov rax, qword [r8 + 1] ; num1
  1877 00001676 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1878 0000167A 4899                            cqo
  1879 0000167C 48F7EB                          imul rbx
  1880 0000167F 4889C6                          mov rsi, rax
  1881 00001682 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1882 00001686 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1883 0000168A 4899                            cqo
  1884 0000168C 48F7EB                          imul rbx
  1885 0000168F 4889C7                          mov rdi, rax
  1886 00001692 E804000000                      call normalize_rational
  1887                                          LEAVE
  1887 00001697 C9                  <1>  leave
  1888 00001698 C22000                          ret AND_KILL_FRAME(2)
  1889                                          
  1890                                  normalize_rational:
  1891 0000169B 56                              push rsi
  1892 0000169C 57                              push rdi
  1893 0000169D E839000000                      call gcd
  1894 000016A2 4889C3                          mov rbx, rax
  1895 000016A5 58                              pop rax
  1896 000016A6 4899                            cqo
  1897 000016A8 48F7FB                          idiv rbx
  1898 000016AB 4989C0                          mov r8, rax
  1899 000016AE 58                              pop rax
  1900 000016AF 4899                            cqo
  1901 000016B1 48F7FB                          idiv rbx
  1902 000016B4 4989C1                          mov r9, rax
  1903 000016B7 BF11000000                      mov rdi, (1 + 8 + 8)
  1904 000016BC E83FF1FFFF                      call malloc
  1905 000016C1 C60011                          mov byte [rax], T_rational
  1906 000016C4 4C894801                        mov qword [rax + 1], r9
  1907 000016C8 4C894009                        mov qword [rax + 1 + 8], r8
  1908 000016CC C3                              ret
  1909                                  
  1910                                  iabs:
  1911 000016CD 4889F8                          mov rax, rdi
  1912 000016D0 4883F800                        cmp rax, 0
  1913 000016D4 7C01                            jl .Lneg
  1914 000016D6 C3                              ret
  1915                                  .Lneg:
  1916 000016D7 48F7D8                          neg rax
  1917 000016DA C3                              ret
  1918                                  
  1919                                  gcd:
  1920 000016DB E8EDFFFFFF                      call iabs
  1921 000016E0 4889C3                          mov rbx, rax
  1922 000016E3 4889F7                          mov rdi, rsi
  1923 000016E6 E8E2FFFFFF                      call iabs
  1924 000016EB 4883F800                        cmp rax, 0
  1925 000016EF 7502                            jne .L0
  1926 000016F1 4893                            xchg rax, rbx
  1927                                  .L0:
  1928 000016F3 4883FB00                        cmp rbx, 0
  1929 000016F7 740C                            je .L1
  1930 000016F9 4899                            cqo
  1931 000016FB 48F7F3                          div rbx
  1932 000016FE 4889D0                          mov rax, rdx
  1933 00001701 4893                            xchg rax, rbx
  1934 00001703 EBEE                            jmp .L0
  1935                                  .L1:
  1936 00001705 C3                              ret
  1937                                  
  1938                                  L_code_ptr_error:
  1939                                          ENTER
  1939 00001706 C8000000            <1>  enter 0, 0
  1939 0000170A 4883E4F0            <1>  and rsp, ~15
  1940 0000170E 48837D1802                      cmp COUNT, 2
  1941 00001713 0F858D070000                    jne L_error_arg_count_2
  1942 00001719 488B7520                        mov rsi, PARAM(0)
  1943                                          assert_symbol(rsi)
  1943 0000171D 803E04              <1>  cmp byte [%1], %2
  1943 00001720 0F851F080000        <1>  jne L_error_incorrect_type
  1944 00001726 488B7528                        mov rsi, PARAM(1)
  1945                                          assert_string(rsi)
  1945 0000172A 803E03              <1>  cmp byte [%1], %2
  1945 0000172D 0F8512080000        <1>  jne L_error_incorrect_type
  1946 00001733 48BF-                           mov rdi, fmt_scheme_error_part_1
  1946 00001735 [9103000000000000] 
  1947 0000173D B800000000                      mov rax, 0
  1948                                  	ENTER
  1948 00001742 C8000000            <1>  enter 0, 0
  1948 00001746 4883E4F0            <1>  and rsp, ~15
  1949 0000174A E8(00000000)                    call printf
  1950                                  	LEAVE
  1950 0000174F C9                  <1>  leave
  1951 00001750 488B7D20                        mov rdi, PARAM(0)
  1952 00001754 E8C2F0FFFF                      call print_sexpr
  1953 00001759 48BF-                           mov rdi, fmt_scheme_error_part_2
  1953 0000175B [A503000000000000] 
  1954 00001763 B800000000                      mov rax, 0
  1955                                  	ENTER
  1955 00001768 C8000000            <1>  enter 0, 0
  1955 0000176C 4883E4F0            <1>  and rsp, ~15
  1956 00001770 E8(00000000)                    call printf
  1957                                  	LEAVE
  1957 00001775 C9                  <1>  leave
  1958 00001776 488B4528                        mov rax, PARAM(1)       ; sob_string
  1959 0000177A BE01000000                      mov rsi, 1              ; size = 1 byte
  1960 0000177F 488B5001                        mov rdx, qword [rax + 1] ; length
  1961 00001783 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1962 00001787 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1963 0000178F E8(00000000)                    call fwrite
  1964 00001794 48BF-                           mov rdi, fmt_scheme_error_part_3
  1964 00001796 [E703000000000000] 
  1965 0000179E B800000000                      mov rax, 0
  1966                                  	ENTER
  1966 000017A3 C8000000            <1>  enter 0, 0
  1966 000017A7 4883E4F0            <1>  and rsp, ~15
  1967 000017AB E8(00000000)                    call printf
  1968                                  	LEAVE
  1968 000017B0 C9                  <1>  leave
  1969 000017B1 48C7C0F7FFFFFF                  mov rax, -9
  1970 000017B8 E8(00000000)                    call exit
  1971                                  
  1972                                  L_code_ptr_raw_less_than_rr:
  1973                                          ENTER
  1973 000017BD C8000000            <1>  enter 0, 0
  1973 000017C1 4883E4F0            <1>  and rsp, ~15
  1974 000017C5 48837D1802                      cmp COUNT, 2
  1975 000017CA 0F85D6060000                    jne L_error_arg_count_2
  1976 000017D0 488B7520                        mov rsi, PARAM(0)
  1977                                          assert_real(rsi)
  1977 000017D4 803E12              <1>  cmp byte [%1], %2
  1977 000017D7 0F8568070000        <1>  jne L_error_incorrect_type
  1978 000017DD 488B7D28                        mov rdi, PARAM(1)
  1979                                          assert_real(rdi)
  1979 000017E1 803F12              <1>  cmp byte [%1], %2
  1979 000017E4 0F855B070000        <1>  jne L_error_incorrect_type
  1980 000017EA F20F104601                      movsd xmm0, qword [rsi + 1]
  1981 000017EF F20F104F01                      movsd xmm1, qword [rdi + 1]
  1982 000017F4 660F2FC1                        comisd xmm0, xmm1
  1983 000017F8 730C                            jae .L_false
  1984 000017FA 48B8-                           mov rax, sob_boolean_true
  1984 000017FC [0300000000000000] 
  1985 00001804 EB0A                            jmp .L_exit
  1986                                  .L_false:
  1987 00001806 48B8-                           mov rax, sob_boolean_false
  1987 00001808 [0200000000000000] 
  1988                                  .L_exit:
  1989                                          LEAVE
  1989 00001810 C9                  <1>  leave
  1990 00001811 C22000                          ret AND_KILL_FRAME(2)
  1991                                          
  1992                                  L_code_ptr_raw_less_than_qq:
  1993                                          ENTER
  1993 00001814 C8000000            <1>  enter 0, 0
  1993 00001818 4883E4F0            <1>  and rsp, ~15
  1994 0000181C 48837D1802                      cmp COUNT, 2
  1995 00001821 0F857F060000                    jne L_error_arg_count_2
  1996 00001827 488B7520                        mov rsi, PARAM(0)
  1997                                          assert_rational(rsi)
  1997 0000182B 803E11              <1>  cmp byte [%1], %2
  1997 0000182E 0F8511070000        <1>  jne L_error_incorrect_type
  1998 00001834 488B7D28                        mov rdi, PARAM(1)
  1999                                          assert_rational(rdi)
  1999 00001838 803F11              <1>  cmp byte [%1], %2
  1999 0000183B 0F8504070000        <1>  jne L_error_incorrect_type
  2000 00001841 488B4601                        mov rax, qword [rsi + 1] ; num1
  2001 00001845 4899                            cqo
  2002 00001847 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2003 0000184B 4889C1                          mov rcx, rax
  2004 0000184E 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  2005 00001852 4899                            cqo
  2006 00001854 48F76F01                        imul qword [rdi + 1]          ; num2
  2007 00001858 4829C1                          sub rcx, rax
  2008 0000185B 7D0C                            jge .L_false
  2009 0000185D 48B8-                           mov rax, sob_boolean_true
  2009 0000185F [0300000000000000] 
  2010 00001867 EB0A                            jmp .L_exit
  2011                                  .L_false:
  2012 00001869 48B8-                           mov rax, sob_boolean_false
  2012 0000186B [0200000000000000] 
  2013                                  .L_exit:
  2014                                          LEAVE
  2014 00001873 C9                  <1>  leave
  2015 00001874 C22000                          ret AND_KILL_FRAME(2)
  2016                                  
  2017                                  L_code_ptr_raw_equal_rr:
  2018                                          ENTER
  2018 00001877 C8000000            <1>  enter 0, 0
  2018 0000187B 4883E4F0            <1>  and rsp, ~15
  2019 0000187F 48837D1802                      cmp COUNT, 2
  2020 00001884 0F851C060000                    jne L_error_arg_count_2
  2021 0000188A 488B7520                        mov rsi, PARAM(0)
  2022                                          assert_real(rsi)
  2022 0000188E 803E12              <1>  cmp byte [%1], %2
  2022 00001891 0F85AE060000        <1>  jne L_error_incorrect_type
  2023 00001897 488B7D28                        mov rdi, PARAM(1)
  2024                                          assert_real(rdi)
  2024 0000189B 803F12              <1>  cmp byte [%1], %2
  2024 0000189E 0F85A1060000        <1>  jne L_error_incorrect_type
  2025 000018A4 F20F104601                      movsd xmm0, qword [rsi + 1]
  2026 000018A9 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2027 000018AE 660F2FC1                        comisd xmm0, xmm1
  2028 000018B2 750C                            jne .L_false
  2029 000018B4 48B8-                           mov rax, sob_boolean_true
  2029 000018B6 [0300000000000000] 
  2030 000018BE EB0A                            jmp .L_exit
  2031                                  .L_false:
  2032 000018C0 48B8-                           mov rax, sob_boolean_false
  2032 000018C2 [0200000000000000] 
  2033                                  .L_exit:
  2034                                          LEAVE
  2034 000018CA C9                  <1>  leave
  2035 000018CB C22000                          ret AND_KILL_FRAME(2)
  2036                                          
  2037                                  L_code_ptr_raw_equal_qq:
  2038                                          ENTER
  2038 000018CE C8000000            <1>  enter 0, 0
  2038 000018D2 4883E4F0            <1>  and rsp, ~15
  2039 000018D6 48837D1802                      cmp COUNT, 2
  2040 000018DB 0F85C5050000                    jne L_error_arg_count_2
  2041 000018E1 488B7520                        mov rsi, PARAM(0)
  2042                                          assert_rational(rsi)
  2042 000018E5 803E11              <1>  cmp byte [%1], %2
  2042 000018E8 0F8557060000        <1>  jne L_error_incorrect_type
  2043 000018EE 488B7D28                        mov rdi, PARAM(1)
  2044                                          assert_rational(rdi)
  2044 000018F2 803F11              <1>  cmp byte [%1], %2
  2044 000018F5 0F854A060000        <1>  jne L_error_incorrect_type
  2045 000018FB 488B4601                        mov rax, qword [rsi + 1] ; num1
  2046 000018FF 4899                            cqo
  2047 00001901 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2048 00001905 4889C1                          mov rcx, rax
  2049 00001908 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  2050 0000190C 4899                            cqo
  2051 0000190E 48F76F01                        imul qword [rdi + 1]          ; num2
  2052 00001912 4829C1                          sub rcx, rax
  2053 00001915 750C                            jne .L_false
  2054 00001917 48B8-                           mov rax, sob_boolean_true
  2054 00001919 [0300000000000000] 
  2055 00001921 EB0A                            jmp .L_exit
  2056                                  .L_false:
  2057 00001923 48B8-                           mov rax, sob_boolean_false
  2057 00001925 [0200000000000000] 
  2058                                  .L_exit:
  2059                                          LEAVE
  2059 0000192D C9                  <1>  leave
  2060 0000192E C22000                          ret AND_KILL_FRAME(2)
  2061                                  
  2062                                  L_code_ptr_quotient:
  2063                                          ENTER
  2063 00001931 C8000000            <1>  enter 0, 0
  2063 00001935 4883E4F0            <1>  and rsp, ~15
  2064 00001939 48837D1802                      cmp COUNT, 2
  2065 0000193E 0F8562050000                    jne L_error_arg_count_2
  2066 00001944 488B7520                        mov rsi, PARAM(0)
  2067                                          assert_integer(rsi)
  2067                              <1>  assert_rational(%1)
  2067 00001948 803E11              <2>  cmp byte [%1], %2
  2067 0000194B 0F85F4050000        <2>  jne L_error_incorrect_type
  2067 00001951 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2067 00001956 0F85E9050000        <1>  jne L_error_incorrect_type
  2068 0000195C 488B7D28                        mov rdi, PARAM(1)
  2069                                          assert_integer(rdi)
  2069                              <1>  assert_rational(%1)
  2069 00001960 803F11              <2>  cmp byte [%1], %2
  2069 00001963 0F85DC050000        <2>  jne L_error_incorrect_type
  2069 00001969 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
  2069 0000196E 0F85D1050000        <1>  jne L_error_incorrect_type
  2070 00001974 488B4601                        mov rax, qword [rsi + 1]
  2071 00001978 488B5F01                        mov rbx, qword [rdi + 1]
  2072 0000197C 4883FB00                        cmp rbx, 0
  2073 00001980 0F84F0050000                    je L_error_division_by_zero
  2074 00001986 4899                            cqo
  2075 00001988 48F7FB                          idiv rbx
  2076 0000198B 4889C7                          mov rdi, rax
  2077 0000198E E852040000                      call make_integer
  2078                                          LEAVE
  2078 00001993 C9                  <1>  leave
  2079 00001994 C22000                          ret AND_KILL_FRAME(2)
  2080                                          
  2081                                  L_code_ptr_remainder:
  2082                                          ENTER
  2082 00001997 C8000000            <1>  enter 0, 0
  2082 0000199B 4883E4F0            <1>  and rsp, ~15
  2083 0000199F 48837D1802                      cmp COUNT, 2
  2084 000019A4 0F85FC040000                    jne L_error_arg_count_2
  2085 000019AA 488B7520                        mov rsi, PARAM(0)
  2086                                          assert_integer(rsi)
  2086                              <1>  assert_rational(%1)
  2086 000019AE 803E11              <2>  cmp byte [%1], %2
  2086 000019B1 0F858E050000        <2>  jne L_error_incorrect_type
  2086 000019B7 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2086 000019BC 0F8583050000        <1>  jne L_error_incorrect_type
  2087 000019C2 488B7D28                        mov rdi, PARAM(1)
  2088                                          assert_integer(rdi)
  2088                              <1>  assert_rational(%1)
  2088 000019C6 803F11              <2>  cmp byte [%1], %2
  2088 000019C9 0F8576050000        <2>  jne L_error_incorrect_type
  2088 000019CF 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
  2088 000019D4 0F856B050000        <1>  jne L_error_incorrect_type
  2089 000019DA 488B4601                        mov rax, qword [rsi + 1]
  2090 000019DE 488B5F01                        mov rbx, qword [rdi + 1]
  2091 000019E2 4883FB00                        cmp rbx, 0
  2092 000019E6 0F848A050000                    je L_error_division_by_zero
  2093 000019EC 4899                            cqo
  2094 000019EE 48F7FB                          idiv rbx
  2095 000019F1 4889D7                          mov rdi, rdx
  2096 000019F4 E8EC030000                      call make_integer
  2097                                          LEAVE
  2097 000019F9 C9                  <1>  leave
  2098 000019FA C22000                          ret AND_KILL_FRAME(2)
  2099                                  
  2100                                  L_code_ptr_set_car:
  2101                                          ENTER
  2101 000019FD C8000000            <1>  enter 0, 0
  2101 00001A01 4883E4F0            <1>  and rsp, ~15
  2102 00001A05 48837D1802                      cmp COUNT, 2
  2103 00001A0A 0F8596040000                    jne L_error_arg_count_2
  2104 00001A10 488B4520                        mov rax, PARAM(0)
  2105                                          assert_pair(rax)
  2105 00001A14 803821              <1>  cmp byte [%1], %2
  2105 00001A17 0F8528050000        <1>  jne L_error_incorrect_type
  2106 00001A1D 488B5D28                        mov rbx, PARAM(1)
  2107 00001A21 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2108 00001A25 48B8-                           mov rax, sob_void
  2108 00001A27 [0000000000000000] 
  2109                                          LEAVE
  2109 00001A2F C9                  <1>  leave
  2110 00001A30 C22000                          ret AND_KILL_FRAME(2)
  2111                                  
  2112                                  L_code_ptr_set_cdr:
  2113                                          ENTER
  2113 00001A33 C8000000            <1>  enter 0, 0
  2113 00001A37 4883E4F0            <1>  and rsp, ~15
  2114 00001A3B 48837D1802                      cmp COUNT, 2
  2115 00001A40 0F8560040000                    jne L_error_arg_count_2
  2116 00001A46 488B4520                        mov rax, PARAM(0)
  2117                                          assert_pair(rax)
  2117 00001A4A 803821              <1>  cmp byte [%1], %2
  2117 00001A4D 0F85F2040000        <1>  jne L_error_incorrect_type
  2118 00001A53 488B5D28                        mov rbx, PARAM(1)
  2119 00001A57 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2120 00001A5B 48B8-                           mov rax, sob_void
  2120 00001A5D [0000000000000000] 
  2121                                          LEAVE
  2121 00001A65 C9                  <1>  leave
  2122 00001A66 C22000                          ret AND_KILL_FRAME(2)
  2123                                  
  2124                                  L_code_ptr_string_ref:
  2125                                          ENTER
  2125 00001A69 C8000000            <1>  enter 0, 0
  2125 00001A6D 4883E4F0            <1>  and rsp, ~15
  2126 00001A71 48837D1802                      cmp COUNT, 2
  2127 00001A76 0F852A040000                    jne L_error_arg_count_2
  2128 00001A7C 488B7D20                        mov rdi, PARAM(0)
  2129                                          assert_string(rdi)
  2129 00001A80 803F03              <1>  cmp byte [%1], %2
  2129 00001A83 0F85BC040000        <1>  jne L_error_incorrect_type
  2130 00001A89 488B7528                        mov rsi, PARAM(1)
  2131                                          assert_integer(rsi)
  2131                              <1>  assert_rational(%1)
  2131 00001A8D 803E11              <2>  cmp byte [%1], %2
  2131 00001A90 0F85AF040000        <2>  jne L_error_incorrect_type
  2131 00001A96 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2131 00001A9B 0F85A4040000        <1>  jne L_error_incorrect_type
  2132 00001AA1 488B5701                        mov rdx, qword [rdi + 1]
  2133 00001AA5 488B4E01                        mov rcx, qword [rsi + 1]
  2134 00001AA9 4839D1                          cmp rcx, rdx
  2135 00001AAC 0F8D59030000                    jge L_error_integer_range
  2136 00001AB2 4883F900                        cmp rcx, 0
  2137 00001AB6 0F8C4F030000                    jl L_error_integer_range
  2138 00001ABC 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2139 00001AC0 BF02000000                      mov rdi, 2
  2140 00001AC5 E836EDFFFF                      call malloc
  2141 00001ACA C60002                          mov byte [rax], T_char
  2142 00001ACD 885801                          mov byte [rax + 1], bl
  2143                                          LEAVE
  2143 00001AD0 C9                  <1>  leave
  2144 00001AD1 C22000                          ret AND_KILL_FRAME(2)
  2145                                  
  2146                                  L_code_ptr_vector_ref:
  2147                                          ENTER
  2147 00001AD4 C8000000            <1>  enter 0, 0
  2147 00001AD8 4883E4F0            <1>  and rsp, ~15
  2148 00001ADC 48837D1802                      cmp COUNT, 2
  2149 00001AE1 0F85BF030000                    jne L_error_arg_count_2
  2150 00001AE7 488B7D20                        mov rdi, PARAM(0)
  2151                                          assert_vector(rdi)
  2151 00001AEB 803F22              <1>  cmp byte [%1], %2
  2151 00001AEE 0F8551040000        <1>  jne L_error_incorrect_type
  2152 00001AF4 488B7528                        mov rsi, PARAM(1)
  2153                                          assert_integer(rsi)
  2153                              <1>  assert_rational(%1)
  2153 00001AF8 803E11              <2>  cmp byte [%1], %2
  2153 00001AFB 0F8544040000        <2>  jne L_error_incorrect_type
  2153 00001B01 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2153 00001B06 0F8539040000        <1>  jne L_error_incorrect_type
  2154 00001B0C 488B5701                        mov rdx, qword [rdi + 1]
  2155 00001B10 488B4E01                        mov rcx, qword [rsi + 1]
  2156 00001B14 4839D1                          cmp rcx, rdx
  2157 00001B17 0F8DEE020000                    jge L_error_integer_range
  2158 00001B1D 4883F900                        cmp rcx, 0
  2159 00001B21 0F8CE4020000                    jl L_error_integer_range
  2160 00001B27 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2161                                          LEAVE
  2161 00001B2C C9                  <1>  leave
  2162 00001B2D C22000                          ret AND_KILL_FRAME(2)
  2163                                  
  2164                                  L_code_ptr_vector_set:
  2165                                          ENTER
  2165 00001B30 C8000000            <1>  enter 0, 0
  2165 00001B34 4883E4F0            <1>  and rsp, ~15
  2166 00001B38 48837D1803                      cmp COUNT, 3
  2167 00001B3D 0F85CD030000                    jne L_error_arg_count_3
  2168 00001B43 488B7D20                        mov rdi, PARAM(0)
  2169                                          assert_vector(rdi)
  2169 00001B47 803F22              <1>  cmp byte [%1], %2
  2169 00001B4A 0F85F5030000        <1>  jne L_error_incorrect_type
  2170 00001B50 488B7528                        mov rsi, PARAM(1)
  2171                                          assert_integer(rsi)
  2171                              <1>  assert_rational(%1)
  2171 00001B54 803E11              <2>  cmp byte [%1], %2
  2171 00001B57 0F85E8030000        <2>  jne L_error_incorrect_type
  2171 00001B5D 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2171 00001B62 0F85DD030000        <1>  jne L_error_incorrect_type
  2172 00001B68 488B5701                        mov rdx, qword [rdi + 1]
  2173 00001B6C 488B4E01                        mov rcx, qword [rsi + 1]
  2174 00001B70 4839D1                          cmp rcx, rdx
  2175 00001B73 0F8D92020000                    jge L_error_integer_range
  2176 00001B79 4883F900                        cmp rcx, 0
  2177 00001B7D 0F8C88020000                    jl L_error_integer_range
  2178 00001B83 488B4530                        mov rax, PARAM(2)
  2179 00001B87 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2180 00001B8C 48B8-                           mov rax, sob_void
  2180 00001B8E [0000000000000000] 
  2181                                          LEAVE
  2181 00001B96 C9                  <1>  leave
  2182 00001B97 C22800                          ret AND_KILL_FRAME(3)
  2183                                  
  2184                                  L_code_ptr_string_set:
  2185                                          ENTER
  2185 00001B9A C8000000            <1>  enter 0, 0
  2185 00001B9E 4883E4F0            <1>  and rsp, ~15
  2186 00001BA2 48837D1803                      cmp COUNT, 3
  2187 00001BA7 0F8563030000                    jne L_error_arg_count_3
  2188 00001BAD 488B7D20                        mov rdi, PARAM(0)
  2189                                          assert_string(rdi)
  2189 00001BB1 803F03              <1>  cmp byte [%1], %2
  2189 00001BB4 0F858B030000        <1>  jne L_error_incorrect_type
  2190 00001BBA 488B7528                        mov rsi, PARAM(1)
  2191                                          assert_integer(rsi)
  2191                              <1>  assert_rational(%1)
  2191 00001BBE 803E11              <2>  cmp byte [%1], %2
  2191 00001BC1 0F857E030000        <2>  jne L_error_incorrect_type
  2191 00001BC7 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2191 00001BCC 0F8573030000        <1>  jne L_error_incorrect_type
  2192 00001BD2 488B5701                        mov rdx, qword [rdi + 1]
  2193 00001BD6 488B4E01                        mov rcx, qword [rsi + 1]
  2194 00001BDA 4839D1                          cmp rcx, rdx
  2195 00001BDD 0F8D28020000                    jge L_error_integer_range
  2196 00001BE3 4883F900                        cmp rcx, 0
  2197 00001BE7 0F8C1E020000                    jl L_error_integer_range
  2198 00001BED 488B4530                        mov rax, PARAM(2)
  2199                                          assert_char(rax)
  2199 00001BF1 803802              <1>  cmp byte [%1], %2
  2199 00001BF4 0F854B030000        <1>  jne L_error_incorrect_type
  2200 00001BFA 8A4001                          mov al, byte [rax + 1]
  2201 00001BFD 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2202 00001C01 48B8-                           mov rax, sob_void
  2202 00001C03 [0000000000000000] 
  2203                                          LEAVE
  2203 00001C0B C9                  <1>  leave
  2204 00001C0C C22800                          ret AND_KILL_FRAME(3)
  2205                                  
  2206                                  L_code_ptr_make_vector:
  2207                                          ENTER
  2207 00001C0F C8000000            <1>  enter 0, 0
  2207 00001C13 4883E4F0            <1>  and rsp, ~15
  2208 00001C17 48837D1802                      cmp COUNT, 2
  2209 00001C1C 0F8584020000                    jne L_error_arg_count_2
  2210 00001C22 488B4D20                        mov rcx, PARAM(0)
  2211                                          assert_integer(rcx)
  2211                              <1>  assert_rational(%1)
  2211 00001C26 803911              <2>  cmp byte [%1], %2
  2211 00001C29 0F8516030000        <2>  jne L_error_incorrect_type
  2211 00001C2F 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
  2211 00001C34 0F850B030000        <1>  jne L_error_incorrect_type
  2212 00001C3A 488B4901                        mov rcx, qword [rcx + 1]
  2213 00001C3E 4883F900                        cmp rcx, 0
  2214 00001C42 0F8CC3010000                    jl L_error_integer_range
  2215 00001C48 488B5528                        mov rdx, PARAM(1)
  2216 00001C4C 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2217 00001C54 E8A7EBFFFF                      call malloc
  2218 00001C59 C60022                          mov byte [rax], T_vector
  2219 00001C5C 48894801                        mov qword [rax + 1], rcx
  2220 00001C60 41B800000000                    mov r8, 0
  2221                                  .L0:
  2222 00001C66 4939C8                          cmp r8, rcx
  2223 00001C69 740A                            je .L1
  2224 00001C6B 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2225 00001C70 49FFC0                          inc r8
  2226 00001C73 EBF1                            jmp .L0
  2227                                  .L1:
  2228                                          LEAVE
  2228 00001C75 C9                  <1>  leave
  2229 00001C76 C22000                          ret AND_KILL_FRAME(2)
  2230                                          
  2231                                  L_code_ptr_make_string:
  2232                                          ENTER
  2232 00001C79 C8000000            <1>  enter 0, 0
  2232 00001C7D 4883E4F0            <1>  and rsp, ~15
  2233 00001C81 48837D1802                      cmp COUNT, 2
  2234 00001C86 0F851A020000                    jne L_error_arg_count_2
  2235 00001C8C 488B4D20                        mov rcx, PARAM(0)
  2236                                          assert_integer(rcx)
  2236                              <1>  assert_rational(%1)
  2236 00001C90 803911              <2>  cmp byte [%1], %2
  2236 00001C93 0F85AC020000        <2>  jne L_error_incorrect_type
  2236 00001C99 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
  2236 00001C9E 0F85A1020000        <1>  jne L_error_incorrect_type
  2237 00001CA4 488B4901                        mov rcx, qword [rcx + 1]
  2238 00001CA8 4883F900                        cmp rcx, 0
  2239 00001CAC 0F8C59010000                    jl L_error_integer_range
  2240 00001CB2 488B5528                        mov rdx, PARAM(1)
  2241                                          assert_char(rdx)
  2241 00001CB6 803A02              <1>  cmp byte [%1], %2
  2241 00001CB9 0F8586020000        <1>  jne L_error_incorrect_type
  2242 00001CBF 8A5201                          mov dl, byte [rdx + 1]
  2243 00001CC2 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2244 00001CC6 E835EBFFFF                      call malloc
  2245 00001CCB C60003                          mov byte [rax], T_string
  2246 00001CCE 48894801                        mov qword [rax + 1], rcx
  2247 00001CD2 41B800000000                    mov r8, 0
  2248                                  .L0:
  2249 00001CD8 4939C8                          cmp r8, rcx
  2250 00001CDB 740A                            je .L1
  2251 00001CDD 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2252 00001CE2 49FFC0                          inc r8
  2253 00001CE5 EBF1                            jmp .L0
  2254                                  .L1:
  2255                                          LEAVE
  2255 00001CE7 C9                  <1>  leave
  2256 00001CE8 C22000                          ret AND_KILL_FRAME(2)
  2257                                  
  2258                                  L_code_ptr_numerator:
  2259                                          ENTER
  2259 00001CEB C8000000            <1>  enter 0, 0
  2259 00001CEF 4883E4F0            <1>  and rsp, ~15
  2260 00001CF3 48837D1801                      cmp COUNT, 1
  2261 00001CF8 0F8573010000                    jne L_error_arg_count_1
  2262 00001CFE 488B4520                        mov rax, PARAM(0)
  2263                                          assert_rational(rax)
  2263 00001D02 803811              <1>  cmp byte [%1], %2
  2263 00001D05 0F853A020000        <1>  jne L_error_incorrect_type
  2264 00001D0B 488B7801                        mov rdi, qword [rax + 1]
  2265 00001D0F E8D1000000                      call make_integer
  2266                                          LEAVE
  2266 00001D14 C9                  <1>  leave
  2267 00001D15 C21800                          ret AND_KILL_FRAME(1)
  2268                                          
  2269                                  L_code_ptr_denominator:
  2270                                          ENTER
  2270 00001D18 C8000000            <1>  enter 0, 0
  2270 00001D1C 4883E4F0            <1>  and rsp, ~15
  2271 00001D20 48837D1801                      cmp COUNT, 1
  2272 00001D25 0F8546010000                    jne L_error_arg_count_1
  2273 00001D2B 488B4520                        mov rax, PARAM(0)
  2274                                          assert_rational(rax)
  2274 00001D2F 803811              <1>  cmp byte [%1], %2
  2274 00001D32 0F850D020000        <1>  jne L_error_incorrect_type
  2275 00001D38 488B7809                        mov rdi, qword [rax + 1 + 8]
  2276 00001D3C E8A4000000                      call make_integer
  2277                                          LEAVE
  2277 00001D41 C9                  <1>  leave
  2278 00001D42 C21800                          ret AND_KILL_FRAME(1)
  2279                                  
  2280                                  L_code_ptr_eq:
  2281                                  	ENTER
  2281 00001D45 C8000000            <1>  enter 0, 0
  2281 00001D49 4883E4F0            <1>  and rsp, ~15
  2282 00001D4D 48837D1802              	cmp COUNT, 2
  2283 00001D52 0F854E010000            	jne L_error_arg_count_2
  2284 00001D58 488B7D20                	mov rdi, PARAM(0)
  2285 00001D5C 488B7528                	mov rsi, PARAM(1)
  2286 00001D60 4839F7                  	cmp rdi, rsi
  2287 00001D63 744A                    	je .L_eq_true
  2288 00001D65 8A17                    	mov dl, byte [rdi]
  2289 00001D67 3A16                    	cmp dl, byte [rsi]
  2290 00001D69 7550                    	jne .L_eq_false
  2291 00001D6B 80FA02                  	cmp dl, T_char
  2292 00001D6E 7437                    	je .L_char
  2293 00001D70 80FA04                  	cmp dl, T_symbol
  2294 00001D73 742A                    	je .L_symbol
  2295 00001D75 80FA12                  	cmp dl, T_real
  2296 00001D78 741D                    	je .L_real
  2297 00001D7A 80FA11                  	cmp dl, T_rational
  2298 00001D7D 7402                    	je .L_rational
  2299 00001D7F EB3A                    	jmp .L_eq_false
  2300                                  .L_rational:
  2301 00001D81 488B4601                	mov rax, qword [rsi + 1]
  2302 00001D85 483B4701                	cmp rax, qword [rdi + 1]
  2303 00001D89 7530                    	jne .L_eq_false
  2304 00001D8B 488B4609                	mov rax, qword [rsi + 1 + 8]
  2305 00001D8F 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2306 00001D93 7526                    	jne .L_eq_false
  2307 00001D95 EB18                    	jmp .L_eq_true
  2308                                  .L_real:
  2309 00001D97 488B4601                	mov rax, qword [rsi + 1]
  2310 00001D9B 483B4701                	cmp rax, qword [rdi + 1]
  2311                                  .L_symbol:
  2312                                  	; never reached, because symbols are static!
  2313                                  	; but I'm keeping it in case, I'll ever change
  2314                                  	; the implementation
  2315 00001D9F 488B4601                	mov rax, qword [rsi + 1]
  2316 00001DA3 483B4701                	cmp rax, qword [rdi + 1]
  2317                                  .L_char:
  2318 00001DA7 8A5E01                  	mov bl, byte [rsi + 1]
  2319 00001DAA 3A5F01                  	cmp bl, byte [rdi + 1]
  2320 00001DAD 750C                    	jne .L_eq_false
  2321                                  .L_eq_true:
  2322 00001DAF 48B8-                   	mov rax, sob_boolean_true
  2322 00001DB1 [0300000000000000] 
  2323 00001DB9 EB0A                    	jmp .L_eq_exit
  2324                                  .L_eq_false:
  2325 00001DBB 48B8-                   	mov rax, sob_boolean_false
  2325 00001DBD [0200000000000000] 
  2326                                  .L_eq_exit:
  2327                                  	LEAVE
  2327 00001DC5 C9                  <1>  leave
  2328 00001DC6 C22000                  	ret AND_KILL_FRAME(2)
  2329                                  
  2330                                  make_real:
  2331                                          ENTER
  2331 00001DC9 C8000000            <1>  enter 0, 0
  2331 00001DCD 4883E4F0            <1>  and rsp, ~15
  2332 00001DD1 BF09000000                      mov rdi, (1 + 8)
  2333 00001DD6 E825EAFFFF                      call malloc
  2334 00001DDB C60012                          mov byte [rax], T_real
  2335 00001DDE F20F114001                      movsd qword [rax + 1], xmm0
  2336                                          LEAVE
  2336 00001DE3 C9                  <1>  leave
  2337 00001DE4 C3                              ret
  2338                                          
  2339                                  make_integer:
  2340                                          ENTER
  2340 00001DE5 C8000000            <1>  enter 0, 0
  2340 00001DE9 4883E4F0            <1>  and rsp, ~15
  2341 00001DED 4889FE                          mov rsi, rdi
  2342 00001DF0 BF11000000                      mov rdi, (1 + 8 + 8)
  2343 00001DF5 E806EAFFFF                      call malloc
  2344 00001DFA C60011                          mov byte [rax], T_rational
  2345 00001DFD 48897001                        mov qword [rax + 1], rsi
  2346 00001E01 48C7400901000000                mov qword [rax + 1 + 8], 1
  2347                                          LEAVE
  2347 00001E09 C9                  <1>  leave
  2348 00001E0A C3                              ret
  2349                                          
  2350                                  L_error_integer_range:
  2351 00001E0B 488B3C25[00000000]              mov rdi, qword [stderr]
  2352 00001E13 48BE-                           mov rsi, fmt_integer_range
  2352 00001E15 [5E03000000000000] 
  2353 00001E1D B800000000                      mov rax, 0
  2354                                  	ENTER
  2354 00001E22 C8000000            <1>  enter 0, 0
  2354 00001E26 4883E4F0            <1>  and rsp, ~15
  2355 00001E2A E8(00000000)                    call fprintf
  2356                                  	LEAVE
  2356 00001E2F C9                  <1>  leave
  2357 00001E30 48C7C0FBFFFFFF                  mov rax, -5
  2358 00001E37 E8(00000000)                    call exit
  2359                                  
  2360                                  L_error_arg_count_0:
  2361 00001E3C 488B3C25[00000000]              mov rdi, qword [stderr]
  2362 00001E44 48BE-                           mov rsi, fmt_arg_count_0
  2362 00001E46 [5C02000000000000] 
  2363 00001E4E 488B5518                        mov rdx, COUNT
  2364 00001E52 B800000000                      mov rax, 0
  2365                                  	ENTER
  2365 00001E57 C8000000            <1>  enter 0, 0
  2365 00001E5B 4883E4F0            <1>  and rsp, ~15
  2366 00001E5F E8(00000000)                    call fprintf
  2367                                  	LEAVE
  2367 00001E64 C9                  <1>  leave
  2368 00001E65 48C7C0FDFFFFFF                  mov rax, -3
  2369 00001E6C E8(00000000)                    call exit
  2370                                  
  2371                                  L_error_arg_count_1:
  2372 00001E71 488B3C25[00000000]              mov rdi, qword [stderr]
  2373 00001E79 48BE-                           mov rsi, fmt_arg_count_1
  2373 00001E7B [8402000000000000] 
  2374 00001E83 488B5518                        mov rdx, COUNT
  2375 00001E87 B800000000                      mov rax, 0
  2376                                  	ENTER
  2376 00001E8C C8000000            <1>  enter 0, 0
  2376 00001E90 4883E4F0            <1>  and rsp, ~15
  2377 00001E94 E8(00000000)                    call fprintf
  2378                                  	LEAVE
  2378 00001E99 C9                  <1>  leave
  2379 00001E9A 48C7C0FDFFFFFF                  mov rax, -3
  2380 00001EA1 E8(00000000)                    call exit
  2381                                  
  2382                                  L_error_arg_count_2:
  2383 00001EA6 488B3C25[00000000]              mov rdi, qword [stderr]
  2384 00001EAE 48BE-                           mov rsi, fmt_arg_count_2
  2384 00001EB0 [EA02000000000000] 
  2385 00001EB8 488B5518                        mov rdx, COUNT
  2386 00001EBC B800000000                      mov rax, 0
  2387                                  	ENTER
  2387 00001EC1 C8000000            <1>  enter 0, 0
  2387 00001EC5 4883E4F0            <1>  and rsp, ~15
  2388 00001EC9 E8(00000000)                    call fprintf
  2389                                  	LEAVE
  2389 00001ECE C9                  <1>  leave
  2390 00001ECF 48C7C0FDFFFFFF                  mov rax, -3
  2391 00001ED6 E8(00000000)                    call exit
  2392                                  
  2393                                  L_error_arg_count_12:
  2394 00001EDB 488B3C25[00000000]              mov rdi, qword [stderr]
  2395 00001EE3 48BE-                           mov rsi, fmt_arg_count_12
  2395 00001EE5 [AA02000000000000] 
  2396 00001EED 488B5518                        mov rdx, COUNT
  2397 00001EF1 B800000000                      mov rax, 0
  2398                                  	ENTER
  2398 00001EF6 C8000000            <1>  enter 0, 0
  2398 00001EFA 4883E4F0            <1>  and rsp, ~15
  2399 00001EFE E8(00000000)                    call fprintf
  2400                                  	LEAVE
  2400 00001F03 C9                  <1>  leave
  2401 00001F04 48C7C0FDFFFFFF                  mov rax, -3
  2402 00001F0B E8(00000000)                    call exit
  2403                                  
  2404                                  L_error_arg_count_3:
  2405 00001F10 488B3C25[00000000]              mov rdi, qword [stderr]
  2406 00001F18 48BE-                           mov rsi, fmt_arg_count_3
  2406 00001F1A [1103000000000000] 
  2407 00001F22 488B5518                        mov rdx, COUNT
  2408 00001F26 B800000000                      mov rax, 0
  2409                                  	ENTER
  2409 00001F2B C8000000            <1>  enter 0, 0
  2409 00001F2F 4883E4F0            <1>  and rsp, ~15
  2410 00001F33 E8(00000000)                    call fprintf
  2411                                  	LEAVE
  2411 00001F38 C9                  <1>  leave
  2412 00001F39 48C7C0FDFFFFFF                  mov rax, -3
  2413 00001F40 E8(00000000)                    call exit
  2414                                          
  2415                                  L_error_incorrect_type:
  2416 00001F45 488B3C25[00000000]              mov rdi, qword [stderr]
  2417 00001F4D 48BE-                           mov rsi, fmt_type
  2417 00001F4F [3A03000000000000] 
  2418 00001F57 B800000000                      mov rax, 0
  2419                                  	ENTER
  2419 00001F5C C8000000            <1>  enter 0, 0
  2419 00001F60 4883E4F0            <1>  and rsp, ~15
  2420 00001F64 E8(00000000)                    call fprintf
  2421                                  	LEAVE
  2421 00001F69 C9                  <1>  leave
  2422 00001F6A 48C7C0FCFFFFFF                  mov rax, -4
  2423 00001F71 E8(00000000)                    call exit
  2424                                  
  2425                                  L_error_division_by_zero:
  2426 00001F76 488B3C25[00000000]              mov rdi, qword [stderr]
  2427 00001F7E 48BE-                           mov rsi, fmt_division_by_zero
  2427 00001F80 [7B03000000000000] 
  2428 00001F88 B800000000                      mov rax, 0
  2429                                  	ENTER
  2429 00001F8D C8000000            <1>  enter 0, 0
  2429 00001F91 4883E4F0            <1>  and rsp, ~15
  2430 00001F95 E8(00000000)                    call fprintf
  2431                                  	LEAVE
  2431 00001F9A C9                  <1>  leave
  2432 00001F9B 48C7C0F8FFFFFF                  mov rax, -8
  2433 00001FA2 E8(00000000)                    call exit
  2434                                  
  2435                                  section .data
  2436                                  fmt_char:
  2437 00000259 256300                          db `%c\0`
  2438                                  fmt_arg_count_0:
  2439 0000025C 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2439 00000265 74696E67207A65726F-
  2439 0000026E 20617267756D656E74-
  2439 00000277 732E20466F756E6420-
  2439 00000280 25640A00           
  2440                                  fmt_arg_count_1:
  2441 00000284 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2441 0000028D 74696E67206F6E6520-
  2441 00000296 617267756D656E742E-
  2441 0000029F 20466F756E64202564-
  2441 000002A8 0A00               
  2442                                  fmt_arg_count_12:
  2443 000002AA 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2443 000002B3 74696E67206F6E6520-
  2443 000002BC 726571756972656420-
  2443 000002C5 616E64206F6E65206F-
  2443 000002CE 7074696F6E616C2061-
  2443 000002D7 7267756D656E742E20-
  2443 000002E0 466F756E642025640A-
  2443 000002E9 00                 
  2444                                  fmt_arg_count_2:
  2445 000002EA 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2445 000002F3 74696E672074776F20-
  2445 000002FC 617267756D656E7473-
  2445 00000305 2E20466F756E642025-
  2445 0000030E 640A00             
  2446                                  fmt_arg_count_3:
  2447 00000311 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2447 0000031A 74696E672074687265-
  2447 00000323 6520617267756D656E-
  2447 0000032C 74732E20466F756E64-
  2447 00000335 2025640A00         
  2448                                  fmt_type:
  2449 0000033A 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2449 00000343 696F6E207061737365-
  2449 0000034C 6420696E636F727265-
  2449 00000355 637420747970650A00 
  2450                                  fmt_integer_range:
  2451 0000035E 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2451 00000367 7265637420696E7465-
  2451 00000370 6765722072616E6765-
  2451 00000379 0A00               
  2452                                  fmt_division_by_zero:
  2453 0000037B 212121204469766973-             db `!!! Division by zero\n\0`
  2453 00000384 696F6E206279207A65-
  2453 0000038D 726F0A00           
  2454                                  fmt_scheme_error_part_1:
  2455 00000391 0A2121212054686520-             db `\n!!! The procedure \0`
  2455 0000039A 70726F636564757265-
  2455 000003A3 2000               
  2456                                  fmt_scheme_error_part_2:
  2457 000003A5 2061736B656420746F-             db ` asked to terminate the program\n`
  2457 000003AE 207465726D696E6174-
  2457 000003B7 65207468652070726F-
  2457 000003C0 6772616D0A         
  2458 000003C5 202020207769746820-             db `    with the following message:\n\n\0`
  2458 000003CE 74686520666F6C6C6F-
  2458 000003D7 77696E67206D657373-
  2458 000003E0 6167653A0A0A00     
  2459                                  fmt_scheme_error_part_3:
  2460 000003E7 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2460 000003F0 210A0A00           
