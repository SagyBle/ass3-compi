     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 11                      	db T_rational	; 1
    84 00000007 010000000000000001-     	dq 1, 1
    84 00000010 00000000000000     
    85 00000017 11                      	db T_rational	; 2
    86 00000018 020000000000000001-     	dq 2, 1
    86 00000021 00000000000000     
    87 00000028 11                      	db T_rational	; 3
    88 00000029 030000000000000001-     	dq 3, 1
    88 00000032 00000000000000     
    89                                  
    90                                  section .bss
    91                                  free_var_0:	; location of null?
    92 00000000 <res 00000008>          	resq 1
    93                                  free_var_1:	; location of pair?
    94 00000008 <res 00000008>          	resq 1
    95                                  free_var_2:	; location of void?
    96 00000010 <res 00000008>          	resq 1
    97                                  free_var_3:	; location of char?
    98 00000018 <res 00000008>          	resq 1
    99                                  free_var_4:	; location of string?
   100 00000020 <res 00000008>          	resq 1
   101                                  free_var_5:	; location of symbol?
   102 00000028 <res 00000008>          	resq 1
   103                                  free_var_6:	; location of vector?
   104 00000030 <res 00000008>          	resq 1
   105                                  free_var_7:	; location of procedure?
   106 00000038 <res 00000008>          	resq 1
   107                                  free_var_8:	; location of real?
   108 00000040 <res 00000008>          	resq 1
   109                                  free_var_9:	; location of rational?
   110 00000048 <res 00000008>          	resq 1
   111                                  free_var_10:	; location of boolean?
   112 00000050 <res 00000008>          	resq 1
   113                                  free_var_11:	; location of number?
   114 00000058 <res 00000008>          	resq 1
   115                                  free_var_12:	; location of collection?
   116 00000060 <res 00000008>          	resq 1
   117                                  free_var_13:	; location of cons
   118 00000068 <res 00000008>          	resq 1
   119                                  free_var_14:	; location of display-sexpr
   120 00000070 <res 00000008>          	resq 1
   121                                  free_var_15:	; location of write-char
   122 00000078 <res 00000008>          	resq 1
   123                                  free_var_16:	; location of car
   124 00000080 <res 00000008>          	resq 1
   125                                  free_var_17:	; location of cdr
   126 00000088 <res 00000008>          	resq 1
   127                                  free_var_18:	; location of string-length
   128 00000090 <res 00000008>          	resq 1
   129                                  free_var_19:	; location of vector-length
   130 00000098 <res 00000008>          	resq 1
   131                                  free_var_20:	; location of real->integer
   132 000000A0 <res 00000008>          	resq 1
   133                                  free_var_21:	; location of exit
   134 000000A8 <res 00000008>          	resq 1
   135                                  free_var_22:	; location of integer->real
   136 000000B0 <res 00000008>          	resq 1
   137                                  free_var_23:	; location of rational->real
   138 000000B8 <res 00000008>          	resq 1
   139                                  free_var_24:	; location of char->integer
   140 000000C0 <res 00000008>          	resq 1
   141                                  free_var_25:	; location of integer->char
   142 000000C8 <res 00000008>          	resq 1
   143                                  free_var_26:	; location of trng
   144 000000D0 <res 00000008>          	resq 1
   145                                  free_var_27:	; location of zero?
   146 000000D8 <res 00000008>          	resq 1
   147                                  free_var_28:	; location of integer?
   148 000000E0 <res 00000008>          	resq 1
   149                                  free_var_29:	; location of __bin-apply
   150 000000E8 <res 00000008>          	resq 1
   151                                  free_var_30:	; location of __bin-add-rr
   152 000000F0 <res 00000008>          	resq 1
   153                                  free_var_31:	; location of __bin-sub-rr
   154 000000F8 <res 00000008>          	resq 1
   155                                  free_var_32:	; location of __bin-mul-rr
   156 00000100 <res 00000008>          	resq 1
   157                                  free_var_33:	; location of __bin-div-rr
   158 00000108 <res 00000008>          	resq 1
   159                                  free_var_34:	; location of __bin-add-qq
   160 00000110 <res 00000008>          	resq 1
   161                                  free_var_35:	; location of __bin-sub-qq
   162 00000118 <res 00000008>          	resq 1
   163                                  free_var_36:	; location of __bin-mul-qq
   164 00000120 <res 00000008>          	resq 1
   165                                  free_var_37:	; location of __bin-div-qq
   166 00000128 <res 00000008>          	resq 1
   167                                  free_var_38:	; location of error
   168 00000130 <res 00000008>          	resq 1
   169                                  free_var_39:	; location of __bin-less-than-rr
   170 00000138 <res 00000008>          	resq 1
   171                                  free_var_40:	; location of __bin-less-than-qq
   172 00000140 <res 00000008>          	resq 1
   173                                  free_var_41:	; location of __bin-equal-rr
   174 00000148 <res 00000008>          	resq 1
   175                                  free_var_42:	; location of __bin-equal-qq
   176 00000150 <res 00000008>          	resq 1
   177                                  free_var_43:	; location of quotient
   178 00000158 <res 00000008>          	resq 1
   179                                  free_var_44:	; location of remainder
   180 00000160 <res 00000008>          	resq 1
   181                                  free_var_45:	; location of set-car!
   182 00000168 <res 00000008>          	resq 1
   183                                  free_var_46:	; location of set-cdr!
   184 00000170 <res 00000008>          	resq 1
   185                                  free_var_47:	; location of string-ref
   186 00000178 <res 00000008>          	resq 1
   187                                  free_var_48:	; location of vector-ref
   188 00000180 <res 00000008>          	resq 1
   189                                  free_var_49:	; location of vector-set!
   190 00000188 <res 00000008>          	resq 1
   191                                  free_var_50:	; location of string-set!
   192 00000190 <res 00000008>          	resq 1
   193                                  free_var_51:	; location of make-vector
   194 00000198 <res 00000008>          	resq 1
   195                                  free_var_52:	; location of make-string
   196 000001A0 <res 00000008>          	resq 1
   197                                  free_var_53:	; location of numerator
   198 000001A8 <res 00000008>          	resq 1
   199                                  free_var_54:	; location of denominator
   200 000001B0 <res 00000008>          	resq 1
   201                                  free_var_55:	; location of eq?
   202 000001B8 <res 00000008>          	resq 1
   203                                  
   204                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   205                                  global main
   206                                  section .text
   207                                  main:
   208 00000000 C8000000                        enter 0, 0
   209                                          
   210                                  	; building closure for null?
   211 00000004 48BF-                   	mov rdi, free_var_0
   211 00000006 [0000000000000000] 
   212 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   212 00000010 [790D000000000000] 
   213 00000018 E8340D0000              	call bind_primitive
   214                                  
   215                                  	; building closure for pair?
   216 0000001D 48BF-                   	mov rdi, free_var_1
   216 0000001F [0800000000000000] 
   217 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   217 00000029 [AF0D000000000000] 
   218 00000031 E81B0D0000              	call bind_primitive
   219                                  
   220                                  	; building closure for void?
   221 00000036 48BF-                   	mov rdi, free_var_2
   221 00000038 [1000000000000000] 
   222 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   222 00000042 [E50D000000000000] 
   223 0000004A E8020D0000              	call bind_primitive
   224                                  
   225                                  	; building closure for char?
   226 0000004F 48BF-                   	mov rdi, free_var_3
   226 00000051 [1800000000000000] 
   227 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   227 0000005B [1B0E000000000000] 
   228 00000063 E8E90C0000              	call bind_primitive
   229                                  
   230                                  	; building closure for string?
   231 00000068 48BF-                   	mov rdi, free_var_4
   231 0000006A [2000000000000000] 
   232 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   232 00000074 [510E000000000000] 
   233 0000007C E8D00C0000              	call bind_primitive
   234                                  
   235                                  	; building closure for symbol?
   236 00000081 48BF-                   	mov rdi, free_var_5
   236 00000083 [2800000000000000] 
   237 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   237 0000008D [870E000000000000] 
   238 00000095 E8B70C0000              	call bind_primitive
   239                                  
   240                                  	; building closure for vector?
   241 0000009A 48BF-                   	mov rdi, free_var_6
   241 0000009C [3000000000000000] 
   242 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   242 000000A6 [BD0E000000000000] 
   243 000000AE E89E0C0000              	call bind_primitive
   244                                  
   245                                  	; building closure for procedure?
   246 000000B3 48BF-                   	mov rdi, free_var_7
   246 000000B5 [3800000000000000] 
   247 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   247 000000BF [F30E000000000000] 
   248 000000C7 E8850C0000              	call bind_primitive
   249                                  
   250                                  	; building closure for real?
   251 000000CC 48BF-                   	mov rdi, free_var_8
   251 000000CE [4000000000000000] 
   252 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   252 000000D8 [290F000000000000] 
   253 000000E0 E86C0C0000              	call bind_primitive
   254                                  
   255                                  	; building closure for rational?
   256 000000E5 48BF-                   	mov rdi, free_var_9
   256 000000E7 [4800000000000000] 
   257 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   257 000000F1 [5F0F000000000000] 
   258 000000F9 E8530C0000              	call bind_primitive
   259                                  
   260                                  	; building closure for boolean?
   261 000000FE 48BF-                   	mov rdi, free_var_10
   261 00000100 [5000000000000000] 
   262 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   262 0000010A [950F000000000000] 
   263 00000112 E83A0C0000              	call bind_primitive
   264                                  
   265                                  	; building closure for number?
   266 00000117 48BF-                   	mov rdi, free_var_11
   266 00000119 [5800000000000000] 
   267 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   267 00000123 [CD0F000000000000] 
   268 0000012B E8210C0000              	call bind_primitive
   269                                  
   270                                  	; building closure for collection?
   271 00000130 48BF-                   	mov rdi, free_var_12
   271 00000132 [6000000000000000] 
   272 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   272 0000013C [0510000000000000] 
   273 00000144 E8080C0000              	call bind_primitive
   274                                  
   275                                  	; building closure for cons
   276 00000149 48BF-                   	mov rdi, free_var_13
   276 0000014B [6800000000000000] 
   277 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   277 00000155 [3D10000000000000] 
   278 0000015D E8EF0B0000              	call bind_primitive
   279                                  
   280                                  	; building closure for display-sexpr
   281 00000162 48BF-                   	mov rdi, free_var_14
   281 00000164 [7000000000000000] 
   282 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   282 0000016E [7110000000000000] 
   283 00000176 E8D60B0000              	call bind_primitive
   284                                  
   285                                  	; building closure for write-char
   286 0000017B 48BF-                   	mov rdi, free_var_15
   286 0000017D [7800000000000000] 
   287 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   287 00000187 [9B10000000000000] 
   288 0000018F E8BD0B0000              	call bind_primitive
   289                                  
   290                                  	; building closure for car
   291 00000194 48BF-                   	mov rdi, free_var_16
   291 00000196 [8000000000000000] 
   292 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   292 000001A0 [F210000000000000] 
   293 000001A8 E8A40B0000              	call bind_primitive
   294                                  
   295                                  	; building closure for cdr
   296 000001AD 48BF-                   	mov rdi, free_var_17
   296 000001AF [8800000000000000] 
   297 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   297 000001B9 [1A11000000000000] 
   298 000001C1 E88B0B0000              	call bind_primitive
   299                                  
   300                                  	; building closure for string-length
   301 000001C6 48BF-                   	mov rdi, free_var_18
   301 000001C8 [9000000000000000] 
   302 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   302 000001D2 [4211000000000000] 
   303 000001DA E8720B0000              	call bind_primitive
   304                                  
   305                                  	; building closure for vector-length
   306 000001DF 48BF-                   	mov rdi, free_var_19
   306 000001E1 [9800000000000000] 
   307 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   307 000001EB [6F11000000000000] 
   308 000001F3 E8590B0000              	call bind_primitive
   309                                  
   310                                  	; building closure for real->integer
   311 000001F8 48BF-                   	mov rdi, free_var_20
   311 000001FA [A000000000000000] 
   312 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   312 00000204 [9C11000000000000] 
   313 0000020C E8400B0000              	call bind_primitive
   314                                  
   315                                  	; building closure for exit
   316 00000211 48BF-                   	mov rdi, free_var_21
   316 00000213 [A800000000000000] 
   317 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   317 0000021D [CF11000000000000] 
   318 00000225 E8270B0000              	call bind_primitive
   319                                  
   320                                  	; building closure for integer->real
   321 0000022A 48BF-                   	mov rdi, free_var_22
   321 0000022C [B000000000000000] 
   322 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   322 00000236 [EC11000000000000] 
   323 0000023E E80E0B0000              	call bind_primitive
   324                                  
   325                                  	; building closure for rational->real
   326 00000243 48BF-                   	mov rdi, free_var_23
   326 00000245 [B800000000000000] 
   327 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   327 0000024F [2912000000000000] 
   328 00000257 E8F50A0000              	call bind_primitive
   329                                  
   330                                  	; building closure for char->integer
   331 0000025C 48BF-                   	mov rdi, free_var_24
   331 0000025E [C000000000000000] 
   332 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   332 00000268 [6812000000000000] 
   333 00000270 E8DC0A0000              	call bind_primitive
   334                                  
   335                                  	; building closure for integer->char
   336 00000275 48BF-                   	mov rdi, free_var_25
   336 00000277 [C800000000000000] 
   337 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   337 00000281 [9D12000000000000] 
   338 00000289 E8C30A0000              	call bind_primitive
   339                                  
   340                                  	; building closure for trng
   341 0000028E 48BF-                   	mov rdi, free_var_26
   341 00000290 [D000000000000000] 
   342 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   342 0000029A [F712000000000000] 
   343 000002A2 E8AA0A0000              	call bind_primitive
   344                                  
   345                                  	; building closure for zero?
   346 000002A7 48BF-                   	mov rdi, free_var_27
   346 000002A9 [D800000000000000] 
   347 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   347 000002B3 [1A13000000000000] 
   348 000002BB E8910A0000              	call bind_primitive
   349                                  
   350                                  	; building closure for integer?
   351 000002C0 48BF-                   	mov rdi, free_var_28
   351 000002C2 [E000000000000000] 
   352 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   352 000002CC [7513000000000000] 
   353 000002D4 E8780A0000              	call bind_primitive
   354                                  
   355                                  	; building closure for __bin-apply
   356 000002D9 48BF-                   	mov rdi, free_var_29
   356 000002DB [E800000000000000] 
   357 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   357 000002E5 [790D000000000000] 
   358 000002ED E85F0A0000              	call bind_primitive
   359                                  
   360                                  	; building closure for __bin-add-rr
   361 000002F2 48BF-                   	mov rdi, free_var_30
   361 000002F4 [F000000000000000] 
   362 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   362 000002FE [B213000000000000] 
   363 00000306 E8460A0000              	call bind_primitive
   364                                  
   365                                  	; building closure for __bin-sub-rr
   366 0000030B 48BF-                   	mov rdi, free_var_31
   366 0000030D [F800000000000000] 
   367 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   367 00000317 [F613000000000000] 
   368 0000031F E82D0A0000              	call bind_primitive
   369                                  
   370                                  	; building closure for __bin-mul-rr
   371 00000324 48BF-                   	mov rdi, free_var_32
   371 00000326 [0001000000000000] 
   372 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   372 00000330 [3A14000000000000] 
   373 00000338 E8140A0000              	call bind_primitive
   374                                  
   375                                  	; building closure for __bin-div-rr
   376 0000033D 48BF-                   	mov rdi, free_var_33
   376 0000033F [0801000000000000] 
   377 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   377 00000349 [7E14000000000000] 
   378 00000351 E8FB090000              	call bind_primitive
   379                                  
   380                                  	; building closure for __bin-add-qq
   381 00000356 48BF-                   	mov rdi, free_var_34
   381 00000358 [1001000000000000] 
   382 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   382 00000362 [D014000000000000] 
   383 0000036A E8E2090000              	call bind_primitive
   384                                  
   385                                  	; building closure for __bin-sub-qq
   386 0000036F 48BF-                   	mov rdi, free_var_35
   386 00000371 [1801000000000000] 
   387 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   387 0000037B [3815000000000000] 
   388 00000383 E8C9090000              	call bind_primitive
   389                                  
   390                                  	; building closure for __bin-mul-qq
   391 00000388 48BF-                   	mov rdi, free_var_36
   391 0000038A [2001000000000000] 
   392 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   392 00000394 [A015000000000000] 
   393 0000039C E8B0090000              	call bind_primitive
   394                                  
   395                                  	; building closure for __bin-div-qq
   396 000003A1 48BF-                   	mov rdi, free_var_37
   396 000003A3 [2801000000000000] 
   397 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   397 000003AD [F815000000000000] 
   398 000003B5 E897090000              	call bind_primitive
   399                                  
   400                                  	; building closure for error
   401 000003BA 48BF-                   	mov rdi, free_var_38
   401 000003BC [3001000000000000] 
   402 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   402 000003C6 [C616000000000000] 
   403 000003CE E87E090000              	call bind_primitive
   404                                  
   405                                  	; building closure for __bin-less-than-rr
   406 000003D3 48BF-                   	mov rdi, free_var_39
   406 000003D5 [3801000000000000] 
   407 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   407 000003DF [7D17000000000000] 
   408 000003E7 E865090000              	call bind_primitive
   409                                  
   410                                  	; building closure for __bin-less-than-qq
   411 000003EC 48BF-                   	mov rdi, free_var_40
   411 000003EE [4001000000000000] 
   412 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   412 000003F8 [D417000000000000] 
   413 00000400 E84C090000              	call bind_primitive
   414                                  
   415                                  	; building closure for __bin-equal-rr
   416 00000405 48BF-                   	mov rdi, free_var_41
   416 00000407 [4801000000000000] 
   417 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   417 00000411 [3718000000000000] 
   418 00000419 E833090000              	call bind_primitive
   419                                  
   420                                  	; building closure for __bin-equal-qq
   421 0000041E 48BF-                   	mov rdi, free_var_42
   421 00000420 [5001000000000000] 
   422 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   422 0000042A [8E18000000000000] 
   423 00000432 E81A090000              	call bind_primitive
   424                                  
   425                                  	; building closure for quotient
   426 00000437 48BF-                   	mov rdi, free_var_43
   426 00000439 [5801000000000000] 
   427 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   427 00000443 [F118000000000000] 
   428 0000044B E801090000              	call bind_primitive
   429                                  
   430                                  	; building closure for remainder
   431 00000450 48BF-                   	mov rdi, free_var_44
   431 00000452 [6001000000000000] 
   432 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   432 0000045C [5719000000000000] 
   433 00000464 E8E8080000              	call bind_primitive
   434                                  
   435                                  	; building closure for set-car!
   436 00000469 48BF-                   	mov rdi, free_var_45
   436 0000046B [6801000000000000] 
   437 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   437 00000475 [BD19000000000000] 
   438 0000047D E8CF080000              	call bind_primitive
   439                                  
   440                                  	; building closure for set-cdr!
   441 00000482 48BF-                   	mov rdi, free_var_46
   441 00000484 [7001000000000000] 
   442 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   442 0000048E [F319000000000000] 
   443 00000496 E8B6080000              	call bind_primitive
   444                                  
   445                                  	; building closure for string-ref
   446 0000049B 48BF-                   	mov rdi, free_var_47
   446 0000049D [7801000000000000] 
   447 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   447 000004A7 [291A000000000000] 
   448 000004AF E89D080000              	call bind_primitive
   449                                  
   450                                  	; building closure for vector-ref
   451 000004B4 48BF-                   	mov rdi, free_var_48
   451 000004B6 [8001000000000000] 
   452 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   452 000004C0 [941A000000000000] 
   453 000004C8 E884080000              	call bind_primitive
   454                                  
   455                                  	; building closure for vector-set!
   456 000004CD 48BF-                   	mov rdi, free_var_49
   456 000004CF [8801000000000000] 
   457 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   457 000004D9 [F01A000000000000] 
   458 000004E1 E86B080000              	call bind_primitive
   459                                  
   460                                  	; building closure for string-set!
   461 000004E6 48BF-                   	mov rdi, free_var_50
   461 000004E8 [9001000000000000] 
   462 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   462 000004F2 [5A1B000000000000] 
   463 000004FA E852080000              	call bind_primitive
   464                                  
   465                                  	; building closure for make-vector
   466 000004FF 48BF-                   	mov rdi, free_var_51
   466 00000501 [9801000000000000] 
   467 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   467 0000050B [CF1B000000000000] 
   468 00000513 E839080000              	call bind_primitive
   469                                  
   470                                  	; building closure for make-string
   471 00000518 48BF-                   	mov rdi, free_var_52
   471 0000051A [A001000000000000] 
   472 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   472 00000524 [391C000000000000] 
   473 0000052C E820080000              	call bind_primitive
   474                                  
   475                                  	; building closure for numerator
   476 00000531 48BF-                   	mov rdi, free_var_53
   476 00000533 [A801000000000000] 
   477 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   477 0000053D [AB1C000000000000] 
   478 00000545 E807080000              	call bind_primitive
   479                                  
   480                                  	; building closure for denominator
   481 0000054A 48BF-                   	mov rdi, free_var_54
   481 0000054C [B001000000000000] 
   482 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   482 00000556 [D81C000000000000] 
   483 0000055E E8EE070000              	call bind_primitive
   484                                  
   485                                  	; building closure for eq?
   486 00000563 48BF-                   	mov rdi, free_var_55
   486 00000565 [B801000000000000] 
   487 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   487 0000056F [051D000000000000] 
   488 00000577 E8D5070000              	call bind_primitive
   489                                  
   490 0000057C 48B8-                   	mov rax, qword (L_constants + 40)
   490 0000057E [2800000000000000] 
   491 00000586 50                      	push rax
   492 00000587 48B8-                   	mov rax, qword (L_constants + 23)
   492 00000589 [1700000000000000] 
   493 00000591 50                      	push rax
   494 00000592 48B8-                   	mov rax, qword (L_constants + 6)
   494 00000594 [0600000000000000] 
   495 0000059C 50                      	push rax
   496 0000059D 6A03                    	push 3
   497 0000059F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   498 000005A4 E817020000              	call malloc
   499 000005A9 50                      	push rax
   500 000005AA BF00000000              	mov rdi, 8 * 0	; new rib
   501 000005AF E80C020000              	call malloc
   502 000005B4 50                      	push rax
   503 000005B5 BF08000000              	mov rdi, 8 * 1	; extended env
   504 000005BA E801020000              	call malloc
   505 000005BF 488B7D10                	mov rdi, ENV
   506 000005C3 BE00000000              	mov rsi, 0
   507 000005C8 BA01000000              	mov rdx, 1
   508                                  .L_lambda_opt_env_loop_0001:	; ext_env[i + 1] <-- env[i]
   509 000005CD 4883FE00                	cmp rsi, 0
   510 000005D1 7410                    	je .L_lambda_opt_env_end_0001
   511 000005D3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   512 000005D7 48890CD0                	mov qword [rax + 8 * rdx], rcx
   513 000005DB 48FFC6                  	inc rsi
   514 000005DE 48FFC2                  	inc rdx
   515 000005E1 EBEA                    	jmp .L_lambda_opt_env_loop_0001
   516                                  .L_lambda_opt_env_end_0001:
   517 000005E3 5B                      	pop rbx
   518 000005E4 BE00000000              	mov rsi, 0
   519                                  .L_lambda_opt_params_loop_0001:	; copy params
   520 000005E9 4883FE00                	cmp rsi, 0
   521 000005ED 740E                    	je .L_lambda_opt_params_end_0001
   522 000005EF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   523 000005F4 488914F3                	mov qword [rbx + 8 * rsi], rdx
   524 000005F8 48FFC6                  	inc rsi
   525 000005FB EBEC                    	jmp .L_lambda_opt_params_loop_0001
   526                                  .L_lambda_opt_params_end_0001:
   527 000005FD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   528 00000600 4889C3                  	mov rbx, rax
   529 00000603 58                      	pop rax
   530 00000604 C60005                  	mov byte [rax], T_closure
   531 00000607 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   532 0000060B 48C74009[18060000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0001
   533 00000613 E9B8000000              	jmp .L_lambda_opt_end_0001
   534                                  .L_lambda_opt_code_0001:
   535 00000618 4C8B542410              mov r10, qword [rsp+8*2]
   536 0000061D 4983FA01                cmp r10, 1
   537 00000621 740B                    je .L_lambda_opt_arity_check_exact_0001
   538 00000623 4983FA01                cmp r10, 1
   539 00000627 7F41                    jg .L_lambda_opt_arity_check_more_0001
   540 00000629 E95F010000              jmp L_error_incorrect_arity_opt
   541                                  .L_lambda_opt_arity_check_exact_0001:
   542 0000062E 4883EC08                sub rsp, 8
   543 00000632 BA04000000              mov rdx, 3+1
   544 00000637 4889E3                  mov qword rbx, rsp
   545                                  .L_lambda_opt_params_loop_0002:
   546 0000063A 488B4B08                mov qword rcx, [rbx+8]
   547 0000063E 48890B                  mov qword [rbx], rcx
   548 00000641 48FFCA                  dec rdx
   549 00000644 4883C308                add rbx, 8
   550 00000648 4883FA00                cmp rdx, 0
   551 0000064C 7402                    je .L_lambda_opt_params_end_0002
   552 0000064E EBEA                    jmp .L_lambda_opt_params_loop_0002
   553                                  .L_lambda_opt_params_end_0002:
   554 00000650 49FFC2                  inc r10
   555 00000653 4C89542410              mov qword [rsp+8*2], r10
   556 00000658 4983C202                add r10, 2
   557 0000065C 4AC704D4[01000000]      mov qword [rsp + 8*(r10)], sob_nil
   558 00000664 4C8B4D00                mov r9, [rbp]
   559 00000668 EB52                    jmp .L_lambda_opt_stack_adjusted_0001
   560                                  .L_lambda_opt_arity_check_more_0001:
   561 0000066A 48B8-                   mov rax, sob_nil
   561 0000066C [0100000000000000] 
   562 00000674 4C8B542410              mov r10, [rsp+2*8]
   563 00000679 4E8D44D410              lea r8, [rsp+ 8*(2+r10)]
   564 0000067E 4983EA01                sub r10, 1
   565                                  .L_lambda_opt_stack_shrink_loop_0001:
   566 00000682 4983FA00                cmp r10, 0
   567 00000686 7424                    je .L_lambda_opt_stack_shrink_loop_exit_0001
   568 00000688 4889C1                  mov rcx, rax
   569 0000068B 498B10                  mov rdx, [r8]
   570 0000068E BF11000000              mov rdi, 17
   571 00000693 E828010000              call malloc
   572 00000698 C60021                  mov byte [rax], T_pair
   573 0000069B 48894809                mov SOB_PAIR_CDR(rax), rcx
   574 0000069F 48895001                mov SOB_PAIR_CAR(rax), rdx
   575 000006A3 4983E808                sub r8, 8
   576 000006A7 49FFCA                  dec r10
   577 000006AA EBD6                    jmp .L_lambda_opt_stack_shrink_loop_0001
   578                                  .L_lambda_opt_stack_shrink_loop_exit_0001:
   579 000006AC 4889442420              mov [rsp+8*(2+2)], rax
   580 000006B1 41BA02000000            mov r10, 2
   581 000006B7 4C89542410              mov [rsp+16], r10
   582                                  .L_lambda_opt_stack_adjusted_0001:
   583 000006BC 4C8B4D00                mov r9, [rbp]
   584 000006C0 C8000000                enter 0, 0
   585 000006C4 488B4520                mov rax, qword [rbp + 32]
   586 000006C8 C9                      leave
   587 000006C9 4C8B4D00                mov r9, [rbp]
   588 000006CD C22800                  ret 8 * (3 + 2)
   589                                  .L_lambda_opt_end_0001:	; new closure is in rax
   590 000006D0 803805                  	cmp byte [rax], T_closure 
   591 000006D3 0F85ED0F0000                    jne L_code_ptr_error
   592                                  
   593 000006D9 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
   594                                  
   595 000006DD 53                              push rbx
   596                                  
   597 000006DE FF5009                          call SOB_CLOSURE_CODE(rax)
   598                                  
   599                                          
   600 000006E1 4889C7                  	mov rdi, rax
   601 000006E4 E8E8000000              	call print_sexpr_if_not_void
   602                                  
   603 000006E9 48BF-                           mov rdi, fmt_memory_usage
   603 000006EB [9800000000000000] 
   604 000006F3 488B3425[1F010000]              mov rsi, qword [top_of_memory]
   605 000006FB 4881EE[C0010000]                sub rsi, memory
   606 00000702 B800000000                      mov rax, 0
   607                                  	ENTER
   607 00000707 C8000000            <1>  enter 0, 0
   607 0000070B 4883E4F0            <1>  and rsp, ~15
   608 0000070F E8(00000000)                    call printf
   609                                  	LEAVE
   609 00000714 C9                  <1>  leave
   610 00000715 C9                      	leave
   611 00000716 C3                      	ret
   612                                  
   613                                  L_error_non_closure:
   614 00000717 488B3C25[00000000]              mov rdi, qword [stderr]
   615 0000071F 48BE-                           mov rsi, fmt_non_closure
   615 00000721 [CF00000000000000] 
   616 00000729 B800000000                      mov rax, 0
   617                                  	ENTER
   617 0000072E C8000000            <1>  enter 0, 0
   617 00000732 4883E4F0            <1>  and rsp, ~15
   618 00000736 E8(00000000)                    call fprintf
   619                                  	LEAVE
   619 0000073B C9                  <1>  leave
   620 0000073C 48C7C0FEFFFFFF                  mov rax, -2
   621 00000743 E8(00000000)                    call exit
   622                                  
   623                                  L_error_improper_list:
   624 00000748 488B3C25[00000000]      	mov rdi, qword [stderr]
   625 00000750 48BE-                   	mov rsi, fmt_error_improper_list
   625 00000752 [F700000000000000] 
   626 0000075A B800000000              	mov rax, 0
   627                                  	ENTER
   627 0000075F C8000000            <1>  enter 0, 0
   627 00000763 4883E4F0            <1>  and rsp, ~15
   628 00000767 E8(00000000)            	call fprintf
   629                                  	LEAVE
   629 0000076C C9                  <1>  leave
   630 0000076D 48C7C0F9FFFFFF          	mov rax, -7
   631 00000774 E8(00000000)            	call exit
   632                                  
   633                                  L_error_incorrect_arity_simple:
   634 00000779 488B3C25[00000000]              mov rdi, qword [stderr]
   635 00000781 48BE-                           mov rsi, fmt_incorrect_arity_simple
   635 00000783 [3900000000000000] 
   636 0000078B EB12                            jmp L_error_incorrect_arity_common
   637                                  L_error_incorrect_arity_opt:
   638 0000078D 488B3C25[00000000]              mov rdi, qword [stderr]
   639 00000795 48BE-                           mov rsi, fmt_incorrect_arity_opt
   639 00000797 [6400000000000000] 
   640                                  L_error_incorrect_arity_common:
   641 0000079F 5A                              pop rdx
   642 000007A0 59                              pop rcx
   643 000007A1 B800000000                      mov rax, 0
   644                                  	ENTER
   644 000007A6 C8000000            <1>  enter 0, 0
   644 000007AA 4883E4F0            <1>  and rsp, ~15
   645 000007AE E8(00000000)                    call fprintf
   646                                  	LEAVE
   646 000007B3 C9                  <1>  leave
   647 000007B4 48C7C0FAFFFFFF                  mov rax, -6
   648 000007BB E8(00000000)                    call exit
   649                                  
   650                                  section .data
   651                                  fmt_incorrect_arity_simple:
   652 00000039 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   652 00000042 74656420256C642061-
   652 0000004B 7267756D656E74732C-
   652 00000054 206275742067697665-
   652 0000005D 6E20256C640A00     
   653                                  fmt_incorrect_arity_opt:
   654 00000064 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   654 0000006D 746564206174206C65-
   654 00000076 61737420256C642061-
   654 0000007F 7267756D656E74732C-
   654 00000088 206275742067697665-
   654 00000091 6E20256C640A00     
   655                                  fmt_memory_usage:
   656 00000098 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   656 000000A1 6420256C6420627974-
   656 000000AA 6573206F662064796E-
   656 000000B3 616D6963616C6C792D-
   656 000000BC 616C6C6F6361746564-
   656 000000C5 206D656D6F72790A0A-
   656 000000CE 00                 
   657                                  fmt_non_closure:
   658 000000CF 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   658 000000D8 7074696E6720746F20-
   658 000000E1 6170706C792061206E-
   658 000000EA 6F6E2D636C6F737572-
   658 000000F3 65210A00           
   659                                  fmt_error_improper_list:
   660 000000F7 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   660 00000100 7267756D656E742069-
   660 00000109 73206E6F7420612070-
   660 00000112 726F706572206C6973-
   660 0000011B 74210A00           
   661                                  
   662                                  section .bss
   663                                  memory:
   664 000001C0 <res 40000000>          	resb gbytes(1)
   665                                  
   666                                  section .data
   667                                  top_of_memory:
   668 0000011F [C001000000000000]              dq memory
   669                                  
   670                                  section .text
   671                                  malloc:
   672 000007C0 488B0425[1F010000]              mov rax, qword [top_of_memory]
   673 000007C8 48013C25[1F010000]              add qword [top_of_memory], rdi
   674 000007D0 C3                              ret
   675                                          
   676                                  print_sexpr_if_not_void:
   677 000007D1 4881FF[00000000]        	cmp rdi, sob_void
   678 000007D8 7501                    	jne print_sexpr
   679 000007DA C3                      	ret
   680                                  
   681                                  section .data
   682                                  fmt_void:
   683 00000127 233C766F69643E00        	db `#<void>\0`
   684                                  fmt_nil:
   685 0000012F 282900                  	db `()\0`
   686                                  fmt_boolean_false:
   687 00000132 236600                  	db `#f\0`
   688                                  fmt_boolean_true:
   689 00000135 237400                  	db `#t\0`
   690                                  fmt_char_backslash:
   691 00000138 235C5C00                	db `#\\\\\0`
   692                                  fmt_char_dquote:
   693 0000013C 235C2200                	db `#\\"\0`
   694                                  fmt_char_simple:
   695 00000140 235C256300              	db `#\\%c\0`
   696                                  fmt_char_null:
   697 00000145 235C6E756C00            	db `#\\nul\0`
   698                                  fmt_char_bell:
   699 0000014B 235C62656C6C00          	db `#\\bell\0`
   700                                  fmt_char_backspace:
   701 00000152 235C6261636B737061-     	db `#\\backspace\0`
   701 0000015B 636500             
   702                                  fmt_char_tab:
   703 0000015E 235C74616200            	db `#\\tab\0`
   704                                  fmt_char_newline:
   705 00000164 235C6E65776C696E65-     	db `#\\newline\0`
   705 0000016D 00                 
   706                                  fmt_char_formfeed:
   707 0000016E 235C7061676500          	db `#\\page\0`
   708                                  fmt_char_return:
   709 00000175 235C72657475726E00      	db `#\\return\0`
   710                                  fmt_char_escape:
   711 0000017E 235C65736300            	db `#\\esc\0`
   712                                  fmt_char_space:
   713 00000184 235C737061636500        	db `#\\space\0`
   714                                  fmt_char_hex:
   715 0000018C 235C782530325800        	db `#\\x%02X\0`
   716                                  fmt_closure:
   717 00000194 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   717 0000019D 206174203078253038-
   717 000001A6 5820656E763D307825-
   717 000001AF 30385820636F64653D-
   717 000001B8 3078253038583E00   
   718                                  fmt_lparen:
   719 000001C0 2800                    	db `(\0`
   720                                  fmt_dotted_pair:
   721 000001C2 202E2000                	db ` . \0`
   722                                  fmt_rparen:
   723 000001C6 2900                    	db `)\0`
   724                                  fmt_space:
   725 000001C8 2000                    	db ` \0`
   726                                  fmt_empty_vector:
   727 000001CA 23282900                	db `#()\0`
   728                                  fmt_vector:
   729 000001CE 232800                  	db `#(\0`
   730                                  fmt_real:
   731 000001D1 256600                  	db `%f\0`
   732                                  fmt_fraction:
   733 000001D4 256C642F256C6400        	db `%ld/%ld\0`
   734                                  fmt_zero:
   735 000001DC 3000                    	db `0\0`
   736                                  fmt_int:
   737 000001DE 256C6400                	db `%ld\0`
   738                                  fmt_unknown_sexpr_error:
   739 000001E2 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   739 000001EB 6F723A20556E6B6E6F-
   739 000001F4 776E2074797065206F-
   739 000001FD 662073657870722028-
   739 00000206 3078253032582920   
   740 0000020E 617420616464726573-     	db `at address 0x%08X\n\n\0`
   740 00000217 73203078253038580A-
   740 00000220 0A00               
   741                                  fmt_dquote:
   742 00000222 2200                    	db `\"\0`
   743                                  fmt_string_char:
   744 00000224 256300                          db `%c\0`
   745                                  fmt_string_char_7:
   746 00000227 5C6100                          db `\\a\0`
   747                                  fmt_string_char_8:
   748 0000022A 5C6200                          db `\\b\0`
   749                                  fmt_string_char_9:
   750 0000022D 5C7400                          db `\\t\0`
   751                                  fmt_string_char_10:
   752 00000230 5C6E00                          db `\\n\0`
   753                                  fmt_string_char_11:
   754 00000233 5C7600                          db `\\v\0`
   755                                  fmt_string_char_12:
   756 00000236 5C6600                          db `\\f\0`
   757                                  fmt_string_char_13:
   758 00000239 5C7200                          db `\\r\0`
   759                                  fmt_string_char_34:
   760 0000023C 5C2200                          db `\\"\0`
   761                                  fmt_string_char_92:
   762 0000023F 5C5C00                          db `\\\\\0`
   763                                  fmt_string_char_hex:
   764 00000242 5C7825583B00                    db `\\x%X;\0`
   765                                  
   766                                  section .text
   767                                  
   768                                  print_sexpr:
   769                                  	ENTER
   769 000007DB C8000000            <1>  enter 0, 0
   769 000007DF 4883E4F0            <1>  and rsp, ~15
   770 000007E3 8A07                    	mov al, byte [rdi]
   771 000007E5 3C00                    	cmp al, T_void
   772 000007E7 744D                    	je .Lvoid
   773 000007E9 3C01                    	cmp al, T_nil
   774 000007EB 7458                    	je .Lnil
   775 000007ED 3C09                    	cmp al, T_boolean_false
   776 000007EF 7463                    	je .Lboolean_false
   777 000007F1 3C0A                    	cmp al, T_boolean_true
   778 000007F3 746E                    	je .Lboolean_true
   779 000007F5 3C02                    	cmp al, T_char
   780 000007F7 7479                    	je .Lchar
   781 000007F9 3C04                    	cmp al, T_symbol
   782 000007FB 0F84BB010000            	je .Lsymbol
   783 00000801 3C21                    	cmp al, T_pair
   784 00000803 0F84D6010000            	je .Lpair
   785 00000809 3C22                    	cmp al, T_vector
   786 0000080B 0F849F020000            	je .Lvector
   787 00000811 3C05                    	cmp al, T_closure
   788 00000813 0F8489010000            	je .Lclosure
   789 00000819 3C12                    	cmp al, T_real
   790 0000081B 0F8430030000            	je .Lreal
   791 00000821 3C11                    	cmp al, T_rational
   792 00000823 0F8456030000            	je .Lrational
   793 00000829 3C03                    	cmp al, T_string
   794 0000082B 0F848F030000            	je .Lstring
   795                                  
   796 00000831 E9C7040000              	jmp .Lunknown_sexpr_type
   797                                  
   798                                  .Lvoid:
   799 00000836 48BF-                   	mov rdi, fmt_void
   799 00000838 [2701000000000000] 
   800 00000840 E9F5040000              	jmp .Lemit
   801                                  
   802                                  .Lnil:
   803 00000845 48BF-                   	mov rdi, fmt_nil
   803 00000847 [2F01000000000000] 
   804 0000084F E9E6040000              	jmp .Lemit
   805                                  
   806                                  .Lboolean_false:
   807 00000854 48BF-                   	mov rdi, fmt_boolean_false
   807 00000856 [3201000000000000] 
   808 0000085E E9D7040000              	jmp .Lemit
   809                                  
   810                                  .Lboolean_true:
   811 00000863 48BF-                   	mov rdi, fmt_boolean_true
   811 00000865 [3501000000000000] 
   812 0000086D E9C8040000              	jmp .Lemit
   813                                  
   814                                  .Lchar:
   815 00000872 8A4701                  	mov al, byte [rdi + 1]
   816 00000875 3C20                    	cmp al, ' '
   817 00000877 7E28                    	jle .Lchar_whitespace
   818 00000879 3C5C                    	cmp al, 92 		; backslash
   819 0000087B 0F847C000000            	je .Lchar_backslash
   820 00000881 3C22                    	cmp al, '"'
   821 00000883 0F8483000000            	je .Lchar_dquote
   822 00000889 4825FF000000            	and rax, 255
   823 0000088F 48BF-                   	mov rdi, fmt_char_simple
   823 00000891 [4001000000000000] 
   824 00000899 4889C6                  	mov rsi, rax
   825 0000089C E999040000              	jmp .Lemit
   826                                  
   827                                  .Lchar_whitespace:
   828 000008A1 3C00                    	cmp al, 0
   829 000008A3 7476                    	je .Lchar_null
   830 000008A5 3C07                    	cmp al, 7
   831 000008A7 0F847D000000            	je .Lchar_bell
   832 000008AD 3C08                    	cmp al, 8
   833 000008AF 0F8484000000            	je .Lchar_backspace
   834 000008B5 3C09                    	cmp al, 9
   835 000008B7 0F848B000000            	je .Lchar_tab
   836 000008BD 3C0A                    	cmp al, 10
   837 000008BF 0F8492000000            	je .Lchar_newline
   838 000008C5 3C0C                    	cmp al, 12
   839 000008C7 0F8499000000            	je .Lchar_formfeed
   840 000008CD 3C0D                    	cmp al, 13
   841 000008CF 0F84A0000000            	je .Lchar_return
   842 000008D5 3C1B                    	cmp al, 27
   843 000008D7 0F84A7000000            	je .Lchar_escape
   844 000008DD 4825FF000000            	and rax, 255
   845 000008E3 3C20                    	cmp al, ' '
   846 000008E5 0F84A8000000            	je .Lchar_space
   847 000008EB 48BF-                   	mov rdi, fmt_char_hex
   847 000008ED [8C01000000000000] 
   848 000008F5 4889C6                  	mov rsi, rax
   849 000008F8 E93D040000              	jmp .Lemit	
   850                                  
   851                                  .Lchar_backslash:
   852 000008FD 48BF-                   	mov rdi, fmt_char_backslash
   852 000008FF [3801000000000000] 
   853 00000907 E92E040000              	jmp .Lemit
   854                                  
   855                                  .Lchar_dquote:
   856 0000090C 48BF-                   	mov rdi, fmt_char_dquote
   856 0000090E [3C01000000000000] 
   857 00000916 E91F040000              	jmp .Lemit
   858                                  
   859                                  .Lchar_null:
   860 0000091B 48BF-                   	mov rdi, fmt_char_null
   860 0000091D [4501000000000000] 
   861 00000925 E910040000              	jmp .Lemit
   862                                  
   863                                  .Lchar_bell:
   864 0000092A 48BF-                   	mov rdi, fmt_char_bell
   864 0000092C [4B01000000000000] 
   865 00000934 E901040000              	jmp .Lemit
   866                                  
   867                                  .Lchar_backspace:
   868 00000939 48BF-                   	mov rdi, fmt_char_backspace
   868 0000093B [5201000000000000] 
   869 00000943 E9F2030000              	jmp .Lemit
   870                                  
   871                                  .Lchar_tab:
   872 00000948 48BF-                   	mov rdi, fmt_char_tab
   872 0000094A [5E01000000000000] 
   873 00000952 E9E3030000              	jmp .Lemit
   874                                  
   875                                  .Lchar_newline:
   876 00000957 48BF-                   	mov rdi, fmt_char_newline
   876 00000959 [6401000000000000] 
   877 00000961 E9D4030000              	jmp .Lemit
   878                                  
   879                                  .Lchar_formfeed:
   880 00000966 48BF-                   	mov rdi, fmt_char_formfeed
   880 00000968 [6E01000000000000] 
   881 00000970 E9C5030000              	jmp .Lemit
   882                                  
   883                                  .Lchar_return:
   884 00000975 48BF-                   	mov rdi, fmt_char_return
   884 00000977 [7501000000000000] 
   885 0000097F E9B6030000              	jmp .Lemit
   886                                  
   887                                  .Lchar_escape:
   888 00000984 48BF-                   	mov rdi, fmt_char_escape
   888 00000986 [7E01000000000000] 
   889 0000098E E9A7030000              	jmp .Lemit
   890                                  
   891                                  .Lchar_space:
   892 00000993 48BF-                   	mov rdi, fmt_char_space
   892 00000995 [8401000000000000] 
   893 0000099D E998030000              	jmp .Lemit
   894                                  
   895                                  .Lclosure:
   896 000009A2 4889FE                  	mov rsi, qword rdi
   897 000009A5 48BF-                   	mov rdi, fmt_closure
   897 000009A7 [9401000000000000] 
   898 000009AF 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   899 000009B3 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   900 000009B7 E97E030000              	jmp .Lemit
   901                                  
   902                                  .Lsymbol:
   903 000009BC 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   904 000009C0 BE01000000              	mov rsi, 1		 ; size = 1 byte
   905 000009C5 488B5701                	mov rdx, qword [rdi + 1] ; length
   906 000009C9 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   907 000009CD 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   908 000009D5 E8(00000000)            	call fwrite
   909 000009DA E970030000              	jmp .Lend
   910                                  	
   911                                  .Lpair:
   912 000009DF 57                      	push rdi
   913 000009E0 48BF-                   	mov rdi, fmt_lparen
   913 000009E2 [C001000000000000] 
   914 000009EA B800000000              	mov rax, 0
   915                                          ENTER
   915 000009EF C8000000            <1>  enter 0, 0
   915 000009F3 4883E4F0            <1>  and rsp, ~15
   916 000009F7 E8(00000000)            	call printf
   917                                          LEAVE
   917 000009FC C9                  <1>  leave
   918 000009FD 488B3C24                	mov rdi, qword [rsp] 	; pair
   919 00000A01 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   920 00000A05 E8D1FDFFFF              	call print_sexpr
   921 00000A0A 5F                      	pop rdi 		; pair
   922 00000A0B 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   923                                  .Lcdr:
   924 00000A0F 8A07                    	mov al, byte [rdi]
   925 00000A11 3C01                    	cmp al, T_nil
   926 00000A13 7447                    	je .Lcdr_nil
   927 00000A15 3C21                    	cmp al, T_pair
   928 00000A17 7462                    	je .Lcdr_pair
   929 00000A19 57                      	push rdi
   930 00000A1A 48BF-                   	mov rdi, fmt_dotted_pair
   930 00000A1C [C201000000000000] 
   931 00000A24 B800000000              	mov rax, 0
   932                                  	ENTER
   932 00000A29 C8000000            <1>  enter 0, 0
   932 00000A2D 4883E4F0            <1>  and rsp, ~15
   933 00000A31 E8(00000000)            	call printf
   934                                  	LEAVE
   934 00000A36 C9                  <1>  leave
   935 00000A37 5F                      	pop rdi
   936 00000A38 E89EFDFFFF              	call print_sexpr
   937 00000A3D 48BF-                   	mov rdi, fmt_rparen
   937 00000A3F [C601000000000000] 
   938 00000A47 B800000000              	mov rax, 0
   939                                  	ENTER
   939 00000A4C C8000000            <1>  enter 0, 0
   939 00000A50 4883E4F0            <1>  and rsp, ~15
   940 00000A54 E8(00000000)            	call printf
   941                                  	LEAVE
   941 00000A59 C9                  <1>  leave
   942                                  	LEAVE
   942 00000A5A C9                  <1>  leave
   943 00000A5B C3                      	ret
   944                                  
   945                                  .Lcdr_nil:
   946 00000A5C 48BF-                   	mov rdi, fmt_rparen
   946 00000A5E [C601000000000000] 
   947 00000A66 B800000000              	mov rax, 0
   948                                  	ENTER
   948 00000A6B C8000000            <1>  enter 0, 0
   948 00000A6F 4883E4F0            <1>  and rsp, ~15
   949 00000A73 E8(00000000)            	call printf
   950                                  	LEAVE
   950 00000A78 C9                  <1>  leave
   951                                  	LEAVE
   951 00000A79 C9                  <1>  leave
   952 00000A7A C3                      	ret
   953                                  
   954                                  .Lcdr_pair:
   955 00000A7B 57                      	push rdi
   956 00000A7C 48BF-                   	mov rdi, fmt_space
   956 00000A7E [C801000000000000] 
   957 00000A86 B800000000              	mov rax, 0
   958                                  	ENTER
   958 00000A8B C8000000            <1>  enter 0, 0
   958 00000A8F 4883E4F0            <1>  and rsp, ~15
   959 00000A93 E8(00000000)            	call printf
   960                                  	LEAVE
   960 00000A98 C9                  <1>  leave
   961 00000A99 488B3C24                	mov rdi, qword [rsp]
   962 00000A9D 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   963 00000AA1 E835FDFFFF              	call print_sexpr
   964 00000AA6 5F                      	pop rdi
   965 00000AA7 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   966 00000AAB E95FFFFFFF              	jmp .Lcdr
   967                                  
   968                                  .Lvector:
   969 00000AB0 488B4701                	mov rax, qword [rdi + 1] ; length
   970 00000AB4 4883F800                	cmp rax, 0
   971 00000AB8 0F8484000000            	je .Lvector_empty
   972 00000ABE 57                      	push rdi
   973 00000ABF 48BF-                   	mov rdi, fmt_vector
   973 00000AC1 [CE01000000000000] 
   974 00000AC9 B800000000              	mov rax, 0
   975                                  	ENTER
   975 00000ACE C8000000            <1>  enter 0, 0
   975 00000AD2 4883E4F0            <1>  and rsp, ~15
   976 00000AD6 E8(00000000)            	call printf
   977                                  	LEAVE
   977 00000ADB C9                  <1>  leave
   978 00000ADC 488B3C24                	mov rdi, qword [rsp]
   979 00000AE0 FF7701                  	push qword [rdi + 1]
   980 00000AE3 6A01                    	push 1
   981 00000AE5 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   982 00000AE9 E8EDFCFFFF              	call print_sexpr
   983                                  .Lvector_loop:
   984                                  	; [rsp] index
   985                                  	; [rsp + 8*1] limit
   986                                  	; [rsp + 8*2] vector
   987 00000AEE 488B0424                	mov rax, qword [rsp]
   988 00000AF2 483B442408              	cmp rax, qword [rsp + 8*1]
   989 00000AF7 7436                    	je .Lvector_end
   990 00000AF9 48BF-                   	mov rdi, fmt_space
   990 00000AFB [C801000000000000] 
   991 00000B03 B800000000              	mov rax, 0
   992                                  	ENTER
   992 00000B08 C8000000            <1>  enter 0, 0
   992 00000B0C 4883E4F0            <1>  and rsp, ~15
   993 00000B10 E8(00000000)            	call printf
   994                                  	LEAVE
   994 00000B15 C9                  <1>  leave
   995 00000B16 488B0424                	mov rax, qword [rsp]
   996 00000B1A 488B5C2410              	mov rbx, qword [rsp + 8*2]
   997 00000B1F 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   998 00000B24 E8B2FCFFFF              	call print_sexpr
   999 00000B29 48FF0424                	inc qword [rsp]
  1000 00000B2D EBBF                    	jmp .Lvector_loop
  1001                                  
  1002                                  .Lvector_end:
  1003 00000B2F 4883C418                	add rsp, 8*3
  1004 00000B33 48BF-                   	mov rdi, fmt_rparen
  1004 00000B35 [C601000000000000] 
  1005 00000B3D E9F8010000              	jmp .Lemit	
  1006                                  
  1007                                  .Lvector_empty:
  1008 00000B42 48BF-                   	mov rdi, fmt_empty_vector
  1008 00000B44 [CA01000000000000] 
  1009 00000B4C E9E9010000              	jmp .Lemit
  1010                                  
  1011                                  .Lreal:
  1012 00000B51 FF7701                  	push qword [rdi + 1]
  1013 00000B54 F20F100424              	movsd xmm0, qword [rsp]
  1014 00000B59 4883C408                	add rsp, 8*1
  1015 00000B5D 48BF-                   	mov rdi, fmt_real
  1015 00000B5F [D101000000000000] 
  1016 00000B67 B801000000              	mov rax, 1
  1017                                  	ENTER
  1017 00000B6C C8000000            <1>  enter 0, 0
  1017 00000B70 4883E4F0            <1>  and rsp, ~15
  1018 00000B74 E8(00000000)            	call printf
  1019                                  	LEAVE
  1019 00000B79 C9                  <1>  leave
  1020 00000B7A E9D0010000              	jmp .Lend
  1021                                  
  1022                                  .Lrational:
  1023 00000B7F 488B7701                	mov rsi, qword [rdi + 1]
  1024 00000B83 488B5709                	mov rdx, qword [rdi + 1 + 8]
  1025 00000B87 4883FE00                	cmp rsi, 0
  1026 00000B8B 7415                    	je .Lrat_zero
  1027 00000B8D 4883FA01                	cmp rdx, 1
  1028 00000B91 741E                    	je .Lrat_int
  1029 00000B93 48BF-                   	mov rdi, fmt_fraction
  1029 00000B95 [D401000000000000] 
  1030 00000B9D E998010000              	jmp .Lemit
  1031                                  
  1032                                  .Lrat_zero:
  1033 00000BA2 48BF-                   	mov rdi, fmt_zero
  1033 00000BA4 [DC01000000000000] 
  1034 00000BAC E989010000              	jmp .Lemit
  1035                                  
  1036                                  .Lrat_int:
  1037 00000BB1 48BF-                   	mov rdi, fmt_int
  1037 00000BB3 [DE01000000000000] 
  1038 00000BBB E97A010000              	jmp .Lemit
  1039                                  
  1040                                  .Lstring:
  1041 00000BC0 488D4709                	lea rax, [rdi + 1 + 8]
  1042 00000BC4 50                      	push rax
  1043 00000BC5 FF7701                  	push qword [rdi + 1]
  1044 00000BC8 48BF-                   	mov rdi, fmt_dquote
  1044 00000BCA [2202000000000000] 
  1045 00000BD2 B800000000              	mov rax, 0
  1046                                  	ENTER
  1046 00000BD7 C8000000            <1>  enter 0, 0
  1046 00000BDB 4883E4F0            <1>  and rsp, ~15
  1047 00000BDF E8(00000000)            	call printf
  1048                                  	LEAVE
  1048 00000BE4 C9                  <1>  leave
  1049                                  .Lstring_loop:
  1050                                  	; qword [rsp]: limit
  1051                                  	; qword [rsp + 8*1]: char *
  1052 00000BE5 48833C2400              	cmp qword [rsp], 0
  1053 00000BEA 0F84FD000000            	je .Lstring_end
  1054 00000BF0 488B442408              	mov rax, qword [rsp + 8*1]
  1055 00000BF5 8A00                    	mov al, byte [rax]
  1056 00000BF7 4825FF000000            	and rax, 255
  1057 00000BFD 3C07                    	cmp al, 7
  1058 00000BFF 7468                            je .Lstring_char_7
  1059 00000C01 3C08                            cmp al, 8
  1060 00000C03 7470                            je .Lstring_char_8
  1061 00000C05 3C09                            cmp al, 9
  1062 00000C07 7478                            je .Lstring_char_9
  1063 00000C09 3C0A                            cmp al, 10
  1064 00000C0B 0F847C000000                    je .Lstring_char_10
  1065 00000C11 3C0B                            cmp al, 11
  1066 00000C13 0F8480000000                    je .Lstring_char_11
  1067 00000C19 3C0C                            cmp al, 12
  1068 00000C1B 0F8484000000                    je .Lstring_char_12
  1069 00000C21 3C0D                            cmp al, 13
  1070 00000C23 0F8488000000                    je .Lstring_char_13
  1071 00000C29 3C22                            cmp al, 34
  1072 00000C2B 0F848C000000                    je .Lstring_char_34
  1074 00000C31 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1075 00000C33 3C20                            cmp al, ' '
  1076 00000C35 0F8CA0000000                    jl .Lstring_char_hex
  1077 00000C3B 48BF-                           mov rdi, fmt_string_char
  1077 00000C3D [2402000000000000] 
  1078 00000C45 4889C6                          mov rsi, rax
  1079                                  .Lstring_char_emit:
  1080 00000C48 B800000000                      mov rax, 0
  1081                                          ENTER
  1081 00000C4D C8000000            <1>  enter 0, 0
  1081 00000C51 4883E4F0            <1>  and rsp, ~15
  1082 00000C55 E8(00000000)                    call printf
  1083                                          LEAVE
  1083 00000C5A C9                  <1>  leave
  1084 00000C5B 48FF0C24                        dec qword [rsp]
  1085 00000C5F 48FF442408                      inc qword [rsp + 8*1]
  1086 00000C64 E97CFFFFFF                      jmp .Lstring_loop
  1087                                  
  1088                                  .Lstring_char_7:
  1089 00000C69 48BF-                           mov rdi, fmt_string_char_7
  1089 00000C6B [2702000000000000] 
  1090 00000C73 EBD3                            jmp .Lstring_char_emit
  1091                                  
  1092                                  .Lstring_char_8:
  1093 00000C75 48BF-                           mov rdi, fmt_string_char_8
  1093 00000C77 [2A02000000000000] 
  1094 00000C7F EBC7                            jmp .Lstring_char_emit
  1095                                          
  1096                                  .Lstring_char_9:
  1097 00000C81 48BF-                           mov rdi, fmt_string_char_9
  1097 00000C83 [2D02000000000000] 
  1098 00000C8B EBBB                            jmp .Lstring_char_emit
  1099                                  
  1100                                  .Lstring_char_10:
  1101 00000C8D 48BF-                           mov rdi, fmt_string_char_10
  1101 00000C8F [3002000000000000] 
  1102 00000C97 EBAF                            jmp .Lstring_char_emit
  1103                                  
  1104                                  .Lstring_char_11:
  1105 00000C99 48BF-                           mov rdi, fmt_string_char_11
  1105 00000C9B [3302000000000000] 
  1106 00000CA3 EBA3                            jmp .Lstring_char_emit
  1107                                  
  1108                                  .Lstring_char_12:
  1109 00000CA5 48BF-                           mov rdi, fmt_string_char_12
  1109 00000CA7 [3602000000000000] 
  1110 00000CAF EB97                            jmp .Lstring_char_emit
  1111                                  
  1112                                  .Lstring_char_13:
  1113 00000CB1 48BF-                           mov rdi, fmt_string_char_13
  1113 00000CB3 [3902000000000000] 
  1114 00000CBB EB8B                            jmp .Lstring_char_emit
  1115                                  
  1116                                  .Lstring_char_34:
  1117 00000CBD 48BF-                           mov rdi, fmt_string_char_34
  1117 00000CBF [3C02000000000000] 
  1118 00000CC7 E97CFFFFFF                      jmp .Lstring_char_emit
  1119                                  
  1120                                  .Lstring_char_92:
  1121 00000CCC 48BF-                           mov rdi, fmt_string_char_92
  1121 00000CCE [3F02000000000000] 
  1122 00000CD6 E96DFFFFFF                      jmp .Lstring_char_emit
  1123                                  
  1124                                  .Lstring_char_hex:
  1125 00000CDB 48BF-                           mov rdi, fmt_string_char_hex
  1125 00000CDD [4202000000000000] 
  1126 00000CE5 4889C6                          mov rsi, rax
  1127 00000CE8 E95BFFFFFF                      jmp .Lstring_char_emit        
  1128                                  
  1129                                  .Lstring_end:
  1130 00000CED 4883C410                	add rsp, 8 * 2
  1131 00000CF1 48BF-                   	mov rdi, fmt_dquote
  1131 00000CF3 [2202000000000000] 
  1132 00000CFB EB3D                    	jmp .Lemit
  1133                                  
  1134                                  .Lunknown_sexpr_type:
  1135 00000CFD 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1135 00000CFF [E201000000000000] 
  1136 00000D07 4825FF000000            	and rax, 255
  1137 00000D0D 4889C2                  	mov rdx, rax
  1138 00000D10 4889F9                  	mov rcx, rdi
  1139 00000D13 488B3C25[00000000]      	mov rdi, qword [stderr]
  1140 00000D1B B800000000              	mov rax, 0
  1141                                  	ENTER
  1141 00000D20 C8000000            <1>  enter 0, 0
  1141 00000D24 4883E4F0            <1>  and rsp, ~15
  1142 00000D28 E8(00000000)            	call fprintf
  1143                                  	LEAVE
  1143 00000D2D C9                  <1>  leave
  1144 00000D2E 48C7C0FFFFFFFF          	mov rax, -1
  1145 00000D35 E8(00000000)            	call exit
  1146                                  
  1147                                  .Lemit:
  1148 00000D3A B800000000              	mov rax, 0
  1149                                  	ENTER
  1149 00000D3F C8000000            <1>  enter 0, 0
  1149 00000D43 4883E4F0            <1>  and rsp, ~15
  1150 00000D47 E8(00000000)            	call printf
  1151                                  	LEAVE
  1151 00000D4C C9                  <1>  leave
  1152 00000D4D EB00                    	jmp .Lend
  1153                                  
  1154                                  .Lend:
  1155                                  	LEAVE
  1155 00000D4F C9                  <1>  leave
  1156 00000D50 C3                      	ret
  1157                                  
  1158                                  ;;; rdi: address of free variable
  1159                                  ;;; rsi: address of code-pointer
  1160                                  bind_primitive:
  1161                                          ENTER
  1161 00000D51 C8000000            <1>  enter 0, 0
  1161 00000D55 4883E4F0            <1>  and rsp, ~15
  1162 00000D59 57                              push rdi
  1163 00000D5A BF11000000                      mov rdi, (1 + 8 + 8)
  1164 00000D5F E85CFAFFFF                      call malloc
  1165 00000D64 5F                              pop rdi
  1166 00000D65 C60005                          mov byte [rax], T_closure
  1167 00000D68 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1168 00000D70 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1169 00000D74 488907                          mov qword [rdi], rax
  1170                                          LEAVE
  1170 00000D77 C9                  <1>  leave
  1171 00000D78 C3                              ret
  1172                                  
  1173                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1174                                  L_code_ptr_bin_apply:
  1175                                  ;         ENTER
  1176                                  ;         cmp COUNT, 2
  1177                                  ;         jne L_error_arg_count_2
  1178                                  
  1179                                  ;         mov r11, 0                                              ; init args_counter with 0
  1180                                  
  1181                                  ;         ;; push all args that in the list
  1182                                  
  1183                                  ;         mov r9, qword PARAM(1)                                  ; r9 <- args_list
  1184                                  ;         ; assert_pair(r9)
  1185                                  ;         cmp byte [r9], T_nil 
  1186                                  ;         je .L_error_with_args_count
  1187                                  
  1188                                  
  1189                                  ;         assert_pair(r9)                                         ;
  1190                                  ;         mov rcx, qword SOB_PAIR_CAR(r9)                         ; rcx <- car(args_list)
  1191                                  ;         push rcx                                                ; push first arg to stack
  1192                                  
  1193                                  ;         mov r11, (r11 +1)                                      ; increament args_counter
  1194                                          
  1195                                  
  1196                                  ;         assert_pair(r9)
  1197                                  ;         mov rcx, qword SOB_PAIR_CDR(r9)                         ; rcx <- rest of the list
  1198                                  ;         mov r9, qword rcx                                       ; r9 <- rest of the list
  1199                                          
  1200                                  ;         cmp byte [r9], T_nil                                    ; check if rest of the list is empty
  1201                                  ;         je .L_error_with_args_count                             ; if empty go to args error, have to be at least 2
  1202                                          
  1203                                  ; .L_list_is_not_done:
  1204                                  
  1205                                  ;         assert_pair(r9)
  1206                                  ;         mov rcx, qword SOB_PAIR_CAR(r9)                         ; rcx <- car of rest of the list
  1207                                  ;         push rcx                                                ; push arg
  1208                                  
  1209                                  ;         mov r11, (r11 + 1)                                      ; args_counter++
  1210                                  
  1211                                  ;         assert_pair(r9)
  1212                                  ;         mov rcx, qword SOB_PAIR_CDR(r9)                         ; rcx <- rest of rest of the list
  1213                                  ;         mov r9, qword rcx                                       ; r9 <- rest of rest of the list
  1214                                  
  1215                                  ;         cmp byte [r9], T_nil                                    ; check if rest of the list is empty
  1216                                  ;         jne .L_list_is_not_done 
  1217                                  
  1218                                  ; .L_list_is_done:
  1219                                          
  1220                                  ;         push r11                                                ; push num_of_args
  1221                                  
  1222                                  ;         ; invriant: r9 has the proc code
  1223                                  ;         mov r9, qword PARAM(0)                                  ; arg_proc to r9
  1224                                  ;         cmp byte [rax], T_closure                               ;  is it a closure? 
  1225                                  ;         jne L_error_non_closure                                 ; if not closure jmp kibinimat
  1226                                  
  1227                                  ;         mov r10, SOB_CLOSURE_ENV(r9)                            ; get proc env
  1228                                  ;         push r10                                                ; push closure env to stack
  1229                                  
  1230                                  
  1231                                  ;         ; ??? need to push retaddress, which is it ???
  1232                                  ;         ; ??? need to think about rbp ???
  1233                                  
  1234                                  ;         ;get proc code and jmp
  1235                                  ;         mov r9, qword PARAM(0)                                  ; arg_proc to r9
  1236                                  ;         mov r10, SOB_CLOSURE_CODE(r9)
  1237                                  ;         jmp r10               
  1238                                  	
  1239                                  L_code_ptr_is_null:
  1240                                          ENTER
  1240 00000D79 C8000000            <1>  enter 0, 0
  1240 00000D7D 4883E4F0            <1>  and rsp, ~15
  1241 00000D81 48837D1801                      cmp COUNT, 1
  1242 00000D86 0F85A5100000                    jne L_error_arg_count_1
  1243 00000D8C 488B4520                        mov rax, PARAM(0)
  1244 00000D90 803801                          cmp byte [rax], T_nil
  1245 00000D93 750C                            jne .L_false
  1246 00000D95 48B8-                           mov rax, sob_boolean_true
  1246 00000D97 [0300000000000000] 
  1247 00000D9F EB0A                            jmp .L_end
  1248                                  .L_false:
  1249 00000DA1 48B8-                           mov rax, sob_boolean_false
  1249 00000DA3 [0200000000000000] 
  1250                                  .L_end:
  1251                                          LEAVE
  1251 00000DAB C9                  <1>  leave
  1252 00000DAC C21800                          ret AND_KILL_FRAME(1)
  1253                                  
  1254                                  L_code_ptr_is_pair:
  1255                                          ENTER
  1255 00000DAF C8000000            <1>  enter 0, 0
  1255 00000DB3 4883E4F0            <1>  and rsp, ~15
  1256 00000DB7 48837D1801                      cmp COUNT, 1
  1257 00000DBC 0F856F100000                    jne L_error_arg_count_1
  1258 00000DC2 488B4520                        mov rax, PARAM(0)
  1259 00000DC6 803821                          cmp byte [rax], T_pair
  1260 00000DC9 750C                            jne .L_false
  1261 00000DCB 48B8-                           mov rax, sob_boolean_true
  1261 00000DCD [0300000000000000] 
  1262 00000DD5 EB0A                            jmp .L_end
  1263                                  .L_false:
  1264 00000DD7 48B8-                           mov rax, sob_boolean_false
  1264 00000DD9 [0200000000000000] 
  1265                                  .L_end:
  1266                                          LEAVE
  1266 00000DE1 C9                  <1>  leave
  1267 00000DE2 C21800                          ret AND_KILL_FRAME(1)
  1268                                          
  1269                                  L_code_ptr_is_void:
  1270                                          ENTER
  1270 00000DE5 C8000000            <1>  enter 0, 0
  1270 00000DE9 4883E4F0            <1>  and rsp, ~15
  1271 00000DED 48837D1801                      cmp COUNT, 1
  1272 00000DF2 0F8539100000                    jne L_error_arg_count_1
  1273 00000DF8 488B4520                        mov rax, PARAM(0)
  1274 00000DFC 803800                          cmp byte [rax], T_void
  1275 00000DFF 750C                            jne .L_false
  1276 00000E01 48B8-                           mov rax, sob_boolean_true
  1276 00000E03 [0300000000000000] 
  1277 00000E0B EB0A                            jmp .L_end
  1278                                  .L_false:
  1279 00000E0D 48B8-                           mov rax, sob_boolean_false
  1279 00000E0F [0200000000000000] 
  1280                                  .L_end:
  1281                                          LEAVE
  1281 00000E17 C9                  <1>  leave
  1282 00000E18 C21800                          ret AND_KILL_FRAME(1)
  1283                                  
  1284                                  L_code_ptr_is_char:
  1285                                          ENTER
  1285 00000E1B C8000000            <1>  enter 0, 0
  1285 00000E1F 4883E4F0            <1>  and rsp, ~15
  1286 00000E23 48837D1801                      cmp COUNT, 1
  1287 00000E28 0F8503100000                    jne L_error_arg_count_1
  1288 00000E2E 488B4520                        mov rax, PARAM(0)
  1289 00000E32 803802                          cmp byte [rax], T_char
  1290 00000E35 750C                            jne .L_false
  1291 00000E37 48B8-                           mov rax, sob_boolean_true
  1291 00000E39 [0300000000000000] 
  1292 00000E41 EB0A                            jmp .L_end
  1293                                  .L_false:
  1294 00000E43 48B8-                           mov rax, sob_boolean_false
  1294 00000E45 [0200000000000000] 
  1295                                  .L_end:
  1296                                          LEAVE
  1296 00000E4D C9                  <1>  leave
  1297 00000E4E C21800                          ret AND_KILL_FRAME(1)
  1298                                  
  1299                                  L_code_ptr_is_string:
  1300                                          ENTER
  1300 00000E51 C8000000            <1>  enter 0, 0
  1300 00000E55 4883E4F0            <1>  and rsp, ~15
  1301 00000E59 48837D1801                      cmp COUNT, 1
  1302 00000E5E 0F85CD0F0000                    jne L_error_arg_count_1
  1303 00000E64 488B4520                        mov rax, PARAM(0)
  1304 00000E68 803803                          cmp byte [rax], T_string
  1305 00000E6B 750C                            jne .L_false
  1306 00000E6D 48B8-                           mov rax, sob_boolean_true
  1306 00000E6F [0300000000000000] 
  1307 00000E77 EB0A                            jmp .L_end
  1308                                  .L_false:
  1309 00000E79 48B8-                           mov rax, sob_boolean_false
  1309 00000E7B [0200000000000000] 
  1310                                  .L_end:
  1311                                          LEAVE
  1311 00000E83 C9                  <1>  leave
  1312 00000E84 C21800                          ret AND_KILL_FRAME(1)
  1313                                  
  1314                                  L_code_ptr_is_symbol:
  1315                                          ENTER
  1315 00000E87 C8000000            <1>  enter 0, 0
  1315 00000E8B 4883E4F0            <1>  and rsp, ~15
  1316 00000E8F 48837D1801                      cmp COUNT, 1
  1317 00000E94 0F85970F0000                    jne L_error_arg_count_1
  1318 00000E9A 488B4520                        mov rax, PARAM(0)
  1319 00000E9E 803804                          cmp byte [rax], T_symbol
  1320 00000EA1 750C                            jne .L_false
  1321 00000EA3 48B8-                           mov rax, sob_boolean_true
  1321 00000EA5 [0300000000000000] 
  1322 00000EAD EB0A                            jmp .L_end
  1323                                  .L_false:
  1324 00000EAF 48B8-                           mov rax, sob_boolean_false
  1324 00000EB1 [0200000000000000] 
  1325                                  .L_end:
  1326                                          LEAVE
  1326 00000EB9 C9                  <1>  leave
  1327 00000EBA C21800                          ret AND_KILL_FRAME(1)
  1328                                  
  1329                                  L_code_ptr_is_vector:
  1330                                          ENTER
  1330 00000EBD C8000000            <1>  enter 0, 0
  1330 00000EC1 4883E4F0            <1>  and rsp, ~15
  1331 00000EC5 48837D1801                      cmp COUNT, 1
  1332 00000ECA 0F85610F0000                    jne L_error_arg_count_1
  1333 00000ED0 488B4520                        mov rax, PARAM(0)
  1334 00000ED4 803822                          cmp byte [rax], T_vector
  1335 00000ED7 750C                            jne .L_false
  1336 00000ED9 48B8-                           mov rax, sob_boolean_true
  1336 00000EDB [0300000000000000] 
  1337 00000EE3 EB0A                            jmp .L_end
  1338                                  .L_false:
  1339 00000EE5 48B8-                           mov rax, sob_boolean_false
  1339 00000EE7 [0200000000000000] 
  1340                                  .L_end:
  1341                                          LEAVE
  1341 00000EEF C9                  <1>  leave
  1342 00000EF0 C21800                          ret AND_KILL_FRAME(1)
  1343                                  
  1344                                  L_code_ptr_is_closure:
  1345                                          ENTER
  1345 00000EF3 C8000000            <1>  enter 0, 0
  1345 00000EF7 4883E4F0            <1>  and rsp, ~15
  1346 00000EFB 48837D1801                      cmp COUNT, 1
  1347 00000F00 0F852B0F0000                    jne L_error_arg_count_1
  1348 00000F06 488B4520                        mov rax, PARAM(0)
  1349 00000F0A 803805                          cmp byte [rax], T_closure
  1350 00000F0D 750C                            jne .L_false
  1351 00000F0F 48B8-                           mov rax, sob_boolean_true
  1351 00000F11 [0300000000000000] 
  1352 00000F19 EB0A                            jmp .L_end
  1353                                  .L_false:
  1354 00000F1B 48B8-                           mov rax, sob_boolean_false
  1354 00000F1D [0200000000000000] 
  1355                                  .L_end:
  1356                                          LEAVE
  1356 00000F25 C9                  <1>  leave
  1357 00000F26 C21800                          ret AND_KILL_FRAME(1)
  1358                                  
  1359                                  L_code_ptr_is_real:
  1360                                          ENTER
  1360 00000F29 C8000000            <1>  enter 0, 0
  1360 00000F2D 4883E4F0            <1>  and rsp, ~15
  1361 00000F31 48837D1801                      cmp COUNT, 1
  1362 00000F36 0F85F50E0000                    jne L_error_arg_count_1
  1363 00000F3C 488B4520                        mov rax, PARAM(0)
  1364 00000F40 803812                          cmp byte [rax], T_real
  1365 00000F43 750C                            jne .L_false
  1366 00000F45 48B8-                           mov rax, sob_boolean_true
  1366 00000F47 [0300000000000000] 
  1367 00000F4F EB0A                            jmp .L_end
  1368                                  .L_false:
  1369 00000F51 48B8-                           mov rax, sob_boolean_false
  1369 00000F53 [0200000000000000] 
  1370                                  .L_end:
  1371                                          LEAVE
  1371 00000F5B C9                  <1>  leave
  1372 00000F5C C21800                          ret AND_KILL_FRAME(1)
  1373                                  
  1374                                  L_code_ptr_is_rational:
  1375                                          ENTER
  1375 00000F5F C8000000            <1>  enter 0, 0
  1375 00000F63 4883E4F0            <1>  and rsp, ~15
  1376 00000F67 48837D1801                      cmp COUNT, 1
  1377 00000F6C 0F85BF0E0000                    jne L_error_arg_count_1
  1378 00000F72 488B4520                        mov rax, PARAM(0)
  1379 00000F76 803811                          cmp byte [rax], T_rational
  1380 00000F79 750C                            jne .L_false
  1381 00000F7B 48B8-                           mov rax, sob_boolean_true
  1381 00000F7D [0300000000000000] 
  1382 00000F85 EB0A                            jmp .L_end
  1383                                  .L_false:
  1384 00000F87 48B8-                           mov rax, sob_boolean_false
  1384 00000F89 [0200000000000000] 
  1385                                  .L_end:
  1386                                          LEAVE
  1386 00000F91 C9                  <1>  leave
  1387 00000F92 C21800                          ret AND_KILL_FRAME(1)
  1388                                  
  1389                                  L_code_ptr_is_boolean:
  1390                                          ENTER
  1390 00000F95 C8000000            <1>  enter 0, 0
  1390 00000F99 4883E4F0            <1>  and rsp, ~15
  1391 00000F9D 48837D1801                      cmp COUNT, 1
  1392 00000FA2 0F85890E0000                    jne L_error_arg_count_1
  1393 00000FA8 488B4520                        mov rax, PARAM(0)
  1394 00000FAC 8A18                            mov bl, byte [rax]
  1395 00000FAE 80E308                          and bl, T_boolean
  1396 00000FB1 740C                            je .L_false
  1397 00000FB3 48B8-                           mov rax, sob_boolean_true
  1397 00000FB5 [0300000000000000] 
  1398 00000FBD EB0A                            jmp .L_end
  1399                                  .L_false:
  1400 00000FBF 48B8-                           mov rax, sob_boolean_false
  1400 00000FC1 [0200000000000000] 
  1401                                  .L_end:
  1402                                          LEAVE
  1402 00000FC9 C9                  <1>  leave
  1403 00000FCA C21800                          ret AND_KILL_FRAME(1)
  1404                                          
  1405                                  L_code_ptr_is_number:
  1406                                          ENTER
  1406 00000FCD C8000000            <1>  enter 0, 0
  1406 00000FD1 4883E4F0            <1>  and rsp, ~15
  1407 00000FD5 48837D1801                      cmp COUNT, 1
  1408 00000FDA 0F85510E0000                    jne L_error_arg_count_1
  1409 00000FE0 488B4520                        mov rax, PARAM(0)
  1410 00000FE4 8A18                            mov bl, byte [rax]
  1411 00000FE6 80E310                          and bl, T_number
  1412 00000FE9 740C                            je .L_false
  1413 00000FEB 48B8-                           mov rax, sob_boolean_true
  1413 00000FED [0300000000000000] 
  1414 00000FF5 EB0A                            jmp .L_end
  1415                                  .L_false:
  1416 00000FF7 48B8-                           mov rax, sob_boolean_false
  1416 00000FF9 [0200000000000000] 
  1417                                  .L_end:
  1418                                          LEAVE
  1418 00001001 C9                  <1>  leave
  1419 00001002 C21800                          ret AND_KILL_FRAME(1)
  1420                                          
  1421                                  L_code_ptr_is_collection:
  1422                                          ENTER
  1422 00001005 C8000000            <1>  enter 0, 0
  1422 00001009 4883E4F0            <1>  and rsp, ~15
  1423 0000100D 48837D1801                      cmp COUNT, 1
  1424 00001012 0F85190E0000                    jne L_error_arg_count_1
  1425 00001018 488B4520                        mov rax, PARAM(0)
  1426 0000101C 8A18                            mov bl, byte [rax]
  1427 0000101E 80E320                          and bl, T_collection
  1428 00001021 740C                            je .L_false
  1429 00001023 48B8-                           mov rax, sob_boolean_true
  1429 00001025 [0300000000000000] 
  1430 0000102D EB0A                            jmp .L_end
  1431                                  .L_false:
  1432 0000102F 48B8-                           mov rax, sob_boolean_false
  1432 00001031 [0200000000000000] 
  1433                                  .L_end:
  1434                                          LEAVE
  1434 00001039 C9                  <1>  leave
  1435 0000103A C21800                          ret AND_KILL_FRAME(1)
  1436                                  
  1437                                  L_code_ptr_cons:
  1438                                          ENTER
  1438 0000103D C8000000            <1>  enter 0, 0
  1438 00001041 4883E4F0            <1>  and rsp, ~15
  1439 00001045 48837D1802                      cmp COUNT, 2
  1440 0000104A 0F85160E0000                    jne L_error_arg_count_2
  1441 00001050 BF11000000                      mov rdi, (1 + 8 + 8)
  1442 00001055 E866F7FFFF                      call malloc
  1443 0000105A C60021                          mov byte [rax], T_pair
  1444 0000105D 488B5D20                        mov rbx, PARAM(0)
  1445 00001061 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1446 00001065 488B5D28                        mov rbx, PARAM(1)
  1447 00001069 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1448                                          LEAVE
  1448 0000106D C9                  <1>  leave
  1449 0000106E C22000                          ret AND_KILL_FRAME(2)
  1450                                  
  1451                                  L_code_ptr_display_sexpr:
  1452                                          ENTER
  1452 00001071 C8000000            <1>  enter 0, 0
  1452 00001075 4883E4F0            <1>  and rsp, ~15
  1453 00001079 48837D1801                      cmp COUNT, 1
  1454 0000107E 0F85AD0D0000                    jne L_error_arg_count_1
  1455 00001084 488B7D20                        mov rdi, PARAM(0)
  1456 00001088 E84EF7FFFF                      call print_sexpr
  1457 0000108D 48B8-                           mov rax, sob_void
  1457 0000108F [0000000000000000] 
  1458                                          LEAVE
  1458 00001097 C9                  <1>  leave
  1459 00001098 C21800                          ret AND_KILL_FRAME(1)
  1460                                  
  1461                                  L_code_ptr_write_char:
  1462                                          ENTER
  1462 0000109B C8000000            <1>  enter 0, 0
  1462 0000109F 4883E4F0            <1>  and rsp, ~15
  1463 000010A3 48837D1801                      cmp COUNT, 1
  1464 000010A8 0F85830D0000                    jne L_error_arg_count_1
  1465 000010AE 488B4520                        mov rax, PARAM(0)
  1466                                          assert_char(rax)
  1466 000010B2 803802              <1>  cmp byte [%1], %2
  1466 000010B5 0F854A0E0000        <1>  jne L_error_incorrect_type
  1467 000010BB 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1468 000010BE 4825FF000000                    and rax, 255
  1469 000010C4 48BF-                           mov rdi, fmt_char
  1469 000010C6 [4802000000000000] 
  1470 000010CE 4889C6                          mov rsi, rax
  1471 000010D1 B800000000                      mov rax, 0
  1472                                  	ENTER
  1472 000010D6 C8000000            <1>  enter 0, 0
  1472 000010DA 4883E4F0            <1>  and rsp, ~15
  1473 000010DE E8(00000000)                    call printf
  1474                                  	LEAVE
  1474 000010E3 C9                  <1>  leave
  1475 000010E4 48B8-                           mov rax, sob_void
  1475 000010E6 [0000000000000000] 
  1476                                          LEAVE
  1476 000010EE C9                  <1>  leave
  1477 000010EF C21800                          ret AND_KILL_FRAME(1)
  1478                                  
  1479                                  L_code_ptr_car:
  1480                                          ENTER
  1480 000010F2 C8000000            <1>  enter 0, 0
  1480 000010F6 4883E4F0            <1>  and rsp, ~15
  1481 000010FA 48837D1801                      cmp COUNT, 1
  1482 000010FF 0F852C0D0000                    jne L_error_arg_count_1
  1483 00001105 488B4520                        mov rax, PARAM(0)
  1484                                          assert_pair(rax)
  1484 00001109 803821              <1>  cmp byte [%1], %2
  1484 0000110C 0F85F30D0000        <1>  jne L_error_incorrect_type
  1485 00001112 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1486                                          LEAVE
  1486 00001116 C9                  <1>  leave
  1487 00001117 C21800                          ret AND_KILL_FRAME(1)
  1488                                          
  1489                                  L_code_ptr_cdr:
  1490                                          ENTER
  1490 0000111A C8000000            <1>  enter 0, 0
  1490 0000111E 4883E4F0            <1>  and rsp, ~15
  1491 00001122 48837D1801                      cmp COUNT, 1
  1492 00001127 0F85040D0000                    jne L_error_arg_count_1
  1493 0000112D 488B4520                        mov rax, PARAM(0)
  1494                                          assert_pair(rax)
  1494 00001131 803821              <1>  cmp byte [%1], %2
  1494 00001134 0F85CB0D0000        <1>  jne L_error_incorrect_type
  1495 0000113A 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1496                                          LEAVE
  1496 0000113E C9                  <1>  leave
  1497 0000113F C21800                          ret AND_KILL_FRAME(1)
  1498                                          
  1499                                  L_code_ptr_string_length:
  1500                                          ENTER
  1500 00001142 C8000000            <1>  enter 0, 0
  1500 00001146 4883E4F0            <1>  and rsp, ~15
  1501 0000114A 48837D1801                      cmp COUNT, 1
  1502 0000114F 0F85DC0C0000                    jne L_error_arg_count_1
  1503 00001155 488B4520                        mov rax, PARAM(0)
  1504                                          assert_string(rax)
  1504 00001159 803803              <1>  cmp byte [%1], %2
  1504 0000115C 0F85A30D0000        <1>  jne L_error_incorrect_type
  1505 00001162 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1506 00001166 E83A0C0000                      call make_integer
  1507                                          LEAVE
  1507 0000116B C9                  <1>  leave
  1508 0000116C C21800                          ret AND_KILL_FRAME(1)
  1509                                  
  1510                                  L_code_ptr_vector_length:
  1511                                          ENTER
  1511 0000116F C8000000            <1>  enter 0, 0
  1511 00001173 4883E4F0            <1>  and rsp, ~15
  1512 00001177 48837D1801                      cmp COUNT, 1
  1513 0000117C 0F85AF0C0000                    jne L_error_arg_count_1
  1514 00001182 488B4520                        mov rax, PARAM(0)
  1515                                          assert_vector(rax)
  1515 00001186 803822              <1>  cmp byte [%1], %2
  1515 00001189 0F85760D0000        <1>  jne L_error_incorrect_type
  1516 0000118F 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1517 00001193 E80D0C0000                      call make_integer
  1518                                          LEAVE
  1518 00001198 C9                  <1>  leave
  1519 00001199 C21800                          ret AND_KILL_FRAME(1)
  1520                                  
  1521                                  L_code_ptr_real_to_integer:
  1522                                          ENTER
  1522 0000119C C8000000            <1>  enter 0, 0
  1522 000011A0 4883E4F0            <1>  and rsp, ~15
  1523 000011A4 48837D1801                      cmp COUNT, 1
  1524 000011A9 0F85820C0000                    jne L_error_arg_count_1
  1525 000011AF 488B5D20                        mov rbx, PARAM(0)
  1526                                          assert_real(rbx)
  1526 000011B3 803B12              <1>  cmp byte [%1], %2
  1526 000011B6 0F85490D0000        <1>  jne L_error_incorrect_type
  1527 000011BC F20F104301                      movsd xmm0, qword [rbx + 1]
  1528 000011C1 F2480F2CF8                      cvttsd2si rdi, xmm0
  1529 000011C6 E8DA0B0000                      call make_integer
  1530                                          LEAVE
  1530 000011CB C9                  <1>  leave
  1531 000011CC C21800                          ret AND_KILL_FRAME(1)
  1532                                  
  1533                                  L_code_ptr_exit:
  1534                                          ENTER
  1534 000011CF C8000000            <1>  enter 0, 0
  1534 000011D3 4883E4F0            <1>  and rsp, ~15
  1535 000011D7 48837D1800                      cmp COUNT, 0
  1536 000011DC 0F851A0C0000                    jne L_error_arg_count_0
  1537 000011E2 B800000000                      mov rax, 0
  1538 000011E7 E8(00000000)                    call exit
  1539                                  
  1540                                  L_code_ptr_integer_to_real:
  1541                                          ENTER
  1541 000011EC C8000000            <1>  enter 0, 0
  1541 000011F0 4883E4F0            <1>  and rsp, ~15
  1542 000011F4 48837D1801                      cmp COUNT, 1
  1543 000011F9 0F85320C0000                    jne L_error_arg_count_1
  1544 000011FF 488B4520                        mov rax, PARAM(0)
  1545                                          assert_integer(rax)
  1545                              <1>  assert_rational(%1)
  1545 00001203 803811              <2>  cmp byte [%1], %2
  1545 00001206 0F85F90C0000        <2>  jne L_error_incorrect_type
  1545 0000120C 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
  1545 00001211 0F85EE0C0000        <1>  jne L_error_incorrect_type
  1546 00001217 FF7001                          push qword [rax + 1]
  1547 0000121A F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1548 00001220 E8640B0000                      call make_real
  1549                                          LEAVE
  1549 00001225 C9                  <1>  leave
  1550 00001226 C21800                          ret AND_KILL_FRAME(1)
  1551                                  
  1552                                  L_code_ptr_rational_to_real:
  1553                                          ENTER
  1553 00001229 C8000000            <1>  enter 0, 0
  1553 0000122D 4883E4F0            <1>  and rsp, ~15
  1554 00001231 48837D1801                      cmp COUNT, 1
  1555 00001236 0F85F50B0000                    jne L_error_arg_count_1
  1556 0000123C 488B4520                        mov rax, PARAM(0)
  1557                                          assert_rational(rax)
  1557 00001240 803811              <1>  cmp byte [%1], %2
  1557 00001243 0F85BC0C0000        <1>  jne L_error_incorrect_type
  1558 00001249 FF7001                          push qword [rax + 1]
  1559 0000124C F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1560 00001252 FF7009                          push qword [rax + 1 + 8]
  1561 00001255 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1562 0000125B F20F5EC1                        divsd xmm0, xmm1
  1563 0000125F E8250B0000                      call make_real
  1564                                          LEAVE
  1564 00001264 C9                  <1>  leave
  1565 00001265 C21800                          ret AND_KILL_FRAME(1)
  1566                                  
  1567                                  L_code_ptr_char_to_integer:
  1568                                          ENTER
  1568 00001268 C8000000            <1>  enter 0, 0
  1568 0000126C 4883E4F0            <1>  and rsp, ~15
  1569 00001270 48837D1801                      cmp COUNT, 1
  1570 00001275 0F85B60B0000                    jne L_error_arg_count_1
  1571 0000127B 488B4520                        mov rax, PARAM(0)
  1572                                          assert_char(rax)
  1572 0000127F 803802              <1>  cmp byte [%1], %2
  1572 00001282 0F857D0C0000        <1>  jne L_error_incorrect_type
  1573 00001288 8A4001                          mov al, byte [rax + 1]
  1574 0000128B 4825FF000000                    and rax, 255
  1575 00001291 4889C7                          mov rdi, rax
  1576 00001294 E80C0B0000                      call make_integer
  1577                                          LEAVE
  1577 00001299 C9                  <1>  leave
  1578 0000129A C21800                          ret AND_KILL_FRAME(1)
  1579                                  
  1580                                  L_code_ptr_integer_to_char:
  1581                                          ENTER
  1581 0000129D C8000000            <1>  enter 0, 0
  1581 000012A1 4883E4F0            <1>  and rsp, ~15
  1582 000012A5 48837D1801                      cmp COUNT, 1
  1583 000012AA 0F85810B0000                    jne L_error_arg_count_1
  1584 000012B0 488B4520                        mov rax, PARAM(0)
  1585                                          assert_integer(rax)
  1585                              <1>  assert_rational(%1)
  1585 000012B4 803811              <2>  cmp byte [%1], %2
  1585 000012B7 0F85480C0000        <2>  jne L_error_incorrect_type
  1585 000012BD 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
  1585 000012C2 0F853D0C0000        <1>  jne L_error_incorrect_type
  1586 000012C8 488B5801                        mov rbx, qword [rax + 1]
  1587 000012CC 4883FB00                        cmp rbx, 0
  1588 000012D0 0F8EF50A0000                    jle L_error_integer_range
  1589 000012D6 4881FB00010000                  cmp rbx, 256
  1590 000012DD 0F8DE80A0000                    jge L_error_integer_range
  1591 000012E3 BF02000000                      mov rdi, (1 + 1)
  1592 000012E8 E8D3F4FFFF                      call malloc
  1593 000012ED C60002                          mov byte [rax], T_char
  1594 000012F0 885801                          mov byte [rax + 1], bl
  1595                                          LEAVE
  1595 000012F3 C9                  <1>  leave
  1596 000012F4 C21800                          ret AND_KILL_FRAME(1)
  1597                                  
  1598                                  L_code_ptr_trng:
  1599                                          ENTER
  1599 000012F7 C8000000            <1>  enter 0, 0
  1599 000012FB 4883E4F0            <1>  and rsp, ~15
  1600 000012FF 48837D1800                      cmp COUNT, 0
  1601 00001304 0F85F20A0000                    jne L_error_arg_count_0
  1602 0000130A 480FC7F7                        rdrand rdi
  1603 0000130E 48D1EF                          shr rdi, 1
  1604 00001311 E88F0A0000                      call make_integer
  1605                                          LEAVE
  1605 00001316 C9                  <1>  leave
  1606 00001317 C21000                          ret AND_KILL_FRAME(0)
  1607                                  
  1608                                  L_code_ptr_is_zero:
  1609                                          ENTER
  1609 0000131A C8000000            <1>  enter 0, 0
  1609 0000131E 4883E4F0            <1>  and rsp, ~15
  1610 00001322 48837D1801                      cmp COUNT, 1
  1611 00001327 0F85040B0000                    jne L_error_arg_count_1
  1612 0000132D 488B4520                        mov rax, PARAM(0)
  1613 00001331 803811                          cmp byte [rax], T_rational
  1614 00001334 740A                            je .L_rational
  1615 00001336 803812                          cmp byte [rax], T_real
  1616 00001339 740E                            je .L_real
  1617 0000133B E9C50B0000                      jmp L_error_incorrect_type
  1618                                  .L_rational:
  1619 00001340 4883780100                      cmp qword [rax + 1], 0
  1620 00001345 7420                            je .L_zero
  1621 00001347 EB12                            jmp .L_not_zero
  1622                                  .L_real:
  1623 00001349 660FEFC0                        pxor xmm0, xmm0
  1624 0000134D FF7001                          push qword [rax + 1]
  1625 00001350 F20F100C24                      movsd xmm1, qword [rsp]
  1626 00001355 660F2EC1                        ucomisd xmm0, xmm1
  1627 00001359 740C                            je .L_zero
  1628                                  .L_not_zero:
  1629 0000135B 48B8-                           mov rax, sob_boolean_false
  1629 0000135D [0200000000000000] 
  1630 00001365 EB0A                            jmp .L_end
  1631                                  .L_zero:
  1632 00001367 48B8-                           mov rax, sob_boolean_true
  1632 00001369 [0300000000000000] 
  1633                                  .L_end:
  1634                                          LEAVE
  1634 00001371 C9                  <1>  leave
  1635 00001372 C21800                          ret AND_KILL_FRAME(1)
  1636                                  
  1637                                  L_code_ptr_is_integer:
  1638                                          ENTER
  1638 00001375 C8000000            <1>  enter 0, 0
  1638 00001379 4883E4F0            <1>  and rsp, ~15
  1639 0000137D 48837D1801                      cmp COUNT, 1
  1640 00001382 0F85A90A0000                    jne L_error_arg_count_1
  1641 00001388 488B4520                        mov rax, PARAM(0)
  1642 0000138C 803811                          cmp byte [rax], T_rational
  1643 0000138F 7513                            jne .L_false
  1644 00001391 4883780901                      cmp qword [rax + 1 + 8], 1
  1645 00001396 750C                            jne .L_false
  1646 00001398 48B8-                           mov rax, sob_boolean_true
  1646 0000139A [0300000000000000] 
  1647 000013A2 EB0A                            jmp .L_exit
  1648                                  .L_false:
  1649 000013A4 48B8-                           mov rax, sob_boolean_false
  1649 000013A6 [0200000000000000] 
  1650                                  .L_exit:
  1651                                          LEAVE
  1651 000013AE C9                  <1>  leave
  1652 000013AF C21800                          ret AND_KILL_FRAME(1)
  1653                                  
  1654                                  L_code_ptr_raw_bin_add_rr:
  1655                                          ENTER
  1655 000013B2 C8000000            <1>  enter 0, 0
  1655 000013B6 4883E4F0            <1>  and rsp, ~15
  1656 000013BA 48837D1802                      cmp COUNT, 2
  1657 000013BF 0F85A10A0000                    jne L_error_arg_count_2
  1658 000013C5 488B5D20                        mov rbx, PARAM(0)
  1659                                          assert_real(rbx)
  1659 000013C9 803B12              <1>  cmp byte [%1], %2
  1659 000013CC 0F85330B0000        <1>  jne L_error_incorrect_type
  1660 000013D2 488B4D28                        mov rcx, PARAM(1)
  1661                                          assert_real(rcx)
  1661 000013D6 803912              <1>  cmp byte [%1], %2
  1661 000013D9 0F85260B0000        <1>  jne L_error_incorrect_type
  1662 000013DF F20F104301                      movsd xmm0, qword [rbx + 1]
  1663 000013E4 F20F104901                      movsd xmm1, qword [rcx + 1]
  1664 000013E9 F20F58C1                        addsd xmm0, xmm1
  1665 000013ED E897090000                      call make_real
  1666                                          LEAVE
  1666 000013F2 C9                  <1>  leave
  1667 000013F3 C22000                          ret AND_KILL_FRAME(2)
  1668                                  
  1669                                  L_code_ptr_raw_bin_sub_rr:
  1670                                          ENTER
  1670 000013F6 C8000000            <1>  enter 0, 0
  1670 000013FA 4883E4F0            <1>  and rsp, ~15
  1671 000013FE 48837D1802                      cmp COUNT, 2
  1672 00001403 0F855D0A0000                    jne L_error_arg_count_2
  1673 00001409 488B5D20                        mov rbx, PARAM(0)
  1674                                          assert_real(rbx)
  1674 0000140D 803B12              <1>  cmp byte [%1], %2
  1674 00001410 0F85EF0A0000        <1>  jne L_error_incorrect_type
  1675 00001416 488B4D28                        mov rcx, PARAM(1)
  1676                                          assert_real(rcx)
  1676 0000141A 803912              <1>  cmp byte [%1], %2
  1676 0000141D 0F85E20A0000        <1>  jne L_error_incorrect_type
  1677 00001423 F20F104301                      movsd xmm0, qword [rbx + 1]
  1678 00001428 F20F104901                      movsd xmm1, qword [rcx + 1]
  1679 0000142D F20F5CC1                        subsd xmm0, xmm1
  1680 00001431 E853090000                      call make_real
  1681                                          LEAVE
  1681 00001436 C9                  <1>  leave
  1682 00001437 C22000                          ret AND_KILL_FRAME(2)
  1683                                  
  1684                                  L_code_ptr_raw_bin_mul_rr:
  1685                                          ENTER
  1685 0000143A C8000000            <1>  enter 0, 0
  1685 0000143E 4883E4F0            <1>  and rsp, ~15
  1686 00001442 48837D1802                      cmp COUNT, 2
  1687 00001447 0F85190A0000                    jne L_error_arg_count_2
  1688 0000144D 488B5D20                        mov rbx, PARAM(0)
  1689                                          assert_real(rbx)
  1689 00001451 803B12              <1>  cmp byte [%1], %2
  1689 00001454 0F85AB0A0000        <1>  jne L_error_incorrect_type
  1690 0000145A 488B4D28                        mov rcx, PARAM(1)
  1691                                          assert_real(rcx)
  1691 0000145E 803912              <1>  cmp byte [%1], %2
  1691 00001461 0F859E0A0000        <1>  jne L_error_incorrect_type
  1692 00001467 F20F104301                      movsd xmm0, qword [rbx + 1]
  1693 0000146C F20F104901                      movsd xmm1, qword [rcx + 1]
  1694 00001471 F20F59C1                        mulsd xmm0, xmm1
  1695 00001475 E80F090000                      call make_real
  1696                                          LEAVE
  1696 0000147A C9                  <1>  leave
  1697 0000147B C22000                          ret AND_KILL_FRAME(2)
  1698                                  
  1699                                  L_code_ptr_raw_bin_div_rr:
  1700                                          ENTER
  1700 0000147E C8000000            <1>  enter 0, 0
  1700 00001482 4883E4F0            <1>  and rsp, ~15
  1701 00001486 48837D1802                      cmp COUNT, 2
  1702 0000148B 0F85D5090000                    jne L_error_arg_count_2
  1703 00001491 488B5D20                        mov rbx, PARAM(0)
  1704                                          assert_real(rbx)
  1704 00001495 803B12              <1>  cmp byte [%1], %2
  1704 00001498 0F85670A0000        <1>  jne L_error_incorrect_type
  1705 0000149E 488B4D28                        mov rcx, PARAM(1)
  1706                                          assert_real(rcx)
  1706 000014A2 803912              <1>  cmp byte [%1], %2
  1706 000014A5 0F855A0A0000        <1>  jne L_error_incorrect_type
  1707 000014AB F20F104301                      movsd xmm0, qword [rbx + 1]
  1708 000014B0 F20F104901                      movsd xmm1, qword [rcx + 1]
  1709 000014B5 660FEFD2                        pxor xmm2, xmm2
  1710 000014B9 660F2ECA                        ucomisd xmm1, xmm2
  1711 000014BD 0F84730A0000                    je L_error_division_by_zero
  1712 000014C3 F20F5EC1                        divsd xmm0, xmm1
  1713 000014C7 E8BD080000                      call make_real
  1714                                          LEAVE
  1714 000014CC C9                  <1>  leave
  1715 000014CD C22000                          ret AND_KILL_FRAME(2)
  1716                                  
  1717                                  L_code_ptr_raw_bin_add_qq:
  1718                                          ENTER
  1718 000014D0 C8000000            <1>  enter 0, 0
  1718 000014D4 4883E4F0            <1>  and rsp, ~15
  1719 000014D8 48837D1802                      cmp COUNT, 2
  1720 000014DD 0F8583090000                    jne L_error_arg_count_2
  1721 000014E3 4C8B4520                        mov r8, PARAM(0)
  1722                                          assert_rational(r8)
  1722 000014E7 41803811            <1>  cmp byte [%1], %2
  1722 000014EB 0F85140A0000        <1>  jne L_error_incorrect_type
  1723 000014F1 4C8B4D28                        mov r9, PARAM(1)
  1724                                          assert_rational(r9)
  1724 000014F5 41803911            <1>  cmp byte [%1], %2
  1724 000014F9 0F85060A0000        <1>  jne L_error_incorrect_type
  1725 000014FF 498B4001                        mov rax, qword [r8 + 1] ; num1
  1726 00001503 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1727 00001507 4899                            cqo
  1728 00001509 48F7EB                          imul rbx
  1729 0000150C 4889C6                          mov rsi, rax
  1730 0000150F 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1731 00001513 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1732 00001517 4899                            cqo
  1733 00001519 48F7EB                          imul rbx
  1734 0000151C 4801C6                          add rsi, rax
  1735 0000151F 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1736 00001523 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1737 00001527 4899                            cqo
  1738 00001529 48F7EB                          imul rbx
  1739 0000152C 4889C7                          mov rdi, rax
  1740 0000152F E827010000                      call normalize_rational
  1741                                          LEAVE
  1741 00001534 C9                  <1>  leave
  1742 00001535 C22000                          ret AND_KILL_FRAME(2)
  1743                                  
  1744                                  L_code_ptr_raw_bin_sub_qq:
  1745                                          ENTER
  1745 00001538 C8000000            <1>  enter 0, 0
  1745 0000153C 4883E4F0            <1>  and rsp, ~15
  1746 00001540 48837D1802                      cmp COUNT, 2
  1747 00001545 0F851B090000                    jne L_error_arg_count_2
  1748 0000154B 4C8B4520                        mov r8, PARAM(0)
  1749                                          assert_rational(r8)
  1749 0000154F 41803811            <1>  cmp byte [%1], %2
  1749 00001553 0F85AC090000        <1>  jne L_error_incorrect_type
  1750 00001559 4C8B4D28                        mov r9, PARAM(1)
  1751                                          assert_rational(r9)
  1751 0000155D 41803911            <1>  cmp byte [%1], %2
  1751 00001561 0F859E090000        <1>  jne L_error_incorrect_type
  1752 00001567 498B4001                        mov rax, qword [r8 + 1] ; num1
  1753 0000156B 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1754 0000156F 4899                            cqo
  1755 00001571 48F7EB                          imul rbx
  1756 00001574 4889C6                          mov rsi, rax
  1757 00001577 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1758 0000157B 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1759 0000157F 4899                            cqo
  1760 00001581 48F7EB                          imul rbx
  1761 00001584 4829C6                          sub rsi, rax
  1762 00001587 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1763 0000158B 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1764 0000158F 4899                            cqo
  1765 00001591 48F7EB                          imul rbx
  1766 00001594 4889C7                          mov rdi, rax
  1767 00001597 E8BF000000                      call normalize_rational
  1768                                          LEAVE
  1768 0000159C C9                  <1>  leave
  1769 0000159D C22000                          ret AND_KILL_FRAME(2)
  1770                                  
  1771                                  L_code_ptr_raw_bin_mul_qq:
  1772                                          ENTER
  1772 000015A0 C8000000            <1>  enter 0, 0
  1772 000015A4 4883E4F0            <1>  and rsp, ~15
  1773 000015A8 48837D1802                      cmp COUNT, 2
  1774 000015AD 0F85B3080000                    jne L_error_arg_count_2
  1775 000015B3 4C8B4520                        mov r8, PARAM(0)
  1776                                          assert_rational(r8)
  1776 000015B7 41803811            <1>  cmp byte [%1], %2
  1776 000015BB 0F8544090000        <1>  jne L_error_incorrect_type
  1777 000015C1 4C8B4D28                        mov r9, PARAM(1)
  1778                                          assert_rational(r9)
  1778 000015C5 41803911            <1>  cmp byte [%1], %2
  1778 000015C9 0F8536090000        <1>  jne L_error_incorrect_type
  1779 000015CF 498B4001                        mov rax, qword [r8 + 1] ; num1
  1780 000015D3 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1781 000015D7 4899                            cqo
  1782 000015D9 48F7EB                          imul rbx
  1783 000015DC 4889C6                          mov rsi, rax
  1784 000015DF 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1785 000015E3 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1786 000015E7 4899                            cqo
  1787 000015E9 48F7EB                          imul rbx
  1788 000015EC 4889C7                          mov rdi, rax
  1789 000015EF E867000000                      call normalize_rational
  1790                                          LEAVE
  1790 000015F4 C9                  <1>  leave
  1791 000015F5 C22000                          ret AND_KILL_FRAME(2)
  1792                                          
  1793                                  L_code_ptr_raw_bin_div_qq:
  1794                                          ENTER
  1794 000015F8 C8000000            <1>  enter 0, 0
  1794 000015FC 4883E4F0            <1>  and rsp, ~15
  1795 00001600 48837D1802                      cmp COUNT, 2
  1796 00001605 0F855B080000                    jne L_error_arg_count_2
  1797 0000160B 4C8B4520                        mov r8, PARAM(0)
  1798                                          assert_rational(r8)
  1798 0000160F 41803811            <1>  cmp byte [%1], %2
  1798 00001613 0F85EC080000        <1>  jne L_error_incorrect_type
  1799 00001619 4C8B4D28                        mov r9, PARAM(1)
  1800                                          assert_rational(r9)
  1800 0000161D 41803911            <1>  cmp byte [%1], %2
  1800 00001621 0F85DE080000        <1>  jne L_error_incorrect_type
  1801 00001627 4983790100                      cmp qword [r9 + 1], 0
  1802 0000162C 0F8404090000                    je L_error_division_by_zero
  1803 00001632 498B4001                        mov rax, qword [r8 + 1] ; num1
  1804 00001636 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1805 0000163A 4899                            cqo
  1806 0000163C 48F7EB                          imul rbx
  1807 0000163F 4889C6                          mov rsi, rax
  1808 00001642 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1809 00001646 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1810 0000164A 4899                            cqo
  1811 0000164C 48F7EB                          imul rbx
  1812 0000164F 4889C7                          mov rdi, rax
  1813 00001652 E804000000                      call normalize_rational
  1814                                          LEAVE
  1814 00001657 C9                  <1>  leave
  1815 00001658 C22000                          ret AND_KILL_FRAME(2)
  1816                                          
  1817                                  normalize_rational:
  1818 0000165B 56                              push rsi
  1819 0000165C 57                              push rdi
  1820 0000165D E839000000                      call gcd
  1821 00001662 4889C3                          mov rbx, rax
  1822 00001665 58                              pop rax
  1823 00001666 4899                            cqo
  1824 00001668 48F7FB                          idiv rbx
  1825 0000166B 4989C0                          mov r8, rax
  1826 0000166E 58                              pop rax
  1827 0000166F 4899                            cqo
  1828 00001671 48F7FB                          idiv rbx
  1829 00001674 4989C1                          mov r9, rax
  1830 00001677 BF11000000                      mov rdi, (1 + 8 + 8)
  1831 0000167C E83FF1FFFF                      call malloc
  1832 00001681 C60011                          mov byte [rax], T_rational
  1833 00001684 4C894801                        mov qword [rax + 1], r9
  1834 00001688 4C894009                        mov qword [rax + 1 + 8], r8
  1835 0000168C C3                              ret
  1836                                  
  1837                                  iabs:
  1838 0000168D 4889F8                          mov rax, rdi
  1839 00001690 4883F800                        cmp rax, 0
  1840 00001694 7C01                            jl .Lneg
  1841 00001696 C3                              ret
  1842                                  .Lneg:
  1843 00001697 48F7D8                          neg rax
  1844 0000169A C3                              ret
  1845                                  
  1846                                  gcd:
  1847 0000169B E8EDFFFFFF                      call iabs
  1848 000016A0 4889C3                          mov rbx, rax
  1849 000016A3 4889F7                          mov rdi, rsi
  1850 000016A6 E8E2FFFFFF                      call iabs
  1851 000016AB 4883F800                        cmp rax, 0
  1852 000016AF 7502                            jne .L0
  1853 000016B1 4893                            xchg rax, rbx
  1854                                  .L0:
  1855 000016B3 4883FB00                        cmp rbx, 0
  1856 000016B7 740C                            je .L1
  1857 000016B9 4899                            cqo
  1858 000016BB 48F7F3                          div rbx
  1859 000016BE 4889D0                          mov rax, rdx
  1860 000016C1 4893                            xchg rax, rbx
  1861 000016C3 EBEE                            jmp .L0
  1862                                  .L1:
  1863 000016C5 C3                              ret
  1864                                  
  1865                                  L_code_ptr_error:
  1866                                          ENTER
  1866 000016C6 C8000000            <1>  enter 0, 0
  1866 000016CA 4883E4F0            <1>  and rsp, ~15
  1867 000016CE 48837D1802                      cmp COUNT, 2
  1868 000016D3 0F858D070000                    jne L_error_arg_count_2
  1869 000016D9 488B7520                        mov rsi, PARAM(0)
  1870                                          assert_symbol(rsi)
  1870 000016DD 803E04              <1>  cmp byte [%1], %2
  1870 000016E0 0F851F080000        <1>  jne L_error_incorrect_type
  1871 000016E6 488B7528                        mov rsi, PARAM(1)
  1872                                          assert_string(rsi)
  1872 000016EA 803E03              <1>  cmp byte [%1], %2
  1872 000016ED 0F8512080000        <1>  jne L_error_incorrect_type
  1873 000016F3 48BF-                           mov rdi, fmt_scheme_error_part_1
  1873 000016F5 [8003000000000000] 
  1874 000016FD B800000000                      mov rax, 0
  1875                                  	ENTER
  1875 00001702 C8000000            <1>  enter 0, 0
  1875 00001706 4883E4F0            <1>  and rsp, ~15
  1876 0000170A E8(00000000)                    call printf
  1877                                  	LEAVE
  1877 0000170F C9                  <1>  leave
  1878 00001710 488B7D20                        mov rdi, PARAM(0)
  1879 00001714 E8C2F0FFFF                      call print_sexpr
  1880 00001719 48BF-                           mov rdi, fmt_scheme_error_part_2
  1880 0000171B [9403000000000000] 
  1881 00001723 B800000000                      mov rax, 0
  1882                                  	ENTER
  1882 00001728 C8000000            <1>  enter 0, 0
  1882 0000172C 4883E4F0            <1>  and rsp, ~15
  1883 00001730 E8(00000000)                    call printf
  1884                                  	LEAVE
  1884 00001735 C9                  <1>  leave
  1885 00001736 488B4528                        mov rax, PARAM(1)       ; sob_string
  1886 0000173A BE01000000                      mov rsi, 1              ; size = 1 byte
  1887 0000173F 488B5001                        mov rdx, qword [rax + 1] ; length
  1888 00001743 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1889 00001747 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1890 0000174F E8(00000000)                    call fwrite
  1891 00001754 48BF-                           mov rdi, fmt_scheme_error_part_3
  1891 00001756 [D603000000000000] 
  1892 0000175E B800000000                      mov rax, 0
  1893                                  	ENTER
  1893 00001763 C8000000            <1>  enter 0, 0
  1893 00001767 4883E4F0            <1>  and rsp, ~15
  1894 0000176B E8(00000000)                    call printf
  1895                                  	LEAVE
  1895 00001770 C9                  <1>  leave
  1896 00001771 48C7C0F7FFFFFF                  mov rax, -9
  1897 00001778 E8(00000000)                    call exit
  1898                                  
  1899                                  L_code_ptr_raw_less_than_rr:
  1900                                          ENTER
  1900 0000177D C8000000            <1>  enter 0, 0
  1900 00001781 4883E4F0            <1>  and rsp, ~15
  1901 00001785 48837D1802                      cmp COUNT, 2
  1902 0000178A 0F85D6060000                    jne L_error_arg_count_2
  1903 00001790 488B7520                        mov rsi, PARAM(0)
  1904                                          assert_real(rsi)
  1904 00001794 803E12              <1>  cmp byte [%1], %2
  1904 00001797 0F8568070000        <1>  jne L_error_incorrect_type
  1905 0000179D 488B7D28                        mov rdi, PARAM(1)
  1906                                          assert_real(rdi)
  1906 000017A1 803F12              <1>  cmp byte [%1], %2
  1906 000017A4 0F855B070000        <1>  jne L_error_incorrect_type
  1907 000017AA F20F104601                      movsd xmm0, qword [rsi + 1]
  1908 000017AF F20F104F01                      movsd xmm1, qword [rdi + 1]
  1909 000017B4 660F2FC1                        comisd xmm0, xmm1
  1910 000017B8 730C                            jae .L_false
  1911 000017BA 48B8-                           mov rax, sob_boolean_true
  1911 000017BC [0300000000000000] 
  1912 000017C4 EB0A                            jmp .L_exit
  1913                                  .L_false:
  1914 000017C6 48B8-                           mov rax, sob_boolean_false
  1914 000017C8 [0200000000000000] 
  1915                                  .L_exit:
  1916                                          LEAVE
  1916 000017D0 C9                  <1>  leave
  1917 000017D1 C22000                          ret AND_KILL_FRAME(2)
  1918                                          
  1919                                  L_code_ptr_raw_less_than_qq:
  1920                                          ENTER
  1920 000017D4 C8000000            <1>  enter 0, 0
  1920 000017D8 4883E4F0            <1>  and rsp, ~15
  1921 000017DC 48837D1802                      cmp COUNT, 2
  1922 000017E1 0F857F060000                    jne L_error_arg_count_2
  1923 000017E7 488B7520                        mov rsi, PARAM(0)
  1924                                          assert_rational(rsi)
  1924 000017EB 803E11              <1>  cmp byte [%1], %2
  1924 000017EE 0F8511070000        <1>  jne L_error_incorrect_type
  1925 000017F4 488B7D28                        mov rdi, PARAM(1)
  1926                                          assert_rational(rdi)
  1926 000017F8 803F11              <1>  cmp byte [%1], %2
  1926 000017FB 0F8504070000        <1>  jne L_error_incorrect_type
  1927 00001801 488B4601                        mov rax, qword [rsi + 1] ; num1
  1928 00001805 4899                            cqo
  1929 00001807 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1930 0000180B 4889C1                          mov rcx, rax
  1931 0000180E 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1932 00001812 4899                            cqo
  1933 00001814 48F76F01                        imul qword [rdi + 1]          ; num2
  1934 00001818 4829C1                          sub rcx, rax
  1935 0000181B 7D0C                            jge .L_false
  1936 0000181D 48B8-                           mov rax, sob_boolean_true
  1936 0000181F [0300000000000000] 
  1937 00001827 EB0A                            jmp .L_exit
  1938                                  .L_false:
  1939 00001829 48B8-                           mov rax, sob_boolean_false
  1939 0000182B [0200000000000000] 
  1940                                  .L_exit:
  1941                                          LEAVE
  1941 00001833 C9                  <1>  leave
  1942 00001834 C22000                          ret AND_KILL_FRAME(2)
  1943                                  
  1944                                  L_code_ptr_raw_equal_rr:
  1945                                          ENTER
  1945 00001837 C8000000            <1>  enter 0, 0
  1945 0000183B 4883E4F0            <1>  and rsp, ~15
  1946 0000183F 48837D1802                      cmp COUNT, 2
  1947 00001844 0F851C060000                    jne L_error_arg_count_2
  1948 0000184A 488B7520                        mov rsi, PARAM(0)
  1949                                          assert_real(rsi)
  1949 0000184E 803E12              <1>  cmp byte [%1], %2
  1949 00001851 0F85AE060000        <1>  jne L_error_incorrect_type
  1950 00001857 488B7D28                        mov rdi, PARAM(1)
  1951                                          assert_real(rdi)
  1951 0000185B 803F12              <1>  cmp byte [%1], %2
  1951 0000185E 0F85A1060000        <1>  jne L_error_incorrect_type
  1952 00001864 F20F104601                      movsd xmm0, qword [rsi + 1]
  1953 00001869 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1954 0000186E 660F2FC1                        comisd xmm0, xmm1
  1955 00001872 750C                            jne .L_false
  1956 00001874 48B8-                           mov rax, sob_boolean_true
  1956 00001876 [0300000000000000] 
  1957 0000187E EB0A                            jmp .L_exit
  1958                                  .L_false:
  1959 00001880 48B8-                           mov rax, sob_boolean_false
  1959 00001882 [0200000000000000] 
  1960                                  .L_exit:
  1961                                          LEAVE
  1961 0000188A C9                  <1>  leave
  1962 0000188B C22000                          ret AND_KILL_FRAME(2)
  1963                                          
  1964                                  L_code_ptr_raw_equal_qq:
  1965                                          ENTER
  1965 0000188E C8000000            <1>  enter 0, 0
  1965 00001892 4883E4F0            <1>  and rsp, ~15
  1966 00001896 48837D1802                      cmp COUNT, 2
  1967 0000189B 0F85C5050000                    jne L_error_arg_count_2
  1968 000018A1 488B7520                        mov rsi, PARAM(0)
  1969                                          assert_rational(rsi)
  1969 000018A5 803E11              <1>  cmp byte [%1], %2
  1969 000018A8 0F8557060000        <1>  jne L_error_incorrect_type
  1970 000018AE 488B7D28                        mov rdi, PARAM(1)
  1971                                          assert_rational(rdi)
  1971 000018B2 803F11              <1>  cmp byte [%1], %2
  1971 000018B5 0F854A060000        <1>  jne L_error_incorrect_type
  1972 000018BB 488B4601                        mov rax, qword [rsi + 1] ; num1
  1973 000018BF 4899                            cqo
  1974 000018C1 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1975 000018C5 4889C1                          mov rcx, rax
  1976 000018C8 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1977 000018CC 4899                            cqo
  1978 000018CE 48F76F01                        imul qword [rdi + 1]          ; num2
  1979 000018D2 4829C1                          sub rcx, rax
  1980 000018D5 750C                            jne .L_false
  1981 000018D7 48B8-                           mov rax, sob_boolean_true
  1981 000018D9 [0300000000000000] 
  1982 000018E1 EB0A                            jmp .L_exit
  1983                                  .L_false:
  1984 000018E3 48B8-                           mov rax, sob_boolean_false
  1984 000018E5 [0200000000000000] 
  1985                                  .L_exit:
  1986                                          LEAVE
  1986 000018ED C9                  <1>  leave
  1987 000018EE C22000                          ret AND_KILL_FRAME(2)
  1988                                  
  1989                                  L_code_ptr_quotient:
  1990                                          ENTER
  1990 000018F1 C8000000            <1>  enter 0, 0
  1990 000018F5 4883E4F0            <1>  and rsp, ~15
  1991 000018F9 48837D1802                      cmp COUNT, 2
  1992 000018FE 0F8562050000                    jne L_error_arg_count_2
  1993 00001904 488B7520                        mov rsi, PARAM(0)
  1994                                          assert_integer(rsi)
  1994                              <1>  assert_rational(%1)
  1994 00001908 803E11              <2>  cmp byte [%1], %2
  1994 0000190B 0F85F4050000        <2>  jne L_error_incorrect_type
  1994 00001911 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  1994 00001916 0F85E9050000        <1>  jne L_error_incorrect_type
  1995 0000191C 488B7D28                        mov rdi, PARAM(1)
  1996                                          assert_integer(rdi)
  1996                              <1>  assert_rational(%1)
  1996 00001920 803F11              <2>  cmp byte [%1], %2
  1996 00001923 0F85DC050000        <2>  jne L_error_incorrect_type
  1996 00001929 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
  1996 0000192E 0F85D1050000        <1>  jne L_error_incorrect_type
  1997 00001934 488B4601                        mov rax, qword [rsi + 1]
  1998 00001938 488B5F01                        mov rbx, qword [rdi + 1]
  1999 0000193C 4883FB00                        cmp rbx, 0
  2000 00001940 0F84F0050000                    je L_error_division_by_zero
  2001 00001946 4899                            cqo
  2002 00001948 48F7FB                          idiv rbx
  2003 0000194B 4889C7                          mov rdi, rax
  2004 0000194E E852040000                      call make_integer
  2005                                          LEAVE
  2005 00001953 C9                  <1>  leave
  2006 00001954 C22000                          ret AND_KILL_FRAME(2)
  2007                                          
  2008                                  L_code_ptr_remainder:
  2009                                          ENTER
  2009 00001957 C8000000            <1>  enter 0, 0
  2009 0000195B 4883E4F0            <1>  and rsp, ~15
  2010 0000195F 48837D1802                      cmp COUNT, 2
  2011 00001964 0F85FC040000                    jne L_error_arg_count_2
  2012 0000196A 488B7520                        mov rsi, PARAM(0)
  2013                                          assert_integer(rsi)
  2013                              <1>  assert_rational(%1)
  2013 0000196E 803E11              <2>  cmp byte [%1], %2
  2013 00001971 0F858E050000        <2>  jne L_error_incorrect_type
  2013 00001977 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2013 0000197C 0F8583050000        <1>  jne L_error_incorrect_type
  2014 00001982 488B7D28                        mov rdi, PARAM(1)
  2015                                          assert_integer(rdi)
  2015                              <1>  assert_rational(%1)
  2015 00001986 803F11              <2>  cmp byte [%1], %2
  2015 00001989 0F8576050000        <2>  jne L_error_incorrect_type
  2015 0000198F 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
  2015 00001994 0F856B050000        <1>  jne L_error_incorrect_type
  2016 0000199A 488B4601                        mov rax, qword [rsi + 1]
  2017 0000199E 488B5F01                        mov rbx, qword [rdi + 1]
  2018 000019A2 4883FB00                        cmp rbx, 0
  2019 000019A6 0F848A050000                    je L_error_division_by_zero
  2020 000019AC 4899                            cqo
  2021 000019AE 48F7FB                          idiv rbx
  2022 000019B1 4889D7                          mov rdi, rdx
  2023 000019B4 E8EC030000                      call make_integer
  2024                                          LEAVE
  2024 000019B9 C9                  <1>  leave
  2025 000019BA C22000                          ret AND_KILL_FRAME(2)
  2026                                  
  2027                                  L_code_ptr_set_car:
  2028                                          ENTER
  2028 000019BD C8000000            <1>  enter 0, 0
  2028 000019C1 4883E4F0            <1>  and rsp, ~15
  2029 000019C5 48837D1802                      cmp COUNT, 2
  2030 000019CA 0F8596040000                    jne L_error_arg_count_2
  2031 000019D0 488B4520                        mov rax, PARAM(0)
  2032                                          assert_pair(rax)
  2032 000019D4 803821              <1>  cmp byte [%1], %2
  2032 000019D7 0F8528050000        <1>  jne L_error_incorrect_type
  2033 000019DD 488B5D28                        mov rbx, PARAM(1)
  2034 000019E1 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2035 000019E5 48B8-                           mov rax, sob_void
  2035 000019E7 [0000000000000000] 
  2036                                          LEAVE
  2036 000019EF C9                  <1>  leave
  2037 000019F0 C22000                          ret AND_KILL_FRAME(2)
  2038                                  
  2039                                  L_code_ptr_set_cdr:
  2040                                          ENTER
  2040 000019F3 C8000000            <1>  enter 0, 0
  2040 000019F7 4883E4F0            <1>  and rsp, ~15
  2041 000019FB 48837D1802                      cmp COUNT, 2
  2042 00001A00 0F8560040000                    jne L_error_arg_count_2
  2043 00001A06 488B4520                        mov rax, PARAM(0)
  2044                                          assert_pair(rax)
  2044 00001A0A 803821              <1>  cmp byte [%1], %2
  2044 00001A0D 0F85F2040000        <1>  jne L_error_incorrect_type
  2045 00001A13 488B5D28                        mov rbx, PARAM(1)
  2046 00001A17 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2047 00001A1B 48B8-                           mov rax, sob_void
  2047 00001A1D [0000000000000000] 
  2048                                          LEAVE
  2048 00001A25 C9                  <1>  leave
  2049 00001A26 C22000                          ret AND_KILL_FRAME(2)
  2050                                  
  2051                                  L_code_ptr_string_ref:
  2052                                          ENTER
  2052 00001A29 C8000000            <1>  enter 0, 0
  2052 00001A2D 4883E4F0            <1>  and rsp, ~15
  2053 00001A31 48837D1802                      cmp COUNT, 2
  2054 00001A36 0F852A040000                    jne L_error_arg_count_2
  2055 00001A3C 488B7D20                        mov rdi, PARAM(0)
  2056                                          assert_string(rdi)
  2056 00001A40 803F03              <1>  cmp byte [%1], %2
  2056 00001A43 0F85BC040000        <1>  jne L_error_incorrect_type
  2057 00001A49 488B7528                        mov rsi, PARAM(1)
  2058                                          assert_integer(rsi)
  2058                              <1>  assert_rational(%1)
  2058 00001A4D 803E11              <2>  cmp byte [%1], %2
  2058 00001A50 0F85AF040000        <2>  jne L_error_incorrect_type
  2058 00001A56 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2058 00001A5B 0F85A4040000        <1>  jne L_error_incorrect_type
  2059 00001A61 488B5701                        mov rdx, qword [rdi + 1]
  2060 00001A65 488B4E01                        mov rcx, qword [rsi + 1]
  2061 00001A69 4839D1                          cmp rcx, rdx
  2062 00001A6C 0F8D59030000                    jge L_error_integer_range
  2063 00001A72 4883F900                        cmp rcx, 0
  2064 00001A76 0F8C4F030000                    jl L_error_integer_range
  2065 00001A7C 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2066 00001A80 BF02000000                      mov rdi, 2
  2067 00001A85 E836EDFFFF                      call malloc
  2068 00001A8A C60002                          mov byte [rax], T_char
  2069 00001A8D 885801                          mov byte [rax + 1], bl
  2070                                          LEAVE
  2070 00001A90 C9                  <1>  leave
  2071 00001A91 C22000                          ret AND_KILL_FRAME(2)
  2072                                  
  2073                                  L_code_ptr_vector_ref:
  2074                                          ENTER
  2074 00001A94 C8000000            <1>  enter 0, 0
  2074 00001A98 4883E4F0            <1>  and rsp, ~15
  2075 00001A9C 48837D1802                      cmp COUNT, 2
  2076 00001AA1 0F85BF030000                    jne L_error_arg_count_2
  2077 00001AA7 488B7D20                        mov rdi, PARAM(0)
  2078                                          assert_vector(rdi)
  2078 00001AAB 803F22              <1>  cmp byte [%1], %2
  2078 00001AAE 0F8551040000        <1>  jne L_error_incorrect_type
  2079 00001AB4 488B7528                        mov rsi, PARAM(1)
  2080                                          assert_integer(rsi)
  2080                              <1>  assert_rational(%1)
  2080 00001AB8 803E11              <2>  cmp byte [%1], %2
  2080 00001ABB 0F8544040000        <2>  jne L_error_incorrect_type
  2080 00001AC1 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2080 00001AC6 0F8539040000        <1>  jne L_error_incorrect_type
  2081 00001ACC 488B5701                        mov rdx, qword [rdi + 1]
  2082 00001AD0 488B4E01                        mov rcx, qword [rsi + 1]
  2083 00001AD4 4839D1                          cmp rcx, rdx
  2084 00001AD7 0F8DEE020000                    jge L_error_integer_range
  2085 00001ADD 4883F900                        cmp rcx, 0
  2086 00001AE1 0F8CE4020000                    jl L_error_integer_range
  2087 00001AE7 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2088                                          LEAVE
  2088 00001AEC C9                  <1>  leave
  2089 00001AED C22000                          ret AND_KILL_FRAME(2)
  2090                                  
  2091                                  L_code_ptr_vector_set:
  2092                                          ENTER
  2092 00001AF0 C8000000            <1>  enter 0, 0
  2092 00001AF4 4883E4F0            <1>  and rsp, ~15
  2093 00001AF8 48837D1803                      cmp COUNT, 3
  2094 00001AFD 0F85CD030000                    jne L_error_arg_count_3
  2095 00001B03 488B7D20                        mov rdi, PARAM(0)
  2096                                          assert_vector(rdi)
  2096 00001B07 803F22              <1>  cmp byte [%1], %2
  2096 00001B0A 0F85F5030000        <1>  jne L_error_incorrect_type
  2097 00001B10 488B7528                        mov rsi, PARAM(1)
  2098                                          assert_integer(rsi)
  2098                              <1>  assert_rational(%1)
  2098 00001B14 803E11              <2>  cmp byte [%1], %2
  2098 00001B17 0F85E8030000        <2>  jne L_error_incorrect_type
  2098 00001B1D 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2098 00001B22 0F85DD030000        <1>  jne L_error_incorrect_type
  2099 00001B28 488B5701                        mov rdx, qword [rdi + 1]
  2100 00001B2C 488B4E01                        mov rcx, qword [rsi + 1]
  2101 00001B30 4839D1                          cmp rcx, rdx
  2102 00001B33 0F8D92020000                    jge L_error_integer_range
  2103 00001B39 4883F900                        cmp rcx, 0
  2104 00001B3D 0F8C88020000                    jl L_error_integer_range
  2105 00001B43 488B4530                        mov rax, PARAM(2)
  2106 00001B47 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2107 00001B4C 48B8-                           mov rax, sob_void
  2107 00001B4E [0000000000000000] 
  2108                                          LEAVE
  2108 00001B56 C9                  <1>  leave
  2109 00001B57 C22800                          ret AND_KILL_FRAME(3)
  2110                                  
  2111                                  L_code_ptr_string_set:
  2112                                          ENTER
  2112 00001B5A C8000000            <1>  enter 0, 0
  2112 00001B5E 4883E4F0            <1>  and rsp, ~15
  2113 00001B62 48837D1803                      cmp COUNT, 3
  2114 00001B67 0F8563030000                    jne L_error_arg_count_3
  2115 00001B6D 488B7D20                        mov rdi, PARAM(0)
  2116                                          assert_string(rdi)
  2116 00001B71 803F03              <1>  cmp byte [%1], %2
  2116 00001B74 0F858B030000        <1>  jne L_error_incorrect_type
  2117 00001B7A 488B7528                        mov rsi, PARAM(1)
  2118                                          assert_integer(rsi)
  2118                              <1>  assert_rational(%1)
  2118 00001B7E 803E11              <2>  cmp byte [%1], %2
  2118 00001B81 0F857E030000        <2>  jne L_error_incorrect_type
  2118 00001B87 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2118 00001B8C 0F8573030000        <1>  jne L_error_incorrect_type
  2119 00001B92 488B5701                        mov rdx, qword [rdi + 1]
  2120 00001B96 488B4E01                        mov rcx, qword [rsi + 1]
  2121 00001B9A 4839D1                          cmp rcx, rdx
  2122 00001B9D 0F8D28020000                    jge L_error_integer_range
  2123 00001BA3 4883F900                        cmp rcx, 0
  2124 00001BA7 0F8C1E020000                    jl L_error_integer_range
  2125 00001BAD 488B4530                        mov rax, PARAM(2)
  2126                                          assert_char(rax)
  2126 00001BB1 803802              <1>  cmp byte [%1], %2
  2126 00001BB4 0F854B030000        <1>  jne L_error_incorrect_type
  2127 00001BBA 8A4001                          mov al, byte [rax + 1]
  2128 00001BBD 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2129 00001BC1 48B8-                           mov rax, sob_void
  2129 00001BC3 [0000000000000000] 
  2130                                          LEAVE
  2130 00001BCB C9                  <1>  leave
  2131 00001BCC C22800                          ret AND_KILL_FRAME(3)
  2132                                  
  2133                                  L_code_ptr_make_vector:
  2134                                          ENTER
  2134 00001BCF C8000000            <1>  enter 0, 0
  2134 00001BD3 4883E4F0            <1>  and rsp, ~15
  2135 00001BD7 48837D1802                      cmp COUNT, 2
  2136 00001BDC 0F8584020000                    jne L_error_arg_count_2
  2137 00001BE2 488B4D20                        mov rcx, PARAM(0)
  2138                                          assert_integer(rcx)
  2138                              <1>  assert_rational(%1)
  2138 00001BE6 803911              <2>  cmp byte [%1], %2
  2138 00001BE9 0F8516030000        <2>  jne L_error_incorrect_type
  2138 00001BEF 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
  2138 00001BF4 0F850B030000        <1>  jne L_error_incorrect_type
  2139 00001BFA 488B4901                        mov rcx, qword [rcx + 1]
  2140 00001BFE 4883F900                        cmp rcx, 0
  2141 00001C02 0F8CC3010000                    jl L_error_integer_range
  2142 00001C08 488B5528                        mov rdx, PARAM(1)
  2143 00001C0C 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2144 00001C14 E8A7EBFFFF                      call malloc
  2145 00001C19 C60022                          mov byte [rax], T_vector
  2146 00001C1C 48894801                        mov qword [rax + 1], rcx
  2147 00001C20 41B800000000                    mov r8, 0
  2148                                  .L0:
  2149 00001C26 4939C8                          cmp r8, rcx
  2150 00001C29 740A                            je .L1
  2151 00001C2B 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2152 00001C30 49FFC0                          inc r8
  2153 00001C33 EBF1                            jmp .L0
  2154                                  .L1:
  2155                                          LEAVE
  2155 00001C35 C9                  <1>  leave
  2156 00001C36 C22000                          ret AND_KILL_FRAME(2)
  2157                                          
  2158                                  L_code_ptr_make_string:
  2159                                          ENTER
  2159 00001C39 C8000000            <1>  enter 0, 0
  2159 00001C3D 4883E4F0            <1>  and rsp, ~15
  2160 00001C41 48837D1802                      cmp COUNT, 2
  2161 00001C46 0F851A020000                    jne L_error_arg_count_2
  2162 00001C4C 488B4D20                        mov rcx, PARAM(0)
  2163                                          assert_integer(rcx)
  2163                              <1>  assert_rational(%1)
  2163 00001C50 803911              <2>  cmp byte [%1], %2
  2163 00001C53 0F85AC020000        <2>  jne L_error_incorrect_type
  2163 00001C59 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
  2163 00001C5E 0F85A1020000        <1>  jne L_error_incorrect_type
  2164 00001C64 488B4901                        mov rcx, qword [rcx + 1]
  2165 00001C68 4883F900                        cmp rcx, 0
  2166 00001C6C 0F8C59010000                    jl L_error_integer_range
  2167 00001C72 488B5528                        mov rdx, PARAM(1)
  2168                                          assert_char(rdx)
  2168 00001C76 803A02              <1>  cmp byte [%1], %2
  2168 00001C79 0F8586020000        <1>  jne L_error_incorrect_type
  2169 00001C7F 8A5201                          mov dl, byte [rdx + 1]
  2170 00001C82 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2171 00001C86 E835EBFFFF                      call malloc
  2172 00001C8B C60003                          mov byte [rax], T_string
  2173 00001C8E 48894801                        mov qword [rax + 1], rcx
  2174 00001C92 41B800000000                    mov r8, 0
  2175                                  .L0:
  2176 00001C98 4939C8                          cmp r8, rcx
  2177 00001C9B 740A                            je .L1
  2178 00001C9D 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2179 00001CA2 49FFC0                          inc r8
  2180 00001CA5 EBF1                            jmp .L0
  2181                                  .L1:
  2182                                          LEAVE
  2182 00001CA7 C9                  <1>  leave
  2183 00001CA8 C22000                          ret AND_KILL_FRAME(2)
  2184                                  
  2185                                  L_code_ptr_numerator:
  2186                                          ENTER
  2186 00001CAB C8000000            <1>  enter 0, 0
  2186 00001CAF 4883E4F0            <1>  and rsp, ~15
  2187 00001CB3 48837D1801                      cmp COUNT, 1
  2188 00001CB8 0F8573010000                    jne L_error_arg_count_1
  2189 00001CBE 488B4520                        mov rax, PARAM(0)
  2190                                          assert_rational(rax)
  2190 00001CC2 803811              <1>  cmp byte [%1], %2
  2190 00001CC5 0F853A020000        <1>  jne L_error_incorrect_type
  2191 00001CCB 488B7801                        mov rdi, qword [rax + 1]
  2192 00001CCF E8D1000000                      call make_integer
  2193                                          LEAVE
  2193 00001CD4 C9                  <1>  leave
  2194 00001CD5 C21800                          ret AND_KILL_FRAME(1)
  2195                                          
  2196                                  L_code_ptr_denominator:
  2197                                          ENTER
  2197 00001CD8 C8000000            <1>  enter 0, 0
  2197 00001CDC 4883E4F0            <1>  and rsp, ~15
  2198 00001CE0 48837D1801                      cmp COUNT, 1
  2199 00001CE5 0F8546010000                    jne L_error_arg_count_1
  2200 00001CEB 488B4520                        mov rax, PARAM(0)
  2201                                          assert_rational(rax)
  2201 00001CEF 803811              <1>  cmp byte [%1], %2
  2201 00001CF2 0F850D020000        <1>  jne L_error_incorrect_type
  2202 00001CF8 488B7809                        mov rdi, qword [rax + 1 + 8]
  2203 00001CFC E8A4000000                      call make_integer
  2204                                          LEAVE
  2204 00001D01 C9                  <1>  leave
  2205 00001D02 C21800                          ret AND_KILL_FRAME(1)
  2206                                  
  2207                                  L_code_ptr_eq:
  2208                                  	ENTER
  2208 00001D05 C8000000            <1>  enter 0, 0
  2208 00001D09 4883E4F0            <1>  and rsp, ~15
  2209 00001D0D 48837D1802              	cmp COUNT, 2
  2210 00001D12 0F854E010000            	jne L_error_arg_count_2
  2211 00001D18 488B7D20                	mov rdi, PARAM(0)
  2212 00001D1C 488B7528                	mov rsi, PARAM(1)
  2213 00001D20 4839F7                  	cmp rdi, rsi
  2214 00001D23 744A                    	je .L_eq_true
  2215 00001D25 8A17                    	mov dl, byte [rdi]
  2216 00001D27 3A16                    	cmp dl, byte [rsi]
  2217 00001D29 7550                    	jne .L_eq_false
  2218 00001D2B 80FA02                  	cmp dl, T_char
  2219 00001D2E 7437                    	je .L_char
  2220 00001D30 80FA04                  	cmp dl, T_symbol
  2221 00001D33 742A                    	je .L_symbol
  2222 00001D35 80FA12                  	cmp dl, T_real
  2223 00001D38 741D                    	je .L_real
  2224 00001D3A 80FA11                  	cmp dl, T_rational
  2225 00001D3D 7402                    	je .L_rational
  2226 00001D3F EB3A                    	jmp .L_eq_false
  2227                                  .L_rational:
  2228 00001D41 488B4601                	mov rax, qword [rsi + 1]
  2229 00001D45 483B4701                	cmp rax, qword [rdi + 1]
  2230 00001D49 7530                    	jne .L_eq_false
  2231 00001D4B 488B4609                	mov rax, qword [rsi + 1 + 8]
  2232 00001D4F 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2233 00001D53 7526                    	jne .L_eq_false
  2234 00001D55 EB18                    	jmp .L_eq_true
  2235                                  .L_real:
  2236 00001D57 488B4601                	mov rax, qword [rsi + 1]
  2237 00001D5B 483B4701                	cmp rax, qword [rdi + 1]
  2238                                  .L_symbol:
  2239                                  	; never reached, because symbols are static!
  2240                                  	; but I'm keeping it in case, I'll ever change
  2241                                  	; the implementation
  2242 00001D5F 488B4601                	mov rax, qword [rsi + 1]
  2243 00001D63 483B4701                	cmp rax, qword [rdi + 1]
  2244                                  .L_char:
  2245 00001D67 8A5E01                  	mov bl, byte [rsi + 1]
  2246 00001D6A 3A5F01                  	cmp bl, byte [rdi + 1]
  2247 00001D6D 750C                    	jne .L_eq_false
  2248                                  .L_eq_true:
  2249 00001D6F 48B8-                   	mov rax, sob_boolean_true
  2249 00001D71 [0300000000000000] 
  2250 00001D79 EB0A                    	jmp .L_eq_exit
  2251                                  .L_eq_false:
  2252 00001D7B 48B8-                   	mov rax, sob_boolean_false
  2252 00001D7D [0200000000000000] 
  2253                                  .L_eq_exit:
  2254                                  	LEAVE
  2254 00001D85 C9                  <1>  leave
  2255 00001D86 C22000                  	ret AND_KILL_FRAME(2)
  2256                                  
  2257                                  make_real:
  2258                                          ENTER
  2258 00001D89 C8000000            <1>  enter 0, 0
  2258 00001D8D 4883E4F0            <1>  and rsp, ~15
  2259 00001D91 BF09000000                      mov rdi, (1 + 8)
  2260 00001D96 E825EAFFFF                      call malloc
  2261 00001D9B C60012                          mov byte [rax], T_real
  2262 00001D9E F20F114001                      movsd qword [rax + 1], xmm0
  2263                                          LEAVE
  2263 00001DA3 C9                  <1>  leave
  2264 00001DA4 C3                              ret
  2265                                          
  2266                                  make_integer:
  2267                                          ENTER
  2267 00001DA5 C8000000            <1>  enter 0, 0
  2267 00001DA9 4883E4F0            <1>  and rsp, ~15
  2268 00001DAD 4889FE                          mov rsi, rdi
  2269 00001DB0 BF11000000                      mov rdi, (1 + 8 + 8)
  2270 00001DB5 E806EAFFFF                      call malloc
  2271 00001DBA C60011                          mov byte [rax], T_rational
  2272 00001DBD 48897001                        mov qword [rax + 1], rsi
  2273 00001DC1 48C7400901000000                mov qword [rax + 1 + 8], 1
  2274                                          LEAVE
  2274 00001DC9 C9                  <1>  leave
  2275 00001DCA C3                              ret
  2276                                          
  2277                                  L_error_integer_range:
  2278 00001DCB 488B3C25[00000000]              mov rdi, qword [stderr]
  2279 00001DD3 48BE-                           mov rsi, fmt_integer_range
  2279 00001DD5 [4D03000000000000] 
  2280 00001DDD B800000000                      mov rax, 0
  2281                                  	ENTER
  2281 00001DE2 C8000000            <1>  enter 0, 0
  2281 00001DE6 4883E4F0            <1>  and rsp, ~15
  2282 00001DEA E8(00000000)                    call fprintf
  2283                                  	LEAVE
  2283 00001DEF C9                  <1>  leave
  2284 00001DF0 48C7C0FBFFFFFF                  mov rax, -5
  2285 00001DF7 E8(00000000)                    call exit
  2286                                  
  2287                                  L_error_arg_count_0:
  2288 00001DFC 488B3C25[00000000]              mov rdi, qword [stderr]
  2289 00001E04 48BE-                           mov rsi, fmt_arg_count_0
  2289 00001E06 [4B02000000000000] 
  2290 00001E0E 488B5518                        mov rdx, COUNT
  2291 00001E12 B800000000                      mov rax, 0
  2292                                  	ENTER
  2292 00001E17 C8000000            <1>  enter 0, 0
  2292 00001E1B 4883E4F0            <1>  and rsp, ~15
  2293 00001E1F E8(00000000)                    call fprintf
  2294                                  	LEAVE
  2294 00001E24 C9                  <1>  leave
  2295 00001E25 48C7C0FDFFFFFF                  mov rax, -3
  2296 00001E2C E8(00000000)                    call exit
  2297                                  
  2298                                  L_error_arg_count_1:
  2299 00001E31 488B3C25[00000000]              mov rdi, qword [stderr]
  2300 00001E39 48BE-                           mov rsi, fmt_arg_count_1
  2300 00001E3B [7302000000000000] 
  2301 00001E43 488B5518                        mov rdx, COUNT
  2302 00001E47 B800000000                      mov rax, 0
  2303                                  	ENTER
  2303 00001E4C C8000000            <1>  enter 0, 0
  2303 00001E50 4883E4F0            <1>  and rsp, ~15
  2304 00001E54 E8(00000000)                    call fprintf
  2305                                  	LEAVE
  2305 00001E59 C9                  <1>  leave
  2306 00001E5A 48C7C0FDFFFFFF                  mov rax, -3
  2307 00001E61 E8(00000000)                    call exit
  2308                                  
  2309                                  L_error_arg_count_2:
  2310 00001E66 488B3C25[00000000]              mov rdi, qword [stderr]
  2311 00001E6E 48BE-                           mov rsi, fmt_arg_count_2
  2311 00001E70 [D902000000000000] 
  2312 00001E78 488B5518                        mov rdx, COUNT
  2313 00001E7C B800000000                      mov rax, 0
  2314                                  	ENTER
  2314 00001E81 C8000000            <1>  enter 0, 0
  2314 00001E85 4883E4F0            <1>  and rsp, ~15
  2315 00001E89 E8(00000000)                    call fprintf
  2316                                  	LEAVE
  2316 00001E8E C9                  <1>  leave
  2317 00001E8F 48C7C0FDFFFFFF                  mov rax, -3
  2318 00001E96 E8(00000000)                    call exit
  2319                                  
  2320                                  L_error_arg_count_12:
  2321 00001E9B 488B3C25[00000000]              mov rdi, qword [stderr]
  2322 00001EA3 48BE-                           mov rsi, fmt_arg_count_12
  2322 00001EA5 [9902000000000000] 
  2323 00001EAD 488B5518                        mov rdx, COUNT
  2324 00001EB1 B800000000                      mov rax, 0
  2325                                  	ENTER
  2325 00001EB6 C8000000            <1>  enter 0, 0
  2325 00001EBA 4883E4F0            <1>  and rsp, ~15
  2326 00001EBE E8(00000000)                    call fprintf
  2327                                  	LEAVE
  2327 00001EC3 C9                  <1>  leave
  2328 00001EC4 48C7C0FDFFFFFF                  mov rax, -3
  2329 00001ECB E8(00000000)                    call exit
  2330                                  
  2331                                  L_error_arg_count_3:
  2332 00001ED0 488B3C25[00000000]              mov rdi, qword [stderr]
  2333 00001ED8 48BE-                           mov rsi, fmt_arg_count_3
  2333 00001EDA [0003000000000000] 
  2334 00001EE2 488B5518                        mov rdx, COUNT
  2335 00001EE6 B800000000                      mov rax, 0
  2336                                  	ENTER
  2336 00001EEB C8000000            <1>  enter 0, 0
  2336 00001EEF 4883E4F0            <1>  and rsp, ~15
  2337 00001EF3 E8(00000000)                    call fprintf
  2338                                  	LEAVE
  2338 00001EF8 C9                  <1>  leave
  2339 00001EF9 48C7C0FDFFFFFF                  mov rax, -3
  2340 00001F00 E8(00000000)                    call exit
  2341                                          
  2342                                  L_error_incorrect_type:
  2343 00001F05 488B3C25[00000000]              mov rdi, qword [stderr]
  2344 00001F0D 48BE-                           mov rsi, fmt_type
  2344 00001F0F [2903000000000000] 
  2345 00001F17 B800000000                      mov rax, 0
  2346                                  	ENTER
  2346 00001F1C C8000000            <1>  enter 0, 0
  2346 00001F20 4883E4F0            <1>  and rsp, ~15
  2347 00001F24 E8(00000000)                    call fprintf
  2348                                  	LEAVE
  2348 00001F29 C9                  <1>  leave
  2349 00001F2A 48C7C0FCFFFFFF                  mov rax, -4
  2350 00001F31 E8(00000000)                    call exit
  2351                                  
  2352                                  L_error_division_by_zero:
  2353 00001F36 488B3C25[00000000]              mov rdi, qword [stderr]
  2354 00001F3E 48BE-                           mov rsi, fmt_division_by_zero
  2354 00001F40 [6A03000000000000] 
  2355 00001F48 B800000000                      mov rax, 0
  2356                                  	ENTER
  2356 00001F4D C8000000            <1>  enter 0, 0
  2356 00001F51 4883E4F0            <1>  and rsp, ~15
  2357 00001F55 E8(00000000)                    call fprintf
  2358                                  	LEAVE
  2358 00001F5A C9                  <1>  leave
  2359 00001F5B 48C7C0F8FFFFFF                  mov rax, -8
  2360 00001F62 E8(00000000)                    call exit
  2361                                  
  2362                                  section .data
  2363                                  fmt_char:
  2364 00000248 256300                          db `%c\0`
  2365                                  fmt_arg_count_0:
  2366 0000024B 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2366 00000254 74696E67207A65726F-
  2366 0000025D 20617267756D656E74-
  2366 00000266 732E20466F756E6420-
  2366 0000026F 25640A00           
  2367                                  fmt_arg_count_1:
  2368 00000273 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2368 0000027C 74696E67206F6E6520-
  2368 00000285 617267756D656E742E-
  2368 0000028E 20466F756E64202564-
  2368 00000297 0A00               
  2369                                  fmt_arg_count_12:
  2370 00000299 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2370 000002A2 74696E67206F6E6520-
  2370 000002AB 726571756972656420-
  2370 000002B4 616E64206F6E65206F-
  2370 000002BD 7074696F6E616C2061-
  2370 000002C6 7267756D656E742E20-
  2370 000002CF 466F756E642025640A-
  2370 000002D8 00                 
  2371                                  fmt_arg_count_2:
  2372 000002D9 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2372 000002E2 74696E672074776F20-
  2372 000002EB 617267756D656E7473-
  2372 000002F4 2E20466F756E642025-
  2372 000002FD 640A00             
  2373                                  fmt_arg_count_3:
  2374 00000300 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2374 00000309 74696E672074687265-
  2374 00000312 6520617267756D656E-
  2374 0000031B 74732E20466F756E64-
  2374 00000324 2025640A00         
  2375                                  fmt_type:
  2376 00000329 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2376 00000332 696F6E207061737365-
  2376 0000033B 6420696E636F727265-
  2376 00000344 637420747970650A00 
  2377                                  fmt_integer_range:
  2378 0000034D 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2378 00000356 7265637420696E7465-
  2378 0000035F 6765722072616E6765-
  2378 00000368 0A00               
  2379                                  fmt_division_by_zero:
  2380 0000036A 212121204469766973-             db `!!! Division by zero\n\0`
  2380 00000373 696F6E206279207A65-
  2380 0000037C 726F0A00           
  2381                                  fmt_scheme_error_part_1:
  2382 00000380 0A2121212054686520-             db `\n!!! The procedure \0`
  2382 00000389 70726F636564757265-
  2382 00000392 2000               
  2383                                  fmt_scheme_error_part_2:
  2384 00000394 2061736B656420746F-             db ` asked to terminate the program\n`
  2384 0000039D 207465726D696E6174-
  2384 000003A6 65207468652070726F-
  2384 000003AF 6772616D0A         
  2385 000003B4 202020207769746820-             db `    with the following message:\n\n\0`
  2385 000003BD 74686520666F6C6C6F-
  2385 000003C6 77696E67206D657373-
  2385 000003CF 6167653A0A0A00     
  2386                                  fmt_scheme_error_part_3:
  2387 000003D6 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2387 000003DF 210A0A00           
