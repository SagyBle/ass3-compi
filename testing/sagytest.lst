     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 11                      	db T_rational	; 1
    84 00000007 010000000000000001-     	dq 1, 1
    84 00000010 00000000000000     
    85 00000017 11                      	db T_rational	; 2
    86 00000018 020000000000000001-     	dq 2, 1
    86 00000021 00000000000000     
    87 00000028 21                      	db T_pair	; (2)
    88 00000029 [1700000000000000]-     	dq L_constants + 23, L_constants + 1
    88 00000031 [0100000000000000] 
    89 00000039 21                      	db T_pair	; (1 2)
    90 0000003A [0600000000000000]-     	dq L_constants + 6, L_constants + 40
    90 00000042 [2800000000000000] 
    91                                  
    92                                  section .bss
    93                                  free_var_0:	; location of null?
    94 00000000 <res 00000008>          	resq 1
    95                                  free_var_1:	; location of pair?
    96 00000008 <res 00000008>          	resq 1
    97                                  free_var_2:	; location of void?
    98 00000010 <res 00000008>          	resq 1
    99                                  free_var_3:	; location of char?
   100 00000018 <res 00000008>          	resq 1
   101                                  free_var_4:	; location of string?
   102 00000020 <res 00000008>          	resq 1
   103                                  free_var_5:	; location of symbol?
   104 00000028 <res 00000008>          	resq 1
   105                                  free_var_6:	; location of vector?
   106 00000030 <res 00000008>          	resq 1
   107                                  free_var_7:	; location of procedure?
   108 00000038 <res 00000008>          	resq 1
   109                                  free_var_8:	; location of real?
   110 00000040 <res 00000008>          	resq 1
   111                                  free_var_9:	; location of rational?
   112 00000048 <res 00000008>          	resq 1
   113                                  free_var_10:	; location of boolean?
   114 00000050 <res 00000008>          	resq 1
   115                                  free_var_11:	; location of number?
   116 00000058 <res 00000008>          	resq 1
   117                                  free_var_12:	; location of collection?
   118 00000060 <res 00000008>          	resq 1
   119                                  free_var_13:	; location of cons
   120 00000068 <res 00000008>          	resq 1
   121                                  free_var_14:	; location of display-sexpr
   122 00000070 <res 00000008>          	resq 1
   123                                  free_var_15:	; location of write-char
   124 00000078 <res 00000008>          	resq 1
   125                                  free_var_16:	; location of car
   126 00000080 <res 00000008>          	resq 1
   127                                  free_var_17:	; location of cdr
   128 00000088 <res 00000008>          	resq 1
   129                                  free_var_18:	; location of string-length
   130 00000090 <res 00000008>          	resq 1
   131                                  free_var_19:	; location of vector-length
   132 00000098 <res 00000008>          	resq 1
   133                                  free_var_20:	; location of real->integer
   134 000000A0 <res 00000008>          	resq 1
   135                                  free_var_21:	; location of exit
   136 000000A8 <res 00000008>          	resq 1
   137                                  free_var_22:	; location of integer->real
   138 000000B0 <res 00000008>          	resq 1
   139                                  free_var_23:	; location of rational->real
   140 000000B8 <res 00000008>          	resq 1
   141                                  free_var_24:	; location of char->integer
   142 000000C0 <res 00000008>          	resq 1
   143                                  free_var_25:	; location of integer->char
   144 000000C8 <res 00000008>          	resq 1
   145                                  free_var_26:	; location of trng
   146 000000D0 <res 00000008>          	resq 1
   147                                  free_var_27:	; location of zero?
   148 000000D8 <res 00000008>          	resq 1
   149                                  free_var_28:	; location of integer?
   150 000000E0 <res 00000008>          	resq 1
   151                                  free_var_29:	; location of __bin-apply
   152 000000E8 <res 00000008>          	resq 1
   153                                  free_var_30:	; location of __bin-add-rr
   154 000000F0 <res 00000008>          	resq 1
   155                                  free_var_31:	; location of __bin-sub-rr
   156 000000F8 <res 00000008>          	resq 1
   157                                  free_var_32:	; location of __bin-mul-rr
   158 00000100 <res 00000008>          	resq 1
   159                                  free_var_33:	; location of __bin-div-rr
   160 00000108 <res 00000008>          	resq 1
   161                                  free_var_34:	; location of __bin-add-qq
   162 00000110 <res 00000008>          	resq 1
   163                                  free_var_35:	; location of __bin-sub-qq
   164 00000118 <res 00000008>          	resq 1
   165                                  free_var_36:	; location of __bin-mul-qq
   166 00000120 <res 00000008>          	resq 1
   167                                  free_var_37:	; location of __bin-div-qq
   168 00000128 <res 00000008>          	resq 1
   169                                  free_var_38:	; location of error
   170 00000130 <res 00000008>          	resq 1
   171                                  free_var_39:	; location of __bin-less-than-rr
   172 00000138 <res 00000008>          	resq 1
   173                                  free_var_40:	; location of __bin-less-than-qq
   174 00000140 <res 00000008>          	resq 1
   175                                  free_var_41:	; location of __bin-equal-rr
   176 00000148 <res 00000008>          	resq 1
   177                                  free_var_42:	; location of __bin-equal-qq
   178 00000150 <res 00000008>          	resq 1
   179                                  free_var_43:	; location of quotient
   180 00000158 <res 00000008>          	resq 1
   181                                  free_var_44:	; location of remainder
   182 00000160 <res 00000008>          	resq 1
   183                                  free_var_45:	; location of set-car!
   184 00000168 <res 00000008>          	resq 1
   185                                  free_var_46:	; location of set-cdr!
   186 00000170 <res 00000008>          	resq 1
   187                                  free_var_47:	; location of string-ref
   188 00000178 <res 00000008>          	resq 1
   189                                  free_var_48:	; location of vector-ref
   190 00000180 <res 00000008>          	resq 1
   191                                  free_var_49:	; location of vector-set!
   192 00000188 <res 00000008>          	resq 1
   193                                  free_var_50:	; location of string-set!
   194 00000190 <res 00000008>          	resq 1
   195                                  free_var_51:	; location of make-vector
   196 00000198 <res 00000008>          	resq 1
   197                                  free_var_52:	; location of make-string
   198 000001A0 <res 00000008>          	resq 1
   199                                  free_var_53:	; location of numerator
   200 000001A8 <res 00000008>          	resq 1
   201                                  free_var_54:	; location of denominator
   202 000001B0 <res 00000008>          	resq 1
   203                                  free_var_55:	; location of eq?
   204 000001B8 <res 00000008>          	resq 1
   205                                  free_var_56:	; location of id
   206 000001C0 <res 00000008>          	resq 1
   207                                  
   208                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   209                                  global main
   210                                  section .text
   211                                  main:
   212 00000000 C8000000                        enter 0, 0
   213                                          
   214                                  	; building closure for null?
   215 00000004 48BF-                   	mov rdi, free_var_0
   215 00000006 [0000000000000000] 
   216 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   216 00000010 [E10D000000000000] 
   217 00000018 E8200D0000              	call bind_primitive
   218                                  
   219                                  	; building closure for pair?
   220 0000001D 48BF-                   	mov rdi, free_var_1
   220 0000001F [0800000000000000] 
   221 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   221 00000029 [170E000000000000] 
   222 00000031 E8070D0000              	call bind_primitive
   223                                  
   224                                  	; building closure for void?
   225 00000036 48BF-                   	mov rdi, free_var_2
   225 00000038 [1000000000000000] 
   226 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   226 00000042 [4D0E000000000000] 
   227 0000004A E8EE0C0000              	call bind_primitive
   228                                  
   229                                  	; building closure for char?
   230 0000004F 48BF-                   	mov rdi, free_var_3
   230 00000051 [1800000000000000] 
   231 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   231 0000005B [830E000000000000] 
   232 00000063 E8D50C0000              	call bind_primitive
   233                                  
   234                                  	; building closure for string?
   235 00000068 48BF-                   	mov rdi, free_var_4
   235 0000006A [2000000000000000] 
   236 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   236 00000074 [B90E000000000000] 
   237 0000007C E8BC0C0000              	call bind_primitive
   238                                  
   239                                  	; building closure for symbol?
   240 00000081 48BF-                   	mov rdi, free_var_5
   240 00000083 [2800000000000000] 
   241 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   241 0000008D [EF0E000000000000] 
   242 00000095 E8A30C0000              	call bind_primitive
   243                                  
   244                                  	; building closure for vector?
   245 0000009A 48BF-                   	mov rdi, free_var_6
   245 0000009C [3000000000000000] 
   246 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   246 000000A6 [250F000000000000] 
   247 000000AE E88A0C0000              	call bind_primitive
   248                                  
   249                                  	; building closure for procedure?
   250 000000B3 48BF-                   	mov rdi, free_var_7
   250 000000B5 [3800000000000000] 
   251 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   251 000000BF [5B0F000000000000] 
   252 000000C7 E8710C0000              	call bind_primitive
   253                                  
   254                                  	; building closure for real?
   255 000000CC 48BF-                   	mov rdi, free_var_8
   255 000000CE [4000000000000000] 
   256 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   256 000000D8 [910F000000000000] 
   257 000000E0 E8580C0000              	call bind_primitive
   258                                  
   259                                  	; building closure for rational?
   260 000000E5 48BF-                   	mov rdi, free_var_9
   260 000000E7 [4800000000000000] 
   261 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   261 000000F1 [C70F000000000000] 
   262 000000F9 E83F0C0000              	call bind_primitive
   263                                  
   264                                  	; building closure for boolean?
   265 000000FE 48BF-                   	mov rdi, free_var_10
   265 00000100 [5000000000000000] 
   266 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   266 0000010A [FD0F000000000000] 
   267 00000112 E8260C0000              	call bind_primitive
   268                                  
   269                                  	; building closure for number?
   270 00000117 48BF-                   	mov rdi, free_var_11
   270 00000119 [5800000000000000] 
   271 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   271 00000123 [3510000000000000] 
   272 0000012B E80D0C0000              	call bind_primitive
   273                                  
   274                                  	; building closure for collection?
   275 00000130 48BF-                   	mov rdi, free_var_12
   275 00000132 [6000000000000000] 
   276 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   276 0000013C [6D10000000000000] 
   277 00000144 E8F40B0000              	call bind_primitive
   278                                  
   279                                  	; building closure for cons
   280 00000149 48BF-                   	mov rdi, free_var_13
   280 0000014B [6800000000000000] 
   281 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   281 00000155 [A510000000000000] 
   282 0000015D E8DB0B0000              	call bind_primitive
   283                                  
   284                                  	; building closure for display-sexpr
   285 00000162 48BF-                   	mov rdi, free_var_14
   285 00000164 [7000000000000000] 
   286 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   286 0000016E [D910000000000000] 
   287 00000176 E8C20B0000              	call bind_primitive
   288                                  
   289                                  	; building closure for write-char
   290 0000017B 48BF-                   	mov rdi, free_var_15
   290 0000017D [7800000000000000] 
   291 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   291 00000187 [0311000000000000] 
   292 0000018F E8A90B0000              	call bind_primitive
   293                                  
   294                                  	; building closure for car
   295 00000194 48BF-                   	mov rdi, free_var_16
   295 00000196 [8000000000000000] 
   296 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   296 000001A0 [5A11000000000000] 
   297 000001A8 E8900B0000              	call bind_primitive
   298                                  
   299                                  	; building closure for cdr
   300 000001AD 48BF-                   	mov rdi, free_var_17
   300 000001AF [8800000000000000] 
   301 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   301 000001B9 [8211000000000000] 
   302 000001C1 E8770B0000              	call bind_primitive
   303                                  
   304                                  	; building closure for string-length
   305 000001C6 48BF-                   	mov rdi, free_var_18
   305 000001C8 [9000000000000000] 
   306 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   306 000001D2 [AA11000000000000] 
   307 000001DA E85E0B0000              	call bind_primitive
   308                                  
   309                                  	; building closure for vector-length
   310 000001DF 48BF-                   	mov rdi, free_var_19
   310 000001E1 [9800000000000000] 
   311 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   311 000001EB [D711000000000000] 
   312 000001F3 E8450B0000              	call bind_primitive
   313                                  
   314                                  	; building closure for real->integer
   315 000001F8 48BF-                   	mov rdi, free_var_20
   315 000001FA [A000000000000000] 
   316 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   316 00000204 [0412000000000000] 
   317 0000020C E82C0B0000              	call bind_primitive
   318                                  
   319                                  	; building closure for exit
   320 00000211 48BF-                   	mov rdi, free_var_21
   320 00000213 [A800000000000000] 
   321 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   321 0000021D [3712000000000000] 
   322 00000225 E8130B0000              	call bind_primitive
   323                                  
   324                                  	; building closure for integer->real
   325 0000022A 48BF-                   	mov rdi, free_var_22
   325 0000022C [B000000000000000] 
   326 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   326 00000236 [5412000000000000] 
   327 0000023E E8FA0A0000              	call bind_primitive
   328                                  
   329                                  	; building closure for rational->real
   330 00000243 48BF-                   	mov rdi, free_var_23
   330 00000245 [B800000000000000] 
   331 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   331 0000024F [9112000000000000] 
   332 00000257 E8E10A0000              	call bind_primitive
   333                                  
   334                                  	; building closure for char->integer
   335 0000025C 48BF-                   	mov rdi, free_var_24
   335 0000025E [C000000000000000] 
   336 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   336 00000268 [D012000000000000] 
   337 00000270 E8C80A0000              	call bind_primitive
   338                                  
   339                                  	; building closure for integer->char
   340 00000275 48BF-                   	mov rdi, free_var_25
   340 00000277 [C800000000000000] 
   341 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   341 00000281 [0513000000000000] 
   342 00000289 E8AF0A0000              	call bind_primitive
   343                                  
   344                                  	; building closure for trng
   345 0000028E 48BF-                   	mov rdi, free_var_26
   345 00000290 [D000000000000000] 
   346 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   346 0000029A [5F13000000000000] 
   347 000002A2 E8960A0000              	call bind_primitive
   348                                  
   349                                  	; building closure for zero?
   350 000002A7 48BF-                   	mov rdi, free_var_27
   350 000002A9 [D800000000000000] 
   351 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   351 000002B3 [8213000000000000] 
   352 000002BB E87D0A0000              	call bind_primitive
   353                                  
   354                                  	; building closure for integer?
   355 000002C0 48BF-                   	mov rdi, free_var_28
   355 000002C2 [E000000000000000] 
   356 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   356 000002CC [DD13000000000000] 
   357 000002D4 E8640A0000              	call bind_primitive
   358                                  
   359                                  	; building closure for __bin-apply
   360 000002D9 48BF-                   	mov rdi, free_var_29
   360 000002DB [E800000000000000] 
   361 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   361 000002E5 [650D000000000000] 
   362 000002ED E84B0A0000              	call bind_primitive
   363                                  
   364                                  	; building closure for __bin-add-rr
   365 000002F2 48BF-                   	mov rdi, free_var_30
   365 000002F4 [F000000000000000] 
   366 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   366 000002FE [1A14000000000000] 
   367 00000306 E8320A0000              	call bind_primitive
   368                                  
   369                                  	; building closure for __bin-sub-rr
   370 0000030B 48BF-                   	mov rdi, free_var_31
   370 0000030D [F800000000000000] 
   371 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   371 00000317 [5E14000000000000] 
   372 0000031F E8190A0000              	call bind_primitive
   373                                  
   374                                  	; building closure for __bin-mul-rr
   375 00000324 48BF-                   	mov rdi, free_var_32
   375 00000326 [0001000000000000] 
   376 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   376 00000330 [A214000000000000] 
   377 00000338 E8000A0000              	call bind_primitive
   378                                  
   379                                  	; building closure for __bin-div-rr
   380 0000033D 48BF-                   	mov rdi, free_var_33
   380 0000033F [0801000000000000] 
   381 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   381 00000349 [E614000000000000] 
   382 00000351 E8E7090000              	call bind_primitive
   383                                  
   384                                  	; building closure for __bin-add-qq
   385 00000356 48BF-                   	mov rdi, free_var_34
   385 00000358 [1001000000000000] 
   386 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   386 00000362 [3815000000000000] 
   387 0000036A E8CE090000              	call bind_primitive
   388                                  
   389                                  	; building closure for __bin-sub-qq
   390 0000036F 48BF-                   	mov rdi, free_var_35
   390 00000371 [1801000000000000] 
   391 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   391 0000037B [A015000000000000] 
   392 00000383 E8B5090000              	call bind_primitive
   393                                  
   394                                  	; building closure for __bin-mul-qq
   395 00000388 48BF-                   	mov rdi, free_var_36
   395 0000038A [2001000000000000] 
   396 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   396 00000394 [0816000000000000] 
   397 0000039C E89C090000              	call bind_primitive
   398                                  
   399                                  	; building closure for __bin-div-qq
   400 000003A1 48BF-                   	mov rdi, free_var_37
   400 000003A3 [2801000000000000] 
   401 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   401 000003AD [6016000000000000] 
   402 000003B5 E883090000              	call bind_primitive
   403                                  
   404                                  	; building closure for error
   405 000003BA 48BF-                   	mov rdi, free_var_38
   405 000003BC [3001000000000000] 
   406 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   406 000003C6 [2E17000000000000] 
   407 000003CE E86A090000              	call bind_primitive
   408                                  
   409                                  	; building closure for __bin-less-than-rr
   410 000003D3 48BF-                   	mov rdi, free_var_39
   410 000003D5 [3801000000000000] 
   411 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   411 000003DF [E517000000000000] 
   412 000003E7 E851090000              	call bind_primitive
   413                                  
   414                                  	; building closure for __bin-less-than-qq
   415 000003EC 48BF-                   	mov rdi, free_var_40
   415 000003EE [4001000000000000] 
   416 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   416 000003F8 [3C18000000000000] 
   417 00000400 E838090000              	call bind_primitive
   418                                  
   419                                  	; building closure for __bin-equal-rr
   420 00000405 48BF-                   	mov rdi, free_var_41
   420 00000407 [4801000000000000] 
   421 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   421 00000411 [9F18000000000000] 
   422 00000419 E81F090000              	call bind_primitive
   423                                  
   424                                  	; building closure for __bin-equal-qq
   425 0000041E 48BF-                   	mov rdi, free_var_42
   425 00000420 [5001000000000000] 
   426 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   426 0000042A [F618000000000000] 
   427 00000432 E806090000              	call bind_primitive
   428                                  
   429                                  	; building closure for quotient
   430 00000437 48BF-                   	mov rdi, free_var_43
   430 00000439 [5801000000000000] 
   431 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   431 00000443 [5919000000000000] 
   432 0000044B E8ED080000              	call bind_primitive
   433                                  
   434                                  	; building closure for remainder
   435 00000450 48BF-                   	mov rdi, free_var_44
   435 00000452 [6001000000000000] 
   436 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   436 0000045C [BF19000000000000] 
   437 00000464 E8D4080000              	call bind_primitive
   438                                  
   439                                  	; building closure for set-car!
   440 00000469 48BF-                   	mov rdi, free_var_45
   440 0000046B [6801000000000000] 
   441 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   441 00000475 [251A000000000000] 
   442 0000047D E8BB080000              	call bind_primitive
   443                                  
   444                                  	; building closure for set-cdr!
   445 00000482 48BF-                   	mov rdi, free_var_46
   445 00000484 [7001000000000000] 
   446 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   446 0000048E [5B1A000000000000] 
   447 00000496 E8A2080000              	call bind_primitive
   448                                  
   449                                  	; building closure for string-ref
   450 0000049B 48BF-                   	mov rdi, free_var_47
   450 0000049D [7801000000000000] 
   451 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   451 000004A7 [911A000000000000] 
   452 000004AF E889080000              	call bind_primitive
   453                                  
   454                                  	; building closure for vector-ref
   455 000004B4 48BF-                   	mov rdi, free_var_48
   455 000004B6 [8001000000000000] 
   456 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   456 000004C0 [FC1A000000000000] 
   457 000004C8 E870080000              	call bind_primitive
   458                                  
   459                                  	; building closure for vector-set!
   460 000004CD 48BF-                   	mov rdi, free_var_49
   460 000004CF [8801000000000000] 
   461 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   461 000004D9 [581B000000000000] 
   462 000004E1 E857080000              	call bind_primitive
   463                                  
   464                                  	; building closure for string-set!
   465 000004E6 48BF-                   	mov rdi, free_var_50
   465 000004E8 [9001000000000000] 
   466 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   466 000004F2 [C21B000000000000] 
   467 000004FA E83E080000              	call bind_primitive
   468                                  
   469                                  	; building closure for make-vector
   470 000004FF 48BF-                   	mov rdi, free_var_51
   470 00000501 [9801000000000000] 
   471 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   471 0000050B [371C000000000000] 
   472 00000513 E825080000              	call bind_primitive
   473                                  
   474                                  	; building closure for make-string
   475 00000518 48BF-                   	mov rdi, free_var_52
   475 0000051A [A001000000000000] 
   476 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   476 00000524 [A11C000000000000] 
   477 0000052C E80C080000              	call bind_primitive
   478                                  
   479                                  	; building closure for numerator
   480 00000531 48BF-                   	mov rdi, free_var_53
   480 00000533 [A801000000000000] 
   481 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   481 0000053D [131D000000000000] 
   482 00000545 E8F3070000              	call bind_primitive
   483                                  
   484                                  	; building closure for denominator
   485 0000054A 48BF-                   	mov rdi, free_var_54
   485 0000054C [B001000000000000] 
   486 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   486 00000556 [401D000000000000] 
   487 0000055E E8DA070000              	call bind_primitive
   488                                  
   489                                  	; building closure for eq?
   490 00000563 48BF-                   	mov rdi, free_var_55
   490 00000565 [B801000000000000] 
   491 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   491 0000056F [6D1D000000000000] 
   492 00000577 E8C1070000              	call bind_primitive
   493                                  
   494 0000057C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   495 00000581 E826020000              	call malloc
   496 00000586 50                      	push rax
   497 00000587 BF00000000              	mov rdi, 8 * 0	; new rib
   498 0000058C E81B020000              	call malloc
   499 00000591 50                      	push rax
   500 00000592 BF08000000              	mov rdi, 8 * 1	; extended env
   501 00000597 E810020000              	call malloc
   502 0000059C 488B7D10                	mov rdi, ENV
   503 000005A0 BE00000000              	mov rsi, 0
   504 000005A5 BA01000000              	mov rdx, 1
   505                                  .L_lambda_simple_env_loop_0002:	; ext_env[i + 1] <-- env[i]
   506 000005AA 4883FE00                	cmp rsi, 0
   507 000005AE 7410                    	je .L_lambda_simple_env_end_0002
   508 000005B0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   509 000005B4 48890CD0                	mov qword [rax + 8 * rdx], rcx
   510 000005B8 48FFC6                  	inc rsi
   511 000005BB 48FFC2                  	inc rdx
   512 000005BE EBEA                    	jmp .L_lambda_simple_env_loop_0002
   513                                  .L_lambda_simple_env_end_0002:
   514 000005C0 5B                      	pop rbx
   515 000005C1 BE00000000              	mov rsi, 0
   516                                  .L_lambda_simple_params_loop_0002:	; copy params
   517 000005C6 4883FE00                	cmp rsi, 0
   518 000005CA 740E                    	je .L_lambda_simple_params_end_0002
   519 000005CC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   520 000005D1 488914F3                	mov qword [rbx + 8 * rsi], rdx
   521 000005D5 48FFC6                  	inc rsi
   522 000005D8 EBEC                    	jmp .L_lambda_simple_params_loop_0002
   523                                  .L_lambda_simple_params_end_0002:
   524 000005DA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   525 000005DD 4889C3                  	mov rbx, rax
   526 000005E0 58                      	pop rax
   527 000005E1 C60005                  	mov byte [rax], T_closure
   528 000005E4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   529 000005E8 48C74009[F2050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0002
   530 000005F0 EB1F                    	jmp .L_lambda_simple_end_0002
   531                                  .L_lambda_simple_code_0002:	; lambda-simple body
   532 000005F2 48837C241001            	cmp qword [rsp + 8 * 2], 1
   533 000005F8 740B                    	je .L_lambda_simple_arity_check_ok_0003
   534 000005FA FF742410                	push qword [rsp + 8 * 2]
   535 000005FE 6A01                    	push 1
   536 00000600 E960010000              	jmp L_error_incorrect_arity_simple
   537                                  .L_lambda_simple_arity_check_ok_0003:
   538 00000605 C8000000                	enter 0, 0
   539 00000609 488B4520                mov rax, qword [rbp + 32]
   540 0000060D C9                      	leave
   541 0000060E C21800                  	ret 8 * (2 + 1)
   542                                  .L_lambda_simple_end_0002:	; new closure is in rax
   543 00000611 48890425[C0010000]      	mov qword [free_var_56], rax
   544 00000619 48B8-                   	mov rax, sob_void
   544 0000061B [0000000000000000] 
   545                                  
   546 00000623 4889C7                  	mov rdi, rax
   547 00000626 E892010000              	call print_sexpr_if_not_void
   548                                  
   549 0000062B 48B8-                   	mov rax, qword (L_constants + 6)
   549 0000062D [0600000000000000] 
   550 00000635 50                      	push rax
   551 00000636 48B8-                   	mov rax, qword (L_constants + 57)
   551 00000638 [3900000000000000] 
   552 00000640 50                      	push rax
   553 00000641 48B8-                   	mov rax, qword (L_constants + 1)
   553 00000643 [0100000000000000] 
   554 0000064B 50                      	push rax
   555 0000064C 488B0425[10010000]      	mov rax, qword [free_var_34]
   556 00000654 50                      	push rax
   557 00000655 6A02                    	push 2
   558 00000657 488B0425[68000000]      	mov rax, qword [free_var_13]
   559 0000065F 803805                  	cmp byte [rax], T_closure 
   560 00000662 0F85C6100000                    jne L_code_ptr_error
   561                                  
   562 00000668 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
   563                                  
   564 0000066C 53                              push rbx
   565                                  
   566 0000066D FF5009                          call SOB_CLOSURE_CODE(rax)
   567                                  
   568 00000670 50                              	push rax
   569 00000671 488B0425[C0010000]      	mov rax, qword [free_var_56]
   570 00000679 50                      	push rax
   571 0000067A 6A02                    	push 2
   572 0000067C 488B0425[E8000000]      	mov rax, qword [free_var_29]
   573 00000684 803805                  	cmp byte [rax], T_closure 
   574 00000687 0F85A1100000                    jne L_code_ptr_error
   575                                  
   576 0000068D 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
   577                                  
   578 00000691 53                              push rbx
   579                                  
   580 00000692 FF5009                          call SOB_CLOSURE_CODE(rax)
   581                                  
   582 00000695 50                              	push rax
   583 00000696 6A02                    	push 2
   584 00000698 488B0425[E8000000]      	mov rax, qword [free_var_29]
   585 000006A0 803805                  	cmp byte [rax], T_closure 
   586 000006A3 0F8585100000                    jne L_code_ptr_error
   587                                  
   588 000006A9 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
   589                                  
   590 000006AD 53                              push rbx
   591                                  
   592 000006AE FF5009                          call SOB_CLOSURE_CODE(rax)
   593                                  
   594 000006B1 50                              	push rax
   595 000006B2 6A02                    	push 2
   596 000006B4 488B0425[10010000]      	mov rax, qword [free_var_34]
   597 000006BC 803805                  	cmp byte [rax], T_closure 
   598 000006BF 0F8569100000                    jne L_code_ptr_error
   599                                  
   600 000006C5 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
   601                                  
   602 000006C9 53                              push rbx
   603                                  
   604 000006CA FF5009                          call SOB_CLOSURE_CODE(rax)
   605                                  
   606                                          
   607 000006CD 4889C7                  	mov rdi, rax
   608 000006D0 E8E8000000              	call print_sexpr_if_not_void
   609                                  
   610 000006D5 48BF-                           mov rdi, fmt_memory_usage
   610 000006D7 [A900000000000000] 
   611 000006DF 488B3425[30010000]              mov rsi, qword [top_of_memory]
   612 000006E7 4881EE[C8010000]                sub rsi, memory
   613 000006EE B800000000                      mov rax, 0
   614                                  	ENTER
   614 000006F3 C8000000            <1>  enter 0, 0
   614 000006F7 4883E4F0            <1>  and rsp, ~15
   615 000006FB E8(00000000)                    call printf
   616                                  	LEAVE
   616 00000700 C9                  <1>  leave
   617 00000701 C9                      	leave
   618 00000702 C3                      	ret
   619                                  
   620                                  L_error_non_closure:
   621 00000703 488B3C25[00000000]              mov rdi, qword [stderr]
   622 0000070B 48BE-                           mov rsi, fmt_non_closure
   622 0000070D [E000000000000000] 
   623 00000715 B800000000                      mov rax, 0
   624                                  	ENTER
   624 0000071A C8000000            <1>  enter 0, 0
   624 0000071E 4883E4F0            <1>  and rsp, ~15
   625 00000722 E8(00000000)                    call fprintf
   626                                  	LEAVE
   626 00000727 C9                  <1>  leave
   627 00000728 48C7C0FEFFFFFF                  mov rax, -2
   628 0000072F E8(00000000)                    call exit
   629                                  
   630                                  L_error_improper_list:
   631 00000734 488B3C25[00000000]      	mov rdi, qword [stderr]
   632 0000073C 48BE-                   	mov rsi, fmt_error_improper_list
   632 0000073E [0801000000000000] 
   633 00000746 B800000000              	mov rax, 0
   634                                  	ENTER
   634 0000074B C8000000            <1>  enter 0, 0
   634 0000074F 4883E4F0            <1>  and rsp, ~15
   635 00000753 E8(00000000)            	call fprintf
   636                                  	LEAVE
   636 00000758 C9                  <1>  leave
   637 00000759 48C7C0F9FFFFFF          	mov rax, -7
   638 00000760 E8(00000000)            	call exit
   639                                  
   640                                  L_error_incorrect_arity_simple:
   641 00000765 488B3C25[00000000]              mov rdi, qword [stderr]
   642 0000076D 48BE-                           mov rsi, fmt_incorrect_arity_simple
   642 0000076F [4A00000000000000] 
   643 00000777 EB12                            jmp L_error_incorrect_arity_common
   644                                  L_error_incorrect_arity_opt:
   645 00000779 488B3C25[00000000]              mov rdi, qword [stderr]
   646 00000781 48BE-                           mov rsi, fmt_incorrect_arity_opt
   646 00000783 [7500000000000000] 
   647                                  L_error_incorrect_arity_common:
   648 0000078B 5A                              pop rdx
   649 0000078C 59                              pop rcx
   650 0000078D B800000000                      mov rax, 0
   651                                  	ENTER
   651 00000792 C8000000            <1>  enter 0, 0
   651 00000796 4883E4F0            <1>  and rsp, ~15
   652 0000079A E8(00000000)                    call fprintf
   653                                  	LEAVE
   653 0000079F C9                  <1>  leave
   654 000007A0 48C7C0FAFFFFFF                  mov rax, -6
   655 000007A7 E8(00000000)                    call exit
   656                                  
   657                                  section .data
   658                                  fmt_incorrect_arity_simple:
   659 0000004A 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   659 00000053 74656420256C642061-
   659 0000005C 7267756D656E74732C-
   659 00000065 206275742067697665-
   659 0000006E 6E20256C640A00     
   660                                  fmt_incorrect_arity_opt:
   661 00000075 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   661 0000007E 746564206174206C65-
   661 00000087 61737420256C642061-
   661 00000090 7267756D656E74732C-
   661 00000099 206275742067697665-
   661 000000A2 6E20256C640A00     
   662                                  fmt_memory_usage:
   663 000000A9 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   663 000000B2 6420256C6420627974-
   663 000000BB 6573206F662064796E-
   663 000000C4 616D6963616C6C792D-
   663 000000CD 616C6C6F6361746564-
   663 000000D6 206D656D6F72790A0A-
   663 000000DF 00                 
   664                                  fmt_non_closure:
   665 000000E0 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   665 000000E9 7074696E6720746F20-
   665 000000F2 6170706C792061206E-
   665 000000FB 6F6E2D636C6F737572-
   665 00000104 65210A00           
   666                                  fmt_error_improper_list:
   667 00000108 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   667 00000111 7267756D656E742069-
   667 0000011A 73206E6F7420612070-
   667 00000123 726F706572206C6973-
   667 0000012C 74210A00           
   668                                  
   669                                  section .bss
   670                                  memory:
   671 000001C8 <res 40000000>          	resb gbytes(1)
   672                                  
   673                                  section .data
   674                                  top_of_memory:
   675 00000130 [C801000000000000]              dq memory
   676                                  
   677                                  section .text
   678                                  malloc:
   679 000007AC 488B0425[30010000]              mov rax, qword [top_of_memory]
   680 000007B4 48013C25[30010000]              add qword [top_of_memory], rdi
   681 000007BC C3                              ret
   682                                          
   683                                  print_sexpr_if_not_void:
   684 000007BD 4881FF[00000000]        	cmp rdi, sob_void
   685 000007C4 7501                    	jne print_sexpr
   686 000007C6 C3                      	ret
   687                                  
   688                                  section .data
   689                                  fmt_void:
   690 00000138 233C766F69643E00        	db `#<void>\0`
   691                                  fmt_nil:
   692 00000140 282900                  	db `()\0`
   693                                  fmt_boolean_false:
   694 00000143 236600                  	db `#f\0`
   695                                  fmt_boolean_true:
   696 00000146 237400                  	db `#t\0`
   697                                  fmt_char_backslash:
   698 00000149 235C5C00                	db `#\\\\\0`
   699                                  fmt_char_dquote:
   700 0000014D 235C2200                	db `#\\"\0`
   701                                  fmt_char_simple:
   702 00000151 235C256300              	db `#\\%c\0`
   703                                  fmt_char_null:
   704 00000156 235C6E756C00            	db `#\\nul\0`
   705                                  fmt_char_bell:
   706 0000015C 235C62656C6C00          	db `#\\bell\0`
   707                                  fmt_char_backspace:
   708 00000163 235C6261636B737061-     	db `#\\backspace\0`
   708 0000016C 636500             
   709                                  fmt_char_tab:
   710 0000016F 235C74616200            	db `#\\tab\0`
   711                                  fmt_char_newline:
   712 00000175 235C6E65776C696E65-     	db `#\\newline\0`
   712 0000017E 00                 
   713                                  fmt_char_formfeed:
   714 0000017F 235C7061676500          	db `#\\page\0`
   715                                  fmt_char_return:
   716 00000186 235C72657475726E00      	db `#\\return\0`
   717                                  fmt_char_escape:
   718 0000018F 235C65736300            	db `#\\esc\0`
   719                                  fmt_char_space:
   720 00000195 235C737061636500        	db `#\\space\0`
   721                                  fmt_char_hex:
   722 0000019D 235C782530325800        	db `#\\x%02X\0`
   723                                  fmt_closure:
   724 000001A5 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   724 000001AE 206174203078253038-
   724 000001B7 5820656E763D307825-
   724 000001C0 30385820636F64653D-
   724 000001C9 3078253038583E00   
   725                                  fmt_lparen:
   726 000001D1 2800                    	db `(\0`
   727                                  fmt_dotted_pair:
   728 000001D3 202E2000                	db ` . \0`
   729                                  fmt_rparen:
   730 000001D7 2900                    	db `)\0`
   731                                  fmt_space:
   732 000001D9 2000                    	db ` \0`
   733                                  fmt_empty_vector:
   734 000001DB 23282900                	db `#()\0`
   735                                  fmt_vector:
   736 000001DF 232800                  	db `#(\0`
   737                                  fmt_real:
   738 000001E2 256600                  	db `%f\0`
   739                                  fmt_fraction:
   740 000001E5 256C642F256C6400        	db `%ld/%ld\0`
   741                                  fmt_zero:
   742 000001ED 3000                    	db `0\0`
   743                                  fmt_int:
   744 000001EF 256C6400                	db `%ld\0`
   745                                  fmt_unknown_sexpr_error:
   746 000001F3 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   746 000001FC 6F723A20556E6B6E6F-
   746 00000205 776E2074797065206F-
   746 0000020E 662073657870722028-
   746 00000217 3078253032582920   
   747 0000021F 617420616464726573-     	db `at address 0x%08X\n\n\0`
   747 00000228 73203078253038580A-
   747 00000231 0A00               
   748                                  fmt_dquote:
   749 00000233 2200                    	db `\"\0`
   750                                  fmt_string_char:
   751 00000235 256300                          db `%c\0`
   752                                  fmt_string_char_7:
   753 00000238 5C6100                          db `\\a\0`
   754                                  fmt_string_char_8:
   755 0000023B 5C6200                          db `\\b\0`
   756                                  fmt_string_char_9:
   757 0000023E 5C7400                          db `\\t\0`
   758                                  fmt_string_char_10:
   759 00000241 5C6E00                          db `\\n\0`
   760                                  fmt_string_char_11:
   761 00000244 5C7600                          db `\\v\0`
   762                                  fmt_string_char_12:
   763 00000247 5C6600                          db `\\f\0`
   764                                  fmt_string_char_13:
   765 0000024A 5C7200                          db `\\r\0`
   766                                  fmt_string_char_34:
   767 0000024D 5C2200                          db `\\"\0`
   768                                  fmt_string_char_92:
   769 00000250 5C5C00                          db `\\\\\0`
   770                                  fmt_string_char_hex:
   771 00000253 5C7825583B00                    db `\\x%X;\0`
   772                                  
   773                                  section .text
   774                                  
   775                                  print_sexpr:
   776                                  	ENTER
   776 000007C7 C8000000            <1>  enter 0, 0
   776 000007CB 4883E4F0            <1>  and rsp, ~15
   777 000007CF 8A07                    	mov al, byte [rdi]
   778 000007D1 3C00                    	cmp al, T_void
   779 000007D3 744D                    	je .Lvoid
   780 000007D5 3C01                    	cmp al, T_nil
   781 000007D7 7458                    	je .Lnil
   782 000007D9 3C09                    	cmp al, T_boolean_false
   783 000007DB 7463                    	je .Lboolean_false
   784 000007DD 3C0A                    	cmp al, T_boolean_true
   785 000007DF 746E                    	je .Lboolean_true
   786 000007E1 3C02                    	cmp al, T_char
   787 000007E3 7479                    	je .Lchar
   788 000007E5 3C04                    	cmp al, T_symbol
   789 000007E7 0F84BB010000            	je .Lsymbol
   790 000007ED 3C21                    	cmp al, T_pair
   791 000007EF 0F84D6010000            	je .Lpair
   792 000007F5 3C22                    	cmp al, T_vector
   793 000007F7 0F849F020000            	je .Lvector
   794 000007FD 3C05                    	cmp al, T_closure
   795 000007FF 0F8489010000            	je .Lclosure
   796 00000805 3C12                    	cmp al, T_real
   797 00000807 0F8430030000            	je .Lreal
   798 0000080D 3C11                    	cmp al, T_rational
   799 0000080F 0F8456030000            	je .Lrational
   800 00000815 3C03                    	cmp al, T_string
   801 00000817 0F848F030000            	je .Lstring
   802                                  
   803 0000081D E9C7040000              	jmp .Lunknown_sexpr_type
   804                                  
   805                                  .Lvoid:
   806 00000822 48BF-                   	mov rdi, fmt_void
   806 00000824 [3801000000000000] 
   807 0000082C E9F5040000              	jmp .Lemit
   808                                  
   809                                  .Lnil:
   810 00000831 48BF-                   	mov rdi, fmt_nil
   810 00000833 [4001000000000000] 
   811 0000083B E9E6040000              	jmp .Lemit
   812                                  
   813                                  .Lboolean_false:
   814 00000840 48BF-                   	mov rdi, fmt_boolean_false
   814 00000842 [4301000000000000] 
   815 0000084A E9D7040000              	jmp .Lemit
   816                                  
   817                                  .Lboolean_true:
   818 0000084F 48BF-                   	mov rdi, fmt_boolean_true
   818 00000851 [4601000000000000] 
   819 00000859 E9C8040000              	jmp .Lemit
   820                                  
   821                                  .Lchar:
   822 0000085E 8A4701                  	mov al, byte [rdi + 1]
   823 00000861 3C20                    	cmp al, ' '
   824 00000863 7E28                    	jle .Lchar_whitespace
   825 00000865 3C5C                    	cmp al, 92 		; backslash
   826 00000867 0F847C000000            	je .Lchar_backslash
   827 0000086D 3C22                    	cmp al, '"'
   828 0000086F 0F8483000000            	je .Lchar_dquote
   829 00000875 4825FF000000            	and rax, 255
   830 0000087B 48BF-                   	mov rdi, fmt_char_simple
   830 0000087D [5101000000000000] 
   831 00000885 4889C6                  	mov rsi, rax
   832 00000888 E999040000              	jmp .Lemit
   833                                  
   834                                  .Lchar_whitespace:
   835 0000088D 3C00                    	cmp al, 0
   836 0000088F 7476                    	je .Lchar_null
   837 00000891 3C07                    	cmp al, 7
   838 00000893 0F847D000000            	je .Lchar_bell
   839 00000899 3C08                    	cmp al, 8
   840 0000089B 0F8484000000            	je .Lchar_backspace
   841 000008A1 3C09                    	cmp al, 9
   842 000008A3 0F848B000000            	je .Lchar_tab
   843 000008A9 3C0A                    	cmp al, 10
   844 000008AB 0F8492000000            	je .Lchar_newline
   845 000008B1 3C0C                    	cmp al, 12
   846 000008B3 0F8499000000            	je .Lchar_formfeed
   847 000008B9 3C0D                    	cmp al, 13
   848 000008BB 0F84A0000000            	je .Lchar_return
   849 000008C1 3C1B                    	cmp al, 27
   850 000008C3 0F84A7000000            	je .Lchar_escape
   851 000008C9 4825FF000000            	and rax, 255
   852 000008CF 3C20                    	cmp al, ' '
   853 000008D1 0F84A8000000            	je .Lchar_space
   854 000008D7 48BF-                   	mov rdi, fmt_char_hex
   854 000008D9 [9D01000000000000] 
   855 000008E1 4889C6                  	mov rsi, rax
   856 000008E4 E93D040000              	jmp .Lemit	
   857                                  
   858                                  .Lchar_backslash:
   859 000008E9 48BF-                   	mov rdi, fmt_char_backslash
   859 000008EB [4901000000000000] 
   860 000008F3 E92E040000              	jmp .Lemit
   861                                  
   862                                  .Lchar_dquote:
   863 000008F8 48BF-                   	mov rdi, fmt_char_dquote
   863 000008FA [4D01000000000000] 
   864 00000902 E91F040000              	jmp .Lemit
   865                                  
   866                                  .Lchar_null:
   867 00000907 48BF-                   	mov rdi, fmt_char_null
   867 00000909 [5601000000000000] 
   868 00000911 E910040000              	jmp .Lemit
   869                                  
   870                                  .Lchar_bell:
   871 00000916 48BF-                   	mov rdi, fmt_char_bell
   871 00000918 [5C01000000000000] 
   872 00000920 E901040000              	jmp .Lemit
   873                                  
   874                                  .Lchar_backspace:
   875 00000925 48BF-                   	mov rdi, fmt_char_backspace
   875 00000927 [6301000000000000] 
   876 0000092F E9F2030000              	jmp .Lemit
   877                                  
   878                                  .Lchar_tab:
   879 00000934 48BF-                   	mov rdi, fmt_char_tab
   879 00000936 [6F01000000000000] 
   880 0000093E E9E3030000              	jmp .Lemit
   881                                  
   882                                  .Lchar_newline:
   883 00000943 48BF-                   	mov rdi, fmt_char_newline
   883 00000945 [7501000000000000] 
   884 0000094D E9D4030000              	jmp .Lemit
   885                                  
   886                                  .Lchar_formfeed:
   887 00000952 48BF-                   	mov rdi, fmt_char_formfeed
   887 00000954 [7F01000000000000] 
   888 0000095C E9C5030000              	jmp .Lemit
   889                                  
   890                                  .Lchar_return:
   891 00000961 48BF-                   	mov rdi, fmt_char_return
   891 00000963 [8601000000000000] 
   892 0000096B E9B6030000              	jmp .Lemit
   893                                  
   894                                  .Lchar_escape:
   895 00000970 48BF-                   	mov rdi, fmt_char_escape
   895 00000972 [8F01000000000000] 
   896 0000097A E9A7030000              	jmp .Lemit
   897                                  
   898                                  .Lchar_space:
   899 0000097F 48BF-                   	mov rdi, fmt_char_space
   899 00000981 [9501000000000000] 
   900 00000989 E998030000              	jmp .Lemit
   901                                  
   902                                  .Lclosure:
   903 0000098E 4889FE                  	mov rsi, qword rdi
   904 00000991 48BF-                   	mov rdi, fmt_closure
   904 00000993 [A501000000000000] 
   905 0000099B 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   906 0000099F 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   907 000009A3 E97E030000              	jmp .Lemit
   908                                  
   909                                  .Lsymbol:
   910 000009A8 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   911 000009AC BE01000000              	mov rsi, 1		 ; size = 1 byte
   912 000009B1 488B5701                	mov rdx, qword [rdi + 1] ; length
   913 000009B5 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   914 000009B9 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   915 000009C1 E8(00000000)            	call fwrite
   916 000009C6 E970030000              	jmp .Lend
   917                                  	
   918                                  .Lpair:
   919 000009CB 57                      	push rdi
   920 000009CC 48BF-                   	mov rdi, fmt_lparen
   920 000009CE [D101000000000000] 
   921 000009D6 B800000000              	mov rax, 0
   922                                          ENTER
   922 000009DB C8000000            <1>  enter 0, 0
   922 000009DF 4883E4F0            <1>  and rsp, ~15
   923 000009E3 E8(00000000)            	call printf
   924                                          LEAVE
   924 000009E8 C9                  <1>  leave
   925 000009E9 488B3C24                	mov rdi, qword [rsp] 	; pair
   926 000009ED 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   927 000009F1 E8D1FDFFFF              	call print_sexpr
   928 000009F6 5F                      	pop rdi 		; pair
   929 000009F7 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   930                                  .Lcdr:
   931 000009FB 8A07                    	mov al, byte [rdi]
   932 000009FD 3C01                    	cmp al, T_nil
   933 000009FF 7447                    	je .Lcdr_nil
   934 00000A01 3C21                    	cmp al, T_pair
   935 00000A03 7462                    	je .Lcdr_pair
   936 00000A05 57                      	push rdi
   937 00000A06 48BF-                   	mov rdi, fmt_dotted_pair
   937 00000A08 [D301000000000000] 
   938 00000A10 B800000000              	mov rax, 0
   939                                  	ENTER
   939 00000A15 C8000000            <1>  enter 0, 0
   939 00000A19 4883E4F0            <1>  and rsp, ~15
   940 00000A1D E8(00000000)            	call printf
   941                                  	LEAVE
   941 00000A22 C9                  <1>  leave
   942 00000A23 5F                      	pop rdi
   943 00000A24 E89EFDFFFF              	call print_sexpr
   944 00000A29 48BF-                   	mov rdi, fmt_rparen
   944 00000A2B [D701000000000000] 
   945 00000A33 B800000000              	mov rax, 0
   946                                  	ENTER
   946 00000A38 C8000000            <1>  enter 0, 0
   946 00000A3C 4883E4F0            <1>  and rsp, ~15
   947 00000A40 E8(00000000)            	call printf
   948                                  	LEAVE
   948 00000A45 C9                  <1>  leave
   949                                  	LEAVE
   949 00000A46 C9                  <1>  leave
   950 00000A47 C3                      	ret
   951                                  
   952                                  .Lcdr_nil:
   953 00000A48 48BF-                   	mov rdi, fmt_rparen
   953 00000A4A [D701000000000000] 
   954 00000A52 B800000000              	mov rax, 0
   955                                  	ENTER
   955 00000A57 C8000000            <1>  enter 0, 0
   955 00000A5B 4883E4F0            <1>  and rsp, ~15
   956 00000A5F E8(00000000)            	call printf
   957                                  	LEAVE
   957 00000A64 C9                  <1>  leave
   958                                  	LEAVE
   958 00000A65 C9                  <1>  leave
   959 00000A66 C3                      	ret
   960                                  
   961                                  .Lcdr_pair:
   962 00000A67 57                      	push rdi
   963 00000A68 48BF-                   	mov rdi, fmt_space
   963 00000A6A [D901000000000000] 
   964 00000A72 B800000000              	mov rax, 0
   965                                  	ENTER
   965 00000A77 C8000000            <1>  enter 0, 0
   965 00000A7B 4883E4F0            <1>  and rsp, ~15
   966 00000A7F E8(00000000)            	call printf
   967                                  	LEAVE
   967 00000A84 C9                  <1>  leave
   968 00000A85 488B3C24                	mov rdi, qword [rsp]
   969 00000A89 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   970 00000A8D E835FDFFFF              	call print_sexpr
   971 00000A92 5F                      	pop rdi
   972 00000A93 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   973 00000A97 E95FFFFFFF              	jmp .Lcdr
   974                                  
   975                                  .Lvector:
   976 00000A9C 488B4701                	mov rax, qword [rdi + 1] ; length
   977 00000AA0 4883F800                	cmp rax, 0
   978 00000AA4 0F8484000000            	je .Lvector_empty
   979 00000AAA 57                      	push rdi
   980 00000AAB 48BF-                   	mov rdi, fmt_vector
   980 00000AAD [DF01000000000000] 
   981 00000AB5 B800000000              	mov rax, 0
   982                                  	ENTER
   982 00000ABA C8000000            <1>  enter 0, 0
   982 00000ABE 4883E4F0            <1>  and rsp, ~15
   983 00000AC2 E8(00000000)            	call printf
   984                                  	LEAVE
   984 00000AC7 C9                  <1>  leave
   985 00000AC8 488B3C24                	mov rdi, qword [rsp]
   986 00000ACC FF7701                  	push qword [rdi + 1]
   987 00000ACF 6A01                    	push 1
   988 00000AD1 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   989 00000AD5 E8EDFCFFFF              	call print_sexpr
   990                                  .Lvector_loop:
   991                                  	; [rsp] index
   992                                  	; [rsp + 8*1] limit
   993                                  	; [rsp + 8*2] vector
   994 00000ADA 488B0424                	mov rax, qword [rsp]
   995 00000ADE 483B442408              	cmp rax, qword [rsp + 8*1]
   996 00000AE3 7436                    	je .Lvector_end
   997 00000AE5 48BF-                   	mov rdi, fmt_space
   997 00000AE7 [D901000000000000] 
   998 00000AEF B800000000              	mov rax, 0
   999                                  	ENTER
   999 00000AF4 C8000000            <1>  enter 0, 0
   999 00000AF8 4883E4F0            <1>  and rsp, ~15
  1000 00000AFC E8(00000000)            	call printf
  1001                                  	LEAVE
  1001 00000B01 C9                  <1>  leave
  1002 00000B02 488B0424                	mov rax, qword [rsp]
  1003 00000B06 488B5C2410              	mov rbx, qword [rsp + 8*2]
  1004 00000B0B 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  1005 00000B10 E8B2FCFFFF              	call print_sexpr
  1006 00000B15 48FF0424                	inc qword [rsp]
  1007 00000B19 EBBF                    	jmp .Lvector_loop
  1008                                  
  1009                                  .Lvector_end:
  1010 00000B1B 4883C418                	add rsp, 8*3
  1011 00000B1F 48BF-                   	mov rdi, fmt_rparen
  1011 00000B21 [D701000000000000] 
  1012 00000B29 E9F8010000              	jmp .Lemit	
  1013                                  
  1014                                  .Lvector_empty:
  1015 00000B2E 48BF-                   	mov rdi, fmt_empty_vector
  1015 00000B30 [DB01000000000000] 
  1016 00000B38 E9E9010000              	jmp .Lemit
  1017                                  
  1018                                  .Lreal:
  1019 00000B3D FF7701                  	push qword [rdi + 1]
  1020 00000B40 F20F100424              	movsd xmm0, qword [rsp]
  1021 00000B45 4883C408                	add rsp, 8*1
  1022 00000B49 48BF-                   	mov rdi, fmt_real
  1022 00000B4B [E201000000000000] 
  1023 00000B53 B801000000              	mov rax, 1
  1024                                  	ENTER
  1024 00000B58 C8000000            <1>  enter 0, 0
  1024 00000B5C 4883E4F0            <1>  and rsp, ~15
  1025 00000B60 E8(00000000)            	call printf
  1026                                  	LEAVE
  1026 00000B65 C9                  <1>  leave
  1027 00000B66 E9D0010000              	jmp .Lend
  1028                                  
  1029                                  .Lrational:
  1030 00000B6B 488B7701                	mov rsi, qword [rdi + 1]
  1031 00000B6F 488B5709                	mov rdx, qword [rdi + 1 + 8]
  1032 00000B73 4883FE00                	cmp rsi, 0
  1033 00000B77 7415                    	je .Lrat_zero
  1034 00000B79 4883FA01                	cmp rdx, 1
  1035 00000B7D 741E                    	je .Lrat_int
  1036 00000B7F 48BF-                   	mov rdi, fmt_fraction
  1036 00000B81 [E501000000000000] 
  1037 00000B89 E998010000              	jmp .Lemit
  1038                                  
  1039                                  .Lrat_zero:
  1040 00000B8E 48BF-                   	mov rdi, fmt_zero
  1040 00000B90 [ED01000000000000] 
  1041 00000B98 E989010000              	jmp .Lemit
  1042                                  
  1043                                  .Lrat_int:
  1044 00000B9D 48BF-                   	mov rdi, fmt_int
  1044 00000B9F [EF01000000000000] 
  1045 00000BA7 E97A010000              	jmp .Lemit
  1046                                  
  1047                                  .Lstring:
  1048 00000BAC 488D4709                	lea rax, [rdi + 1 + 8]
  1049 00000BB0 50                      	push rax
  1050 00000BB1 FF7701                  	push qword [rdi + 1]
  1051 00000BB4 48BF-                   	mov rdi, fmt_dquote
  1051 00000BB6 [3302000000000000] 
  1052 00000BBE B800000000              	mov rax, 0
  1053                                  	ENTER
  1053 00000BC3 C8000000            <1>  enter 0, 0
  1053 00000BC7 4883E4F0            <1>  and rsp, ~15
  1054 00000BCB E8(00000000)            	call printf
  1055                                  	LEAVE
  1055 00000BD0 C9                  <1>  leave
  1056                                  .Lstring_loop:
  1057                                  	; qword [rsp]: limit
  1058                                  	; qword [rsp + 8*1]: char *
  1059 00000BD1 48833C2400              	cmp qword [rsp], 0
  1060 00000BD6 0F84FD000000            	je .Lstring_end
  1061 00000BDC 488B442408              	mov rax, qword [rsp + 8*1]
  1062 00000BE1 8A00                    	mov al, byte [rax]
  1063 00000BE3 4825FF000000            	and rax, 255
  1064 00000BE9 3C07                    	cmp al, 7
  1065 00000BEB 7468                            je .Lstring_char_7
  1066 00000BED 3C08                            cmp al, 8
  1067 00000BEF 7470                            je .Lstring_char_8
  1068 00000BF1 3C09                            cmp al, 9
  1069 00000BF3 7478                            je .Lstring_char_9
  1070 00000BF5 3C0A                            cmp al, 10
  1071 00000BF7 0F847C000000                    je .Lstring_char_10
  1072 00000BFD 3C0B                            cmp al, 11
  1073 00000BFF 0F8480000000                    je .Lstring_char_11
  1074 00000C05 3C0C                            cmp al, 12
  1075 00000C07 0F8484000000                    je .Lstring_char_12
  1076 00000C0D 3C0D                            cmp al, 13
  1077 00000C0F 0F8488000000                    je .Lstring_char_13
  1078 00000C15 3C22                            cmp al, 34
  1079 00000C17 0F848C000000                    je .Lstring_char_34
  1081 00000C1D 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1082 00000C1F 3C20                            cmp al, ' '
  1083 00000C21 0F8CA0000000                    jl .Lstring_char_hex
  1084 00000C27 48BF-                           mov rdi, fmt_string_char
  1084 00000C29 [3502000000000000] 
  1085 00000C31 4889C6                          mov rsi, rax
  1086                                  .Lstring_char_emit:
  1087 00000C34 B800000000                      mov rax, 0
  1088                                          ENTER
  1088 00000C39 C8000000            <1>  enter 0, 0
  1088 00000C3D 4883E4F0            <1>  and rsp, ~15
  1089 00000C41 E8(00000000)                    call printf
  1090                                          LEAVE
  1090 00000C46 C9                  <1>  leave
  1091 00000C47 48FF0C24                        dec qword [rsp]
  1092 00000C4B 48FF442408                      inc qword [rsp + 8*1]
  1093 00000C50 E97CFFFFFF                      jmp .Lstring_loop
  1094                                  
  1095                                  .Lstring_char_7:
  1096 00000C55 48BF-                           mov rdi, fmt_string_char_7
  1096 00000C57 [3802000000000000] 
  1097 00000C5F EBD3                            jmp .Lstring_char_emit
  1098                                  
  1099                                  .Lstring_char_8:
  1100 00000C61 48BF-                           mov rdi, fmt_string_char_8
  1100 00000C63 [3B02000000000000] 
  1101 00000C6B EBC7                            jmp .Lstring_char_emit
  1102                                          
  1103                                  .Lstring_char_9:
  1104 00000C6D 48BF-                           mov rdi, fmt_string_char_9
  1104 00000C6F [3E02000000000000] 
  1105 00000C77 EBBB                            jmp .Lstring_char_emit
  1106                                  
  1107                                  .Lstring_char_10:
  1108 00000C79 48BF-                           mov rdi, fmt_string_char_10
  1108 00000C7B [4102000000000000] 
  1109 00000C83 EBAF                            jmp .Lstring_char_emit
  1110                                  
  1111                                  .Lstring_char_11:
  1112 00000C85 48BF-                           mov rdi, fmt_string_char_11
  1112 00000C87 [4402000000000000] 
  1113 00000C8F EBA3                            jmp .Lstring_char_emit
  1114                                  
  1115                                  .Lstring_char_12:
  1116 00000C91 48BF-                           mov rdi, fmt_string_char_12
  1116 00000C93 [4702000000000000] 
  1117 00000C9B EB97                            jmp .Lstring_char_emit
  1118                                  
  1119                                  .Lstring_char_13:
  1120 00000C9D 48BF-                           mov rdi, fmt_string_char_13
  1120 00000C9F [4A02000000000000] 
  1121 00000CA7 EB8B                            jmp .Lstring_char_emit
  1122                                  
  1123                                  .Lstring_char_34:
  1124 00000CA9 48BF-                           mov rdi, fmt_string_char_34
  1124 00000CAB [4D02000000000000] 
  1125 00000CB3 E97CFFFFFF                      jmp .Lstring_char_emit
  1126                                  
  1127                                  .Lstring_char_92:
  1128 00000CB8 48BF-                           mov rdi, fmt_string_char_92
  1128 00000CBA [5002000000000000] 
  1129 00000CC2 E96DFFFFFF                      jmp .Lstring_char_emit
  1130                                  
  1131                                  .Lstring_char_hex:
  1132 00000CC7 48BF-                           mov rdi, fmt_string_char_hex
  1132 00000CC9 [5302000000000000] 
  1133 00000CD1 4889C6                          mov rsi, rax
  1134 00000CD4 E95BFFFFFF                      jmp .Lstring_char_emit        
  1135                                  
  1136                                  .Lstring_end:
  1137 00000CD9 4883C410                	add rsp, 8 * 2
  1138 00000CDD 48BF-                   	mov rdi, fmt_dquote
  1138 00000CDF [3302000000000000] 
  1139 00000CE7 EB3D                    	jmp .Lemit
  1140                                  
  1141                                  .Lunknown_sexpr_type:
  1142 00000CE9 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1142 00000CEB [F301000000000000] 
  1143 00000CF3 4825FF000000            	and rax, 255
  1144 00000CF9 4889C2                  	mov rdx, rax
  1145 00000CFC 4889F9                  	mov rcx, rdi
  1146 00000CFF 488B3C25[00000000]      	mov rdi, qword [stderr]
  1147 00000D07 B800000000              	mov rax, 0
  1148                                  	ENTER
  1148 00000D0C C8000000            <1>  enter 0, 0
  1148 00000D10 4883E4F0            <1>  and rsp, ~15
  1149 00000D14 E8(00000000)            	call fprintf
  1150                                  	LEAVE
  1150 00000D19 C9                  <1>  leave
  1151 00000D1A 48C7C0FFFFFFFF          	mov rax, -1
  1152 00000D21 E8(00000000)            	call exit
  1153                                  
  1154                                  .Lemit:
  1155 00000D26 B800000000              	mov rax, 0
  1156                                  	ENTER
  1156 00000D2B C8000000            <1>  enter 0, 0
  1156 00000D2F 4883E4F0            <1>  and rsp, ~15
  1157 00000D33 E8(00000000)            	call printf
  1158                                  	LEAVE
  1158 00000D38 C9                  <1>  leave
  1159 00000D39 EB00                    	jmp .Lend
  1160                                  
  1161                                  .Lend:
  1162                                  	LEAVE
  1162 00000D3B C9                  <1>  leave
  1163 00000D3C C3                      	ret
  1164                                  
  1165                                  ;;; rdi: address of free variable
  1166                                  ;;; rsi: address of code-pointer
  1167                                  bind_primitive:
  1168                                          ENTER
  1168 00000D3D C8000000            <1>  enter 0, 0
  1168 00000D41 4883E4F0            <1>  and rsp, ~15
  1169 00000D45 57                              push rdi
  1170 00000D46 BF11000000                      mov rdi, (1 + 8 + 8)
  1171 00000D4B E85CFAFFFF                      call malloc
  1172 00000D50 5F                              pop rdi
  1173 00000D51 C60005                          mov byte [rax], T_closure
  1174 00000D54 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1175 00000D5C 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1176 00000D60 488907                          mov qword [rdi], rax
  1177                                          LEAVE
  1177 00000D63 C9                  <1>  leave
  1178 00000D64 C3                              ret
  1179                                  
  1180                                  
  1181                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1182                                  ; (* cuurent version!*)
  1183                                  L_code_ptr_bin_apply:
  1184 00000D65 488B0C24                        mov rcx, qword [rsp]
  1185 00000D69 4C8B442410                      mov r8, [rsp +  2 * 8]                          ; r8 <- num_of_args
  1186 00000D6E 4983F802                        cmp byte r8, 2       
  1186          ******************       warning: register size specification ignored [-w+other]
  1187 00000D72 0F8556110000                    jne L_error_arg_count_2                         ; check right number of parameters.           
  1188                                  
  1189 00000D78 4C8B442420                      mov r8, qword [rsp + 4 * 8]                     ; r8 <- list_of_args
  1190                                          assert_pair(r8)
  1190 00000D7D 41803821            <1>  cmp byte [%1], %2
  1190 00000D81 0F85E6110000        <1>  jne L_error_incorrect_type
  1191                                  ; bul_bul
  1192 00000D87 41803801                        cmp byte [r8], T_nil 
  1193 00000D8B 0F84D3100000                    je L_error_arg_count_0                       ; list.length == 0 ?
  1194                                  
  1195 00000D91 41BB00000000                    mov r11, 0                                      ; list_asrgs_counter init
  1196                                  
  1197 00000D97 4C8B642418                      mov r12, qword [rsp + 3 * 8]                    ; r12 <- proc
  1198 00000D9C 803805                          cmp byte [rax], T_closure
  1199 00000D9F 0F855EF9FFFF                    jne L_error_non_closure
  1200                                  
  1201 00000DA5 4C8B3424                        mov r14, qword [rsp]                            ; r14 <- ret address
  1202 00000DA9 4883C428                        add rsp, 5 * 8                                  ; set rsp to override the last args
  1203                                                                                          ; similliar to 4 pops.
  1204                                  
  1205                                  .L_list_of_args_not_empty_yet:
  1206                                  
  1207                                          assert_pair(r8)
  1207 00000DAD 41803821            <1>  cmp byte [%1], %2
  1207 00000DB1 0F85B6110000        <1>  jne L_error_incorrect_type
  1208 00000DB7 4D8B4801                        mov r9, qword SOB_PAIR_CAR(r8)                  ; r9 <- car(list)
  1209 00000DBB 4151                            push r9                                         ; * push arg *
  1210                                          
  1211 00000DBD 4983C301                        add r11, 1                                      ; args_counter ++
  1212                                  
  1213 00000DC1 4D8B5009                        mov r10, qword SOB_PAIR_CDR(r8)                 
  1214 00000DC5 4D89D0                          mov r8, qword r10                               ; r8 <- cdr(list)
  1215                                   
  1216 00000DC8 41803801                        cmp byte [r8], T_nil                            ; rest of the list is empty?
  1217 00000DCC 75DF                            jne .L_list_of_args_not_empty_yet               
  1218                                  
  1219                                  .L_list_of_args_totally_pushed:
  1220                                  
  1221 00000DCE 4153                            push r11                                        ; * push args_counter *
  1222                                  
  1223 00000DD0 4D8B6C2401                      mov r13, SOB_CLOSURE_ENV(r12)                   ; r13 <- proc.env
  1224 00000DD5 4155                            push r13                                        ; * push proc env *
  1225                                  
  1226 00000DD7 4156                            push r14                                        ; * push return address *
  1227                                  
  1228                                  
  1229                                  .L_flip_args_order:
  1230                                  
  1231                                  .L_all_args_are_flipped:
  1232                                  
  1233 00000DD9 4D8B6C2409                      mov r13, SOB_CLOSURE_CODE(r12)
  1234 00000DDE 41FFE5                          jmp r13
  1235                                  
  1236                                  	
  1237                                  L_code_ptr_is_null:
  1238                                          ENTER
  1238 00000DE1 C8000000            <1>  enter 0, 0
  1238 00000DE5 4883E4F0            <1>  and rsp, ~15
  1239 00000DE9 48837D1801                      cmp COUNT, 1
  1240 00000DEE 0F85A5100000                    jne L_error_arg_count_1
  1241 00000DF4 488B4520                        mov rax, PARAM(0)
  1242 00000DF8 803801                          cmp byte [rax], T_nil
  1243 00000DFB 750C                            jne .L_false
  1244 00000DFD 48B8-                           mov rax, sob_boolean_true
  1244 00000DFF [0300000000000000] 
  1245 00000E07 EB0A                            jmp .L_end
  1246                                  .L_false:
  1247 00000E09 48B8-                           mov rax, sob_boolean_false
  1247 00000E0B [0200000000000000] 
  1248                                  .L_end:
  1249                                          LEAVE
  1249 00000E13 C9                  <1>  leave
  1250 00000E14 C21800                          ret AND_KILL_FRAME(1)
  1251                                  
  1252                                  L_code_ptr_is_pair:
  1253                                          ENTER
  1253 00000E17 C8000000            <1>  enter 0, 0
  1253 00000E1B 4883E4F0            <1>  and rsp, ~15
  1254 00000E1F 48837D1801                      cmp COUNT, 1
  1255 00000E24 0F856F100000                    jne L_error_arg_count_1
  1256 00000E2A 488B4520                        mov rax, PARAM(0)
  1257 00000E2E 803821                          cmp byte [rax], T_pair
  1258 00000E31 750C                            jne .L_false
  1259 00000E33 48B8-                           mov rax, sob_boolean_true
  1259 00000E35 [0300000000000000] 
  1260 00000E3D EB0A                            jmp .L_end
  1261                                  .L_false:
  1262 00000E3F 48B8-                           mov rax, sob_boolean_false
  1262 00000E41 [0200000000000000] 
  1263                                  .L_end:
  1264                                          LEAVE
  1264 00000E49 C9                  <1>  leave
  1265 00000E4A C21800                          ret AND_KILL_FRAME(1)
  1266                                          
  1267                                  L_code_ptr_is_void:
  1268                                          ENTER
  1268 00000E4D C8000000            <1>  enter 0, 0
  1268 00000E51 4883E4F0            <1>  and rsp, ~15
  1269 00000E55 48837D1801                      cmp COUNT, 1
  1270 00000E5A 0F8539100000                    jne L_error_arg_count_1
  1271 00000E60 488B4520                        mov rax, PARAM(0)
  1272 00000E64 803800                          cmp byte [rax], T_void
  1273 00000E67 750C                            jne .L_false
  1274 00000E69 48B8-                           mov rax, sob_boolean_true
  1274 00000E6B [0300000000000000] 
  1275 00000E73 EB0A                            jmp .L_end
  1276                                  .L_false:
  1277 00000E75 48B8-                           mov rax, sob_boolean_false
  1277 00000E77 [0200000000000000] 
  1278                                  .L_end:
  1279                                          LEAVE
  1279 00000E7F C9                  <1>  leave
  1280 00000E80 C21800                          ret AND_KILL_FRAME(1)
  1281                                  
  1282                                  L_code_ptr_is_char:
  1283                                          ENTER
  1283 00000E83 C8000000            <1>  enter 0, 0
  1283 00000E87 4883E4F0            <1>  and rsp, ~15
  1284 00000E8B 48837D1801                      cmp COUNT, 1
  1285 00000E90 0F8503100000                    jne L_error_arg_count_1
  1286 00000E96 488B4520                        mov rax, PARAM(0)
  1287 00000E9A 803802                          cmp byte [rax], T_char
  1288 00000E9D 750C                            jne .L_false
  1289 00000E9F 48B8-                           mov rax, sob_boolean_true
  1289 00000EA1 [0300000000000000] 
  1290 00000EA9 EB0A                            jmp .L_end
  1291                                  .L_false:
  1292 00000EAB 48B8-                           mov rax, sob_boolean_false
  1292 00000EAD [0200000000000000] 
  1293                                  .L_end:
  1294                                          LEAVE
  1294 00000EB5 C9                  <1>  leave
  1295 00000EB6 C21800                          ret AND_KILL_FRAME(1)
  1296                                  
  1297                                  L_code_ptr_is_string:
  1298                                          ENTER
  1298 00000EB9 C8000000            <1>  enter 0, 0
  1298 00000EBD 4883E4F0            <1>  and rsp, ~15
  1299 00000EC1 48837D1801                      cmp COUNT, 1
  1300 00000EC6 0F85CD0F0000                    jne L_error_arg_count_1
  1301 00000ECC 488B4520                        mov rax, PARAM(0)
  1302 00000ED0 803803                          cmp byte [rax], T_string
  1303 00000ED3 750C                            jne .L_false
  1304 00000ED5 48B8-                           mov rax, sob_boolean_true
  1304 00000ED7 [0300000000000000] 
  1305 00000EDF EB0A                            jmp .L_end
  1306                                  .L_false:
  1307 00000EE1 48B8-                           mov rax, sob_boolean_false
  1307 00000EE3 [0200000000000000] 
  1308                                  .L_end:
  1309                                          LEAVE
  1309 00000EEB C9                  <1>  leave
  1310 00000EEC C21800                          ret AND_KILL_FRAME(1)
  1311                                  
  1312                                  L_code_ptr_is_symbol:
  1313                                          ENTER
  1313 00000EEF C8000000            <1>  enter 0, 0
  1313 00000EF3 4883E4F0            <1>  and rsp, ~15
  1314 00000EF7 48837D1801                      cmp COUNT, 1
  1315 00000EFC 0F85970F0000                    jne L_error_arg_count_1
  1316 00000F02 488B4520                        mov rax, PARAM(0)
  1317 00000F06 803804                          cmp byte [rax], T_symbol
  1318 00000F09 750C                            jne .L_false
  1319 00000F0B 48B8-                           mov rax, sob_boolean_true
  1319 00000F0D [0300000000000000] 
  1320 00000F15 EB0A                            jmp .L_end
  1321                                  .L_false:
  1322 00000F17 48B8-                           mov rax, sob_boolean_false
  1322 00000F19 [0200000000000000] 
  1323                                  .L_end:
  1324                                          LEAVE
  1324 00000F21 C9                  <1>  leave
  1325 00000F22 C21800                          ret AND_KILL_FRAME(1)
  1326                                  
  1327                                  L_code_ptr_is_vector:
  1328                                          ENTER
  1328 00000F25 C8000000            <1>  enter 0, 0
  1328 00000F29 4883E4F0            <1>  and rsp, ~15
  1329 00000F2D 48837D1801                      cmp COUNT, 1
  1330 00000F32 0F85610F0000                    jne L_error_arg_count_1
  1331 00000F38 488B4520                        mov rax, PARAM(0)
  1332 00000F3C 803822                          cmp byte [rax], T_vector
  1333 00000F3F 750C                            jne .L_false
  1334 00000F41 48B8-                           mov rax, sob_boolean_true
  1334 00000F43 [0300000000000000] 
  1335 00000F4B EB0A                            jmp .L_end
  1336                                  .L_false:
  1337 00000F4D 48B8-                           mov rax, sob_boolean_false
  1337 00000F4F [0200000000000000] 
  1338                                  .L_end:
  1339                                          LEAVE
  1339 00000F57 C9                  <1>  leave
  1340 00000F58 C21800                          ret AND_KILL_FRAME(1)
  1341                                  
  1342                                  L_code_ptr_is_closure:
  1343                                          ENTER
  1343 00000F5B C8000000            <1>  enter 0, 0
  1343 00000F5F 4883E4F0            <1>  and rsp, ~15
  1344 00000F63 48837D1801                      cmp COUNT, 1
  1345 00000F68 0F852B0F0000                    jne L_error_arg_count_1
  1346 00000F6E 488B4520                        mov rax, PARAM(0)
  1347 00000F72 803805                          cmp byte [rax], T_closure
  1348 00000F75 750C                            jne .L_false
  1349 00000F77 48B8-                           mov rax, sob_boolean_true
  1349 00000F79 [0300000000000000] 
  1350 00000F81 EB0A                            jmp .L_end
  1351                                  .L_false:
  1352 00000F83 48B8-                           mov rax, sob_boolean_false
  1352 00000F85 [0200000000000000] 
  1353                                  .L_end:
  1354                                          LEAVE
  1354 00000F8D C9                  <1>  leave
  1355 00000F8E C21800                          ret AND_KILL_FRAME(1)
  1356                                  
  1357                                  L_code_ptr_is_real:
  1358                                          ENTER
  1358 00000F91 C8000000            <1>  enter 0, 0
  1358 00000F95 4883E4F0            <1>  and rsp, ~15
  1359 00000F99 48837D1801                      cmp COUNT, 1
  1360 00000F9E 0F85F50E0000                    jne L_error_arg_count_1
  1361 00000FA4 488B4520                        mov rax, PARAM(0)
  1362 00000FA8 803812                          cmp byte [rax], T_real
  1363 00000FAB 750C                            jne .L_false
  1364 00000FAD 48B8-                           mov rax, sob_boolean_true
  1364 00000FAF [0300000000000000] 
  1365 00000FB7 EB0A                            jmp .L_end
  1366                                  .L_false:
  1367 00000FB9 48B8-                           mov rax, sob_boolean_false
  1367 00000FBB [0200000000000000] 
  1368                                  .L_end:
  1369                                          LEAVE
  1369 00000FC3 C9                  <1>  leave
  1370 00000FC4 C21800                          ret AND_KILL_FRAME(1)
  1371                                  
  1372                                  L_code_ptr_is_rational:
  1373                                          ENTER
  1373 00000FC7 C8000000            <1>  enter 0, 0
  1373 00000FCB 4883E4F0            <1>  and rsp, ~15
  1374 00000FCF 48837D1801                      cmp COUNT, 1
  1375 00000FD4 0F85BF0E0000                    jne L_error_arg_count_1
  1376 00000FDA 488B4520                        mov rax, PARAM(0)
  1377 00000FDE 803811                          cmp byte [rax], T_rational
  1378 00000FE1 750C                            jne .L_false
  1379 00000FE3 48B8-                           mov rax, sob_boolean_true
  1379 00000FE5 [0300000000000000] 
  1380 00000FED EB0A                            jmp .L_end
  1381                                  .L_false:
  1382 00000FEF 48B8-                           mov rax, sob_boolean_false
  1382 00000FF1 [0200000000000000] 
  1383                                  .L_end:
  1384                                          LEAVE
  1384 00000FF9 C9                  <1>  leave
  1385 00000FFA C21800                          ret AND_KILL_FRAME(1)
  1386                                  
  1387                                  L_code_ptr_is_boolean:
  1388                                          ENTER
  1388 00000FFD C8000000            <1>  enter 0, 0
  1388 00001001 4883E4F0            <1>  and rsp, ~15
  1389 00001005 48837D1801                      cmp COUNT, 1
  1390 0000100A 0F85890E0000                    jne L_error_arg_count_1
  1391 00001010 488B4520                        mov rax, PARAM(0)
  1392 00001014 8A18                            mov bl, byte [rax]
  1393 00001016 80E308                          and bl, T_boolean
  1394 00001019 740C                            je .L_false
  1395 0000101B 48B8-                           mov rax, sob_boolean_true
  1395 0000101D [0300000000000000] 
  1396 00001025 EB0A                            jmp .L_end
  1397                                  .L_false:
  1398 00001027 48B8-                           mov rax, sob_boolean_false
  1398 00001029 [0200000000000000] 
  1399                                  .L_end:
  1400                                          LEAVE
  1400 00001031 C9                  <1>  leave
  1401 00001032 C21800                          ret AND_KILL_FRAME(1)
  1402                                          
  1403                                  L_code_ptr_is_number:
  1404                                          ENTER
  1404 00001035 C8000000            <1>  enter 0, 0
  1404 00001039 4883E4F0            <1>  and rsp, ~15
  1405 0000103D 48837D1801                      cmp COUNT, 1
  1406 00001042 0F85510E0000                    jne L_error_arg_count_1
  1407 00001048 488B4520                        mov rax, PARAM(0)
  1408 0000104C 8A18                            mov bl, byte [rax]
  1409 0000104E 80E310                          and bl, T_number
  1410 00001051 740C                            je .L_false
  1411 00001053 48B8-                           mov rax, sob_boolean_true
  1411 00001055 [0300000000000000] 
  1412 0000105D EB0A                            jmp .L_end
  1413                                  .L_false:
  1414 0000105F 48B8-                           mov rax, sob_boolean_false
  1414 00001061 [0200000000000000] 
  1415                                  .L_end:
  1416                                          LEAVE
  1416 00001069 C9                  <1>  leave
  1417 0000106A C21800                          ret AND_KILL_FRAME(1)
  1418                                          
  1419                                  L_code_ptr_is_collection:
  1420                                          ENTER
  1420 0000106D C8000000            <1>  enter 0, 0
  1420 00001071 4883E4F0            <1>  and rsp, ~15
  1421 00001075 48837D1801                      cmp COUNT, 1
  1422 0000107A 0F85190E0000                    jne L_error_arg_count_1
  1423 00001080 488B4520                        mov rax, PARAM(0)
  1424 00001084 8A18                            mov bl, byte [rax]
  1425 00001086 80E320                          and bl, T_collection
  1426 00001089 740C                            je .L_false
  1427 0000108B 48B8-                           mov rax, sob_boolean_true
  1427 0000108D [0300000000000000] 
  1428 00001095 EB0A                            jmp .L_end
  1429                                  .L_false:
  1430 00001097 48B8-                           mov rax, sob_boolean_false
  1430 00001099 [0200000000000000] 
  1431                                  .L_end:
  1432                                          LEAVE
  1432 000010A1 C9                  <1>  leave
  1433 000010A2 C21800                          ret AND_KILL_FRAME(1)
  1434                                  
  1435                                  L_code_ptr_cons:
  1436                                          ENTER
  1436 000010A5 C8000000            <1>  enter 0, 0
  1436 000010A9 4883E4F0            <1>  and rsp, ~15
  1437 000010AD 48837D1802                      cmp COUNT, 2
  1438 000010B2 0F85160E0000                    jne L_error_arg_count_2
  1439 000010B8 BF11000000                      mov rdi, (1 + 8 + 8)
  1440 000010BD E8EAF6FFFF                      call malloc
  1441 000010C2 C60021                          mov byte [rax], T_pair
  1442 000010C5 488B5D20                        mov rbx, PARAM(0)
  1443 000010C9 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1444 000010CD 488B5D28                        mov rbx, PARAM(1)
  1445 000010D1 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1446                                          LEAVE
  1446 000010D5 C9                  <1>  leave
  1447 000010D6 C22000                          ret AND_KILL_FRAME(2)
  1448                                  
  1449                                  L_code_ptr_display_sexpr:
  1450                                          ENTER
  1450 000010D9 C8000000            <1>  enter 0, 0
  1450 000010DD 4883E4F0            <1>  and rsp, ~15
  1451 000010E1 48837D1801                      cmp COUNT, 1
  1452 000010E6 0F85AD0D0000                    jne L_error_arg_count_1
  1453 000010EC 488B7D20                        mov rdi, PARAM(0)
  1454 000010F0 E8D2F6FFFF                      call print_sexpr
  1455 000010F5 48B8-                           mov rax, sob_void
  1455 000010F7 [0000000000000000] 
  1456                                          LEAVE
  1456 000010FF C9                  <1>  leave
  1457 00001100 C21800                          ret AND_KILL_FRAME(1)
  1458                                  
  1459                                  L_code_ptr_write_char:
  1460                                          ENTER
  1460 00001103 C8000000            <1>  enter 0, 0
  1460 00001107 4883E4F0            <1>  and rsp, ~15
  1461 0000110B 48837D1801                      cmp COUNT, 1
  1462 00001110 0F85830D0000                    jne L_error_arg_count_1
  1463 00001116 488B4520                        mov rax, PARAM(0)
  1464                                          assert_char(rax)
  1464 0000111A 803802              <1>  cmp byte [%1], %2
  1464 0000111D 0F854A0E0000        <1>  jne L_error_incorrect_type
  1465 00001123 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1466 00001126 4825FF000000                    and rax, 255
  1467 0000112C 48BF-                           mov rdi, fmt_char
  1467 0000112E [5902000000000000] 
  1468 00001136 4889C6                          mov rsi, rax
  1469 00001139 B800000000                      mov rax, 0
  1470                                  	ENTER
  1470 0000113E C8000000            <1>  enter 0, 0
  1470 00001142 4883E4F0            <1>  and rsp, ~15
  1471 00001146 E8(00000000)                    call printf
  1472                                  	LEAVE
  1472 0000114B C9                  <1>  leave
  1473 0000114C 48B8-                           mov rax, sob_void
  1473 0000114E [0000000000000000] 
  1474                                          LEAVE
  1474 00001156 C9                  <1>  leave
  1475 00001157 C21800                          ret AND_KILL_FRAME(1)
  1476                                  
  1477                                  L_code_ptr_car:
  1478                                          ENTER
  1478 0000115A C8000000            <1>  enter 0, 0
  1478 0000115E 4883E4F0            <1>  and rsp, ~15
  1479 00001162 48837D1801                      cmp COUNT, 1
  1480 00001167 0F852C0D0000                    jne L_error_arg_count_1
  1481 0000116D 488B4520                        mov rax, PARAM(0)
  1482                                          assert_pair(rax)
  1482 00001171 803821              <1>  cmp byte [%1], %2
  1482 00001174 0F85F30D0000        <1>  jne L_error_incorrect_type
  1483 0000117A 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1484                                          LEAVE
  1484 0000117E C9                  <1>  leave
  1485 0000117F C21800                          ret AND_KILL_FRAME(1)
  1486                                          
  1487                                  L_code_ptr_cdr:
  1488                                          ENTER
  1488 00001182 C8000000            <1>  enter 0, 0
  1488 00001186 4883E4F0            <1>  and rsp, ~15
  1489 0000118A 48837D1801                      cmp COUNT, 1
  1490 0000118F 0F85040D0000                    jne L_error_arg_count_1
  1491 00001195 488B4520                        mov rax, PARAM(0)
  1492                                          assert_pair(rax)
  1492 00001199 803821              <1>  cmp byte [%1], %2
  1492 0000119C 0F85CB0D0000        <1>  jne L_error_incorrect_type
  1493 000011A2 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1494                                          LEAVE
  1494 000011A6 C9                  <1>  leave
  1495 000011A7 C21800                          ret AND_KILL_FRAME(1)
  1496                                          
  1497                                  L_code_ptr_string_length:
  1498                                          ENTER
  1498 000011AA C8000000            <1>  enter 0, 0
  1498 000011AE 4883E4F0            <1>  and rsp, ~15
  1499 000011B2 48837D1801                      cmp COUNT, 1
  1500 000011B7 0F85DC0C0000                    jne L_error_arg_count_1
  1501 000011BD 488B4520                        mov rax, PARAM(0)
  1502                                          assert_string(rax)
  1502 000011C1 803803              <1>  cmp byte [%1], %2
  1502 000011C4 0F85A30D0000        <1>  jne L_error_incorrect_type
  1503 000011CA 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1504 000011CE E83A0C0000                      call make_integer
  1505                                          LEAVE
  1505 000011D3 C9                  <1>  leave
  1506 000011D4 C21800                          ret AND_KILL_FRAME(1)
  1507                                  
  1508                                  L_code_ptr_vector_length:
  1509                                          ENTER
  1509 000011D7 C8000000            <1>  enter 0, 0
  1509 000011DB 4883E4F0            <1>  and rsp, ~15
  1510 000011DF 48837D1801                      cmp COUNT, 1
  1511 000011E4 0F85AF0C0000                    jne L_error_arg_count_1
  1512 000011EA 488B4520                        mov rax, PARAM(0)
  1513                                          assert_vector(rax)
  1513 000011EE 803822              <1>  cmp byte [%1], %2
  1513 000011F1 0F85760D0000        <1>  jne L_error_incorrect_type
  1514 000011F7 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1515 000011FB E80D0C0000                      call make_integer
  1516                                          LEAVE
  1516 00001200 C9                  <1>  leave
  1517 00001201 C21800                          ret AND_KILL_FRAME(1)
  1518                                  
  1519                                  L_code_ptr_real_to_integer:
  1520                                          ENTER
  1520 00001204 C8000000            <1>  enter 0, 0
  1520 00001208 4883E4F0            <1>  and rsp, ~15
  1521 0000120C 48837D1801                      cmp COUNT, 1
  1522 00001211 0F85820C0000                    jne L_error_arg_count_1
  1523 00001217 488B5D20                        mov rbx, PARAM(0)
  1524                                          assert_real(rbx)
  1524 0000121B 803B12              <1>  cmp byte [%1], %2
  1524 0000121E 0F85490D0000        <1>  jne L_error_incorrect_type
  1525 00001224 F20F104301                      movsd xmm0, qword [rbx + 1]
  1526 00001229 F2480F2CF8                      cvttsd2si rdi, xmm0
  1527 0000122E E8DA0B0000                      call make_integer
  1528                                          LEAVE
  1528 00001233 C9                  <1>  leave
  1529 00001234 C21800                          ret AND_KILL_FRAME(1)
  1530                                  
  1531                                  L_code_ptr_exit:
  1532                                          ENTER
  1532 00001237 C8000000            <1>  enter 0, 0
  1532 0000123B 4883E4F0            <1>  and rsp, ~15
  1533 0000123F 48837D1800                      cmp COUNT, 0
  1534 00001244 0F851A0C0000                    jne L_error_arg_count_0
  1535 0000124A B800000000                      mov rax, 0
  1536 0000124F E8(00000000)                    call exit
  1537                                  
  1538                                  L_code_ptr_integer_to_real:
  1539                                          ENTER
  1539 00001254 C8000000            <1>  enter 0, 0
  1539 00001258 4883E4F0            <1>  and rsp, ~15
  1540 0000125C 48837D1801                      cmp COUNT, 1
  1541 00001261 0F85320C0000                    jne L_error_arg_count_1
  1542 00001267 488B4520                        mov rax, PARAM(0)
  1543                                          assert_integer(rax)
  1543                              <1>  assert_rational(%1)
  1543 0000126B 803811              <2>  cmp byte [%1], %2
  1543 0000126E 0F85F90C0000        <2>  jne L_error_incorrect_type
  1543 00001274 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
  1543 00001279 0F85EE0C0000        <1>  jne L_error_incorrect_type
  1544 0000127F FF7001                          push qword [rax + 1]
  1545 00001282 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1546 00001288 E8640B0000                      call make_real
  1547                                          LEAVE
  1547 0000128D C9                  <1>  leave
  1548 0000128E C21800                          ret AND_KILL_FRAME(1)
  1549                                  
  1550                                  L_code_ptr_rational_to_real:
  1551                                          ENTER
  1551 00001291 C8000000            <1>  enter 0, 0
  1551 00001295 4883E4F0            <1>  and rsp, ~15
  1552 00001299 48837D1801                      cmp COUNT, 1
  1553 0000129E 0F85F50B0000                    jne L_error_arg_count_1
  1554 000012A4 488B4520                        mov rax, PARAM(0)
  1555                                          assert_rational(rax)
  1555 000012A8 803811              <1>  cmp byte [%1], %2
  1555 000012AB 0F85BC0C0000        <1>  jne L_error_incorrect_type
  1556 000012B1 FF7001                          push qword [rax + 1]
  1557 000012B4 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1558 000012BA FF7009                          push qword [rax + 1 + 8]
  1559 000012BD F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1560 000012C3 F20F5EC1                        divsd xmm0, xmm1
  1561 000012C7 E8250B0000                      call make_real
  1562                                          LEAVE
  1562 000012CC C9                  <1>  leave
  1563 000012CD C21800                          ret AND_KILL_FRAME(1)
  1564                                  
  1565                                  L_code_ptr_char_to_integer:
  1566                                          ENTER
  1566 000012D0 C8000000            <1>  enter 0, 0
  1566 000012D4 4883E4F0            <1>  and rsp, ~15
  1567 000012D8 48837D1801                      cmp COUNT, 1
  1568 000012DD 0F85B60B0000                    jne L_error_arg_count_1
  1569 000012E3 488B4520                        mov rax, PARAM(0)
  1570                                          assert_char(rax)
  1570 000012E7 803802              <1>  cmp byte [%1], %2
  1570 000012EA 0F857D0C0000        <1>  jne L_error_incorrect_type
  1571 000012F0 8A4001                          mov al, byte [rax + 1]
  1572 000012F3 4825FF000000                    and rax, 255
  1573 000012F9 4889C7                          mov rdi, rax
  1574 000012FC E80C0B0000                      call make_integer
  1575                                          LEAVE
  1575 00001301 C9                  <1>  leave
  1576 00001302 C21800                          ret AND_KILL_FRAME(1)
  1577                                  
  1578                                  L_code_ptr_integer_to_char:
  1579                                          ENTER
  1579 00001305 C8000000            <1>  enter 0, 0
  1579 00001309 4883E4F0            <1>  and rsp, ~15
  1580 0000130D 48837D1801                      cmp COUNT, 1
  1581 00001312 0F85810B0000                    jne L_error_arg_count_1
  1582 00001318 488B4520                        mov rax, PARAM(0)
  1583                                          assert_integer(rax)
  1583                              <1>  assert_rational(%1)
  1583 0000131C 803811              <2>  cmp byte [%1], %2
  1583 0000131F 0F85480C0000        <2>  jne L_error_incorrect_type
  1583 00001325 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
  1583 0000132A 0F853D0C0000        <1>  jne L_error_incorrect_type
  1584 00001330 488B5801                        mov rbx, qword [rax + 1]
  1585 00001334 4883FB00                        cmp rbx, 0
  1586 00001338 0F8EF50A0000                    jle L_error_integer_range
  1587 0000133E 4881FB00010000                  cmp rbx, 256
  1588 00001345 0F8DE80A0000                    jge L_error_integer_range
  1589 0000134B BF02000000                      mov rdi, (1 + 1)
  1590 00001350 E857F4FFFF                      call malloc
  1591 00001355 C60002                          mov byte [rax], T_char
  1592 00001358 885801                          mov byte [rax + 1], bl
  1593                                          LEAVE
  1593 0000135B C9                  <1>  leave
  1594 0000135C C21800                          ret AND_KILL_FRAME(1)
  1595                                  
  1596                                  L_code_ptr_trng:
  1597                                          ENTER
  1597 0000135F C8000000            <1>  enter 0, 0
  1597 00001363 4883E4F0            <1>  and rsp, ~15
  1598 00001367 48837D1800                      cmp COUNT, 0
  1599 0000136C 0F85F20A0000                    jne L_error_arg_count_0
  1600 00001372 480FC7F7                        rdrand rdi
  1601 00001376 48D1EF                          shr rdi, 1
  1602 00001379 E88F0A0000                      call make_integer
  1603                                          LEAVE
  1603 0000137E C9                  <1>  leave
  1604 0000137F C21000                          ret AND_KILL_FRAME(0)
  1605                                  
  1606                                  L_code_ptr_is_zero:
  1607                                          ENTER
  1607 00001382 C8000000            <1>  enter 0, 0
  1607 00001386 4883E4F0            <1>  and rsp, ~15
  1608 0000138A 48837D1801                      cmp COUNT, 1
  1609 0000138F 0F85040B0000                    jne L_error_arg_count_1
  1610 00001395 488B4520                        mov rax, PARAM(0)
  1611 00001399 803811                          cmp byte [rax], T_rational
  1612 0000139C 740A                            je .L_rational
  1613 0000139E 803812                          cmp byte [rax], T_real
  1614 000013A1 740E                            je .L_real
  1615 000013A3 E9C50B0000                      jmp L_error_incorrect_type
  1616                                  .L_rational:
  1617 000013A8 4883780100                      cmp qword [rax + 1], 0
  1618 000013AD 7420                            je .L_zero
  1619 000013AF EB12                            jmp .L_not_zero
  1620                                  .L_real:
  1621 000013B1 660FEFC0                        pxor xmm0, xmm0
  1622 000013B5 FF7001                          push qword [rax + 1]
  1623 000013B8 F20F100C24                      movsd xmm1, qword [rsp]
  1624 000013BD 660F2EC1                        ucomisd xmm0, xmm1
  1625 000013C1 740C                            je .L_zero
  1626                                  .L_not_zero:
  1627 000013C3 48B8-                           mov rax, sob_boolean_false
  1627 000013C5 [0200000000000000] 
  1628 000013CD EB0A                            jmp .L_end
  1629                                  .L_zero:
  1630 000013CF 48B8-                           mov rax, sob_boolean_true
  1630 000013D1 [0300000000000000] 
  1631                                  .L_end:
  1632                                          LEAVE
  1632 000013D9 C9                  <1>  leave
  1633 000013DA C21800                          ret AND_KILL_FRAME(1)
  1634                                  
  1635                                  L_code_ptr_is_integer:
  1636                                          ENTER
  1636 000013DD C8000000            <1>  enter 0, 0
  1636 000013E1 4883E4F0            <1>  and rsp, ~15
  1637 000013E5 48837D1801                      cmp COUNT, 1
  1638 000013EA 0F85A90A0000                    jne L_error_arg_count_1
  1639 000013F0 488B4520                        mov rax, PARAM(0)
  1640 000013F4 803811                          cmp byte [rax], T_rational
  1641 000013F7 7513                            jne .L_false
  1642 000013F9 4883780901                      cmp qword [rax + 1 + 8], 1
  1643 000013FE 750C                            jne .L_false
  1644 00001400 48B8-                           mov rax, sob_boolean_true
  1644 00001402 [0300000000000000] 
  1645 0000140A EB0A                            jmp .L_exit
  1646                                  .L_false:
  1647 0000140C 48B8-                           mov rax, sob_boolean_false
  1647 0000140E [0200000000000000] 
  1648                                  .L_exit:
  1649                                          LEAVE
  1649 00001416 C9                  <1>  leave
  1650 00001417 C21800                          ret AND_KILL_FRAME(1)
  1651                                  
  1652                                  L_code_ptr_raw_bin_add_rr:
  1653                                          ENTER
  1653 0000141A C8000000            <1>  enter 0, 0
  1653 0000141E 4883E4F0            <1>  and rsp, ~15
  1654 00001422 48837D1802                      cmp COUNT, 2
  1655 00001427 0F85A10A0000                    jne L_error_arg_count_2
  1656 0000142D 488B5D20                        mov rbx, PARAM(0)
  1657                                          assert_real(rbx)
  1657 00001431 803B12              <1>  cmp byte [%1], %2
  1657 00001434 0F85330B0000        <1>  jne L_error_incorrect_type
  1658 0000143A 488B4D28                        mov rcx, PARAM(1)
  1659                                          assert_real(rcx)
  1659 0000143E 803912              <1>  cmp byte [%1], %2
  1659 00001441 0F85260B0000        <1>  jne L_error_incorrect_type
  1660 00001447 F20F104301                      movsd xmm0, qword [rbx + 1]
  1661 0000144C F20F104901                      movsd xmm1, qword [rcx + 1]
  1662 00001451 F20F58C1                        addsd xmm0, xmm1
  1663 00001455 E897090000                      call make_real
  1664                                          LEAVE
  1664 0000145A C9                  <1>  leave
  1665 0000145B C22000                          ret AND_KILL_FRAME(2)
  1666                                  
  1667                                  L_code_ptr_raw_bin_sub_rr:
  1668                                          ENTER
  1668 0000145E C8000000            <1>  enter 0, 0
  1668 00001462 4883E4F0            <1>  and rsp, ~15
  1669 00001466 48837D1802                      cmp COUNT, 2
  1670 0000146B 0F855D0A0000                    jne L_error_arg_count_2
  1671 00001471 488B5D20                        mov rbx, PARAM(0)
  1672                                          assert_real(rbx)
  1672 00001475 803B12              <1>  cmp byte [%1], %2
  1672 00001478 0F85EF0A0000        <1>  jne L_error_incorrect_type
  1673 0000147E 488B4D28                        mov rcx, PARAM(1)
  1674                                          assert_real(rcx)
  1674 00001482 803912              <1>  cmp byte [%1], %2
  1674 00001485 0F85E20A0000        <1>  jne L_error_incorrect_type
  1675 0000148B F20F104301                      movsd xmm0, qword [rbx + 1]
  1676 00001490 F20F104901                      movsd xmm1, qword [rcx + 1]
  1677 00001495 F20F5CC1                        subsd xmm0, xmm1
  1678 00001499 E853090000                      call make_real
  1679                                          LEAVE
  1679 0000149E C9                  <1>  leave
  1680 0000149F C22000                          ret AND_KILL_FRAME(2)
  1681                                  
  1682                                  L_code_ptr_raw_bin_mul_rr:
  1683                                          ENTER
  1683 000014A2 C8000000            <1>  enter 0, 0
  1683 000014A6 4883E4F0            <1>  and rsp, ~15
  1684 000014AA 48837D1802                      cmp COUNT, 2
  1685 000014AF 0F85190A0000                    jne L_error_arg_count_2
  1686 000014B5 488B5D20                        mov rbx, PARAM(0)
  1687                                          assert_real(rbx)
  1687 000014B9 803B12              <1>  cmp byte [%1], %2
  1687 000014BC 0F85AB0A0000        <1>  jne L_error_incorrect_type
  1688 000014C2 488B4D28                        mov rcx, PARAM(1)
  1689                                          assert_real(rcx)
  1689 000014C6 803912              <1>  cmp byte [%1], %2
  1689 000014C9 0F859E0A0000        <1>  jne L_error_incorrect_type
  1690 000014CF F20F104301                      movsd xmm0, qword [rbx + 1]
  1691 000014D4 F20F104901                      movsd xmm1, qword [rcx + 1]
  1692 000014D9 F20F59C1                        mulsd xmm0, xmm1
  1693 000014DD E80F090000                      call make_real
  1694                                          LEAVE
  1694 000014E2 C9                  <1>  leave
  1695 000014E3 C22000                          ret AND_KILL_FRAME(2)
  1696                                  
  1697                                  L_code_ptr_raw_bin_div_rr:
  1698                                          ENTER
  1698 000014E6 C8000000            <1>  enter 0, 0
  1698 000014EA 4883E4F0            <1>  and rsp, ~15
  1699 000014EE 48837D1802                      cmp COUNT, 2
  1700 000014F3 0F85D5090000                    jne L_error_arg_count_2
  1701 000014F9 488B5D20                        mov rbx, PARAM(0)
  1702                                          assert_real(rbx)
  1702 000014FD 803B12              <1>  cmp byte [%1], %2
  1702 00001500 0F85670A0000        <1>  jne L_error_incorrect_type
  1703 00001506 488B4D28                        mov rcx, PARAM(1)
  1704                                          assert_real(rcx)
  1704 0000150A 803912              <1>  cmp byte [%1], %2
  1704 0000150D 0F855A0A0000        <1>  jne L_error_incorrect_type
  1705 00001513 F20F104301                      movsd xmm0, qword [rbx + 1]
  1706 00001518 F20F104901                      movsd xmm1, qword [rcx + 1]
  1707 0000151D 660FEFD2                        pxor xmm2, xmm2
  1708 00001521 660F2ECA                        ucomisd xmm1, xmm2
  1709 00001525 0F84730A0000                    je L_error_division_by_zero
  1710 0000152B F20F5EC1                        divsd xmm0, xmm1
  1711 0000152F E8BD080000                      call make_real
  1712                                          LEAVE
  1712 00001534 C9                  <1>  leave
  1713 00001535 C22000                          ret AND_KILL_FRAME(2)
  1714                                  
  1715                                  L_code_ptr_raw_bin_add_qq:
  1716                                          ENTER
  1716 00001538 C8000000            <1>  enter 0, 0
  1716 0000153C 4883E4F0            <1>  and rsp, ~15
  1717 00001540 48837D1802                      cmp COUNT, 2
  1718 00001545 0F8583090000                    jne L_error_arg_count_2
  1719 0000154B 4C8B4520                        mov r8, PARAM(0)
  1720                                          assert_rational(r8)
  1720 0000154F 41803811            <1>  cmp byte [%1], %2
  1720 00001553 0F85140A0000        <1>  jne L_error_incorrect_type
  1721 00001559 4C8B4D28                        mov r9, PARAM(1)
  1722                                          assert_rational(r9)
  1722 0000155D 41803911            <1>  cmp byte [%1], %2
  1722 00001561 0F85060A0000        <1>  jne L_error_incorrect_type
  1723 00001567 498B4001                        mov rax, qword [r8 + 1] ; num1
  1724 0000156B 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1725 0000156F 4899                            cqo
  1726 00001571 48F7EB                          imul rbx
  1727 00001574 4889C6                          mov rsi, rax
  1728 00001577 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1729 0000157B 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1730 0000157F 4899                            cqo
  1731 00001581 48F7EB                          imul rbx
  1732 00001584 4801C6                          add rsi, rax
  1733 00001587 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1734 0000158B 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1735 0000158F 4899                            cqo
  1736 00001591 48F7EB                          imul rbx
  1737 00001594 4889C7                          mov rdi, rax
  1738 00001597 E827010000                      call normalize_rational
  1739                                          LEAVE
  1739 0000159C C9                  <1>  leave
  1740 0000159D C22000                          ret AND_KILL_FRAME(2)
  1741                                  
  1742                                  L_code_ptr_raw_bin_sub_qq:
  1743                                          ENTER
  1743 000015A0 C8000000            <1>  enter 0, 0
  1743 000015A4 4883E4F0            <1>  and rsp, ~15
  1744 000015A8 48837D1802                      cmp COUNT, 2
  1745 000015AD 0F851B090000                    jne L_error_arg_count_2
  1746 000015B3 4C8B4520                        mov r8, PARAM(0)
  1747                                          assert_rational(r8)
  1747 000015B7 41803811            <1>  cmp byte [%1], %2
  1747 000015BB 0F85AC090000        <1>  jne L_error_incorrect_type
  1748 000015C1 4C8B4D28                        mov r9, PARAM(1)
  1749                                          assert_rational(r9)
  1749 000015C5 41803911            <1>  cmp byte [%1], %2
  1749 000015C9 0F859E090000        <1>  jne L_error_incorrect_type
  1750 000015CF 498B4001                        mov rax, qword [r8 + 1] ; num1
  1751 000015D3 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1752 000015D7 4899                            cqo
  1753 000015D9 48F7EB                          imul rbx
  1754 000015DC 4889C6                          mov rsi, rax
  1755 000015DF 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1756 000015E3 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1757 000015E7 4899                            cqo
  1758 000015E9 48F7EB                          imul rbx
  1759 000015EC 4829C6                          sub rsi, rax
  1760 000015EF 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1761 000015F3 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1762 000015F7 4899                            cqo
  1763 000015F9 48F7EB                          imul rbx
  1764 000015FC 4889C7                          mov rdi, rax
  1765 000015FF E8BF000000                      call normalize_rational
  1766                                          LEAVE
  1766 00001604 C9                  <1>  leave
  1767 00001605 C22000                          ret AND_KILL_FRAME(2)
  1768                                  
  1769                                  L_code_ptr_raw_bin_mul_qq:
  1770                                          ENTER
  1770 00001608 C8000000            <1>  enter 0, 0
  1770 0000160C 4883E4F0            <1>  and rsp, ~15
  1771 00001610 48837D1802                      cmp COUNT, 2
  1772 00001615 0F85B3080000                    jne L_error_arg_count_2
  1773 0000161B 4C8B4520                        mov r8, PARAM(0)
  1774                                          assert_rational(r8)
  1774 0000161F 41803811            <1>  cmp byte [%1], %2
  1774 00001623 0F8544090000        <1>  jne L_error_incorrect_type
  1775 00001629 4C8B4D28                        mov r9, PARAM(1)
  1776                                          assert_rational(r9)
  1776 0000162D 41803911            <1>  cmp byte [%1], %2
  1776 00001631 0F8536090000        <1>  jne L_error_incorrect_type
  1777 00001637 498B4001                        mov rax, qword [r8 + 1] ; num1
  1778 0000163B 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1779 0000163F 4899                            cqo
  1780 00001641 48F7EB                          imul rbx
  1781 00001644 4889C6                          mov rsi, rax
  1782 00001647 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1783 0000164B 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1784 0000164F 4899                            cqo
  1785 00001651 48F7EB                          imul rbx
  1786 00001654 4889C7                          mov rdi, rax
  1787 00001657 E867000000                      call normalize_rational
  1788                                          LEAVE
  1788 0000165C C9                  <1>  leave
  1789 0000165D C22000                          ret AND_KILL_FRAME(2)
  1790                                          
  1791                                  L_code_ptr_raw_bin_div_qq:
  1792                                          ENTER
  1792 00001660 C8000000            <1>  enter 0, 0
  1792 00001664 4883E4F0            <1>  and rsp, ~15
  1793 00001668 48837D1802                      cmp COUNT, 2
  1794 0000166D 0F855B080000                    jne L_error_arg_count_2
  1795 00001673 4C8B4520                        mov r8, PARAM(0)
  1796                                          assert_rational(r8)
  1796 00001677 41803811            <1>  cmp byte [%1], %2
  1796 0000167B 0F85EC080000        <1>  jne L_error_incorrect_type
  1797 00001681 4C8B4D28                        mov r9, PARAM(1)
  1798                                          assert_rational(r9)
  1798 00001685 41803911            <1>  cmp byte [%1], %2
  1798 00001689 0F85DE080000        <1>  jne L_error_incorrect_type
  1799 0000168F 4983790100                      cmp qword [r9 + 1], 0
  1800 00001694 0F8404090000                    je L_error_division_by_zero
  1801 0000169A 498B4001                        mov rax, qword [r8 + 1] ; num1
  1802 0000169E 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1803 000016A2 4899                            cqo
  1804 000016A4 48F7EB                          imul rbx
  1805 000016A7 4889C6                          mov rsi, rax
  1806 000016AA 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1807 000016AE 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1808 000016B2 4899                            cqo
  1809 000016B4 48F7EB                          imul rbx
  1810 000016B7 4889C7                          mov rdi, rax
  1811 000016BA E804000000                      call normalize_rational
  1812                                          LEAVE
  1812 000016BF C9                  <1>  leave
  1813 000016C0 C22000                          ret AND_KILL_FRAME(2)
  1814                                          
  1815                                  normalize_rational:
  1816 000016C3 56                              push rsi
  1817 000016C4 57                              push rdi
  1818 000016C5 E839000000                      call gcd
  1819 000016CA 4889C3                          mov rbx, rax
  1820 000016CD 58                              pop rax
  1821 000016CE 4899                            cqo
  1822 000016D0 48F7FB                          idiv rbx
  1823 000016D3 4989C0                          mov r8, rax
  1824 000016D6 58                              pop rax
  1825 000016D7 4899                            cqo
  1826 000016D9 48F7FB                          idiv rbx
  1827 000016DC 4989C1                          mov r9, rax
  1828 000016DF BF11000000                      mov rdi, (1 + 8 + 8)
  1829 000016E4 E8C3F0FFFF                      call malloc
  1830 000016E9 C60011                          mov byte [rax], T_rational
  1831 000016EC 4C894801                        mov qword [rax + 1], r9
  1832 000016F0 4C894009                        mov qword [rax + 1 + 8], r8
  1833 000016F4 C3                              ret
  1834                                  
  1835                                  iabs:
  1836 000016F5 4889F8                          mov rax, rdi
  1837 000016F8 4883F800                        cmp rax, 0
  1838 000016FC 7C01                            jl .Lneg
  1839 000016FE C3                              ret
  1840                                  .Lneg:
  1841 000016FF 48F7D8                          neg rax
  1842 00001702 C3                              ret
  1843                                  
  1844                                  gcd:
  1845 00001703 E8EDFFFFFF                      call iabs
  1846 00001708 4889C3                          mov rbx, rax
  1847 0000170B 4889F7                          mov rdi, rsi
  1848 0000170E E8E2FFFFFF                      call iabs
  1849 00001713 4883F800                        cmp rax, 0
  1850 00001717 7502                            jne .L0
  1851 00001719 4893                            xchg rax, rbx
  1852                                  .L0:
  1853 0000171B 4883FB00                        cmp rbx, 0
  1854 0000171F 740C                            je .L1
  1855 00001721 4899                            cqo
  1856 00001723 48F7F3                          div rbx
  1857 00001726 4889D0                          mov rax, rdx
  1858 00001729 4893                            xchg rax, rbx
  1859 0000172B EBEE                            jmp .L0
  1860                                  .L1:
  1861 0000172D C3                              ret
  1862                                  
  1863                                  L_code_ptr_error:
  1864                                          ENTER
  1864 0000172E C8000000            <1>  enter 0, 0
  1864 00001732 4883E4F0            <1>  and rsp, ~15
  1865 00001736 48837D1802                      cmp COUNT, 2
  1866 0000173B 0F858D070000                    jne L_error_arg_count_2
  1867 00001741 488B7520                        mov rsi, PARAM(0)
  1868                                          assert_symbol(rsi)
  1868 00001745 803E04              <1>  cmp byte [%1], %2
  1868 00001748 0F851F080000        <1>  jne L_error_incorrect_type
  1869 0000174E 488B7528                        mov rsi, PARAM(1)
  1870                                          assert_string(rsi)
  1870 00001752 803E03              <1>  cmp byte [%1], %2
  1870 00001755 0F8512080000        <1>  jne L_error_incorrect_type
  1871 0000175B 48BF-                           mov rdi, fmt_scheme_error_part_1
  1871 0000175D [9103000000000000] 
  1872 00001765 B800000000                      mov rax, 0
  1873                                  	ENTER
  1873 0000176A C8000000            <1>  enter 0, 0
  1873 0000176E 4883E4F0            <1>  and rsp, ~15
  1874 00001772 E8(00000000)                    call printf
  1875                                  	LEAVE
  1875 00001777 C9                  <1>  leave
  1876 00001778 488B7D20                        mov rdi, PARAM(0)
  1877 0000177C E846F0FFFF                      call print_sexpr
  1878 00001781 48BF-                           mov rdi, fmt_scheme_error_part_2
  1878 00001783 [A503000000000000] 
  1879 0000178B B800000000                      mov rax, 0
  1880                                  	ENTER
  1880 00001790 C8000000            <1>  enter 0, 0
  1880 00001794 4883E4F0            <1>  and rsp, ~15
  1881 00001798 E8(00000000)                    call printf
  1882                                  	LEAVE
  1882 0000179D C9                  <1>  leave
  1883 0000179E 488B4528                        mov rax, PARAM(1)       ; sob_string
  1884 000017A2 BE01000000                      mov rsi, 1              ; size = 1 byte
  1885 000017A7 488B5001                        mov rdx, qword [rax + 1] ; length
  1886 000017AB 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1887 000017AF 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1888 000017B7 E8(00000000)                    call fwrite
  1889 000017BC 48BF-                           mov rdi, fmt_scheme_error_part_3
  1889 000017BE [E703000000000000] 
  1890 000017C6 B800000000                      mov rax, 0
  1891                                  	ENTER
  1891 000017CB C8000000            <1>  enter 0, 0
  1891 000017CF 4883E4F0            <1>  and rsp, ~15
  1892 000017D3 E8(00000000)                    call printf
  1893                                  	LEAVE
  1893 000017D8 C9                  <1>  leave
  1894 000017D9 48C7C0F7FFFFFF                  mov rax, -9
  1895 000017E0 E8(00000000)                    call exit
  1896                                  
  1897                                  L_code_ptr_raw_less_than_rr:
  1898                                          ENTER
  1898 000017E5 C8000000            <1>  enter 0, 0
  1898 000017E9 4883E4F0            <1>  and rsp, ~15
  1899 000017ED 48837D1802                      cmp COUNT, 2
  1900 000017F2 0F85D6060000                    jne L_error_arg_count_2
  1901 000017F8 488B7520                        mov rsi, PARAM(0)
  1902                                          assert_real(rsi)
  1902 000017FC 803E12              <1>  cmp byte [%1], %2
  1902 000017FF 0F8568070000        <1>  jne L_error_incorrect_type
  1903 00001805 488B7D28                        mov rdi, PARAM(1)
  1904                                          assert_real(rdi)
  1904 00001809 803F12              <1>  cmp byte [%1], %2
  1904 0000180C 0F855B070000        <1>  jne L_error_incorrect_type
  1905 00001812 F20F104601                      movsd xmm0, qword [rsi + 1]
  1906 00001817 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1907 0000181C 660F2FC1                        comisd xmm0, xmm1
  1908 00001820 730C                            jae .L_false
  1909 00001822 48B8-                           mov rax, sob_boolean_true
  1909 00001824 [0300000000000000] 
  1910 0000182C EB0A                            jmp .L_exit
  1911                                  .L_false:
  1912 0000182E 48B8-                           mov rax, sob_boolean_false
  1912 00001830 [0200000000000000] 
  1913                                  .L_exit:
  1914                                          LEAVE
  1914 00001838 C9                  <1>  leave
  1915 00001839 C22000                          ret AND_KILL_FRAME(2)
  1916                                          
  1917                                  L_code_ptr_raw_less_than_qq:
  1918                                          ENTER
  1918 0000183C C8000000            <1>  enter 0, 0
  1918 00001840 4883E4F0            <1>  and rsp, ~15
  1919 00001844 48837D1802                      cmp COUNT, 2
  1920 00001849 0F857F060000                    jne L_error_arg_count_2
  1921 0000184F 488B7520                        mov rsi, PARAM(0)
  1922                                          assert_rational(rsi)
  1922 00001853 803E11              <1>  cmp byte [%1], %2
  1922 00001856 0F8511070000        <1>  jne L_error_incorrect_type
  1923 0000185C 488B7D28                        mov rdi, PARAM(1)
  1924                                          assert_rational(rdi)
  1924 00001860 803F11              <1>  cmp byte [%1], %2
  1924 00001863 0F8504070000        <1>  jne L_error_incorrect_type
  1925 00001869 488B4601                        mov rax, qword [rsi + 1] ; num1
  1926 0000186D 4899                            cqo
  1927 0000186F 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1928 00001873 4889C1                          mov rcx, rax
  1929 00001876 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1930 0000187A 4899                            cqo
  1931 0000187C 48F76F01                        imul qword [rdi + 1]          ; num2
  1932 00001880 4829C1                          sub rcx, rax
  1933 00001883 7D0C                            jge .L_false
  1934 00001885 48B8-                           mov rax, sob_boolean_true
  1934 00001887 [0300000000000000] 
  1935 0000188F EB0A                            jmp .L_exit
  1936                                  .L_false:
  1937 00001891 48B8-                           mov rax, sob_boolean_false
  1937 00001893 [0200000000000000] 
  1938                                  .L_exit:
  1939                                          LEAVE
  1939 0000189B C9                  <1>  leave
  1940 0000189C C22000                          ret AND_KILL_FRAME(2)
  1941                                  
  1942                                  L_code_ptr_raw_equal_rr:
  1943                                          ENTER
  1943 0000189F C8000000            <1>  enter 0, 0
  1943 000018A3 4883E4F0            <1>  and rsp, ~15
  1944 000018A7 48837D1802                      cmp COUNT, 2
  1945 000018AC 0F851C060000                    jne L_error_arg_count_2
  1946 000018B2 488B7520                        mov rsi, PARAM(0)
  1947                                          assert_real(rsi)
  1947 000018B6 803E12              <1>  cmp byte [%1], %2
  1947 000018B9 0F85AE060000        <1>  jne L_error_incorrect_type
  1948 000018BF 488B7D28                        mov rdi, PARAM(1)
  1949                                          assert_real(rdi)
  1949 000018C3 803F12              <1>  cmp byte [%1], %2
  1949 000018C6 0F85A1060000        <1>  jne L_error_incorrect_type
  1950 000018CC F20F104601                      movsd xmm0, qword [rsi + 1]
  1951 000018D1 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1952 000018D6 660F2FC1                        comisd xmm0, xmm1
  1953 000018DA 750C                            jne .L_false
  1954 000018DC 48B8-                           mov rax, sob_boolean_true
  1954 000018DE [0300000000000000] 
  1955 000018E6 EB0A                            jmp .L_exit
  1956                                  .L_false:
  1957 000018E8 48B8-                           mov rax, sob_boolean_false
  1957 000018EA [0200000000000000] 
  1958                                  .L_exit:
  1959                                          LEAVE
  1959 000018F2 C9                  <1>  leave
  1960 000018F3 C22000                          ret AND_KILL_FRAME(2)
  1961                                          
  1962                                  L_code_ptr_raw_equal_qq:
  1963                                          ENTER
  1963 000018F6 C8000000            <1>  enter 0, 0
  1963 000018FA 4883E4F0            <1>  and rsp, ~15
  1964 000018FE 48837D1802                      cmp COUNT, 2
  1965 00001903 0F85C5050000                    jne L_error_arg_count_2
  1966 00001909 488B7520                        mov rsi, PARAM(0)
  1967                                          assert_rational(rsi)
  1967 0000190D 803E11              <1>  cmp byte [%1], %2
  1967 00001910 0F8557060000        <1>  jne L_error_incorrect_type
  1968 00001916 488B7D28                        mov rdi, PARAM(1)
  1969                                          assert_rational(rdi)
  1969 0000191A 803F11              <1>  cmp byte [%1], %2
  1969 0000191D 0F854A060000        <1>  jne L_error_incorrect_type
  1970 00001923 488B4601                        mov rax, qword [rsi + 1] ; num1
  1971 00001927 4899                            cqo
  1972 00001929 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1973 0000192D 4889C1                          mov rcx, rax
  1974 00001930 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1975 00001934 4899                            cqo
  1976 00001936 48F76F01                        imul qword [rdi + 1]          ; num2
  1977 0000193A 4829C1                          sub rcx, rax
  1978 0000193D 750C                            jne .L_false
  1979 0000193F 48B8-                           mov rax, sob_boolean_true
  1979 00001941 [0300000000000000] 
  1980 00001949 EB0A                            jmp .L_exit
  1981                                  .L_false:
  1982 0000194B 48B8-                           mov rax, sob_boolean_false
  1982 0000194D [0200000000000000] 
  1983                                  .L_exit:
  1984                                          LEAVE
  1984 00001955 C9                  <1>  leave
  1985 00001956 C22000                          ret AND_KILL_FRAME(2)
  1986                                  
  1987                                  L_code_ptr_quotient:
  1988                                          ENTER
  1988 00001959 C8000000            <1>  enter 0, 0
  1988 0000195D 4883E4F0            <1>  and rsp, ~15
  1989 00001961 48837D1802                      cmp COUNT, 2
  1990 00001966 0F8562050000                    jne L_error_arg_count_2
  1991 0000196C 488B7520                        mov rsi, PARAM(0)
  1992                                          assert_integer(rsi)
  1992                              <1>  assert_rational(%1)
  1992 00001970 803E11              <2>  cmp byte [%1], %2
  1992 00001973 0F85F4050000        <2>  jne L_error_incorrect_type
  1992 00001979 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  1992 0000197E 0F85E9050000        <1>  jne L_error_incorrect_type
  1993 00001984 488B7D28                        mov rdi, PARAM(1)
  1994                                          assert_integer(rdi)
  1994                              <1>  assert_rational(%1)
  1994 00001988 803F11              <2>  cmp byte [%1], %2
  1994 0000198B 0F85DC050000        <2>  jne L_error_incorrect_type
  1994 00001991 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
  1994 00001996 0F85D1050000        <1>  jne L_error_incorrect_type
  1995 0000199C 488B4601                        mov rax, qword [rsi + 1]
  1996 000019A0 488B5F01                        mov rbx, qword [rdi + 1]
  1997 000019A4 4883FB00                        cmp rbx, 0
  1998 000019A8 0F84F0050000                    je L_error_division_by_zero
  1999 000019AE 4899                            cqo
  2000 000019B0 48F7FB                          idiv rbx
  2001 000019B3 4889C7                          mov rdi, rax
  2002 000019B6 E852040000                      call make_integer
  2003                                          LEAVE
  2003 000019BB C9                  <1>  leave
  2004 000019BC C22000                          ret AND_KILL_FRAME(2)
  2005                                          
  2006                                  L_code_ptr_remainder:
  2007                                          ENTER
  2007 000019BF C8000000            <1>  enter 0, 0
  2007 000019C3 4883E4F0            <1>  and rsp, ~15
  2008 000019C7 48837D1802                      cmp COUNT, 2
  2009 000019CC 0F85FC040000                    jne L_error_arg_count_2
  2010 000019D2 488B7520                        mov rsi, PARAM(0)
  2011                                          assert_integer(rsi)
  2011                              <1>  assert_rational(%1)
  2011 000019D6 803E11              <2>  cmp byte [%1], %2
  2011 000019D9 0F858E050000        <2>  jne L_error_incorrect_type
  2011 000019DF 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2011 000019E4 0F8583050000        <1>  jne L_error_incorrect_type
  2012 000019EA 488B7D28                        mov rdi, PARAM(1)
  2013                                          assert_integer(rdi)
  2013                              <1>  assert_rational(%1)
  2013 000019EE 803F11              <2>  cmp byte [%1], %2
  2013 000019F1 0F8576050000        <2>  jne L_error_incorrect_type
  2013 000019F7 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
  2013 000019FC 0F856B050000        <1>  jne L_error_incorrect_type
  2014 00001A02 488B4601                        mov rax, qword [rsi + 1]
  2015 00001A06 488B5F01                        mov rbx, qword [rdi + 1]
  2016 00001A0A 4883FB00                        cmp rbx, 0
  2017 00001A0E 0F848A050000                    je L_error_division_by_zero
  2018 00001A14 4899                            cqo
  2019 00001A16 48F7FB                          idiv rbx
  2020 00001A19 4889D7                          mov rdi, rdx
  2021 00001A1C E8EC030000                      call make_integer
  2022                                          LEAVE
  2022 00001A21 C9                  <1>  leave
  2023 00001A22 C22000                          ret AND_KILL_FRAME(2)
  2024                                  
  2025                                  L_code_ptr_set_car:
  2026                                          ENTER
  2026 00001A25 C8000000            <1>  enter 0, 0
  2026 00001A29 4883E4F0            <1>  and rsp, ~15
  2027 00001A2D 48837D1802                      cmp COUNT, 2
  2028 00001A32 0F8596040000                    jne L_error_arg_count_2
  2029 00001A38 488B4520                        mov rax, PARAM(0)
  2030                                          assert_pair(rax)
  2030 00001A3C 803821              <1>  cmp byte [%1], %2
  2030 00001A3F 0F8528050000        <1>  jne L_error_incorrect_type
  2031 00001A45 488B5D28                        mov rbx, PARAM(1)
  2032 00001A49 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2033 00001A4D 48B8-                           mov rax, sob_void
  2033 00001A4F [0000000000000000] 
  2034                                          LEAVE
  2034 00001A57 C9                  <1>  leave
  2035 00001A58 C22000                          ret AND_KILL_FRAME(2)
  2036                                  
  2037                                  L_code_ptr_set_cdr:
  2038                                          ENTER
  2038 00001A5B C8000000            <1>  enter 0, 0
  2038 00001A5F 4883E4F0            <1>  and rsp, ~15
  2039 00001A63 48837D1802                      cmp COUNT, 2
  2040 00001A68 0F8560040000                    jne L_error_arg_count_2
  2041 00001A6E 488B4520                        mov rax, PARAM(0)
  2042                                          assert_pair(rax)
  2042 00001A72 803821              <1>  cmp byte [%1], %2
  2042 00001A75 0F85F2040000        <1>  jne L_error_incorrect_type
  2043 00001A7B 488B5D28                        mov rbx, PARAM(1)
  2044 00001A7F 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2045 00001A83 48B8-                           mov rax, sob_void
  2045 00001A85 [0000000000000000] 
  2046                                          LEAVE
  2046 00001A8D C9                  <1>  leave
  2047 00001A8E C22000                          ret AND_KILL_FRAME(2)
  2048                                  
  2049                                  L_code_ptr_string_ref:
  2050                                          ENTER
  2050 00001A91 C8000000            <1>  enter 0, 0
  2050 00001A95 4883E4F0            <1>  and rsp, ~15
  2051 00001A99 48837D1802                      cmp COUNT, 2
  2052 00001A9E 0F852A040000                    jne L_error_arg_count_2
  2053 00001AA4 488B7D20                        mov rdi, PARAM(0)
  2054                                          assert_string(rdi)
  2054 00001AA8 803F03              <1>  cmp byte [%1], %2
  2054 00001AAB 0F85BC040000        <1>  jne L_error_incorrect_type
  2055 00001AB1 488B7528                        mov rsi, PARAM(1)
  2056                                          assert_integer(rsi)
  2056                              <1>  assert_rational(%1)
  2056 00001AB5 803E11              <2>  cmp byte [%1], %2
  2056 00001AB8 0F85AF040000        <2>  jne L_error_incorrect_type
  2056 00001ABE 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2056 00001AC3 0F85A4040000        <1>  jne L_error_incorrect_type
  2057 00001AC9 488B5701                        mov rdx, qword [rdi + 1]
  2058 00001ACD 488B4E01                        mov rcx, qword [rsi + 1]
  2059 00001AD1 4839D1                          cmp rcx, rdx
  2060 00001AD4 0F8D59030000                    jge L_error_integer_range
  2061 00001ADA 4883F900                        cmp rcx, 0
  2062 00001ADE 0F8C4F030000                    jl L_error_integer_range
  2063 00001AE4 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2064 00001AE8 BF02000000                      mov rdi, 2
  2065 00001AED E8BAECFFFF                      call malloc
  2066 00001AF2 C60002                          mov byte [rax], T_char
  2067 00001AF5 885801                          mov byte [rax + 1], bl
  2068                                          LEAVE
  2068 00001AF8 C9                  <1>  leave
  2069 00001AF9 C22000                          ret AND_KILL_FRAME(2)
  2070                                  
  2071                                  L_code_ptr_vector_ref:
  2072                                          ENTER
  2072 00001AFC C8000000            <1>  enter 0, 0
  2072 00001B00 4883E4F0            <1>  and rsp, ~15
  2073 00001B04 48837D1802                      cmp COUNT, 2
  2074 00001B09 0F85BF030000                    jne L_error_arg_count_2
  2075 00001B0F 488B7D20                        mov rdi, PARAM(0)
  2076                                          assert_vector(rdi)
  2076 00001B13 803F22              <1>  cmp byte [%1], %2
  2076 00001B16 0F8551040000        <1>  jne L_error_incorrect_type
  2077 00001B1C 488B7528                        mov rsi, PARAM(1)
  2078                                          assert_integer(rsi)
  2078                              <1>  assert_rational(%1)
  2078 00001B20 803E11              <2>  cmp byte [%1], %2
  2078 00001B23 0F8544040000        <2>  jne L_error_incorrect_type
  2078 00001B29 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2078 00001B2E 0F8539040000        <1>  jne L_error_incorrect_type
  2079 00001B34 488B5701                        mov rdx, qword [rdi + 1]
  2080 00001B38 488B4E01                        mov rcx, qword [rsi + 1]
  2081 00001B3C 4839D1                          cmp rcx, rdx
  2082 00001B3F 0F8DEE020000                    jge L_error_integer_range
  2083 00001B45 4883F900                        cmp rcx, 0
  2084 00001B49 0F8CE4020000                    jl L_error_integer_range
  2085 00001B4F 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2086                                          LEAVE
  2086 00001B54 C9                  <1>  leave
  2087 00001B55 C22000                          ret AND_KILL_FRAME(2)
  2088                                  
  2089                                  L_code_ptr_vector_set:
  2090                                          ENTER
  2090 00001B58 C8000000            <1>  enter 0, 0
  2090 00001B5C 4883E4F0            <1>  and rsp, ~15
  2091 00001B60 48837D1803                      cmp COUNT, 3
  2092 00001B65 0F85CD030000                    jne L_error_arg_count_3
  2093 00001B6B 488B7D20                        mov rdi, PARAM(0)
  2094                                          assert_vector(rdi)
  2094 00001B6F 803F22              <1>  cmp byte [%1], %2
  2094 00001B72 0F85F5030000        <1>  jne L_error_incorrect_type
  2095 00001B78 488B7528                        mov rsi, PARAM(1)
  2096                                          assert_integer(rsi)
  2096                              <1>  assert_rational(%1)
  2096 00001B7C 803E11              <2>  cmp byte [%1], %2
  2096 00001B7F 0F85E8030000        <2>  jne L_error_incorrect_type
  2096 00001B85 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2096 00001B8A 0F85DD030000        <1>  jne L_error_incorrect_type
  2097 00001B90 488B5701                        mov rdx, qword [rdi + 1]
  2098 00001B94 488B4E01                        mov rcx, qword [rsi + 1]
  2099 00001B98 4839D1                          cmp rcx, rdx
  2100 00001B9B 0F8D92020000                    jge L_error_integer_range
  2101 00001BA1 4883F900                        cmp rcx, 0
  2102 00001BA5 0F8C88020000                    jl L_error_integer_range
  2103 00001BAB 488B4530                        mov rax, PARAM(2)
  2104 00001BAF 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2105 00001BB4 48B8-                           mov rax, sob_void
  2105 00001BB6 [0000000000000000] 
  2106                                          LEAVE
  2106 00001BBE C9                  <1>  leave
  2107 00001BBF C22800                          ret AND_KILL_FRAME(3)
  2108                                  
  2109                                  L_code_ptr_string_set:
  2110                                          ENTER
  2110 00001BC2 C8000000            <1>  enter 0, 0
  2110 00001BC6 4883E4F0            <1>  and rsp, ~15
  2111 00001BCA 48837D1803                      cmp COUNT, 3
  2112 00001BCF 0F8563030000                    jne L_error_arg_count_3
  2113 00001BD5 488B7D20                        mov rdi, PARAM(0)
  2114                                          assert_string(rdi)
  2114 00001BD9 803F03              <1>  cmp byte [%1], %2
  2114 00001BDC 0F858B030000        <1>  jne L_error_incorrect_type
  2115 00001BE2 488B7528                        mov rsi, PARAM(1)
  2116                                          assert_integer(rsi)
  2116                              <1>  assert_rational(%1)
  2116 00001BE6 803E11              <2>  cmp byte [%1], %2
  2116 00001BE9 0F857E030000        <2>  jne L_error_incorrect_type
  2116 00001BEF 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2116 00001BF4 0F8573030000        <1>  jne L_error_incorrect_type
  2117 00001BFA 488B5701                        mov rdx, qword [rdi + 1]
  2118 00001BFE 488B4E01                        mov rcx, qword [rsi + 1]
  2119 00001C02 4839D1                          cmp rcx, rdx
  2120 00001C05 0F8D28020000                    jge L_error_integer_range
  2121 00001C0B 4883F900                        cmp rcx, 0
  2122 00001C0F 0F8C1E020000                    jl L_error_integer_range
  2123 00001C15 488B4530                        mov rax, PARAM(2)
  2124                                          assert_char(rax)
  2124 00001C19 803802              <1>  cmp byte [%1], %2
  2124 00001C1C 0F854B030000        <1>  jne L_error_incorrect_type
  2125 00001C22 8A4001                          mov al, byte [rax + 1]
  2126 00001C25 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2127 00001C29 48B8-                           mov rax, sob_void
  2127 00001C2B [0000000000000000] 
  2128                                          LEAVE
  2128 00001C33 C9                  <1>  leave
  2129 00001C34 C22800                          ret AND_KILL_FRAME(3)
  2130                                  
  2131                                  L_code_ptr_make_vector:
  2132                                          ENTER
  2132 00001C37 C8000000            <1>  enter 0, 0
  2132 00001C3B 4883E4F0            <1>  and rsp, ~15
  2133 00001C3F 48837D1802                      cmp COUNT, 2
  2134 00001C44 0F8584020000                    jne L_error_arg_count_2
  2135 00001C4A 488B4D20                        mov rcx, PARAM(0)
  2136                                          assert_integer(rcx)
  2136                              <1>  assert_rational(%1)
  2136 00001C4E 803911              <2>  cmp byte [%1], %2
  2136 00001C51 0F8516030000        <2>  jne L_error_incorrect_type
  2136 00001C57 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
  2136 00001C5C 0F850B030000        <1>  jne L_error_incorrect_type
  2137 00001C62 488B4901                        mov rcx, qword [rcx + 1]
  2138 00001C66 4883F900                        cmp rcx, 0
  2139 00001C6A 0F8CC3010000                    jl L_error_integer_range
  2140 00001C70 488B5528                        mov rdx, PARAM(1)
  2141 00001C74 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2142 00001C7C E82BEBFFFF                      call malloc
  2143 00001C81 C60022                          mov byte [rax], T_vector
  2144 00001C84 48894801                        mov qword [rax + 1], rcx
  2145 00001C88 41B800000000                    mov r8, 0
  2146                                  .L0:
  2147 00001C8E 4939C8                          cmp r8, rcx
  2148 00001C91 740A                            je .L1
  2149 00001C93 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2150 00001C98 49FFC0                          inc r8
  2151 00001C9B EBF1                            jmp .L0
  2152                                  .L1:
  2153                                          LEAVE
  2153 00001C9D C9                  <1>  leave
  2154 00001C9E C22000                          ret AND_KILL_FRAME(2)
  2155                                          
  2156                                  L_code_ptr_make_string:
  2157                                          ENTER
  2157 00001CA1 C8000000            <1>  enter 0, 0
  2157 00001CA5 4883E4F0            <1>  and rsp, ~15
  2158 00001CA9 48837D1802                      cmp COUNT, 2
  2159 00001CAE 0F851A020000                    jne L_error_arg_count_2
  2160 00001CB4 488B4D20                        mov rcx, PARAM(0)
  2161                                          assert_integer(rcx)
  2161                              <1>  assert_rational(%1)
  2161 00001CB8 803911              <2>  cmp byte [%1], %2
  2161 00001CBB 0F85AC020000        <2>  jne L_error_incorrect_type
  2161 00001CC1 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
  2161 00001CC6 0F85A1020000        <1>  jne L_error_incorrect_type
  2162 00001CCC 488B4901                        mov rcx, qword [rcx + 1]
  2163 00001CD0 4883F900                        cmp rcx, 0
  2164 00001CD4 0F8C59010000                    jl L_error_integer_range
  2165 00001CDA 488B5528                        mov rdx, PARAM(1)
  2166                                          assert_char(rdx)
  2166 00001CDE 803A02              <1>  cmp byte [%1], %2
  2166 00001CE1 0F8586020000        <1>  jne L_error_incorrect_type
  2167 00001CE7 8A5201                          mov dl, byte [rdx + 1]
  2168 00001CEA 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2169 00001CEE E8B9EAFFFF                      call malloc
  2170 00001CF3 C60003                          mov byte [rax], T_string
  2171 00001CF6 48894801                        mov qword [rax + 1], rcx
  2172 00001CFA 41B800000000                    mov r8, 0
  2173                                  .L0:
  2174 00001D00 4939C8                          cmp r8, rcx
  2175 00001D03 740A                            je .L1
  2176 00001D05 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2177 00001D0A 49FFC0                          inc r8
  2178 00001D0D EBF1                            jmp .L0
  2179                                  .L1:
  2180                                          LEAVE
  2180 00001D0F C9                  <1>  leave
  2181 00001D10 C22000                          ret AND_KILL_FRAME(2)
  2182                                  
  2183                                  L_code_ptr_numerator:
  2184                                          ENTER
  2184 00001D13 C8000000            <1>  enter 0, 0
  2184 00001D17 4883E4F0            <1>  and rsp, ~15
  2185 00001D1B 48837D1801                      cmp COUNT, 1
  2186 00001D20 0F8573010000                    jne L_error_arg_count_1
  2187 00001D26 488B4520                        mov rax, PARAM(0)
  2188                                          assert_rational(rax)
  2188 00001D2A 803811              <1>  cmp byte [%1], %2
  2188 00001D2D 0F853A020000        <1>  jne L_error_incorrect_type
  2189 00001D33 488B7801                        mov rdi, qword [rax + 1]
  2190 00001D37 E8D1000000                      call make_integer
  2191                                          LEAVE
  2191 00001D3C C9                  <1>  leave
  2192 00001D3D C21800                          ret AND_KILL_FRAME(1)
  2193                                          
  2194                                  L_code_ptr_denominator:
  2195                                          ENTER
  2195 00001D40 C8000000            <1>  enter 0, 0
  2195 00001D44 4883E4F0            <1>  and rsp, ~15
  2196 00001D48 48837D1801                      cmp COUNT, 1
  2197 00001D4D 0F8546010000                    jne L_error_arg_count_1
  2198 00001D53 488B4520                        mov rax, PARAM(0)
  2199                                          assert_rational(rax)
  2199 00001D57 803811              <1>  cmp byte [%1], %2
  2199 00001D5A 0F850D020000        <1>  jne L_error_incorrect_type
  2200 00001D60 488B7809                        mov rdi, qword [rax + 1 + 8]
  2201 00001D64 E8A4000000                      call make_integer
  2202                                          LEAVE
  2202 00001D69 C9                  <1>  leave
  2203 00001D6A C21800                          ret AND_KILL_FRAME(1)
  2204                                  
  2205                                  L_code_ptr_eq:
  2206                                  	ENTER
  2206 00001D6D C8000000            <1>  enter 0, 0
  2206 00001D71 4883E4F0            <1>  and rsp, ~15
  2207 00001D75 48837D1802              	cmp COUNT, 2
  2208 00001D7A 0F854E010000            	jne L_error_arg_count_2
  2209 00001D80 488B7D20                	mov rdi, PARAM(0)
  2210 00001D84 488B7528                	mov rsi, PARAM(1)
  2211 00001D88 4839F7                  	cmp rdi, rsi
  2212 00001D8B 744A                    	je .L_eq_true
  2213 00001D8D 8A17                    	mov dl, byte [rdi]
  2214 00001D8F 3A16                    	cmp dl, byte [rsi]
  2215 00001D91 7550                    	jne .L_eq_false
  2216 00001D93 80FA02                  	cmp dl, T_char
  2217 00001D96 7437                    	je .L_char
  2218 00001D98 80FA04                  	cmp dl, T_symbol
  2219 00001D9B 742A                    	je .L_symbol
  2220 00001D9D 80FA12                  	cmp dl, T_real
  2221 00001DA0 741D                    	je .L_real
  2222 00001DA2 80FA11                  	cmp dl, T_rational
  2223 00001DA5 7402                    	je .L_rational
  2224 00001DA7 EB3A                    	jmp .L_eq_false
  2225                                  .L_rational:
  2226 00001DA9 488B4601                	mov rax, qword [rsi + 1]
  2227 00001DAD 483B4701                	cmp rax, qword [rdi + 1]
  2228 00001DB1 7530                    	jne .L_eq_false
  2229 00001DB3 488B4609                	mov rax, qword [rsi + 1 + 8]
  2230 00001DB7 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2231 00001DBB 7526                    	jne .L_eq_false
  2232 00001DBD EB18                    	jmp .L_eq_true
  2233                                  .L_real:
  2234 00001DBF 488B4601                	mov rax, qword [rsi + 1]
  2235 00001DC3 483B4701                	cmp rax, qword [rdi + 1]
  2236                                  .L_symbol:
  2237                                  	; never reached, because symbols are static!
  2238                                  	; but I'm keeping it in case, I'll ever change
  2239                                  	; the implementation
  2240 00001DC7 488B4601                	mov rax, qword [rsi + 1]
  2241 00001DCB 483B4701                	cmp rax, qword [rdi + 1]
  2242                                  .L_char:
  2243 00001DCF 8A5E01                  	mov bl, byte [rsi + 1]
  2244 00001DD2 3A5F01                  	cmp bl, byte [rdi + 1]
  2245 00001DD5 750C                    	jne .L_eq_false
  2246                                  .L_eq_true:
  2247 00001DD7 48B8-                   	mov rax, sob_boolean_true
  2247 00001DD9 [0300000000000000] 
  2248 00001DE1 EB0A                    	jmp .L_eq_exit
  2249                                  .L_eq_false:
  2250 00001DE3 48B8-                   	mov rax, sob_boolean_false
  2250 00001DE5 [0200000000000000] 
  2251                                  .L_eq_exit:
  2252                                  	LEAVE
  2252 00001DED C9                  <1>  leave
  2253 00001DEE C22000                  	ret AND_KILL_FRAME(2)
  2254                                  
  2255                                  make_real:
  2256                                          ENTER
  2256 00001DF1 C8000000            <1>  enter 0, 0
  2256 00001DF5 4883E4F0            <1>  and rsp, ~15
  2257 00001DF9 BF09000000                      mov rdi, (1 + 8)
  2258 00001DFE E8A9E9FFFF                      call malloc
  2259 00001E03 C60012                          mov byte [rax], T_real
  2260 00001E06 F20F114001                      movsd qword [rax + 1], xmm0
  2261                                          LEAVE
  2261 00001E0B C9                  <1>  leave
  2262 00001E0C C3                              ret
  2263                                          
  2264                                  make_integer:
  2265                                          ENTER
  2265 00001E0D C8000000            <1>  enter 0, 0
  2265 00001E11 4883E4F0            <1>  and rsp, ~15
  2266 00001E15 4889FE                          mov rsi, rdi
  2267 00001E18 BF11000000                      mov rdi, (1 + 8 + 8)
  2268 00001E1D E88AE9FFFF                      call malloc
  2269 00001E22 C60011                          mov byte [rax], T_rational
  2270 00001E25 48897001                        mov qword [rax + 1], rsi
  2271 00001E29 48C7400901000000                mov qword [rax + 1 + 8], 1
  2272                                          LEAVE
  2272 00001E31 C9                  <1>  leave
  2273 00001E32 C3                              ret
  2274                                          
  2275                                  L_error_integer_range:
  2276 00001E33 488B3C25[00000000]              mov rdi, qword [stderr]
  2277 00001E3B 48BE-                           mov rsi, fmt_integer_range
  2277 00001E3D [5E03000000000000] 
  2278 00001E45 B800000000                      mov rax, 0
  2279                                  	ENTER
  2279 00001E4A C8000000            <1>  enter 0, 0
  2279 00001E4E 4883E4F0            <1>  and rsp, ~15
  2280 00001E52 E8(00000000)                    call fprintf
  2281                                  	LEAVE
  2281 00001E57 C9                  <1>  leave
  2282 00001E58 48C7C0FBFFFFFF                  mov rax, -5
  2283 00001E5F E8(00000000)                    call exit
  2284                                  
  2285                                  L_error_arg_count_0:
  2286 00001E64 488B3C25[00000000]              mov rdi, qword [stderr]
  2287 00001E6C 48BE-                           mov rsi, fmt_arg_count_0
  2287 00001E6E [5C02000000000000] 
  2288 00001E76 488B5518                        mov rdx, COUNT
  2289 00001E7A B800000000                      mov rax, 0
  2290                                  	ENTER
  2290 00001E7F C8000000            <1>  enter 0, 0
  2290 00001E83 4883E4F0            <1>  and rsp, ~15
  2291 00001E87 E8(00000000)                    call fprintf
  2292                                  	LEAVE
  2292 00001E8C C9                  <1>  leave
  2293 00001E8D 48C7C0FDFFFFFF                  mov rax, -3
  2294 00001E94 E8(00000000)                    call exit
  2295                                  
  2296                                  L_error_arg_count_1:
  2297 00001E99 488B3C25[00000000]              mov rdi, qword [stderr]
  2298 00001EA1 48BE-                           mov rsi, fmt_arg_count_1
  2298 00001EA3 [8402000000000000] 
  2299 00001EAB 488B5518                        mov rdx, COUNT
  2300 00001EAF B800000000                      mov rax, 0
  2301                                  	ENTER
  2301 00001EB4 C8000000            <1>  enter 0, 0
  2301 00001EB8 4883E4F0            <1>  and rsp, ~15
  2302 00001EBC E8(00000000)                    call fprintf
  2303                                  	LEAVE
  2303 00001EC1 C9                  <1>  leave
  2304 00001EC2 48C7C0FDFFFFFF                  mov rax, -3
  2305 00001EC9 E8(00000000)                    call exit
  2306                                  
  2307                                  L_error_arg_count_2:
  2308 00001ECE 488B3C25[00000000]              mov rdi, qword [stderr]
  2309 00001ED6 48BE-                           mov rsi, fmt_arg_count_2
  2309 00001ED8 [EA02000000000000] 
  2310 00001EE0 488B5518                        mov rdx, COUNT
  2311 00001EE4 B800000000                      mov rax, 0
  2312                                  	ENTER
  2312 00001EE9 C8000000            <1>  enter 0, 0
  2312 00001EED 4883E4F0            <1>  and rsp, ~15
  2313 00001EF1 E8(00000000)                    call fprintf
  2314                                  	LEAVE
  2314 00001EF6 C9                  <1>  leave
  2315 00001EF7 48C7C0FDFFFFFF                  mov rax, -3
  2316 00001EFE E8(00000000)                    call exit
  2317                                  
  2318                                  L_error_arg_count_12:
  2319 00001F03 488B3C25[00000000]              mov rdi, qword [stderr]
  2320 00001F0B 48BE-                           mov rsi, fmt_arg_count_12
  2320 00001F0D [AA02000000000000] 
  2321 00001F15 488B5518                        mov rdx, COUNT
  2322 00001F19 B800000000                      mov rax, 0
  2323                                  	ENTER
  2323 00001F1E C8000000            <1>  enter 0, 0
  2323 00001F22 4883E4F0            <1>  and rsp, ~15
  2324 00001F26 E8(00000000)                    call fprintf
  2325                                  	LEAVE
  2325 00001F2B C9                  <1>  leave
  2326 00001F2C 48C7C0FDFFFFFF                  mov rax, -3
  2327 00001F33 E8(00000000)                    call exit
  2328                                  
  2329                                  L_error_arg_count_3:
  2330 00001F38 488B3C25[00000000]              mov rdi, qword [stderr]
  2331 00001F40 48BE-                           mov rsi, fmt_arg_count_3
  2331 00001F42 [1103000000000000] 
  2332 00001F4A 488B5518                        mov rdx, COUNT
  2333 00001F4E B800000000                      mov rax, 0
  2334                                  	ENTER
  2334 00001F53 C8000000            <1>  enter 0, 0
  2334 00001F57 4883E4F0            <1>  and rsp, ~15
  2335 00001F5B E8(00000000)                    call fprintf
  2336                                  	LEAVE
  2336 00001F60 C9                  <1>  leave
  2337 00001F61 48C7C0FDFFFFFF                  mov rax, -3
  2338 00001F68 E8(00000000)                    call exit
  2339                                          
  2340                                  L_error_incorrect_type:
  2341 00001F6D 488B3C25[00000000]              mov rdi, qword [stderr]
  2342 00001F75 48BE-                           mov rsi, fmt_type
  2342 00001F77 [3A03000000000000] 
  2343 00001F7F B800000000                      mov rax, 0
  2344                                  	ENTER
  2344 00001F84 C8000000            <1>  enter 0, 0
  2344 00001F88 4883E4F0            <1>  and rsp, ~15
  2345 00001F8C E8(00000000)                    call fprintf
  2346                                  	LEAVE
  2346 00001F91 C9                  <1>  leave
  2347 00001F92 48C7C0FCFFFFFF                  mov rax, -4
  2348 00001F99 E8(00000000)                    call exit
  2349                                  
  2350                                  L_error_division_by_zero:
  2351 00001F9E 488B3C25[00000000]              mov rdi, qword [stderr]
  2352 00001FA6 48BE-                           mov rsi, fmt_division_by_zero
  2352 00001FA8 [7B03000000000000] 
  2353 00001FB0 B800000000                      mov rax, 0
  2354                                  	ENTER
  2354 00001FB5 C8000000            <1>  enter 0, 0
  2354 00001FB9 4883E4F0            <1>  and rsp, ~15
  2355 00001FBD E8(00000000)                    call fprintf
  2356                                  	LEAVE
  2356 00001FC2 C9                  <1>  leave
  2357 00001FC3 48C7C0F8FFFFFF                  mov rax, -8
  2358 00001FCA E8(00000000)                    call exit
  2359                                  
  2360                                  section .data
  2361                                  fmt_char:
  2362 00000259 256300                          db `%c\0`
  2363                                  fmt_arg_count_0:
  2364 0000025C 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2364 00000265 74696E67207A65726F-
  2364 0000026E 20617267756D656E74-
  2364 00000277 732E20466F756E6420-
  2364 00000280 25640A00           
  2365                                  fmt_arg_count_1:
  2366 00000284 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2366 0000028D 74696E67206F6E6520-
  2366 00000296 617267756D656E742E-
  2366 0000029F 20466F756E64202564-
  2366 000002A8 0A00               
  2367                                  fmt_arg_count_12:
  2368 000002AA 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2368 000002B3 74696E67206F6E6520-
  2368 000002BC 726571756972656420-
  2368 000002C5 616E64206F6E65206F-
  2368 000002CE 7074696F6E616C2061-
  2368 000002D7 7267756D656E742E20-
  2368 000002E0 466F756E642025640A-
  2368 000002E9 00                 
  2369                                  fmt_arg_count_2:
  2370 000002EA 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2370 000002F3 74696E672074776F20-
  2370 000002FC 617267756D656E7473-
  2370 00000305 2E20466F756E642025-
  2370 0000030E 640A00             
  2371                                  fmt_arg_count_3:
  2372 00000311 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2372 0000031A 74696E672074687265-
  2372 00000323 6520617267756D656E-
  2372 0000032C 74732E20466F756E64-
  2372 00000335 2025640A00         
  2373                                  fmt_type:
  2374 0000033A 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2374 00000343 696F6E207061737365-
  2374 0000034C 6420696E636F727265-
  2374 00000355 637420747970650A00 
  2375                                  fmt_integer_range:
  2376 0000035E 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2376 00000367 7265637420696E7465-
  2376 00000370 6765722072616E6765-
  2376 00000379 0A00               
  2377                                  fmt_division_by_zero:
  2378 0000037B 212121204469766973-             db `!!! Division by zero\n\0`
  2378 00000384 696F6E206279207A65-
  2378 0000038D 726F0A00           
  2379                                  fmt_scheme_error_part_1:
  2380 00000391 0A2121212054686520-             db `\n!!! The procedure \0`
  2380 0000039A 70726F636564757265-
  2380 000003A3 2000               
  2381                                  fmt_scheme_error_part_2:
  2382 000003A5 2061736B656420746F-             db ` asked to terminate the program\n`
  2382 000003AE 207465726D696E6174-
  2382 000003B7 65207468652070726F-
  2382 000003C0 6772616D0A         
  2383 000003C5 202020207769746820-             db `    with the following message:\n\n\0`
  2383 000003CE 74686520666F6C6C6F-
  2383 000003D7 77696E67206D657373-
  2383 000003E0 6167653A0A0A00     
  2384                                  fmt_scheme_error_part_3:
  2385 000003E7 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2385 000003F0 210A0A00           
