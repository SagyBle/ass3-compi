     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 11                      	db T_rational	; 1
    84 00000007 010000000000000001-     	dq 1, 1
    84 00000010 00000000000000     
    85 00000017 11                      	db T_rational	; 2
    86 00000018 020000000000000001-     	dq 2, 1
    86 00000021 00000000000000     
    87 00000028 21                      	db T_pair	; (2)
    88 00000029 [1700000000000000]-     	dq L_constants + 23, L_constants + 1
    88 00000031 [0100000000000000] 
    89 00000039 21                      	db T_pair	; (1 2)
    90 0000003A [0600000000000000]-     	dq L_constants + 6, L_constants + 40
    90 00000042 [2800000000000000] 
    91                                  
    92                                  section .bss
    93                                  free_var_0:	; location of null?
    94 00000000 <res 00000008>          	resq 1
    95                                  free_var_1:	; location of pair?
    96 00000008 <res 00000008>          	resq 1
    97                                  free_var_2:	; location of void?
    98 00000010 <res 00000008>          	resq 1
    99                                  free_var_3:	; location of char?
   100 00000018 <res 00000008>          	resq 1
   101                                  free_var_4:	; location of string?
   102 00000020 <res 00000008>          	resq 1
   103                                  free_var_5:	; location of symbol?
   104 00000028 <res 00000008>          	resq 1
   105                                  free_var_6:	; location of vector?
   106 00000030 <res 00000008>          	resq 1
   107                                  free_var_7:	; location of procedure?
   108 00000038 <res 00000008>          	resq 1
   109                                  free_var_8:	; location of real?
   110 00000040 <res 00000008>          	resq 1
   111                                  free_var_9:	; location of rational?
   112 00000048 <res 00000008>          	resq 1
   113                                  free_var_10:	; location of boolean?
   114 00000050 <res 00000008>          	resq 1
   115                                  free_var_11:	; location of number?
   116 00000058 <res 00000008>          	resq 1
   117                                  free_var_12:	; location of collection?
   118 00000060 <res 00000008>          	resq 1
   119                                  free_var_13:	; location of cons
   120 00000068 <res 00000008>          	resq 1
   121                                  free_var_14:	; location of display-sexpr
   122 00000070 <res 00000008>          	resq 1
   123                                  free_var_15:	; location of write-char
   124 00000078 <res 00000008>          	resq 1
   125                                  free_var_16:	; location of car
   126 00000080 <res 00000008>          	resq 1
   127                                  free_var_17:	; location of cdr
   128 00000088 <res 00000008>          	resq 1
   129                                  free_var_18:	; location of string-length
   130 00000090 <res 00000008>          	resq 1
   131                                  free_var_19:	; location of vector-length
   132 00000098 <res 00000008>          	resq 1
   133                                  free_var_20:	; location of real->integer
   134 000000A0 <res 00000008>          	resq 1
   135                                  free_var_21:	; location of exit
   136 000000A8 <res 00000008>          	resq 1
   137                                  free_var_22:	; location of integer->real
   138 000000B0 <res 00000008>          	resq 1
   139                                  free_var_23:	; location of rational->real
   140 000000B8 <res 00000008>          	resq 1
   141                                  free_var_24:	; location of char->integer
   142 000000C0 <res 00000008>          	resq 1
   143                                  free_var_25:	; location of integer->char
   144 000000C8 <res 00000008>          	resq 1
   145                                  free_var_26:	; location of trng
   146 000000D0 <res 00000008>          	resq 1
   147                                  free_var_27:	; location of zero?
   148 000000D8 <res 00000008>          	resq 1
   149                                  free_var_28:	; location of integer?
   150 000000E0 <res 00000008>          	resq 1
   151                                  free_var_29:	; location of __bin-apply
   152 000000E8 <res 00000008>          	resq 1
   153                                  free_var_30:	; location of __bin-add-rr
   154 000000F0 <res 00000008>          	resq 1
   155                                  free_var_31:	; location of __bin-sub-rr
   156 000000F8 <res 00000008>          	resq 1
   157                                  free_var_32:	; location of __bin-mul-rr
   158 00000100 <res 00000008>          	resq 1
   159                                  free_var_33:	; location of __bin-div-rr
   160 00000108 <res 00000008>          	resq 1
   161                                  free_var_34:	; location of __bin-add-qq
   162 00000110 <res 00000008>          	resq 1
   163                                  free_var_35:	; location of __bin-sub-qq
   164 00000118 <res 00000008>          	resq 1
   165                                  free_var_36:	; location of __bin-mul-qq
   166 00000120 <res 00000008>          	resq 1
   167                                  free_var_37:	; location of __bin-div-qq
   168 00000128 <res 00000008>          	resq 1
   169                                  free_var_38:	; location of error
   170 00000130 <res 00000008>          	resq 1
   171                                  free_var_39:	; location of __bin-less-than-rr
   172 00000138 <res 00000008>          	resq 1
   173                                  free_var_40:	; location of __bin-less-than-qq
   174 00000140 <res 00000008>          	resq 1
   175                                  free_var_41:	; location of __bin-equal-rr
   176 00000148 <res 00000008>          	resq 1
   177                                  free_var_42:	; location of __bin-equal-qq
   178 00000150 <res 00000008>          	resq 1
   179                                  free_var_43:	; location of quotient
   180 00000158 <res 00000008>          	resq 1
   181                                  free_var_44:	; location of remainder
   182 00000160 <res 00000008>          	resq 1
   183                                  free_var_45:	; location of set-car!
   184 00000168 <res 00000008>          	resq 1
   185                                  free_var_46:	; location of set-cdr!
   186 00000170 <res 00000008>          	resq 1
   187                                  free_var_47:	; location of string-ref
   188 00000178 <res 00000008>          	resq 1
   189                                  free_var_48:	; location of vector-ref
   190 00000180 <res 00000008>          	resq 1
   191                                  free_var_49:	; location of vector-set!
   192 00000188 <res 00000008>          	resq 1
   193                                  free_var_50:	; location of string-set!
   194 00000190 <res 00000008>          	resq 1
   195                                  free_var_51:	; location of make-vector
   196 00000198 <res 00000008>          	resq 1
   197                                  free_var_52:	; location of make-string
   198 000001A0 <res 00000008>          	resq 1
   199                                  free_var_53:	; location of numerator
   200 000001A8 <res 00000008>          	resq 1
   201                                  free_var_54:	; location of denominator
   202 000001B0 <res 00000008>          	resq 1
   203                                  free_var_55:	; location of eq?
   204 000001B8 <res 00000008>          	resq 1
   205                                  free_var_56:	; location of apply
   206 000001C0 <res 00000008>          	resq 1
   207                                  
   208                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   209                                  global main
   210                                  section .text
   211                                  main:
   212 00000000 C8000000                        enter 0, 0
   213                                          
   214                                  	; building closure for null?
   215 00000004 48BF-                   	mov rdi, free_var_0
   215 00000006 [0000000000000000] 
   216 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   216 00000010 [5B0C000000000000] 
   217 00000018 E8A40B0000              	call bind_primitive
   218                                  
   219                                  	; building closure for pair?
   220 0000001D 48BF-                   	mov rdi, free_var_1
   220 0000001F [0800000000000000] 
   221 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   221 00000029 [910C000000000000] 
   222 00000031 E88B0B0000              	call bind_primitive
   223                                  
   224                                  	; building closure for void?
   225 00000036 48BF-                   	mov rdi, free_var_2
   225 00000038 [1000000000000000] 
   226 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   226 00000042 [C70C000000000000] 
   227 0000004A E8720B0000              	call bind_primitive
   228                                  
   229                                  	; building closure for char?
   230 0000004F 48BF-                   	mov rdi, free_var_3
   230 00000051 [1800000000000000] 
   231 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   231 0000005B [FD0C000000000000] 
   232 00000063 E8590B0000              	call bind_primitive
   233                                  
   234                                  	; building closure for string?
   235 00000068 48BF-                   	mov rdi, free_var_4
   235 0000006A [2000000000000000] 
   236 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   236 00000074 [330D000000000000] 
   237 0000007C E8400B0000              	call bind_primitive
   238                                  
   239                                  	; building closure for symbol?
   240 00000081 48BF-                   	mov rdi, free_var_5
   240 00000083 [2800000000000000] 
   241 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   241 0000008D [690D000000000000] 
   242 00000095 E8270B0000              	call bind_primitive
   243                                  
   244                                  	; building closure for vector?
   245 0000009A 48BF-                   	mov rdi, free_var_6
   245 0000009C [3000000000000000] 
   246 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   246 000000A6 [9F0D000000000000] 
   247 000000AE E80E0B0000              	call bind_primitive
   248                                  
   249                                  	; building closure for procedure?
   250 000000B3 48BF-                   	mov rdi, free_var_7
   250 000000B5 [3800000000000000] 
   251 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   251 000000BF [D50D000000000000] 
   252 000000C7 E8F50A0000              	call bind_primitive
   253                                  
   254                                  	; building closure for real?
   255 000000CC 48BF-                   	mov rdi, free_var_8
   255 000000CE [4000000000000000] 
   256 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   256 000000D8 [0B0E000000000000] 
   257 000000E0 E8DC0A0000              	call bind_primitive
   258                                  
   259                                  	; building closure for rational?
   260 000000E5 48BF-                   	mov rdi, free_var_9
   260 000000E7 [4800000000000000] 
   261 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   261 000000F1 [410E000000000000] 
   262 000000F9 E8C30A0000              	call bind_primitive
   263                                  
   264                                  	; building closure for boolean?
   265 000000FE 48BF-                   	mov rdi, free_var_10
   265 00000100 [5000000000000000] 
   266 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   266 0000010A [770E000000000000] 
   267 00000112 E8AA0A0000              	call bind_primitive
   268                                  
   269                                  	; building closure for number?
   270 00000117 48BF-                   	mov rdi, free_var_11
   270 00000119 [5800000000000000] 
   271 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   271 00000123 [AF0E000000000000] 
   272 0000012B E8910A0000              	call bind_primitive
   273                                  
   274                                  	; building closure for collection?
   275 00000130 48BF-                   	mov rdi, free_var_12
   275 00000132 [6000000000000000] 
   276 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   276 0000013C [E70E000000000000] 
   277 00000144 E8780A0000              	call bind_primitive
   278                                  
   279                                  	; building closure for cons
   280 00000149 48BF-                   	mov rdi, free_var_13
   280 0000014B [6800000000000000] 
   281 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   281 00000155 [1F0F000000000000] 
   282 0000015D E85F0A0000              	call bind_primitive
   283                                  
   284                                  	; building closure for display-sexpr
   285 00000162 48BF-                   	mov rdi, free_var_14
   285 00000164 [7000000000000000] 
   286 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   286 0000016E [530F000000000000] 
   287 00000176 E8460A0000              	call bind_primitive
   288                                  
   289                                  	; building closure for write-char
   290 0000017B 48BF-                   	mov rdi, free_var_15
   290 0000017D [7800000000000000] 
   291 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   291 00000187 [7D0F000000000000] 
   292 0000018F E82D0A0000              	call bind_primitive
   293                                  
   294                                  	; building closure for car
   295 00000194 48BF-                   	mov rdi, free_var_16
   295 00000196 [8000000000000000] 
   296 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   296 000001A0 [CB0F000000000000] 
   297 000001A8 E8140A0000              	call bind_primitive
   298                                  
   299                                  	; building closure for cdr
   300 000001AD 48BF-                   	mov rdi, free_var_17
   300 000001AF [8800000000000000] 
   301 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   301 000001B9 [F30F000000000000] 
   302 000001C1 E8FB090000              	call bind_primitive
   303                                  
   304                                  	; building closure for string-length
   305 000001C6 48BF-                   	mov rdi, free_var_18
   305 000001C8 [9000000000000000] 
   306 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   306 000001D2 [1B10000000000000] 
   307 000001DA E8E2090000              	call bind_primitive
   308                                  
   309                                  	; building closure for vector-length
   310 000001DF 48BF-                   	mov rdi, free_var_19
   310 000001E1 [9800000000000000] 
   311 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   311 000001EB [4810000000000000] 
   312 000001F3 E8C9090000              	call bind_primitive
   313                                  
   314                                  	; building closure for real->integer
   315 000001F8 48BF-                   	mov rdi, free_var_20
   315 000001FA [A000000000000000] 
   316 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   316 00000204 [7510000000000000] 
   317 0000020C E8B0090000              	call bind_primitive
   318                                  
   319                                  	; building closure for exit
   320 00000211 48BF-                   	mov rdi, free_var_21
   320 00000213 [A800000000000000] 
   321 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   321 0000021D [A810000000000000] 
   322 00000225 E897090000              	call bind_primitive
   323                                  
   324                                  	; building closure for integer->real
   325 0000022A 48BF-                   	mov rdi, free_var_22
   325 0000022C [B000000000000000] 
   326 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   326 00000236 [C510000000000000] 
   327 0000023E E87E090000              	call bind_primitive
   328                                  
   329                                  	; building closure for rational->real
   330 00000243 48BF-                   	mov rdi, free_var_23
   330 00000245 [B800000000000000] 
   331 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   331 0000024F [0211000000000000] 
   332 00000257 E865090000              	call bind_primitive
   333                                  
   334                                  	; building closure for char->integer
   335 0000025C 48BF-                   	mov rdi, free_var_24
   335 0000025E [C000000000000000] 
   336 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   336 00000268 [4111000000000000] 
   337 00000270 E84C090000              	call bind_primitive
   338                                  
   339                                  	; building closure for integer->char
   340 00000275 48BF-                   	mov rdi, free_var_25
   340 00000277 [C800000000000000] 
   341 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   341 00000281 [7611000000000000] 
   342 00000289 E833090000              	call bind_primitive
   343                                  
   344                                  	; building closure for trng
   345 0000028E 48BF-                   	mov rdi, free_var_26
   345 00000290 [D000000000000000] 
   346 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   346 0000029A [D011000000000000] 
   347 000002A2 E81A090000              	call bind_primitive
   348                                  
   349                                  	; building closure for zero?
   350 000002A7 48BF-                   	mov rdi, free_var_27
   350 000002A9 [D800000000000000] 
   351 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   351 000002B3 [F311000000000000] 
   352 000002BB E801090000              	call bind_primitive
   353                                  
   354                                  	; building closure for integer?
   355 000002C0 48BF-                   	mov rdi, free_var_28
   355 000002C2 [E000000000000000] 
   356 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   356 000002CC [4E12000000000000] 
   357 000002D4 E8E8080000              	call bind_primitive
   358                                  
   359                                  	; building closure for __bin-apply
   360 000002D9 48BF-                   	mov rdi, free_var_29
   360 000002DB [E800000000000000] 
   361 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   361 000002E5 [E90B000000000000] 
   362 000002ED E8CF080000              	call bind_primitive
   363                                  
   364                                  	; building closure for __bin-add-rr
   365 000002F2 48BF-                   	mov rdi, free_var_30
   365 000002F4 [F000000000000000] 
   366 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   366 000002FE [8B12000000000000] 
   367 00000306 E8B6080000              	call bind_primitive
   368                                  
   369                                  	; building closure for __bin-sub-rr
   370 0000030B 48BF-                   	mov rdi, free_var_31
   370 0000030D [F800000000000000] 
   371 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   371 00000317 [CF12000000000000] 
   372 0000031F E89D080000              	call bind_primitive
   373                                  
   374                                  	; building closure for __bin-mul-rr
   375 00000324 48BF-                   	mov rdi, free_var_32
   375 00000326 [0001000000000000] 
   376 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   376 00000330 [1313000000000000] 
   377 00000338 E884080000              	call bind_primitive
   378                                  
   379                                  	; building closure for __bin-div-rr
   380 0000033D 48BF-                   	mov rdi, free_var_33
   380 0000033F [0801000000000000] 
   381 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   381 00000349 [5713000000000000] 
   382 00000351 E86B080000              	call bind_primitive
   383                                  
   384                                  	; building closure for __bin-add-qq
   385 00000356 48BF-                   	mov rdi, free_var_34
   385 00000358 [1001000000000000] 
   386 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   386 00000362 [A913000000000000] 
   387 0000036A E852080000              	call bind_primitive
   388                                  
   389                                  	; building closure for __bin-sub-qq
   390 0000036F 48BF-                   	mov rdi, free_var_35
   390 00000371 [1801000000000000] 
   391 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   391 0000037B [1114000000000000] 
   392 00000383 E839080000              	call bind_primitive
   393                                  
   394                                  	; building closure for __bin-mul-qq
   395 00000388 48BF-                   	mov rdi, free_var_36
   395 0000038A [2001000000000000] 
   396 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   396 00000394 [7914000000000000] 
   397 0000039C E820080000              	call bind_primitive
   398                                  
   399                                  	; building closure for __bin-div-qq
   400 000003A1 48BF-                   	mov rdi, free_var_37
   400 000003A3 [2801000000000000] 
   401 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   401 000003AD [D114000000000000] 
   402 000003B5 E807080000              	call bind_primitive
   403                                  
   404                                  	; building closure for error
   405 000003BA 48BF-                   	mov rdi, free_var_38
   405 000003BC [3001000000000000] 
   406 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   406 000003C6 [9F15000000000000] 
   407 000003CE E8EE070000              	call bind_primitive
   408                                  
   409                                  	; building closure for __bin-less-than-rr
   410 000003D3 48BF-                   	mov rdi, free_var_39
   410 000003D5 [3801000000000000] 
   411 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   411 000003DF [3B16000000000000] 
   412 000003E7 E8D5070000              	call bind_primitive
   413                                  
   414                                  	; building closure for __bin-less-than-qq
   415 000003EC 48BF-                   	mov rdi, free_var_40
   415 000003EE [4001000000000000] 
   416 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   416 000003F8 [9216000000000000] 
   417 00000400 E8BC070000              	call bind_primitive
   418                                  
   419                                  	; building closure for __bin-equal-rr
   420 00000405 48BF-                   	mov rdi, free_var_41
   420 00000407 [4801000000000000] 
   421 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   421 00000411 [F516000000000000] 
   422 00000419 E8A3070000              	call bind_primitive
   423                                  
   424                                  	; building closure for __bin-equal-qq
   425 0000041E 48BF-                   	mov rdi, free_var_42
   425 00000420 [5001000000000000] 
   426 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   426 0000042A [4C17000000000000] 
   427 00000432 E88A070000              	call bind_primitive
   428                                  
   429                                  	; building closure for quotient
   430 00000437 48BF-                   	mov rdi, free_var_43
   430 00000439 [5801000000000000] 
   431 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   431 00000443 [AF17000000000000] 
   432 0000044B E871070000              	call bind_primitive
   433                                  
   434                                  	; building closure for remainder
   435 00000450 48BF-                   	mov rdi, free_var_44
   435 00000452 [6001000000000000] 
   436 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   436 0000045C [1518000000000000] 
   437 00000464 E858070000              	call bind_primitive
   438                                  
   439                                  	; building closure for set-car!
   440 00000469 48BF-                   	mov rdi, free_var_45
   440 0000046B [6801000000000000] 
   441 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   441 00000475 [7B18000000000000] 
   442 0000047D E83F070000              	call bind_primitive
   443                                  
   444                                  	; building closure for set-cdr!
   445 00000482 48BF-                   	mov rdi, free_var_46
   445 00000484 [7001000000000000] 
   446 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   446 0000048E [B118000000000000] 
   447 00000496 E826070000              	call bind_primitive
   448                                  
   449                                  	; building closure for string-ref
   450 0000049B 48BF-                   	mov rdi, free_var_47
   450 0000049D [7801000000000000] 
   451 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   451 000004A7 [E718000000000000] 
   452 000004AF E80D070000              	call bind_primitive
   453                                  
   454                                  	; building closure for vector-ref
   455 000004B4 48BF-                   	mov rdi, free_var_48
   455 000004B6 [8001000000000000] 
   456 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   456 000004C0 [5219000000000000] 
   457 000004C8 E8F4060000              	call bind_primitive
   458                                  
   459                                  	; building closure for vector-set!
   460 000004CD 48BF-                   	mov rdi, free_var_49
   460 000004CF [8801000000000000] 
   461 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   461 000004D9 [AE19000000000000] 
   462 000004E1 E8DB060000              	call bind_primitive
   463                                  
   464                                  	; building closure for string-set!
   465 000004E6 48BF-                   	mov rdi, free_var_50
   465 000004E8 [9001000000000000] 
   466 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   466 000004F2 [181A000000000000] 
   467 000004FA E8C2060000              	call bind_primitive
   468                                  
   469                                  	; building closure for make-vector
   470 000004FF 48BF-                   	mov rdi, free_var_51
   470 00000501 [9801000000000000] 
   471 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   471 0000050B [8D1A000000000000] 
   472 00000513 E8A9060000              	call bind_primitive
   473                                  
   474                                  	; building closure for make-string
   475 00000518 48BF-                   	mov rdi, free_var_52
   475 0000051A [A001000000000000] 
   476 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   476 00000524 [F71A000000000000] 
   477 0000052C E890060000              	call bind_primitive
   478                                  
   479                                  	; building closure for numerator
   480 00000531 48BF-                   	mov rdi, free_var_53
   480 00000533 [A801000000000000] 
   481 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   481 0000053D [691B000000000000] 
   482 00000545 E877060000              	call bind_primitive
   483                                  
   484                                  	; building closure for denominator
   485 0000054A 48BF-                   	mov rdi, free_var_54
   485 0000054C [B001000000000000] 
   486 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   486 00000556 [961B000000000000] 
   487 0000055E E85E060000              	call bind_primitive
   488                                  
   489                                  	; building closure for eq?
   490 00000563 48BF-                   	mov rdi, free_var_55
   490 00000565 [B801000000000000] 
   491 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   491 0000056F [C31B000000000000] 
   492 00000577 E845060000              	call bind_primitive
   493                                  
   494                                  	; building closure for apply
   495 0000057C 48BF-                   	mov rdi, free_var_56
   495 0000057E [C001000000000000] 
   496 00000586 48BE-                   	mov rsi, L_code_ptr_bin_apply
   496 00000588 [E90B000000000000] 
   497 00000590 E82C060000              	call bind_primitive
   498                                  
   499 00000595 48B8-                   	mov rax, qword (L_constants + 57)
   499 00000597 [3900000000000000] 
   500 0000059F 50                      	push rax
   501 000005A0 488B0425[68000000]      	mov rax, qword [free_var_13]
   502 000005A8 50                      	push rax
   503 000005A9 6A02                    	push 2
   504 000005AB 488B0425[C0010000]      	mov rax, qword [free_var_56]
   505 000005B3 803805                  	cmp byte [rax], T_closure 
   506 000005B6 0F85E30F0000                    jne L_code_ptr_error
   507                                  
   508 000005BC 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
   509                                  
   510 000005C0 53                              push rbx
   511                                  
   512 000005C1 FF5009                          call SOB_CLOSURE_CODE(rax)
   513                                  
   514                                          
   515 000005C4 4889C7                  	mov rdi, rax
   516 000005C7 E8C4000000              	call print_sexpr_if_not_void
   517                                  
   518 000005CC 48BF-                           mov rdi, fmt_memory_usage
   518 000005CE [A900000000000000] 
   519 000005D6 488B3425[30010000]              mov rsi, qword [top_of_memory]
   520 000005DE 4881EE[C8010000]                sub rsi, memory
   521 000005E5 B800000000                      mov rax, 0
   522 000005EA E8(00000000)                    call printf
   523 000005EF C9                      	leave
   524 000005F0 C3                      	ret
   525                                  
   526                                  L_error_non_closure:
   527 000005F1 488B3C25[00000000]              mov rdi, qword [stderr]
   528 000005F9 48BE-                           mov rsi, fmt_non_closure
   528 000005FB [E000000000000000] 
   529 00000603 B800000000                      mov rax, 0
   530 00000608 E8(00000000)                    call fprintf
   531 0000060D 48C7C0FEFFFFFF                  mov rax, -2
   532 00000614 E8(00000000)                    call exit
   533                                  
   534                                  L_error_improper_list:
   535 00000619 488B3C25[00000000]      	mov rdi, qword [stderr]
   536 00000621 48BE-                   	mov rsi, fmt_error_improper_list
   536 00000623 [0801000000000000] 
   537 0000062B B800000000              	mov rax, 0
   538 00000630 E8(00000000)            	call fprintf
   539 00000635 48C7C0F9FFFFFF          	mov rax, -7
   540 0000063C E8(00000000)            	call exit
   541                                  
   542                                  L_error_incorrect_arity_simple:
   543 00000641 488B3C25[00000000]              mov rdi, qword [stderr]
   544 00000649 48BE-                           mov rsi, fmt_incorrect_arity_simple
   544 0000064B [4A00000000000000] 
   545 00000653 EB12                            jmp L_error_incorrect_arity_common
   546                                  L_error_incorrect_arity_opt:
   547 00000655 488B3C25[00000000]              mov rdi, qword [stderr]
   548 0000065D 48BE-                           mov rsi, fmt_incorrect_arity_opt
   548 0000065F [7500000000000000] 
   549                                  L_error_incorrect_arity_common:
   550 00000667 5A                              pop rdx
   551 00000668 59                              pop rcx
   552 00000669 B800000000                      mov rax, 0
   553 0000066E E8(00000000)                    call fprintf
   554 00000673 48C7C0FAFFFFFF                  mov rax, -6
   555 0000067A E8(00000000)                    call exit
   556                                  
   557                                  section .data
   558                                  fmt_incorrect_arity_simple:
   559 0000004A 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   559 00000053 74656420256C642061-
   559 0000005C 7267756D656E74732C-
   559 00000065 206275742067697665-
   559 0000006E 6E20256C640A00     
   560                                  fmt_incorrect_arity_opt:
   561 00000075 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   561 0000007E 746564206174206C65-
   561 00000087 61737420256C642061-
   561 00000090 7267756D656E74732C-
   561 00000099 206275742067697665-
   561 000000A2 6E20256C640A00     
   562                                  fmt_memory_usage:
   563 000000A9 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   563 000000B2 6420256C6420627974-
   563 000000BB 6573206F662064796E-
   563 000000C4 616D6963616C6C792D-
   563 000000CD 616C6C6F6361746564-
   563 000000D6 206D656D6F72790A0A-
   563 000000DF 00                 
   564                                  fmt_non_closure:
   565 000000E0 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   565 000000E9 7074696E6720746F20-
   565 000000F2 6170706C792061206E-
   565 000000FB 6F6E2D636C6F737572-
   565 00000104 65210A00           
   566                                  fmt_error_improper_list:
   567 00000108 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   567 00000111 7267756D656E742069-
   567 0000011A 73206E6F7420612070-
   567 00000123 726F706572206C6973-
   567 0000012C 74210A00           
   568                                  
   569                                  section .bss
   570                                  memory:
   571 000001C8 <res 40000000>          	resb gbytes(1)
   572                                  
   573                                  section .data
   574                                  top_of_memory:
   575 00000130 [C801000000000000]              dq memory
   576                                  
   577                                  section .text
   578                                  malloc:
   579 0000067F 488B0425[30010000]              mov rax, qword [top_of_memory]
   580 00000687 48013C25[30010000]              add qword [top_of_memory], rdi
   581 0000068F C3                              ret
   582                                          
   583                                  print_sexpr_if_not_void:
   584 00000690 4881FF[00000000]        	cmp rdi, sob_void
   585 00000697 7501                    	jne print_sexpr
   586 00000699 C3                      	ret
   587                                  
   588                                  section .data
   589                                  fmt_void:
   590 00000138 233C766F69643E00        	db `#<void>\0`
   591                                  fmt_nil:
   592 00000140 282900                  	db `()\0`
   593                                  fmt_boolean_false:
   594 00000143 236600                  	db `#f\0`
   595                                  fmt_boolean_true:
   596 00000146 237400                  	db `#t\0`
   597                                  fmt_char_backslash:
   598 00000149 235C5C00                	db `#\\\\\0`
   599                                  fmt_char_dquote:
   600 0000014D 235C2200                	db `#\\"\0`
   601                                  fmt_char_simple:
   602 00000151 235C256300              	db `#\\%c\0`
   603                                  fmt_char_null:
   604 00000156 235C6E756C00            	db `#\\nul\0`
   605                                  fmt_char_bell:
   606 0000015C 235C62656C6C00          	db `#\\bell\0`
   607                                  fmt_char_backspace:
   608 00000163 235C6261636B737061-     	db `#\\backspace\0`
   608 0000016C 636500             
   609                                  fmt_char_tab:
   610 0000016F 235C74616200            	db `#\\tab\0`
   611                                  fmt_char_newline:
   612 00000175 235C6E65776C696E65-     	db `#\\newline\0`
   612 0000017E 00                 
   613                                  fmt_char_formfeed:
   614 0000017F 235C7061676500          	db `#\\page\0`
   615                                  fmt_char_return:
   616 00000186 235C72657475726E00      	db `#\\return\0`
   617                                  fmt_char_escape:
   618 0000018F 235C65736300            	db `#\\esc\0`
   619                                  fmt_char_space:
   620 00000195 235C737061636500        	db `#\\space\0`
   621                                  fmt_char_hex:
   622 0000019D 235C782530325800        	db `#\\x%02X\0`
   623                                  fmt_closure:
   624 000001A5 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   624 000001AE 206174203078253038-
   624 000001B7 5820656E763D307825-
   624 000001C0 30385820636F64653D-
   624 000001C9 3078253038583E00   
   625                                  fmt_lparen:
   626 000001D1 2800                    	db `(\0`
   627                                  fmt_dotted_pair:
   628 000001D3 202E2000                	db ` . \0`
   629                                  fmt_rparen:
   630 000001D7 2900                    	db `)\0`
   631                                  fmt_space:
   632 000001D9 2000                    	db ` \0`
   633                                  fmt_empty_vector:
   634 000001DB 23282900                	db `#()\0`
   635                                  fmt_vector:
   636 000001DF 232800                  	db `#(\0`
   637                                  fmt_real:
   638 000001E2 256600                  	db `%f\0`
   639                                  fmt_fraction:
   640 000001E5 256C642F256C6400        	db `%ld/%ld\0`
   641                                  fmt_zero:
   642 000001ED 3000                    	db `0\0`
   643                                  fmt_int:
   644 000001EF 256C6400                	db `%ld\0`
   645                                  fmt_unknown_sexpr_error:
   646 000001F3 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   646 000001FC 6F723A20556E6B6E6F-
   646 00000205 776E2074797065206F-
   646 0000020E 662073657870722028-
   646 00000217 3078253032582920   
   647 0000021F 617420616464726573-     	db `at address 0x%08X\n\n\0`
   647 00000228 73203078253038580A-
   647 00000231 0A00               
   648                                  fmt_dquote:
   649 00000233 2200                    	db `\"\0`
   650                                  fmt_string_char:
   651 00000235 256300                          db `%c\0`
   652                                  fmt_string_char_7:
   653 00000238 5C6100                          db `\\a\0`
   654                                  fmt_string_char_8:
   655 0000023B 5C6200                          db `\\b\0`
   656                                  fmt_string_char_9:
   657 0000023E 5C7400                          db `\\t\0`
   658                                  fmt_string_char_10:
   659 00000241 5C6E00                          db `\\n\0`
   660                                  fmt_string_char_11:
   661 00000244 5C7600                          db `\\v\0`
   662                                  fmt_string_char_12:
   663 00000247 5C6600                          db `\\f\0`
   664                                  fmt_string_char_13:
   665 0000024A 5C7200                          db `\\r\0`
   666                                  fmt_string_char_34:
   667 0000024D 5C2200                          db `\\"\0`
   668                                  fmt_string_char_92:
   669 00000250 5C5C00                          db `\\\\\0`
   670                                  fmt_string_char_hex:
   671 00000253 5C7825583B00                    db `\\x%X;\0`
   672                                  
   673                                  section .text
   674                                  
   675                                  print_sexpr:
   676                                  	ENTER
   676 0000069A C8000000            <1>  enter 0, 0
   676 0000069E 4883E4F0            <1>  and rsp, ~15
   677 000006A2 8A07                    	mov al, byte [rdi]
   678 000006A4 3C00                    	cmp al, T_void
   679 000006A6 744D                    	je .Lvoid
   680 000006A8 3C01                    	cmp al, T_nil
   681 000006AA 7458                    	je .Lnil
   682 000006AC 3C09                    	cmp al, T_boolean_false
   683 000006AE 7463                    	je .Lboolean_false
   684 000006B0 3C0A                    	cmp al, T_boolean_true
   685 000006B2 746E                    	je .Lboolean_true
   686 000006B4 3C02                    	cmp al, T_char
   687 000006B6 7479                    	je .Lchar
   688 000006B8 3C04                    	cmp al, T_symbol
   689 000006BA 0F84BB010000            	je .Lsymbol
   690 000006C0 3C21                    	cmp al, T_pair
   691 000006C2 0F84D6010000            	je .Lpair
   692 000006C8 3C22                    	cmp al, T_vector
   693 000006CA 0F8478020000            	je .Lvector
   694 000006D0 3C05                    	cmp al, T_closure
   695 000006D2 0F8489010000            	je .Lclosure
   696 000006D8 3C12                    	cmp al, T_real
   697 000006DA 0F84F3020000            	je .Lreal
   698 000006E0 3C11                    	cmp al, T_rational
   699 000006E2 0F8419030000            	je .Lrational
   700 000006E8 3C03                    	cmp al, T_string
   701 000006EA 0F8452030000            	je .Lstring
   702                                  
   703 000006F0 E98A040000              	jmp .Lunknown_sexpr_type
   704                                  
   705                                  .Lvoid:
   706 000006F5 48BF-                   	mov rdi, fmt_void
   706 000006F7 [3801000000000000] 
   707 000006FF E9AF040000              	jmp .Lemit
   708                                  
   709                                  .Lnil:
   710 00000704 48BF-                   	mov rdi, fmt_nil
   710 00000706 [4001000000000000] 
   711 0000070E E9A0040000              	jmp .Lemit
   712                                  
   713                                  .Lboolean_false:
   714 00000713 48BF-                   	mov rdi, fmt_boolean_false
   714 00000715 [4301000000000000] 
   715 0000071D E991040000              	jmp .Lemit
   716                                  
   717                                  .Lboolean_true:
   718 00000722 48BF-                   	mov rdi, fmt_boolean_true
   718 00000724 [4601000000000000] 
   719 0000072C E982040000              	jmp .Lemit
   720                                  
   721                                  .Lchar:
   722 00000731 8A4701                  	mov al, byte [rdi + 1]
   723 00000734 3C20                    	cmp al, ' '
   724 00000736 7E28                    	jle .Lchar_whitespace
   725 00000738 3C5C                    	cmp al, 92 		; backslash
   726 0000073A 0F847C000000            	je .Lchar_backslash
   727 00000740 3C22                    	cmp al, '"'
   728 00000742 0F8483000000            	je .Lchar_dquote
   729 00000748 4825FF000000            	and rax, 255
   730 0000074E 48BF-                   	mov rdi, fmt_char_simple
   730 00000750 [5101000000000000] 
   731 00000758 4889C6                  	mov rsi, rax
   732 0000075B E953040000              	jmp .Lemit
   733                                  
   734                                  .Lchar_whitespace:
   735 00000760 3C00                    	cmp al, 0
   736 00000762 7476                    	je .Lchar_null
   737 00000764 3C07                    	cmp al, 7
   738 00000766 0F847D000000            	je .Lchar_bell
   739 0000076C 3C08                    	cmp al, 8
   740 0000076E 0F8484000000            	je .Lchar_backspace
   741 00000774 3C09                    	cmp al, 9
   742 00000776 0F848B000000            	je .Lchar_tab
   743 0000077C 3C0A                    	cmp al, 10
   744 0000077E 0F8492000000            	je .Lchar_newline
   745 00000784 3C0C                    	cmp al, 12
   746 00000786 0F8499000000            	je .Lchar_formfeed
   747 0000078C 3C0D                    	cmp al, 13
   748 0000078E 0F84A0000000            	je .Lchar_return
   749 00000794 3C1B                    	cmp al, 27
   750 00000796 0F84A7000000            	je .Lchar_escape
   751 0000079C 4825FF000000            	and rax, 255
   752 000007A2 3C20                    	cmp al, ' '
   753 000007A4 0F84A8000000            	je .Lchar_space
   754 000007AA 48BF-                   	mov rdi, fmt_char_hex
   754 000007AC [9D01000000000000] 
   755 000007B4 4889C6                  	mov rsi, rax
   756 000007B7 E9F7030000              	jmp .Lemit	
   757                                  
   758                                  .Lchar_backslash:
   759 000007BC 48BF-                   	mov rdi, fmt_char_backslash
   759 000007BE [4901000000000000] 
   760 000007C6 E9E8030000              	jmp .Lemit
   761                                  
   762                                  .Lchar_dquote:
   763 000007CB 48BF-                   	mov rdi, fmt_char_dquote
   763 000007CD [4D01000000000000] 
   764 000007D5 E9D9030000              	jmp .Lemit
   765                                  
   766                                  .Lchar_null:
   767 000007DA 48BF-                   	mov rdi, fmt_char_null
   767 000007DC [5601000000000000] 
   768 000007E4 E9CA030000              	jmp .Lemit
   769                                  
   770                                  .Lchar_bell:
   771 000007E9 48BF-                   	mov rdi, fmt_char_bell
   771 000007EB [5C01000000000000] 
   772 000007F3 E9BB030000              	jmp .Lemit
   773                                  
   774                                  .Lchar_backspace:
   775 000007F8 48BF-                   	mov rdi, fmt_char_backspace
   775 000007FA [6301000000000000] 
   776 00000802 E9AC030000              	jmp .Lemit
   777                                  
   778                                  .Lchar_tab:
   779 00000807 48BF-                   	mov rdi, fmt_char_tab
   779 00000809 [6F01000000000000] 
   780 00000811 E99D030000              	jmp .Lemit
   781                                  
   782                                  .Lchar_newline:
   783 00000816 48BF-                   	mov rdi, fmt_char_newline
   783 00000818 [7501000000000000] 
   784 00000820 E98E030000              	jmp .Lemit
   785                                  
   786                                  .Lchar_formfeed:
   787 00000825 48BF-                   	mov rdi, fmt_char_formfeed
   787 00000827 [7F01000000000000] 
   788 0000082F E97F030000              	jmp .Lemit
   789                                  
   790                                  .Lchar_return:
   791 00000834 48BF-                   	mov rdi, fmt_char_return
   791 00000836 [8601000000000000] 
   792 0000083E E970030000              	jmp .Lemit
   793                                  
   794                                  .Lchar_escape:
   795 00000843 48BF-                   	mov rdi, fmt_char_escape
   795 00000845 [8F01000000000000] 
   796 0000084D E961030000              	jmp .Lemit
   797                                  
   798                                  .Lchar_space:
   799 00000852 48BF-                   	mov rdi, fmt_char_space
   799 00000854 [9501000000000000] 
   800 0000085C E952030000              	jmp .Lemit
   801                                  
   802                                  .Lclosure:
   803 00000861 4889FE                  	mov rsi, qword rdi
   804 00000864 48BF-                   	mov rdi, fmt_closure
   804 00000866 [A501000000000000] 
   805 0000086E 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   806 00000872 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   807 00000876 E938030000              	jmp .Lemit
   808                                  
   809                                  .Lsymbol:
   810 0000087B 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   811 0000087F BE01000000              	mov rsi, 1		 ; size = 1 byte
   812 00000884 488B5701                	mov rdx, qword [rdi + 1] ; length
   813 00000888 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   814 0000088C 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   815 00000894 E8(00000000)            	call fwrite
   816 00000899 E921030000              	jmp .Lend
   817                                  	
   818                                  .Lpair:
   819 0000089E 57                      	push rdi
   820 0000089F 48BF-                   	mov rdi, fmt_lparen
   820 000008A1 [D101000000000000] 
   821 000008A9 B800000000              	mov rax, 0
   822                                          ENTER
   822 000008AE C8000000            <1>  enter 0, 0
   822 000008B2 4883E4F0            <1>  and rsp, ~15
   823 000008B6 E8(00000000)            	call printf
   824                                          LEAVE
   824 000008BB C9                  <1>  leave
   825 000008BC 488B3C24                	mov rdi, qword [rsp] 	; pair
   826 000008C0 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   827 000008C4 E8D1FDFFFF              	call print_sexpr
   828 000008C9 5F                      	pop rdi 		; pair
   829 000008CA 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   830                                  .Lcdr:
   831 000008CE 8A07                    	mov al, byte [rdi]
   832 000008D0 3C01                    	cmp al, T_nil
   833 000008D2 7435                    	je .Lcdr_nil
   834 000008D4 3C21                    	cmp al, T_pair
   835 000008D6 7447                    	je .Lcdr_pair
   836 000008D8 57                      	push rdi
   837 000008D9 48BF-                   	mov rdi, fmt_dotted_pair
   837 000008DB [D301000000000000] 
   838 000008E3 B800000000              	mov rax, 0
   839 000008E8 E8(00000000)            	call printf
   840 000008ED 5F                      	pop rdi
   841 000008EE E8A7FDFFFF              	call print_sexpr
   842 000008F3 48BF-                   	mov rdi, fmt_rparen
   842 000008F5 [D701000000000000] 
   843 000008FD B800000000              	mov rax, 0
   844 00000902 E8(00000000)            	call printf
   845                                  	LEAVE
   845 00000907 C9                  <1>  leave
   846 00000908 C3                      	ret
   847                                  
   848                                  .Lcdr_nil:
   849 00000909 48BF-                   	mov rdi, fmt_rparen
   849 0000090B [D701000000000000] 
   850 00000913 B800000000              	mov rax, 0
   851 00000918 E8(00000000)            	call printf
   852                                  	LEAVE
   852 0000091D C9                  <1>  leave
   853 0000091E C3                      	ret
   854                                  
   855                                  .Lcdr_pair:
   856 0000091F 57                      	push rdi
   857 00000920 48BF-                   	mov rdi, fmt_space
   857 00000922 [D901000000000000] 
   858 0000092A B800000000              	mov rax, 0
   859 0000092F E8(00000000)            	call printf
   860 00000934 488B3C24                	mov rdi, qword [rsp]
   861 00000938 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   862 0000093C E859FDFFFF              	call print_sexpr
   863 00000941 5F                      	pop rdi
   864 00000942 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   865 00000946 EB86                    	jmp .Lcdr
   866                                  
   867                                  .Lvector:
   868 00000948 488B4701                	mov rax, qword [rdi + 1] ; length
   869 0000094C 4883F800                	cmp rax, 0
   870 00000950 7472                    	je .Lvector_empty
   871 00000952 57                      	push rdi
   872 00000953 48BF-                   	mov rdi, fmt_vector
   872 00000955 [DF01000000000000] 
   873 0000095D B800000000              	mov rax, 0
   874 00000962 E8(00000000)            	call printf
   875 00000967 488B3C24                	mov rdi, qword [rsp]
   876 0000096B FF7701                  	push qword [rdi + 1]
   877 0000096E 6A01                    	push 1
   878 00000970 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   879 00000974 E821FDFFFF              	call print_sexpr
   880                                  .Lvector_loop:
   881                                  	; [rsp] index
   882                                  	; [rsp + 8*1] limit
   883                                  	; [rsp + 8*2] vector
   884 00000979 488B0424                	mov rax, qword [rsp]
   885 0000097D 483B442408              	cmp rax, qword [rsp + 8*1]
   886 00000982 742D                    	je .Lvector_end
   887 00000984 48BF-                   	mov rdi, fmt_space
   887 00000986 [D901000000000000] 
   888 0000098E B800000000              	mov rax, 0
   889 00000993 E8(00000000)            	call printf
   890 00000998 488B0424                	mov rax, qword [rsp]
   891 0000099C 488B5C2410              	mov rbx, qword [rsp + 8*2]
   892 000009A1 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   893 000009A6 E8EFFCFFFF              	call print_sexpr
   894 000009AB 48FF0424                	inc qword [rsp]
   895 000009AF EBC8                    	jmp .Lvector_loop
   896                                  
   897                                  .Lvector_end:
   898 000009B1 4883C418                	add rsp, 8*3
   899 000009B5 48BF-                   	mov rdi, fmt_rparen
   899 000009B7 [D701000000000000] 
   900 000009BF E9EF010000              	jmp .Lemit	
   901                                  
   902                                  .Lvector_empty:
   903 000009C4 48BF-                   	mov rdi, fmt_empty_vector
   903 000009C6 [DB01000000000000] 
   904 000009CE E9E0010000              	jmp .Lemit
   905                                  
   906                                  .Lreal:
   907 000009D3 FF7701                  	push qword [rdi + 1]
   908 000009D6 F20F100424              	movsd xmm0, qword [rsp]
   909 000009DB 4883C408                	add rsp, 8*1
   910 000009DF 48BF-                   	mov rdi, fmt_real
   910 000009E1 [E201000000000000] 
   911 000009E9 B801000000              	mov rax, 1
   912                                  	ENTER
   912 000009EE C8000000            <1>  enter 0, 0
   912 000009F2 4883E4F0            <1>  and rsp, ~15
   913 000009F6 E8(00000000)            	call printf
   914                                  	LEAVE
   914 000009FB C9                  <1>  leave
   915 000009FC E9BE010000              	jmp .Lend
   916                                  
   917                                  .Lrational:
   918 00000A01 488B7701                	mov rsi, qword [rdi + 1]
   919 00000A05 488B5709                	mov rdx, qword [rdi + 1 + 8]
   920 00000A09 4883FE00                	cmp rsi, 0
   921 00000A0D 7415                    	je .Lrat_zero
   922 00000A0F 4883FA01                	cmp rdx, 1
   923 00000A13 741E                    	je .Lrat_int
   924 00000A15 48BF-                   	mov rdi, fmt_fraction
   924 00000A17 [E501000000000000] 
   925 00000A1F E98F010000              	jmp .Lemit
   926                                  
   927                                  .Lrat_zero:
   928 00000A24 48BF-                   	mov rdi, fmt_zero
   928 00000A26 [ED01000000000000] 
   929 00000A2E E980010000              	jmp .Lemit
   930                                  
   931                                  .Lrat_int:
   932 00000A33 48BF-                   	mov rdi, fmt_int
   932 00000A35 [EF01000000000000] 
   933 00000A3D E971010000              	jmp .Lemit
   934                                  
   935                                  .Lstring:
   936 00000A42 488D4709                	lea rax, [rdi + 1 + 8]
   937 00000A46 50                      	push rax
   938 00000A47 FF7701                  	push qword [rdi + 1]
   939 00000A4A 48BF-                   	mov rdi, fmt_dquote
   939 00000A4C [3302000000000000] 
   940 00000A54 B800000000              	mov rax, 0
   941                                  	ENTER
   941 00000A59 C8000000            <1>  enter 0, 0
   941 00000A5D 4883E4F0            <1>  and rsp, ~15
   942 00000A61 E8(00000000)            	call printf
   943                                  	LEAVE
   943 00000A66 C9                  <1>  leave
   944                                  .Lstring_loop:
   945                                  	; qword [rsp]: limit
   946                                  	; qword [rsp + 8*1]: char *
   947 00000A67 48833C2400              	cmp qword [rsp], 0
   948 00000A6C 0F84FD000000            	je .Lstring_end
   949 00000A72 488B442408              	mov rax, qword [rsp + 8*1]
   950 00000A77 8A00                    	mov al, byte [rax]
   951 00000A79 4825FF000000            	and rax, 255
   952 00000A7F 3C07                    	cmp al, 7
   953 00000A81 7468                            je .Lstring_char_7
   954 00000A83 3C08                            cmp al, 8
   955 00000A85 7470                            je .Lstring_char_8
   956 00000A87 3C09                            cmp al, 9
   957 00000A89 7478                            je .Lstring_char_9
   958 00000A8B 3C0A                            cmp al, 10
   959 00000A8D 0F847C000000                    je .Lstring_char_10
   960 00000A93 3C0B                            cmp al, 11
   961 00000A95 0F8480000000                    je .Lstring_char_11
   962 00000A9B 3C0C                            cmp al, 12
   963 00000A9D 0F8484000000                    je .Lstring_char_12
   964 00000AA3 3C0D                            cmp al, 13
   965 00000AA5 0F8488000000                    je .Lstring_char_13
   966 00000AAB 3C22                            cmp al, 34
   967 00000AAD 0F848C000000                    je .Lstring_char_34
   969 00000AB3 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   970 00000AB5 3C20                            cmp al, ' '
   971 00000AB7 0F8CA0000000                    jl .Lstring_char_hex
   972 00000ABD 48BF-                           mov rdi, fmt_string_char
   972 00000ABF [3502000000000000] 
   973 00000AC7 4889C6                          mov rsi, rax
   974                                  .Lstring_char_emit:
   975 00000ACA B800000000                      mov rax, 0
   976                                          ENTER
   976 00000ACF C8000000            <1>  enter 0, 0
   976 00000AD3 4883E4F0            <1>  and rsp, ~15
   977 00000AD7 E8(00000000)                    call printf
   978                                          LEAVE
   978 00000ADC C9                  <1>  leave
   979 00000ADD 48FF0C24                        dec qword [rsp]
   980 00000AE1 48FF442408                      inc qword [rsp + 8*1]
   981 00000AE6 E97CFFFFFF                      jmp .Lstring_loop
   982                                  
   983                                  .Lstring_char_7:
   984 00000AEB 48BF-                           mov rdi, fmt_string_char_7
   984 00000AED [3802000000000000] 
   985 00000AF5 EBD3                            jmp .Lstring_char_emit
   986                                  
   987                                  .Lstring_char_8:
   988 00000AF7 48BF-                           mov rdi, fmt_string_char_8
   988 00000AF9 [3B02000000000000] 
   989 00000B01 EBC7                            jmp .Lstring_char_emit
   990                                          
   991                                  .Lstring_char_9:
   992 00000B03 48BF-                           mov rdi, fmt_string_char_9
   992 00000B05 [3E02000000000000] 
   993 00000B0D EBBB                            jmp .Lstring_char_emit
   994                                  
   995                                  .Lstring_char_10:
   996 00000B0F 48BF-                           mov rdi, fmt_string_char_10
   996 00000B11 [4102000000000000] 
   997 00000B19 EBAF                            jmp .Lstring_char_emit
   998                                  
   999                                  .Lstring_char_11:
  1000 00000B1B 48BF-                           mov rdi, fmt_string_char_11
  1000 00000B1D [4402000000000000] 
  1001 00000B25 EBA3                            jmp .Lstring_char_emit
  1002                                  
  1003                                  .Lstring_char_12:
  1004 00000B27 48BF-                           mov rdi, fmt_string_char_12
  1004 00000B29 [4702000000000000] 
  1005 00000B31 EB97                            jmp .Lstring_char_emit
  1006                                  
  1007                                  .Lstring_char_13:
  1008 00000B33 48BF-                           mov rdi, fmt_string_char_13
  1008 00000B35 [4A02000000000000] 
  1009 00000B3D EB8B                            jmp .Lstring_char_emit
  1010                                  
  1011                                  .Lstring_char_34:
  1012 00000B3F 48BF-                           mov rdi, fmt_string_char_34
  1012 00000B41 [4D02000000000000] 
  1013 00000B49 E97CFFFFFF                      jmp .Lstring_char_emit
  1014                                  
  1015                                  .Lstring_char_92:
  1016 00000B4E 48BF-                           mov rdi, fmt_string_char_92
  1016 00000B50 [5002000000000000] 
  1017 00000B58 E96DFFFFFF                      jmp .Lstring_char_emit
  1018                                  
  1019                                  .Lstring_char_hex:
  1020 00000B5D 48BF-                           mov rdi, fmt_string_char_hex
  1020 00000B5F [5302000000000000] 
  1021 00000B67 4889C6                          mov rsi, rax
  1022 00000B6A E95BFFFFFF                      jmp .Lstring_char_emit        
  1023                                  
  1024                                  .Lstring_end:
  1025 00000B6F 4883C410                	add rsp, 8 * 2
  1026 00000B73 48BF-                   	mov rdi, fmt_dquote
  1026 00000B75 [3302000000000000] 
  1027 00000B7D EB34                    	jmp .Lemit
  1028                                  
  1029                                  .Lunknown_sexpr_type:
  1030 00000B7F 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1030 00000B81 [F301000000000000] 
  1031 00000B89 4825FF000000            	and rax, 255
  1032 00000B8F 4889C2                  	mov rdx, rax
  1033 00000B92 4889F9                  	mov rcx, rdi
  1034 00000B95 488B3C25[00000000]      	mov rdi, qword [stderr]
  1035 00000B9D B800000000              	mov rax, 0
  1036 00000BA2 E8(00000000)            	call fprintf
  1037 00000BA7 48C7C0FFFFFFFF          	mov rax, -1
  1038 00000BAE E8(00000000)            	call exit
  1039                                  
  1040                                  .Lemit:
  1041 00000BB3 B800000000              	mov rax, 0
  1042 00000BB8 E8(00000000)            	call printf
  1043 00000BBD EB00                    	jmp .Lend
  1044                                  
  1045                                  .Lend:
  1046                                  	LEAVE
  1046 00000BBF C9                  <1>  leave
  1047 00000BC0 C3                      	ret
  1048                                  
  1049                                  ;;; rdi: address of free variable
  1050                                  ;;; rsi: address of code-pointer
  1051                                  bind_primitive:
  1052                                          ENTER
  1052 00000BC1 C8000000            <1>  enter 0, 0
  1052 00000BC5 4883E4F0            <1>  and rsp, ~15
  1053 00000BC9 57                              push rdi
  1054 00000BCA BF11000000                      mov rdi, (1 + 8 + 8)
  1055 00000BCF E8ABFAFFFF                      call malloc
  1056 00000BD4 5F                              pop rdi
  1057 00000BD5 C60005                          mov byte [rax], T_closure
  1058 00000BD8 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1059 00000BE0 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1060 00000BE4 488907                          mov qword [rdi], rax
  1061                                          LEAVE
  1061 00000BE7 C9                  <1>  leave
  1062 00000BE8 C3                              ret
  1063                                  
  1064                                  ; ; PLEASE IMPLEMENT THIS PROCEDURE
  1065                                  ; L_code_ptr_bin_apply:
  1066                                          
  1067                                  ;         ENTER
  1068                                  ;         cmp COUNT, 3
  1069                                  ;         jne L_error_arg_count_3
  1070                                  
  1071                                  ;         mov rax, PARAM(0)       ; rax <- closure
  1072                                  ;         cmp byte [rax], T_closure ;  is it a closure? 
  1073                                  ;         jne L_error_non_closure ;; if not closure jmp kibinimat
  1074                                  ;         ;; make sure it is a closure                
  1075                                  
  1076                                  ;         ;; goal to apply closure on 2 params
  1077                                  ;         mov rbx, qword PARAM(2)
  1078                                  ;         push rbx                ; push arg push 12
  1079                                  ;         mov rcx, qword PARAM(1)
  1080                                  ;         push rcx                ; push arg push '(69 70)
  1081                                          
  1082                                  ;         mov rbx, 2
  1083                                  ;         push rbx
  1084                                  
  1085                                  ; 	cmp byte [rax], T_closure 
  1086                                  ;         jne L_code_ptr_error
  1087                                  
  1088                                  ;         mov rbx, SOB_CLOSURE_ENV(rax)
  1089                                  ;         push rbx
  1090                                  
  1091                                  ;         call SOB_CLOSURE_CODE(rax)
  1092                                  
  1093                                  ; 	; mov rdi, rax
  1094                                  ; 	; call print_sexpr_if_not_void
  1095                                  
  1096                                  ;         LEAVE
  1097                                  ;         ret AND_KILL_FRAME(3)
  1098                                  
  1099                                  L_code_ptr_bin_apply:
  1100                                          
  1101                                          ENTER
  1101 00000BE9 C8000000            <1>  enter 0, 0
  1101 00000BED 4883E4F0            <1>  and rsp, ~15
  1102 00000BF1 48837D1802                      cmp COUNT, 2
  1103 00000BF6 0F850D110000                    jne L_error_arg_count_2
  1104                                  
  1105 00000BFC 488B4520                        mov rax, PARAM(0)       ; rax <- closure
  1106 00000C00 803805                          cmp byte [rax], T_closure ;  is it a closure? 
  1107 00000C03 0F85E8F9FFFF                    jne L_error_non_closure ;; if not closure jmp kibinimat
  1108                                          ;; make sure it is a closure
  1109                                  
  1110                                          
  1111                                                      
  1112                                  
  1113                                          ;; goal to apply closure on 2 params
  1114 00000C09 4C8B4D28                        mov r9, qword PARAM(1)
  1115                                          assert_pair(r9)
  1115 00000C0D 41803921            <1>  cmp byte [%1], %2
  1115 00000C11 0F85A2110000        <1>  jne L_error_incorrect_type
  1116 00000C17 498B4909                        mov rcx, qword SOB_PAIR_CDR(r9)
  1117 00000C1B 4989C9                          mov r9, qword rcx
  1118                                          assert_pair(r9)
  1118 00000C1E 41803921            <1>  cmp byte [%1], %2
  1118 00000C22 0F8591110000        <1>  jne L_error_incorrect_type
  1119 00000C28 498B4901                        mov rcx, qword SOB_PAIR_CAR(r9)
  1120 00000C2C 51                              push rcx
  1121                                  
  1122                                  
  1123 00000C2D 4C8B4D28                        mov r9, PARAM(1)   ; car of the pair in the stack
  1124                                          assert_pair(r9)
  1124 00000C31 41803921            <1>  cmp byte [%1], %2
  1124 00000C35 0F857E110000        <1>  jne L_error_incorrect_type
  1125 00000C3B 498B4901                        mov rcx, qword SOB_PAIR_CAR(r9)
  1126 00000C3F 51                              push rcx
  1127                                  
  1128                                          
  1129 00000C40 BB02000000                      mov rbx, 2
  1130 00000C45 53                              push rbx
  1131                                  
  1132 00000C46 803805                  	cmp byte [rax], T_closure 
  1133 00000C49 0F8550090000                    jne L_code_ptr_error
  1134                                  
  1135 00000C4F 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  1136 00000C53 53                              push rbx
  1137                                  
  1138 00000C54 FF5009                          call SOB_CLOSURE_CODE(rax)
  1139                                  
  1140                                  	; mov rdi, rax
  1141                                  	; call print_sexpr_if_not_void
  1142                                  
  1143                                          LEAVE
  1143 00000C57 C9                  <1>  leave
  1144 00000C58 C22000                          ret AND_KILL_FRAME(2)
  1145                                  
  1146                                  ; L_code_ptr_bin_apply:
  1147                                  ;         ENTER
  1148                                  ;         cmp COUNT, 1
  1149                                  ;         jne L_error_arg_count_1
  1150                                  ;         mov r9, PARAM(0)
  1151                                  ;         assert_pair(r9)
  1152                                  ;         mov rax, SOB_PAIR_CAR(r9)
  1153                                  ;         LEAVE
  1154                                  ;         ret AND_KILL_FRAME(1)
  1155                                  
  1156                                  
  1157                                  	
  1158                                  L_code_ptr_is_null:
  1159                                          ENTER
  1159 00000C5B C8000000            <1>  enter 0, 0
  1159 00000C5F 4883E4F0            <1>  and rsp, ~15
  1160 00000C63 48837D1801                      cmp COUNT, 1
  1161 00000C68 0F856F100000                    jne L_error_arg_count_1
  1162 00000C6E 488B4520                        mov rax, PARAM(0)
  1163 00000C72 803801                          cmp byte [rax], T_nil
  1164 00000C75 750C                            jne .L_false
  1165 00000C77 48B8-                           mov rax, sob_boolean_true
  1165 00000C79 [0300000000000000] 
  1166 00000C81 EB0A                            jmp .L_end
  1167                                  .L_false:
  1168 00000C83 48B8-                           mov rax, sob_boolean_false
  1168 00000C85 [0200000000000000] 
  1169                                  .L_end:
  1170                                          LEAVE
  1170 00000C8D C9                  <1>  leave
  1171 00000C8E C21800                          ret AND_KILL_FRAME(1)
  1172                                  
  1173                                  L_code_ptr_is_pair:
  1174                                          ENTER
  1174 00000C91 C8000000            <1>  enter 0, 0
  1174 00000C95 4883E4F0            <1>  and rsp, ~15
  1175 00000C99 48837D1801                      cmp COUNT, 1
  1176 00000C9E 0F8539100000                    jne L_error_arg_count_1
  1177 00000CA4 488B4520                        mov rax, PARAM(0)
  1178 00000CA8 803821                          cmp byte [rax], T_pair
  1179 00000CAB 750C                            jne .L_false
  1180 00000CAD 48B8-                           mov rax, sob_boolean_true
  1180 00000CAF [0300000000000000] 
  1181 00000CB7 EB0A                            jmp .L_end
  1182                                  .L_false:
  1183 00000CB9 48B8-                           mov rax, sob_boolean_false
  1183 00000CBB [0200000000000000] 
  1184                                  .L_end:
  1185                                          LEAVE
  1185 00000CC3 C9                  <1>  leave
  1186 00000CC4 C21800                          ret AND_KILL_FRAME(1)
  1187                                          
  1188                                  L_code_ptr_is_void:
  1189                                          ENTER
  1189 00000CC7 C8000000            <1>  enter 0, 0
  1189 00000CCB 4883E4F0            <1>  and rsp, ~15
  1190 00000CCF 48837D1801                      cmp COUNT, 1
  1191 00000CD4 0F8503100000                    jne L_error_arg_count_1
  1192 00000CDA 488B4520                        mov rax, PARAM(0)
  1193 00000CDE 803800                          cmp byte [rax], T_void
  1194 00000CE1 750C                            jne .L_false
  1195 00000CE3 48B8-                           mov rax, sob_boolean_true
  1195 00000CE5 [0300000000000000] 
  1196 00000CED EB0A                            jmp .L_end
  1197                                  .L_false:
  1198 00000CEF 48B8-                           mov rax, sob_boolean_false
  1198 00000CF1 [0200000000000000] 
  1199                                  .L_end:
  1200                                          LEAVE
  1200 00000CF9 C9                  <1>  leave
  1201 00000CFA C21800                          ret AND_KILL_FRAME(1)
  1202                                  
  1203                                  L_code_ptr_is_char:
  1204                                          ENTER
  1204 00000CFD C8000000            <1>  enter 0, 0
  1204 00000D01 4883E4F0            <1>  and rsp, ~15
  1205 00000D05 48837D1801                      cmp COUNT, 1
  1206 00000D0A 0F85CD0F0000                    jne L_error_arg_count_1
  1207 00000D10 488B4520                        mov rax, PARAM(0)
  1208 00000D14 803802                          cmp byte [rax], T_char
  1209 00000D17 750C                            jne .L_false
  1210 00000D19 48B8-                           mov rax, sob_boolean_true
  1210 00000D1B [0300000000000000] 
  1211 00000D23 EB0A                            jmp .L_end
  1212                                  .L_false:
  1213 00000D25 48B8-                           mov rax, sob_boolean_false
  1213 00000D27 [0200000000000000] 
  1214                                  .L_end:
  1215                                          LEAVE
  1215 00000D2F C9                  <1>  leave
  1216 00000D30 C21800                          ret AND_KILL_FRAME(1)
  1217                                  
  1218                                  L_code_ptr_is_string:
  1219                                          ENTER
  1219 00000D33 C8000000            <1>  enter 0, 0
  1219 00000D37 4883E4F0            <1>  and rsp, ~15
  1220 00000D3B 48837D1801                      cmp COUNT, 1
  1221 00000D40 0F85970F0000                    jne L_error_arg_count_1
  1222 00000D46 488B4520                        mov rax, PARAM(0)
  1223 00000D4A 803803                          cmp byte [rax], T_string
  1224 00000D4D 750C                            jne .L_false
  1225 00000D4F 48B8-                           mov rax, sob_boolean_true
  1225 00000D51 [0300000000000000] 
  1226 00000D59 EB0A                            jmp .L_end
  1227                                  .L_false:
  1228 00000D5B 48B8-                           mov rax, sob_boolean_false
  1228 00000D5D [0200000000000000] 
  1229                                  .L_end:
  1230                                          LEAVE
  1230 00000D65 C9                  <1>  leave
  1231 00000D66 C21800                          ret AND_KILL_FRAME(1)
  1232                                  
  1233                                  L_code_ptr_is_symbol:
  1234                                          ENTER
  1234 00000D69 C8000000            <1>  enter 0, 0
  1234 00000D6D 4883E4F0            <1>  and rsp, ~15
  1235 00000D71 48837D1801                      cmp COUNT, 1
  1236 00000D76 0F85610F0000                    jne L_error_arg_count_1
  1237 00000D7C 488B4520                        mov rax, PARAM(0)
  1238 00000D80 803804                          cmp byte [rax], T_symbol
  1239 00000D83 750C                            jne .L_false
  1240 00000D85 48B8-                           mov rax, sob_boolean_true
  1240 00000D87 [0300000000000000] 
  1241 00000D8F EB0A                            jmp .L_end
  1242                                  .L_false:
  1243 00000D91 48B8-                           mov rax, sob_boolean_false
  1243 00000D93 [0200000000000000] 
  1244                                  .L_end:
  1245                                          LEAVE
  1245 00000D9B C9                  <1>  leave
  1246 00000D9C C21800                          ret AND_KILL_FRAME(1)
  1247                                  
  1248                                  L_code_ptr_is_vector:
  1249                                          ENTER
  1249 00000D9F C8000000            <1>  enter 0, 0
  1249 00000DA3 4883E4F0            <1>  and rsp, ~15
  1250 00000DA7 48837D1801                      cmp COUNT, 1
  1251 00000DAC 0F852B0F0000                    jne L_error_arg_count_1
  1252 00000DB2 488B4520                        mov rax, PARAM(0)
  1253 00000DB6 803822                          cmp byte [rax], T_vector
  1254 00000DB9 750C                            jne .L_false
  1255 00000DBB 48B8-                           mov rax, sob_boolean_true
  1255 00000DBD [0300000000000000] 
  1256 00000DC5 EB0A                            jmp .L_end
  1257                                  .L_false:
  1258 00000DC7 48B8-                           mov rax, sob_boolean_false
  1258 00000DC9 [0200000000000000] 
  1259                                  .L_end:
  1260                                          LEAVE
  1260 00000DD1 C9                  <1>  leave
  1261 00000DD2 C21800                          ret AND_KILL_FRAME(1)
  1262                                  
  1263                                  L_code_ptr_is_closure:
  1264                                          ENTER
  1264 00000DD5 C8000000            <1>  enter 0, 0
  1264 00000DD9 4883E4F0            <1>  and rsp, ~15
  1265 00000DDD 48837D1801                      cmp COUNT, 1
  1266 00000DE2 0F85F50E0000                    jne L_error_arg_count_1
  1267 00000DE8 488B4520                        mov rax, PARAM(0)
  1268 00000DEC 803805                          cmp byte [rax], T_closure
  1269 00000DEF 750C                            jne .L_false
  1270 00000DF1 48B8-                           mov rax, sob_boolean_true
  1270 00000DF3 [0300000000000000] 
  1271 00000DFB EB0A                            jmp .L_end
  1272                                  .L_false:
  1273 00000DFD 48B8-                           mov rax, sob_boolean_false
  1273 00000DFF [0200000000000000] 
  1274                                  .L_end:
  1275                                          LEAVE
  1275 00000E07 C9                  <1>  leave
  1276 00000E08 C21800                          ret AND_KILL_FRAME(1)
  1277                                  
  1278                                  L_code_ptr_is_real:
  1279                                          ENTER
  1279 00000E0B C8000000            <1>  enter 0, 0
  1279 00000E0F 4883E4F0            <1>  and rsp, ~15
  1280 00000E13 48837D1801                      cmp COUNT, 1
  1281 00000E18 0F85BF0E0000                    jne L_error_arg_count_1
  1282 00000E1E 488B4520                        mov rax, PARAM(0)
  1283 00000E22 803812                          cmp byte [rax], T_real
  1284 00000E25 750C                            jne .L_false
  1285 00000E27 48B8-                           mov rax, sob_boolean_true
  1285 00000E29 [0300000000000000] 
  1286 00000E31 EB0A                            jmp .L_end
  1287                                  .L_false:
  1288 00000E33 48B8-                           mov rax, sob_boolean_false
  1288 00000E35 [0200000000000000] 
  1289                                  .L_end:
  1290                                          LEAVE
  1290 00000E3D C9                  <1>  leave
  1291 00000E3E C21800                          ret AND_KILL_FRAME(1)
  1292                                  
  1293                                  L_code_ptr_is_rational:
  1294                                          ENTER
  1294 00000E41 C8000000            <1>  enter 0, 0
  1294 00000E45 4883E4F0            <1>  and rsp, ~15
  1295 00000E49 48837D1801                      cmp COUNT, 1
  1296 00000E4E 0F85890E0000                    jne L_error_arg_count_1
  1297 00000E54 488B4520                        mov rax, PARAM(0)
  1298 00000E58 803811                          cmp byte [rax], T_rational
  1299 00000E5B 750C                            jne .L_false
  1300 00000E5D 48B8-                           mov rax, sob_boolean_true
  1300 00000E5F [0300000000000000] 
  1301 00000E67 EB0A                            jmp .L_end
  1302                                  .L_false:
  1303 00000E69 48B8-                           mov rax, sob_boolean_false
  1303 00000E6B [0200000000000000] 
  1304                                  .L_end:
  1305                                          LEAVE
  1305 00000E73 C9                  <1>  leave
  1306 00000E74 C21800                          ret AND_KILL_FRAME(1)
  1307                                  
  1308                                  L_code_ptr_is_boolean:
  1309                                          ENTER
  1309 00000E77 C8000000            <1>  enter 0, 0
  1309 00000E7B 4883E4F0            <1>  and rsp, ~15
  1310 00000E7F 48837D1801                      cmp COUNT, 1
  1311 00000E84 0F85530E0000                    jne L_error_arg_count_1
  1312 00000E8A 488B4520                        mov rax, PARAM(0)
  1313 00000E8E 8A18                            mov bl, byte [rax]
  1314 00000E90 80E308                          and bl, T_boolean
  1315 00000E93 740C                            je .L_false
  1316 00000E95 48B8-                           mov rax, sob_boolean_true
  1316 00000E97 [0300000000000000] 
  1317 00000E9F EB0A                            jmp .L_end
  1318                                  .L_false:
  1319 00000EA1 48B8-                           mov rax, sob_boolean_false
  1319 00000EA3 [0200000000000000] 
  1320                                  .L_end:
  1321                                          LEAVE
  1321 00000EAB C9                  <1>  leave
  1322 00000EAC C21800                          ret AND_KILL_FRAME(1)
  1323                                          
  1324                                  L_code_ptr_is_number:
  1325                                          ENTER
  1325 00000EAF C8000000            <1>  enter 0, 0
  1325 00000EB3 4883E4F0            <1>  and rsp, ~15
  1326 00000EB7 48837D1801                      cmp COUNT, 1
  1327 00000EBC 0F851B0E0000                    jne L_error_arg_count_1
  1328 00000EC2 488B4520                        mov rax, PARAM(0)
  1329 00000EC6 8A18                            mov bl, byte [rax]
  1330 00000EC8 80E310                          and bl, T_number
  1331 00000ECB 740C                            je .L_false
  1332 00000ECD 48B8-                           mov rax, sob_boolean_true
  1332 00000ECF [0300000000000000] 
  1333 00000ED7 EB0A                            jmp .L_end
  1334                                  .L_false:
  1335 00000ED9 48B8-                           mov rax, sob_boolean_false
  1335 00000EDB [0200000000000000] 
  1336                                  .L_end:
  1337                                          LEAVE
  1337 00000EE3 C9                  <1>  leave
  1338 00000EE4 C21800                          ret AND_KILL_FRAME(1)
  1339                                          
  1340                                  L_code_ptr_is_collection:
  1341                                          ENTER
  1341 00000EE7 C8000000            <1>  enter 0, 0
  1341 00000EEB 4883E4F0            <1>  and rsp, ~15
  1342 00000EEF 48837D1801                      cmp COUNT, 1
  1343 00000EF4 0F85E30D0000                    jne L_error_arg_count_1
  1344 00000EFA 488B4520                        mov rax, PARAM(0)
  1345 00000EFE 8A18                            mov bl, byte [rax]
  1346 00000F00 80E320                          and bl, T_collection
  1347 00000F03 740C                            je .L_false
  1348 00000F05 48B8-                           mov rax, sob_boolean_true
  1348 00000F07 [0300000000000000] 
  1349 00000F0F EB0A                            jmp .L_end
  1350                                  .L_false:
  1351 00000F11 48B8-                           mov rax, sob_boolean_false
  1351 00000F13 [0200000000000000] 
  1352                                  .L_end:
  1353                                          LEAVE
  1353 00000F1B C9                  <1>  leave
  1354 00000F1C C21800                          ret AND_KILL_FRAME(1)
  1355                                  
  1356                                  L_code_ptr_cons:
  1357                                          ENTER
  1357 00000F1F C8000000            <1>  enter 0, 0
  1357 00000F23 4883E4F0            <1>  and rsp, ~15
  1358 00000F27 48837D1802                      cmp COUNT, 2
  1359 00000F2C 0F85D70D0000                    jne L_error_arg_count_2
  1360 00000F32 BF11000000                      mov rdi, (1 + 8 + 8)
  1361 00000F37 E843F7FFFF                      call malloc
  1362 00000F3C C60021                          mov byte [rax], T_pair
  1363 00000F3F 488B5D20                        mov rbx, PARAM(0)
  1364 00000F43 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1365 00000F47 488B5D28                        mov rbx, PARAM(1)
  1366 00000F4B 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1367                                          LEAVE
  1367 00000F4F C9                  <1>  leave
  1368 00000F50 C22000                          ret AND_KILL_FRAME(2)
  1369                                  
  1370                                  L_code_ptr_display_sexpr:
  1371                                          ENTER
  1371 00000F53 C8000000            <1>  enter 0, 0
  1371 00000F57 4883E4F0            <1>  and rsp, ~15
  1372 00000F5B 48837D1801                      cmp COUNT, 1
  1373 00000F60 0F85770D0000                    jne L_error_arg_count_1
  1374 00000F66 488B7D20                        mov rdi, PARAM(0)
  1375 00000F6A E82BF7FFFF                      call print_sexpr
  1376 00000F6F 48B8-                           mov rax, sob_void
  1376 00000F71 [0000000000000000] 
  1377                                          LEAVE
  1377 00000F79 C9                  <1>  leave
  1378 00000F7A C21800                          ret AND_KILL_FRAME(1)
  1379                                  
  1380                                  L_code_ptr_write_char:
  1381                                          ENTER
  1381 00000F7D C8000000            <1>  enter 0, 0
  1381 00000F81 4883E4F0            <1>  and rsp, ~15
  1382 00000F85 48837D1801                      cmp COUNT, 1
  1383 00000F8A 0F854D0D0000                    jne L_error_arg_count_1
  1384 00000F90 488B4520                        mov rax, PARAM(0)
  1385                                          assert_char(rax)
  1385 00000F94 803802              <1>  cmp byte [%1], %2
  1385 00000F97 0F851C0E0000        <1>  jne L_error_incorrect_type
  1386 00000F9D 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1387 00000FA0 4825FF000000                    and rax, 255
  1388 00000FA6 48BF-                           mov rdi, fmt_char
  1388 00000FA8 [5902000000000000] 
  1389 00000FB0 4889C6                          mov rsi, rax
  1390 00000FB3 B800000000                      mov rax, 0
  1391 00000FB8 E8(00000000)                    call printf
  1392 00000FBD 48B8-                           mov rax, sob_void
  1392 00000FBF [0000000000000000] 
  1393                                          LEAVE
  1393 00000FC7 C9                  <1>  leave
  1394 00000FC8 C21800                          ret AND_KILL_FRAME(1)
  1395                                  
  1396                                  L_code_ptr_car:
  1397                                          ENTER
  1397 00000FCB C8000000            <1>  enter 0, 0
  1397 00000FCF 4883E4F0            <1>  and rsp, ~15
  1398 00000FD3 48837D1801                      cmp COUNT, 1
  1399 00000FD8 0F85FF0C0000                    jne L_error_arg_count_1
  1400 00000FDE 488B4520                        mov rax, PARAM(0)
  1401                                          assert_pair(rax)
  1401 00000FE2 803821              <1>  cmp byte [%1], %2
  1401 00000FE5 0F85CE0D0000        <1>  jne L_error_incorrect_type
  1402 00000FEB 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1403                                          LEAVE
  1403 00000FEF C9                  <1>  leave
  1404 00000FF0 C21800                          ret AND_KILL_FRAME(1)
  1405                                          
  1406                                  L_code_ptr_cdr:
  1407                                          ENTER
  1407 00000FF3 C8000000            <1>  enter 0, 0
  1407 00000FF7 4883E4F0            <1>  and rsp, ~15
  1408 00000FFB 48837D1801                      cmp COUNT, 1
  1409 00001000 0F85D70C0000                    jne L_error_arg_count_1
  1410 00001006 488B4520                        mov rax, PARAM(0)
  1411                                          assert_pair(rax)
  1411 0000100A 803821              <1>  cmp byte [%1], %2
  1411 0000100D 0F85A60D0000        <1>  jne L_error_incorrect_type
  1412 00001013 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1413                                          LEAVE
  1413 00001017 C9                  <1>  leave
  1414 00001018 C21800                          ret AND_KILL_FRAME(1)
  1415                                          
  1416                                  L_code_ptr_string_length:
  1417                                          ENTER
  1417 0000101B C8000000            <1>  enter 0, 0
  1417 0000101F 4883E4F0            <1>  and rsp, ~15
  1418 00001023 48837D1801                      cmp COUNT, 1
  1419 00001028 0F85AF0C0000                    jne L_error_arg_count_1
  1420 0000102E 488B4520                        mov rax, PARAM(0)
  1421                                          assert_string(rax)
  1421 00001032 803803              <1>  cmp byte [%1], %2
  1421 00001035 0F857E0D0000        <1>  jne L_error_incorrect_type
  1422 0000103B 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1423 0000103F E81F0C0000                      call make_integer
  1424                                          LEAVE
  1424 00001044 C9                  <1>  leave
  1425 00001045 C21800                          ret AND_KILL_FRAME(1)
  1426                                  
  1427                                  L_code_ptr_vector_length:
  1428                                          ENTER
  1428 00001048 C8000000            <1>  enter 0, 0
  1428 0000104C 4883E4F0            <1>  and rsp, ~15
  1429 00001050 48837D1801                      cmp COUNT, 1
  1430 00001055 0F85820C0000                    jne L_error_arg_count_1
  1431 0000105B 488B4520                        mov rax, PARAM(0)
  1432                                          assert_vector(rax)
  1432 0000105F 803822              <1>  cmp byte [%1], %2
  1432 00001062 0F85510D0000        <1>  jne L_error_incorrect_type
  1433 00001068 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1434 0000106C E8F20B0000                      call make_integer
  1435                                          LEAVE
  1435 00001071 C9                  <1>  leave
  1436 00001072 C21800                          ret AND_KILL_FRAME(1)
  1437                                  
  1438                                  L_code_ptr_real_to_integer:
  1439                                          ENTER
  1439 00001075 C8000000            <1>  enter 0, 0
  1439 00001079 4883E4F0            <1>  and rsp, ~15
  1440 0000107D 48837D1801                      cmp COUNT, 1
  1441 00001082 0F85550C0000                    jne L_error_arg_count_1
  1442 00001088 488B5D20                        mov rbx, PARAM(0)
  1443                                          assert_real(rbx)
  1443 0000108C 803B12              <1>  cmp byte [%1], %2
  1443 0000108F 0F85240D0000        <1>  jne L_error_incorrect_type
  1444 00001095 F20F104301                      movsd xmm0, qword [rbx + 1]
  1445 0000109A F2480F2CF8                      cvttsd2si rdi, xmm0
  1446 0000109F E8BF0B0000                      call make_integer
  1447                                          LEAVE
  1447 000010A4 C9                  <1>  leave
  1448 000010A5 C21800                          ret AND_KILL_FRAME(1)
  1449                                  
  1450                                  L_code_ptr_exit:
  1451                                          ENTER
  1451 000010A8 C8000000            <1>  enter 0, 0
  1451 000010AC 4883E4F0            <1>  and rsp, ~15
  1452 000010B0 48837D1800                      cmp COUNT, 0
  1453 000010B5 0F85F60B0000                    jne L_error_arg_count_0
  1454 000010BB B800000000                      mov rax, 0
  1455 000010C0 E8(00000000)                    call exit
  1456                                  
  1457                                  L_code_ptr_integer_to_real:
  1458                                          ENTER
  1458 000010C5 C8000000            <1>  enter 0, 0
  1458 000010C9 4883E4F0            <1>  and rsp, ~15
  1459 000010CD 48837D1801                      cmp COUNT, 1
  1460 000010D2 0F85050C0000                    jne L_error_arg_count_1
  1461 000010D8 488B4520                        mov rax, PARAM(0)
  1462                                          assert_integer(rax)
  1462                              <1>  assert_rational(%1)
  1462 000010DC 803811              <2>  cmp byte [%1], %2
  1462 000010DF 0F85D40C0000        <2>  jne L_error_incorrect_type
  1462 000010E5 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
  1462 000010EA 0F85C90C0000        <1>  jne L_error_incorrect_type
  1463 000010F0 FF7001                          push qword [rax + 1]
  1464 000010F3 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1465 000010F9 E8490B0000                      call make_real
  1466                                          LEAVE
  1466 000010FE C9                  <1>  leave
  1467 000010FF C21800                          ret AND_KILL_FRAME(1)
  1468                                  
  1469                                  L_code_ptr_rational_to_real:
  1470                                          ENTER
  1470 00001102 C8000000            <1>  enter 0, 0
  1470 00001106 4883E4F0            <1>  and rsp, ~15
  1471 0000110A 48837D1801                      cmp COUNT, 1
  1472 0000110F 0F85C80B0000                    jne L_error_arg_count_1
  1473 00001115 488B4520                        mov rax, PARAM(0)
  1474                                          assert_rational(rax)
  1474 00001119 803811              <1>  cmp byte [%1], %2
  1474 0000111C 0F85970C0000        <1>  jne L_error_incorrect_type
  1475 00001122 FF7001                          push qword [rax + 1]
  1476 00001125 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1477 0000112B FF7009                          push qword [rax + 1 + 8]
  1478 0000112E F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1479 00001134 F20F5EC1                        divsd xmm0, xmm1
  1480 00001138 E80A0B0000                      call make_real
  1481                                          LEAVE
  1481 0000113D C9                  <1>  leave
  1482 0000113E C21800                          ret AND_KILL_FRAME(1)
  1483                                  
  1484                                  L_code_ptr_char_to_integer:
  1485                                          ENTER
  1485 00001141 C8000000            <1>  enter 0, 0
  1485 00001145 4883E4F0            <1>  and rsp, ~15
  1486 00001149 48837D1801                      cmp COUNT, 1
  1487 0000114E 0F85890B0000                    jne L_error_arg_count_1
  1488 00001154 488B4520                        mov rax, PARAM(0)
  1489                                          assert_char(rax)
  1489 00001158 803802              <1>  cmp byte [%1], %2
  1489 0000115B 0F85580C0000        <1>  jne L_error_incorrect_type
  1490 00001161 8A4001                          mov al, byte [rax + 1]
  1491 00001164 4825FF000000                    and rax, 255
  1492 0000116A 4889C7                          mov rdi, rax
  1493 0000116D E8F10A0000                      call make_integer
  1494                                          LEAVE
  1494 00001172 C9                  <1>  leave
  1495 00001173 C21800                          ret AND_KILL_FRAME(1)
  1496                                  
  1497                                  L_code_ptr_integer_to_char:
  1498                                          ENTER
  1498 00001176 C8000000            <1>  enter 0, 0
  1498 0000117A 4883E4F0            <1>  and rsp, ~15
  1499 0000117E 48837D1801                      cmp COUNT, 1
  1500 00001183 0F85540B0000                    jne L_error_arg_count_1
  1501 00001189 488B4520                        mov rax, PARAM(0)
  1502                                          assert_integer(rax)
  1502                              <1>  assert_rational(%1)
  1502 0000118D 803811              <2>  cmp byte [%1], %2
  1502 00001190 0F85230C0000        <2>  jne L_error_incorrect_type
  1502 00001196 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
  1502 0000119B 0F85180C0000        <1>  jne L_error_incorrect_type
  1503 000011A1 488B5801                        mov rbx, qword [rax + 1]
  1504 000011A5 4883FB00                        cmp rbx, 0
  1505 000011A9 0F8EDA0A0000                    jle L_error_integer_range
  1506 000011AF 4881FB00010000                  cmp rbx, 256
  1507 000011B6 0F8DCD0A0000                    jge L_error_integer_range
  1508 000011BC BF02000000                      mov rdi, (1 + 1)
  1509 000011C1 E8B9F4FFFF                      call malloc
  1510 000011C6 C60002                          mov byte [rax], T_char
  1511 000011C9 885801                          mov byte [rax + 1], bl
  1512                                          LEAVE
  1512 000011CC C9                  <1>  leave
  1513 000011CD C21800                          ret AND_KILL_FRAME(1)
  1514                                  
  1515                                  L_code_ptr_trng:
  1516                                          ENTER
  1516 000011D0 C8000000            <1>  enter 0, 0
  1516 000011D4 4883E4F0            <1>  and rsp, ~15
  1517 000011D8 48837D1800                      cmp COUNT, 0
  1518 000011DD 0F85CE0A0000                    jne L_error_arg_count_0
  1519 000011E3 480FC7F7                        rdrand rdi
  1520 000011E7 48D1EF                          shr rdi, 1
  1521 000011EA E8740A0000                      call make_integer
  1522                                          LEAVE
  1522 000011EF C9                  <1>  leave
  1523 000011F0 C21000                          ret AND_KILL_FRAME(0)
  1524                                  
  1525                                  L_code_ptr_is_zero:
  1526                                          ENTER
  1526 000011F3 C8000000            <1>  enter 0, 0
  1526 000011F7 4883E4F0            <1>  and rsp, ~15
  1527 000011FB 48837D1801                      cmp COUNT, 1
  1528 00001200 0F85D70A0000                    jne L_error_arg_count_1
  1529 00001206 488B4520                        mov rax, PARAM(0)
  1530 0000120A 803811                          cmp byte [rax], T_rational
  1531 0000120D 740A                            je .L_rational
  1532 0000120F 803812                          cmp byte [rax], T_real
  1533 00001212 740E                            je .L_real
  1534 00001214 E9A00B0000                      jmp L_error_incorrect_type
  1535                                  .L_rational:
  1536 00001219 4883780100                      cmp qword [rax + 1], 0
  1537 0000121E 7420                            je .L_zero
  1538 00001220 EB12                            jmp .L_not_zero
  1539                                  .L_real:
  1540 00001222 660FEFC0                        pxor xmm0, xmm0
  1541 00001226 FF7001                          push qword [rax + 1]
  1542 00001229 F20F100C24                      movsd xmm1, qword [rsp]
  1543 0000122E 660F2EC1                        ucomisd xmm0, xmm1
  1544 00001232 740C                            je .L_zero
  1545                                  .L_not_zero:
  1546 00001234 48B8-                           mov rax, sob_boolean_false
  1546 00001236 [0200000000000000] 
  1547 0000123E EB0A                            jmp .L_end
  1548                                  .L_zero:
  1549 00001240 48B8-                           mov rax, sob_boolean_true
  1549 00001242 [0300000000000000] 
  1550                                  .L_end:
  1551                                          LEAVE
  1551 0000124A C9                  <1>  leave
  1552 0000124B C21800                          ret AND_KILL_FRAME(1)
  1553                                  
  1554                                  L_code_ptr_is_integer:
  1555                                          ENTER
  1555 0000124E C8000000            <1>  enter 0, 0
  1555 00001252 4883E4F0            <1>  and rsp, ~15
  1556 00001256 48837D1801                      cmp COUNT, 1
  1557 0000125B 0F857C0A0000                    jne L_error_arg_count_1
  1558 00001261 488B4520                        mov rax, PARAM(0)
  1559 00001265 803811                          cmp byte [rax], T_rational
  1560 00001268 7513                            jne .L_false
  1561 0000126A 4883780901                      cmp qword [rax + 1 + 8], 1
  1562 0000126F 750C                            jne .L_false
  1563 00001271 48B8-                           mov rax, sob_boolean_true
  1563 00001273 [0300000000000000] 
  1564 0000127B EB0A                            jmp .L_exit
  1565                                  .L_false:
  1566 0000127D 48B8-                           mov rax, sob_boolean_false
  1566 0000127F [0200000000000000] 
  1567                                  .L_exit:
  1568                                          LEAVE
  1568 00001287 C9                  <1>  leave
  1569 00001288 C21800                          ret AND_KILL_FRAME(1)
  1570                                  
  1571                                  L_code_ptr_raw_bin_add_rr:
  1572                                          ENTER
  1572 0000128B C8000000            <1>  enter 0, 0
  1572 0000128F 4883E4F0            <1>  and rsp, ~15
  1573 00001293 48837D1802                      cmp COUNT, 2
  1574 00001298 0F856B0A0000                    jne L_error_arg_count_2
  1575 0000129E 488B5D20                        mov rbx, PARAM(0)
  1576                                          assert_real(rbx)
  1576 000012A2 803B12              <1>  cmp byte [%1], %2
  1576 000012A5 0F850E0B0000        <1>  jne L_error_incorrect_type
  1577 000012AB 488B4D28                        mov rcx, PARAM(1)
  1578                                          assert_real(rcx)
  1578 000012AF 803912              <1>  cmp byte [%1], %2
  1578 000012B2 0F85010B0000        <1>  jne L_error_incorrect_type
  1579 000012B8 F20F104301                      movsd xmm0, qword [rbx + 1]
  1580 000012BD F20F104901                      movsd xmm1, qword [rcx + 1]
  1581 000012C2 F20F58C1                        addsd xmm0, xmm1
  1582 000012C6 E87C090000                      call make_real
  1583                                          LEAVE
  1583 000012CB C9                  <1>  leave
  1584 000012CC C22000                          ret AND_KILL_FRAME(2)
  1585                                  
  1586                                  L_code_ptr_raw_bin_sub_rr:
  1587                                          ENTER
  1587 000012CF C8000000            <1>  enter 0, 0
  1587 000012D3 4883E4F0            <1>  and rsp, ~15
  1588 000012D7 48837D1802                      cmp COUNT, 2
  1589 000012DC 0F85270A0000                    jne L_error_arg_count_2
  1590 000012E2 488B5D20                        mov rbx, PARAM(0)
  1591                                          assert_real(rbx)
  1591 000012E6 803B12              <1>  cmp byte [%1], %2
  1591 000012E9 0F85CA0A0000        <1>  jne L_error_incorrect_type
  1592 000012EF 488B4D28                        mov rcx, PARAM(1)
  1593                                          assert_real(rcx)
  1593 000012F3 803912              <1>  cmp byte [%1], %2
  1593 000012F6 0F85BD0A0000        <1>  jne L_error_incorrect_type
  1594 000012FC F20F104301                      movsd xmm0, qword [rbx + 1]
  1595 00001301 F20F104901                      movsd xmm1, qword [rcx + 1]
  1596 00001306 F20F5CC1                        subsd xmm0, xmm1
  1597 0000130A E838090000                      call make_real
  1598                                          LEAVE
  1598 0000130F C9                  <1>  leave
  1599 00001310 C22000                          ret AND_KILL_FRAME(2)
  1600                                  
  1601                                  L_code_ptr_raw_bin_mul_rr:
  1602                                          ENTER
  1602 00001313 C8000000            <1>  enter 0, 0
  1602 00001317 4883E4F0            <1>  and rsp, ~15
  1603 0000131B 48837D1802                      cmp COUNT, 2
  1604 00001320 0F85E3090000                    jne L_error_arg_count_2
  1605 00001326 488B5D20                        mov rbx, PARAM(0)
  1606                                          assert_real(rbx)
  1606 0000132A 803B12              <1>  cmp byte [%1], %2
  1606 0000132D 0F85860A0000        <1>  jne L_error_incorrect_type
  1607 00001333 488B4D28                        mov rcx, PARAM(1)
  1608                                          assert_real(rcx)
  1608 00001337 803912              <1>  cmp byte [%1], %2
  1608 0000133A 0F85790A0000        <1>  jne L_error_incorrect_type
  1609 00001340 F20F104301                      movsd xmm0, qword [rbx + 1]
  1610 00001345 F20F104901                      movsd xmm1, qword [rcx + 1]
  1611 0000134A F20F59C1                        mulsd xmm0, xmm1
  1612 0000134E E8F4080000                      call make_real
  1613                                          LEAVE
  1613 00001353 C9                  <1>  leave
  1614 00001354 C22000                          ret AND_KILL_FRAME(2)
  1615                                  
  1616                                  L_code_ptr_raw_bin_div_rr:
  1617                                          ENTER
  1617 00001357 C8000000            <1>  enter 0, 0
  1617 0000135B 4883E4F0            <1>  and rsp, ~15
  1618 0000135F 48837D1802                      cmp COUNT, 2
  1619 00001364 0F859F090000                    jne L_error_arg_count_2
  1620 0000136A 488B5D20                        mov rbx, PARAM(0)
  1621                                          assert_real(rbx)
  1621 0000136E 803B12              <1>  cmp byte [%1], %2
  1621 00001371 0F85420A0000        <1>  jne L_error_incorrect_type
  1622 00001377 488B4D28                        mov rcx, PARAM(1)
  1623                                          assert_real(rcx)
  1623 0000137B 803912              <1>  cmp byte [%1], %2
  1623 0000137E 0F85350A0000        <1>  jne L_error_incorrect_type
  1624 00001384 F20F104301                      movsd xmm0, qword [rbx + 1]
  1625 00001389 F20F104901                      movsd xmm1, qword [rcx + 1]
  1626 0000138E 660FEFD2                        pxor xmm2, xmm2
  1627 00001392 660F2ECA                        ucomisd xmm1, xmm2
  1628 00001396 0F84450A0000                    je L_error_division_by_zero
  1629 0000139C F20F5EC1                        divsd xmm0, xmm1
  1630 000013A0 E8A2080000                      call make_real
  1631                                          LEAVE
  1631 000013A5 C9                  <1>  leave
  1632 000013A6 C22000                          ret AND_KILL_FRAME(2)
  1633                                  
  1634                                  L_code_ptr_raw_bin_add_qq:
  1635                                          ENTER
  1635 000013A9 C8000000            <1>  enter 0, 0
  1635 000013AD 4883E4F0            <1>  and rsp, ~15
  1636 000013B1 48837D1802                      cmp COUNT, 2
  1637 000013B6 0F854D090000                    jne L_error_arg_count_2
  1638 000013BC 4C8B4520                        mov r8, PARAM(0)
  1639                                          assert_rational(r8)
  1639 000013C0 41803811            <1>  cmp byte [%1], %2
  1639 000013C4 0F85EF090000        <1>  jne L_error_incorrect_type
  1640 000013CA 4C8B4D28                        mov r9, PARAM(1)
  1641                                          assert_rational(r9)
  1641 000013CE 41803911            <1>  cmp byte [%1], %2
  1641 000013D2 0F85E1090000        <1>  jne L_error_incorrect_type
  1642 000013D8 498B4001                        mov rax, qword [r8 + 1] ; num1
  1643 000013DC 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1644 000013E0 4899                            cqo
  1645 000013E2 48F7EB                          imul rbx
  1646 000013E5 4889C6                          mov rsi, rax
  1647 000013E8 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1648 000013EC 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1649 000013F0 4899                            cqo
  1650 000013F2 48F7EB                          imul rbx
  1651 000013F5 4801C6                          add rsi, rax
  1652 000013F8 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1653 000013FC 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1654 00001400 4899                            cqo
  1655 00001402 48F7EB                          imul rbx
  1656 00001405 4889C7                          mov rdi, rax
  1657 00001408 E827010000                      call normalize_rational
  1658                                          LEAVE
  1658 0000140D C9                  <1>  leave
  1659 0000140E C22000                          ret AND_KILL_FRAME(2)
  1660                                  
  1661                                  L_code_ptr_raw_bin_sub_qq:
  1662                                          ENTER
  1662 00001411 C8000000            <1>  enter 0, 0
  1662 00001415 4883E4F0            <1>  and rsp, ~15
  1663 00001419 48837D1802                      cmp COUNT, 2
  1664 0000141E 0F85E5080000                    jne L_error_arg_count_2
  1665 00001424 4C8B4520                        mov r8, PARAM(0)
  1666                                          assert_rational(r8)
  1666 00001428 41803811            <1>  cmp byte [%1], %2
  1666 0000142C 0F8587090000        <1>  jne L_error_incorrect_type
  1667 00001432 4C8B4D28                        mov r9, PARAM(1)
  1668                                          assert_rational(r9)
  1668 00001436 41803911            <1>  cmp byte [%1], %2
  1668 0000143A 0F8579090000        <1>  jne L_error_incorrect_type
  1669 00001440 498B4001                        mov rax, qword [r8 + 1] ; num1
  1670 00001444 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1671 00001448 4899                            cqo
  1672 0000144A 48F7EB                          imul rbx
  1673 0000144D 4889C6                          mov rsi, rax
  1674 00001450 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1675 00001454 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1676 00001458 4899                            cqo
  1677 0000145A 48F7EB                          imul rbx
  1678 0000145D 4829C6                          sub rsi, rax
  1679 00001460 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1680 00001464 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1681 00001468 4899                            cqo
  1682 0000146A 48F7EB                          imul rbx
  1683 0000146D 4889C7                          mov rdi, rax
  1684 00001470 E8BF000000                      call normalize_rational
  1685                                          LEAVE
  1685 00001475 C9                  <1>  leave
  1686 00001476 C22000                          ret AND_KILL_FRAME(2)
  1687                                  
  1688                                  L_code_ptr_raw_bin_mul_qq:
  1689                                          ENTER
  1689 00001479 C8000000            <1>  enter 0, 0
  1689 0000147D 4883E4F0            <1>  and rsp, ~15
  1690 00001481 48837D1802                      cmp COUNT, 2
  1691 00001486 0F857D080000                    jne L_error_arg_count_2
  1692 0000148C 4C8B4520                        mov r8, PARAM(0)
  1693                                          assert_rational(r8)
  1693 00001490 41803811            <1>  cmp byte [%1], %2
  1693 00001494 0F851F090000        <1>  jne L_error_incorrect_type
  1694 0000149A 4C8B4D28                        mov r9, PARAM(1)
  1695                                          assert_rational(r9)
  1695 0000149E 41803911            <1>  cmp byte [%1], %2
  1695 000014A2 0F8511090000        <1>  jne L_error_incorrect_type
  1696 000014A8 498B4001                        mov rax, qword [r8 + 1] ; num1
  1697 000014AC 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1698 000014B0 4899                            cqo
  1699 000014B2 48F7EB                          imul rbx
  1700 000014B5 4889C6                          mov rsi, rax
  1701 000014B8 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1702 000014BC 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1703 000014C0 4899                            cqo
  1704 000014C2 48F7EB                          imul rbx
  1705 000014C5 4889C7                          mov rdi, rax
  1706 000014C8 E867000000                      call normalize_rational
  1707                                          LEAVE
  1707 000014CD C9                  <1>  leave
  1708 000014CE C22000                          ret AND_KILL_FRAME(2)
  1709                                          
  1710                                  L_code_ptr_raw_bin_div_qq:
  1711                                          ENTER
  1711 000014D1 C8000000            <1>  enter 0, 0
  1711 000014D5 4883E4F0            <1>  and rsp, ~15
  1712 000014D9 48837D1802                      cmp COUNT, 2
  1713 000014DE 0F8525080000                    jne L_error_arg_count_2
  1714 000014E4 4C8B4520                        mov r8, PARAM(0)
  1715                                          assert_rational(r8)
  1715 000014E8 41803811            <1>  cmp byte [%1], %2
  1715 000014EC 0F85C7080000        <1>  jne L_error_incorrect_type
  1716 000014F2 4C8B4D28                        mov r9, PARAM(1)
  1717                                          assert_rational(r9)
  1717 000014F6 41803911            <1>  cmp byte [%1], %2
  1717 000014FA 0F85B9080000        <1>  jne L_error_incorrect_type
  1718 00001500 4983790100                      cmp qword [r9 + 1], 0
  1719 00001505 0F84D6080000                    je L_error_division_by_zero
  1720 0000150B 498B4001                        mov rax, qword [r8 + 1] ; num1
  1721 0000150F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1722 00001513 4899                            cqo
  1723 00001515 48F7EB                          imul rbx
  1724 00001518 4889C6                          mov rsi, rax
  1725 0000151B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1726 0000151F 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1727 00001523 4899                            cqo
  1728 00001525 48F7EB                          imul rbx
  1729 00001528 4889C7                          mov rdi, rax
  1730 0000152B E804000000                      call normalize_rational
  1731                                          LEAVE
  1731 00001530 C9                  <1>  leave
  1732 00001531 C22000                          ret AND_KILL_FRAME(2)
  1733                                          
  1734                                  normalize_rational:
  1735 00001534 56                              push rsi
  1736 00001535 57                              push rdi
  1737 00001536 E839000000                      call gcd
  1738 0000153B 4889C3                          mov rbx, rax
  1739 0000153E 58                              pop rax
  1740 0000153F 4899                            cqo
  1741 00001541 48F7FB                          idiv rbx
  1742 00001544 4989C0                          mov r8, rax
  1743 00001547 58                              pop rax
  1744 00001548 4899                            cqo
  1745 0000154A 48F7FB                          idiv rbx
  1746 0000154D 4989C1                          mov r9, rax
  1747 00001550 BF11000000                      mov rdi, (1 + 8 + 8)
  1748 00001555 E825F1FFFF                      call malloc
  1749 0000155A C60011                          mov byte [rax], T_rational
  1750 0000155D 4C894801                        mov qword [rax + 1], r9
  1751 00001561 4C894009                        mov qword [rax + 1 + 8], r8
  1752 00001565 C3                              ret
  1753                                  
  1754                                  iabs:
  1755 00001566 4889F8                          mov rax, rdi
  1756 00001569 4883F800                        cmp rax, 0
  1757 0000156D 7C01                            jl .Lneg
  1758 0000156F C3                              ret
  1759                                  .Lneg:
  1760 00001570 48F7D8                          neg rax
  1761 00001573 C3                              ret
  1762                                  
  1763                                  gcd:
  1764 00001574 E8EDFFFFFF                      call iabs
  1765 00001579 4889C3                          mov rbx, rax
  1766 0000157C 4889F7                          mov rdi, rsi
  1767 0000157F E8E2FFFFFF                      call iabs
  1768 00001584 4883F800                        cmp rax, 0
  1769 00001588 7502                            jne .L0
  1770 0000158A 4893                            xchg rax, rbx
  1771                                  .L0:
  1772 0000158C 4883FB00                        cmp rbx, 0
  1773 00001590 740C                            je .L1
  1774 00001592 4899                            cqo
  1775 00001594 48F7F3                          div rbx
  1776 00001597 4889D0                          mov rax, rdx
  1777 0000159A 4893                            xchg rax, rbx
  1778 0000159C EBEE                            jmp .L0
  1779                                  .L1:
  1780 0000159E C3                              ret
  1781                                  
  1782                                  L_code_ptr_error:
  1783                                          ENTER
  1783 0000159F C8000000            <1>  enter 0, 0
  1783 000015A3 4883E4F0            <1>  and rsp, ~15
  1784 000015A7 48837D1802                      cmp COUNT, 2
  1785 000015AC 0F8557070000                    jne L_error_arg_count_2
  1786 000015B2 488B7520                        mov rsi, PARAM(0)
  1787                                          assert_symbol(rsi)
  1787 000015B6 803E04              <1>  cmp byte [%1], %2
  1787 000015B9 0F85FA070000        <1>  jne L_error_incorrect_type
  1788 000015BF 488B7528                        mov rsi, PARAM(1)
  1789                                          assert_string(rsi)
  1789 000015C3 803E03              <1>  cmp byte [%1], %2
  1789 000015C6 0F85ED070000        <1>  jne L_error_incorrect_type
  1790 000015CC 48BF-                           mov rdi, fmt_scheme_error_part_1
  1790 000015CE [AE03000000000000] 
  1791 000015D6 B800000000                      mov rax, 0
  1792 000015DB E8(00000000)                    call printf
  1793 000015E0 488B7D20                        mov rdi, PARAM(0)
  1794 000015E4 E8B1F0FFFF                      call print_sexpr
  1795 000015E9 48BF-                           mov rdi, fmt_scheme_error_part_2
  1795 000015EB [C203000000000000] 
  1796 000015F3 B800000000                      mov rax, 0
  1797 000015F8 E8(00000000)                    call printf
  1798 000015FD 488B4528                        mov rax, PARAM(1)       ; sob_string
  1799 00001601 BE01000000                      mov rsi, 1              ; size = 1 byte
  1800 00001606 488B5001                        mov rdx, qword [rax + 1] ; length
  1801 0000160A 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1802 0000160E 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1803 00001616 E8(00000000)                    call fwrite
  1804 0000161B 48BF-                           mov rdi, fmt_scheme_error_part_3
  1804 0000161D [0404000000000000] 
  1805 00001625 B800000000                      mov rax, 0
  1806 0000162A E8(00000000)                    call printf
  1807 0000162F 48C7C0F7FFFFFF                  mov rax, -9
  1808 00001636 E8(00000000)                    call exit
  1809                                  
  1810                                  L_code_ptr_raw_less_than_rr:
  1811                                          ENTER
  1811 0000163B C8000000            <1>  enter 0, 0
  1811 0000163F 4883E4F0            <1>  and rsp, ~15
  1812 00001643 48837D1802                      cmp COUNT, 2
  1813 00001648 0F85BB060000                    jne L_error_arg_count_2
  1814 0000164E 488B7520                        mov rsi, PARAM(0)
  1815                                          assert_real(rsi)
  1815 00001652 803E12              <1>  cmp byte [%1], %2
  1815 00001655 0F855E070000        <1>  jne L_error_incorrect_type
  1816 0000165B 488B7D28                        mov rdi, PARAM(1)
  1817                                          assert_real(rdi)
  1817 0000165F 803F12              <1>  cmp byte [%1], %2
  1817 00001662 0F8551070000        <1>  jne L_error_incorrect_type
  1818 00001668 F20F104601                      movsd xmm0, qword [rsi + 1]
  1819 0000166D F20F104F01                      movsd xmm1, qword [rdi + 1]
  1820 00001672 660F2FC1                        comisd xmm0, xmm1
  1821 00001676 730C                            jae .L_false
  1822 00001678 48B8-                           mov rax, sob_boolean_true
  1822 0000167A [0300000000000000] 
  1823 00001682 EB0A                            jmp .L_exit
  1824                                  .L_false:
  1825 00001684 48B8-                           mov rax, sob_boolean_false
  1825 00001686 [0200000000000000] 
  1826                                  .L_exit:
  1827                                          LEAVE
  1827 0000168E C9                  <1>  leave
  1828 0000168F C22000                          ret AND_KILL_FRAME(2)
  1829                                          
  1830                                  L_code_ptr_raw_less_than_qq:
  1831                                          ENTER
  1831 00001692 C8000000            <1>  enter 0, 0
  1831 00001696 4883E4F0            <1>  and rsp, ~15
  1832 0000169A 48837D1802                      cmp COUNT, 2
  1833 0000169F 0F8564060000                    jne L_error_arg_count_2
  1834 000016A5 488B7520                        mov rsi, PARAM(0)
  1835                                          assert_rational(rsi)
  1835 000016A9 803E11              <1>  cmp byte [%1], %2
  1835 000016AC 0F8507070000        <1>  jne L_error_incorrect_type
  1836 000016B2 488B7D28                        mov rdi, PARAM(1)
  1837                                          assert_rational(rdi)
  1837 000016B6 803F11              <1>  cmp byte [%1], %2
  1837 000016B9 0F85FA060000        <1>  jne L_error_incorrect_type
  1838 000016BF 488B4601                        mov rax, qword [rsi + 1] ; num1
  1839 000016C3 4899                            cqo
  1840 000016C5 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1841 000016C9 4889C1                          mov rcx, rax
  1842 000016CC 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1843 000016D0 4899                            cqo
  1844 000016D2 48F76F01                        imul qword [rdi + 1]          ; num2
  1845 000016D6 4829C1                          sub rcx, rax
  1846 000016D9 7D0C                            jge .L_false
  1847 000016DB 48B8-                           mov rax, sob_boolean_true
  1847 000016DD [0300000000000000] 
  1848 000016E5 EB0A                            jmp .L_exit
  1849                                  .L_false:
  1850 000016E7 48B8-                           mov rax, sob_boolean_false
  1850 000016E9 [0200000000000000] 
  1851                                  .L_exit:
  1852                                          LEAVE
  1852 000016F1 C9                  <1>  leave
  1853 000016F2 C22000                          ret AND_KILL_FRAME(2)
  1854                                  
  1855                                  L_code_ptr_raw_equal_rr:
  1856                                          ENTER
  1856 000016F5 C8000000            <1>  enter 0, 0
  1856 000016F9 4883E4F0            <1>  and rsp, ~15
  1857 000016FD 48837D1802                      cmp COUNT, 2
  1858 00001702 0F8501060000                    jne L_error_arg_count_2
  1859 00001708 488B7520                        mov rsi, PARAM(0)
  1860                                          assert_real(rsi)
  1860 0000170C 803E12              <1>  cmp byte [%1], %2
  1860 0000170F 0F85A4060000        <1>  jne L_error_incorrect_type
  1861 00001715 488B7D28                        mov rdi, PARAM(1)
  1862                                          assert_real(rdi)
  1862 00001719 803F12              <1>  cmp byte [%1], %2
  1862 0000171C 0F8597060000        <1>  jne L_error_incorrect_type
  1863 00001722 F20F104601                      movsd xmm0, qword [rsi + 1]
  1864 00001727 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1865 0000172C 660F2FC1                        comisd xmm0, xmm1
  1866 00001730 750C                            jne .L_false
  1867 00001732 48B8-                           mov rax, sob_boolean_true
  1867 00001734 [0300000000000000] 
  1868 0000173C EB0A                            jmp .L_exit
  1869                                  .L_false:
  1870 0000173E 48B8-                           mov rax, sob_boolean_false
  1870 00001740 [0200000000000000] 
  1871                                  .L_exit:
  1872                                          LEAVE
  1872 00001748 C9                  <1>  leave
  1873 00001749 C22000                          ret AND_KILL_FRAME(2)
  1874                                          
  1875                                  L_code_ptr_raw_equal_qq:
  1876                                          ENTER
  1876 0000174C C8000000            <1>  enter 0, 0
  1876 00001750 4883E4F0            <1>  and rsp, ~15
  1877 00001754 48837D1802                      cmp COUNT, 2
  1878 00001759 0F85AA050000                    jne L_error_arg_count_2
  1879 0000175F 488B7520                        mov rsi, PARAM(0)
  1880                                          assert_rational(rsi)
  1880 00001763 803E11              <1>  cmp byte [%1], %2
  1880 00001766 0F854D060000        <1>  jne L_error_incorrect_type
  1881 0000176C 488B7D28                        mov rdi, PARAM(1)
  1882                                          assert_rational(rdi)
  1882 00001770 803F11              <1>  cmp byte [%1], %2
  1882 00001773 0F8540060000        <1>  jne L_error_incorrect_type
  1883 00001779 488B4601                        mov rax, qword [rsi + 1] ; num1
  1884 0000177D 4899                            cqo
  1885 0000177F 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1886 00001783 4889C1                          mov rcx, rax
  1887 00001786 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1888 0000178A 4899                            cqo
  1889 0000178C 48F76F01                        imul qword [rdi + 1]          ; num2
  1890 00001790 4829C1                          sub rcx, rax
  1891 00001793 750C                            jne .L_false
  1892 00001795 48B8-                           mov rax, sob_boolean_true
  1892 00001797 [0300000000000000] 
  1893 0000179F EB0A                            jmp .L_exit
  1894                                  .L_false:
  1895 000017A1 48B8-                           mov rax, sob_boolean_false
  1895 000017A3 [0200000000000000] 
  1896                                  .L_exit:
  1897                                          LEAVE
  1897 000017AB C9                  <1>  leave
  1898 000017AC C22000                          ret AND_KILL_FRAME(2)
  1899                                  
  1900                                  L_code_ptr_quotient:
  1901                                          ENTER
  1901 000017AF C8000000            <1>  enter 0, 0
  1901 000017B3 4883E4F0            <1>  and rsp, ~15
  1902 000017B7 48837D1802                      cmp COUNT, 2
  1903 000017BC 0F8547050000                    jne L_error_arg_count_2
  1904 000017C2 488B7520                        mov rsi, PARAM(0)
  1905                                          assert_integer(rsi)
  1905                              <1>  assert_rational(%1)
  1905 000017C6 803E11              <2>  cmp byte [%1], %2
  1905 000017C9 0F85EA050000        <2>  jne L_error_incorrect_type
  1905 000017CF 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  1905 000017D4 0F85DF050000        <1>  jne L_error_incorrect_type
  1906 000017DA 488B7D28                        mov rdi, PARAM(1)
  1907                                          assert_integer(rdi)
  1907                              <1>  assert_rational(%1)
  1907 000017DE 803F11              <2>  cmp byte [%1], %2
  1907 000017E1 0F85D2050000        <2>  jne L_error_incorrect_type
  1907 000017E7 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
  1907 000017EC 0F85C7050000        <1>  jne L_error_incorrect_type
  1908 000017F2 488B4601                        mov rax, qword [rsi + 1]
  1909 000017F6 488B5F01                        mov rbx, qword [rdi + 1]
  1910 000017FA 4883FB00                        cmp rbx, 0
  1911 000017FE 0F84DD050000                    je L_error_division_by_zero
  1912 00001804 4899                            cqo
  1913 00001806 48F7FB                          idiv rbx
  1914 00001809 4889C7                          mov rdi, rax
  1915 0000180C E852040000                      call make_integer
  1916                                          LEAVE
  1916 00001811 C9                  <1>  leave
  1917 00001812 C22000                          ret AND_KILL_FRAME(2)
  1918                                          
  1919                                  L_code_ptr_remainder:
  1920                                          ENTER
  1920 00001815 C8000000            <1>  enter 0, 0
  1920 00001819 4883E4F0            <1>  and rsp, ~15
  1921 0000181D 48837D1802                      cmp COUNT, 2
  1922 00001822 0F85E1040000                    jne L_error_arg_count_2
  1923 00001828 488B7520                        mov rsi, PARAM(0)
  1924                                          assert_integer(rsi)
  1924                              <1>  assert_rational(%1)
  1924 0000182C 803E11              <2>  cmp byte [%1], %2
  1924 0000182F 0F8584050000        <2>  jne L_error_incorrect_type
  1924 00001835 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  1924 0000183A 0F8579050000        <1>  jne L_error_incorrect_type
  1925 00001840 488B7D28                        mov rdi, PARAM(1)
  1926                                          assert_integer(rdi)
  1926                              <1>  assert_rational(%1)
  1926 00001844 803F11              <2>  cmp byte [%1], %2
  1926 00001847 0F856C050000        <2>  jne L_error_incorrect_type
  1926 0000184D 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
  1926 00001852 0F8561050000        <1>  jne L_error_incorrect_type
  1927 00001858 488B4601                        mov rax, qword [rsi + 1]
  1928 0000185C 488B5F01                        mov rbx, qword [rdi + 1]
  1929 00001860 4883FB00                        cmp rbx, 0
  1930 00001864 0F8477050000                    je L_error_division_by_zero
  1931 0000186A 4899                            cqo
  1932 0000186C 48F7FB                          idiv rbx
  1933 0000186F 4889D7                          mov rdi, rdx
  1934 00001872 E8EC030000                      call make_integer
  1935                                          LEAVE
  1935 00001877 C9                  <1>  leave
  1936 00001878 C22000                          ret AND_KILL_FRAME(2)
  1937                                  
  1938                                  L_code_ptr_set_car:
  1939                                          ENTER
  1939 0000187B C8000000            <1>  enter 0, 0
  1939 0000187F 4883E4F0            <1>  and rsp, ~15
  1940 00001883 48837D1802                      cmp COUNT, 2
  1941 00001888 0F857B040000                    jne L_error_arg_count_2
  1942 0000188E 488B4520                        mov rax, PARAM(0)
  1943                                          assert_pair(rax)
  1943 00001892 803821              <1>  cmp byte [%1], %2
  1943 00001895 0F851E050000        <1>  jne L_error_incorrect_type
  1944 0000189B 488B5D28                        mov rbx, PARAM(1)
  1945 0000189F 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1946 000018A3 48B8-                           mov rax, sob_void
  1946 000018A5 [0000000000000000] 
  1947                                          LEAVE
  1947 000018AD C9                  <1>  leave
  1948 000018AE C22000                          ret AND_KILL_FRAME(2)
  1949                                  
  1950                                  L_code_ptr_set_cdr:
  1951                                          ENTER
  1951 000018B1 C8000000            <1>  enter 0, 0
  1951 000018B5 4883E4F0            <1>  and rsp, ~15
  1952 000018B9 48837D1802                      cmp COUNT, 2
  1953 000018BE 0F8545040000                    jne L_error_arg_count_2
  1954 000018C4 488B4520                        mov rax, PARAM(0)
  1955                                          assert_pair(rax)
  1955 000018C8 803821              <1>  cmp byte [%1], %2
  1955 000018CB 0F85E8040000        <1>  jne L_error_incorrect_type
  1956 000018D1 488B5D28                        mov rbx, PARAM(1)
  1957 000018D5 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1958 000018D9 48B8-                           mov rax, sob_void
  1958 000018DB [0000000000000000] 
  1959                                          LEAVE
  1959 000018E3 C9                  <1>  leave
  1960 000018E4 C22000                          ret AND_KILL_FRAME(2)
  1961                                  
  1962                                  L_code_ptr_string_ref:
  1963                                          ENTER
  1963 000018E7 C8000000            <1>  enter 0, 0
  1963 000018EB 4883E4F0            <1>  and rsp, ~15
  1964 000018EF 48837D1802                      cmp COUNT, 2
  1965 000018F4 0F850F040000                    jne L_error_arg_count_2
  1966 000018FA 488B7D20                        mov rdi, PARAM(0)
  1967                                          assert_string(rdi)
  1967 000018FE 803F03              <1>  cmp byte [%1], %2
  1967 00001901 0F85B2040000        <1>  jne L_error_incorrect_type
  1968 00001907 488B7528                        mov rsi, PARAM(1)
  1969                                          assert_integer(rsi)
  1969                              <1>  assert_rational(%1)
  1969 0000190B 803E11              <2>  cmp byte [%1], %2
  1969 0000190E 0F85A5040000        <2>  jne L_error_incorrect_type
  1969 00001914 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  1969 00001919 0F859A040000        <1>  jne L_error_incorrect_type
  1970 0000191F 488B5701                        mov rdx, qword [rdi + 1]
  1971 00001923 488B4E01                        mov rcx, qword [rsi + 1]
  1972 00001927 4839D1                          cmp rcx, rdx
  1973 0000192A 0F8D59030000                    jge L_error_integer_range
  1974 00001930 4883F900                        cmp rcx, 0
  1975 00001934 0F8C4F030000                    jl L_error_integer_range
  1976 0000193A 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  1977 0000193E BF02000000                      mov rdi, 2
  1978 00001943 E837EDFFFF                      call malloc
  1979 00001948 C60002                          mov byte [rax], T_char
  1980 0000194B 885801                          mov byte [rax + 1], bl
  1981                                          LEAVE
  1981 0000194E C9                  <1>  leave
  1982 0000194F C22000                          ret AND_KILL_FRAME(2)
  1983                                  
  1984                                  L_code_ptr_vector_ref:
  1985                                          ENTER
  1985 00001952 C8000000            <1>  enter 0, 0
  1985 00001956 4883E4F0            <1>  and rsp, ~15
  1986 0000195A 48837D1802                      cmp COUNT, 2
  1987 0000195F 0F85A4030000                    jne L_error_arg_count_2
  1988 00001965 488B7D20                        mov rdi, PARAM(0)
  1989                                          assert_vector(rdi)
  1989 00001969 803F22              <1>  cmp byte [%1], %2
  1989 0000196C 0F8547040000        <1>  jne L_error_incorrect_type
  1990 00001972 488B7528                        mov rsi, PARAM(1)
  1991                                          assert_integer(rsi)
  1991                              <1>  assert_rational(%1)
  1991 00001976 803E11              <2>  cmp byte [%1], %2
  1991 00001979 0F853A040000        <2>  jne L_error_incorrect_type
  1991 0000197F 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  1991 00001984 0F852F040000        <1>  jne L_error_incorrect_type
  1992 0000198A 488B5701                        mov rdx, qword [rdi + 1]
  1993 0000198E 488B4E01                        mov rcx, qword [rsi + 1]
  1994 00001992 4839D1                          cmp rcx, rdx
  1995 00001995 0F8DEE020000                    jge L_error_integer_range
  1996 0000199B 4883F900                        cmp rcx, 0
  1997 0000199F 0F8CE4020000                    jl L_error_integer_range
  1998 000019A5 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  1999                                          LEAVE
  1999 000019AA C9                  <1>  leave
  2000 000019AB C22000                          ret AND_KILL_FRAME(2)
  2001                                  
  2002                                  L_code_ptr_vector_set:
  2003                                          ENTER
  2003 000019AE C8000000            <1>  enter 0, 0
  2003 000019B2 4883E4F0            <1>  and rsp, ~15
  2004 000019B6 48837D1803                      cmp COUNT, 3
  2005 000019BB 0F85CC030000                    jne L_error_arg_count_3
  2006 000019C1 488B7D20                        mov rdi, PARAM(0)
  2007                                          assert_vector(rdi)
  2007 000019C5 803F22              <1>  cmp byte [%1], %2
  2007 000019C8 0F85EB030000        <1>  jne L_error_incorrect_type
  2008 000019CE 488B7528                        mov rsi, PARAM(1)
  2009                                          assert_integer(rsi)
  2009                              <1>  assert_rational(%1)
  2009 000019D2 803E11              <2>  cmp byte [%1], %2
  2009 000019D5 0F85DE030000        <2>  jne L_error_incorrect_type
  2009 000019DB 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2009 000019E0 0F85D3030000        <1>  jne L_error_incorrect_type
  2010 000019E6 488B5701                        mov rdx, qword [rdi + 1]
  2011 000019EA 488B4E01                        mov rcx, qword [rsi + 1]
  2012 000019EE 4839D1                          cmp rcx, rdx
  2013 000019F1 0F8D92020000                    jge L_error_integer_range
  2014 000019F7 4883F900                        cmp rcx, 0
  2015 000019FB 0F8C88020000                    jl L_error_integer_range
  2016 00001A01 488B4530                        mov rax, PARAM(2)
  2017 00001A05 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2018 00001A0A 48B8-                           mov rax, sob_void
  2018 00001A0C [0000000000000000] 
  2019                                          LEAVE
  2019 00001A14 C9                  <1>  leave
  2020 00001A15 C22800                          ret AND_KILL_FRAME(3)
  2021                                  
  2022                                  L_code_ptr_string_set:
  2023                                          ENTER
  2023 00001A18 C8000000            <1>  enter 0, 0
  2023 00001A1C 4883E4F0            <1>  and rsp, ~15
  2024 00001A20 48837D1803                      cmp COUNT, 3
  2025 00001A25 0F8562030000                    jne L_error_arg_count_3
  2026 00001A2B 488B7D20                        mov rdi, PARAM(0)
  2027                                          assert_string(rdi)
  2027 00001A2F 803F03              <1>  cmp byte [%1], %2
  2027 00001A32 0F8581030000        <1>  jne L_error_incorrect_type
  2028 00001A38 488B7528                        mov rsi, PARAM(1)
  2029                                          assert_integer(rsi)
  2029                              <1>  assert_rational(%1)
  2029 00001A3C 803E11              <2>  cmp byte [%1], %2
  2029 00001A3F 0F8574030000        <2>  jne L_error_incorrect_type
  2029 00001A45 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2029 00001A4A 0F8569030000        <1>  jne L_error_incorrect_type
  2030 00001A50 488B5701                        mov rdx, qword [rdi + 1]
  2031 00001A54 488B4E01                        mov rcx, qword [rsi + 1]
  2032 00001A58 4839D1                          cmp rcx, rdx
  2033 00001A5B 0F8D28020000                    jge L_error_integer_range
  2034 00001A61 4883F900                        cmp rcx, 0
  2035 00001A65 0F8C1E020000                    jl L_error_integer_range
  2036 00001A6B 488B4530                        mov rax, PARAM(2)
  2037                                          assert_char(rax)
  2037 00001A6F 803802              <1>  cmp byte [%1], %2
  2037 00001A72 0F8541030000        <1>  jne L_error_incorrect_type
  2038 00001A78 8A4001                          mov al, byte [rax + 1]
  2039 00001A7B 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2040 00001A7F 48B8-                           mov rax, sob_void
  2040 00001A81 [0000000000000000] 
  2041                                          LEAVE
  2041 00001A89 C9                  <1>  leave
  2042 00001A8A C22800                          ret AND_KILL_FRAME(3)
  2043                                  
  2044                                  L_code_ptr_make_vector:
  2045                                          ENTER
  2045 00001A8D C8000000            <1>  enter 0, 0
  2045 00001A91 4883E4F0            <1>  and rsp, ~15
  2046 00001A95 48837D1802                      cmp COUNT, 2
  2047 00001A9A 0F8569020000                    jne L_error_arg_count_2
  2048 00001AA0 488B4D20                        mov rcx, PARAM(0)
  2049                                          assert_integer(rcx)
  2049                              <1>  assert_rational(%1)
  2049 00001AA4 803911              <2>  cmp byte [%1], %2
  2049 00001AA7 0F850C030000        <2>  jne L_error_incorrect_type
  2049 00001AAD 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
  2049 00001AB2 0F8501030000        <1>  jne L_error_incorrect_type
  2050 00001AB8 488B4901                        mov rcx, qword [rcx + 1]
  2051 00001ABC 4883F900                        cmp rcx, 0
  2052 00001AC0 0F8CC3010000                    jl L_error_integer_range
  2053 00001AC6 488B5528                        mov rdx, PARAM(1)
  2054 00001ACA 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2055 00001AD2 E8A8EBFFFF                      call malloc
  2056 00001AD7 C60022                          mov byte [rax], T_vector
  2057 00001ADA 48894801                        mov qword [rax + 1], rcx
  2058 00001ADE 41B800000000                    mov r8, 0
  2059                                  .L0:
  2060 00001AE4 4939C8                          cmp r8, rcx
  2061 00001AE7 740A                            je .L1
  2062 00001AE9 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2063 00001AEE 49FFC0                          inc r8
  2064 00001AF1 EBF1                            jmp .L0
  2065                                  .L1:
  2066                                          LEAVE
  2066 00001AF3 C9                  <1>  leave
  2067 00001AF4 C22000                          ret AND_KILL_FRAME(2)
  2068                                          
  2069                                  L_code_ptr_make_string:
  2070                                          ENTER
  2070 00001AF7 C8000000            <1>  enter 0, 0
  2070 00001AFB 4883E4F0            <1>  and rsp, ~15
  2071 00001AFF 48837D1802                      cmp COUNT, 2
  2072 00001B04 0F85FF010000                    jne L_error_arg_count_2
  2073 00001B0A 488B4D20                        mov rcx, PARAM(0)
  2074                                          assert_integer(rcx)
  2074                              <1>  assert_rational(%1)
  2074 00001B0E 803911              <2>  cmp byte [%1], %2
  2074 00001B11 0F85A2020000        <2>  jne L_error_incorrect_type
  2074 00001B17 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
  2074 00001B1C 0F8597020000        <1>  jne L_error_incorrect_type
  2075 00001B22 488B4901                        mov rcx, qword [rcx + 1]
  2076 00001B26 4883F900                        cmp rcx, 0
  2077 00001B2A 0F8C59010000                    jl L_error_integer_range
  2078 00001B30 488B5528                        mov rdx, PARAM(1)
  2079                                          assert_char(rdx)
  2079 00001B34 803A02              <1>  cmp byte [%1], %2
  2079 00001B37 0F857C020000        <1>  jne L_error_incorrect_type
  2080 00001B3D 8A5201                          mov dl, byte [rdx + 1]
  2081 00001B40 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2082 00001B44 E836EBFFFF                      call malloc
  2083 00001B49 C60003                          mov byte [rax], T_string
  2084 00001B4C 48894801                        mov qword [rax + 1], rcx
  2085 00001B50 41B800000000                    mov r8, 0
  2086                                  .L0:
  2087 00001B56 4939C8                          cmp r8, rcx
  2088 00001B59 740A                            je .L1
  2089 00001B5B 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2090 00001B60 49FFC0                          inc r8
  2091 00001B63 EBF1                            jmp .L0
  2092                                  .L1:
  2093                                          LEAVE
  2093 00001B65 C9                  <1>  leave
  2094 00001B66 C22000                          ret AND_KILL_FRAME(2)
  2095                                  
  2096                                  L_code_ptr_numerator:
  2097                                          ENTER
  2097 00001B69 C8000000            <1>  enter 0, 0
  2097 00001B6D 4883E4F0            <1>  and rsp, ~15
  2098 00001B71 48837D1801                      cmp COUNT, 1
  2099 00001B76 0F8561010000                    jne L_error_arg_count_1
  2100 00001B7C 488B4520                        mov rax, PARAM(0)
  2101                                          assert_rational(rax)
  2101 00001B80 803811              <1>  cmp byte [%1], %2
  2101 00001B83 0F8530020000        <1>  jne L_error_incorrect_type
  2102 00001B89 488B7801                        mov rdi, qword [rax + 1]
  2103 00001B8D E8D1000000                      call make_integer
  2104                                          LEAVE
  2104 00001B92 C9                  <1>  leave
  2105 00001B93 C21800                          ret AND_KILL_FRAME(1)
  2106                                          
  2107                                  L_code_ptr_denominator:
  2108                                          ENTER
  2108 00001B96 C8000000            <1>  enter 0, 0
  2108 00001B9A 4883E4F0            <1>  and rsp, ~15
  2109 00001B9E 48837D1801                      cmp COUNT, 1
  2110 00001BA3 0F8534010000                    jne L_error_arg_count_1
  2111 00001BA9 488B4520                        mov rax, PARAM(0)
  2112                                          assert_rational(rax)
  2112 00001BAD 803811              <1>  cmp byte [%1], %2
  2112 00001BB0 0F8503020000        <1>  jne L_error_incorrect_type
  2113 00001BB6 488B7809                        mov rdi, qword [rax + 1 + 8]
  2114 00001BBA E8A4000000                      call make_integer
  2115                                          LEAVE
  2115 00001BBF C9                  <1>  leave
  2116 00001BC0 C21800                          ret AND_KILL_FRAME(1)
  2117                                  
  2118                                  L_code_ptr_eq:
  2119                                  	ENTER
  2119 00001BC3 C8000000            <1>  enter 0, 0
  2119 00001BC7 4883E4F0            <1>  and rsp, ~15
  2120 00001BCB 48837D1802              	cmp COUNT, 2
  2121 00001BD0 0F8533010000            	jne L_error_arg_count_2
  2122 00001BD6 488B7D20                	mov rdi, PARAM(0)
  2123 00001BDA 488B7528                	mov rsi, PARAM(1)
  2124 00001BDE 4839F7                  	cmp rdi, rsi
  2125 00001BE1 744A                    	je .L_eq_true
  2126 00001BE3 8A17                    	mov dl, byte [rdi]
  2127 00001BE5 3A16                    	cmp dl, byte [rsi]
  2128 00001BE7 7550                    	jne .L_eq_false
  2129 00001BE9 80FA02                  	cmp dl, T_char
  2130 00001BEC 7437                    	je .L_char
  2131 00001BEE 80FA04                  	cmp dl, T_symbol
  2132 00001BF1 742A                    	je .L_symbol
  2133 00001BF3 80FA12                  	cmp dl, T_real
  2134 00001BF6 741D                    	je .L_real
  2135 00001BF8 80FA11                  	cmp dl, T_rational
  2136 00001BFB 7402                    	je .L_rational
  2137 00001BFD EB3A                    	jmp .L_eq_false
  2138                                  .L_rational:
  2139 00001BFF 488B4601                	mov rax, qword [rsi + 1]
  2140 00001C03 483B4701                	cmp rax, qword [rdi + 1]
  2141 00001C07 7530                    	jne .L_eq_false
  2142 00001C09 488B4609                	mov rax, qword [rsi + 1 + 8]
  2143 00001C0D 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2144 00001C11 7526                    	jne .L_eq_false
  2145 00001C13 EB18                    	jmp .L_eq_true
  2146                                  .L_real:
  2147 00001C15 488B4601                	mov rax, qword [rsi + 1]
  2148 00001C19 483B4701                	cmp rax, qword [rdi + 1]
  2149                                  .L_symbol:
  2150                                  	; never reached, because symbols are static!
  2151                                  	; but I'm keeping it in case, I'll ever change
  2152                                  	; the implementation
  2153 00001C1D 488B4601                	mov rax, qword [rsi + 1]
  2154 00001C21 483B4701                	cmp rax, qword [rdi + 1]
  2155                                  .L_char:
  2156 00001C25 8A5E01                  	mov bl, byte [rsi + 1]
  2157 00001C28 3A5F01                  	cmp bl, byte [rdi + 1]
  2158 00001C2B 750C                    	jne .L_eq_false
  2159                                  .L_eq_true:
  2160 00001C2D 48B8-                   	mov rax, sob_boolean_true
  2160 00001C2F [0300000000000000] 
  2161 00001C37 EB0A                    	jmp .L_eq_exit
  2162                                  .L_eq_false:
  2163 00001C39 48B8-                   	mov rax, sob_boolean_false
  2163 00001C3B [0200000000000000] 
  2164                                  .L_eq_exit:
  2165                                  	LEAVE
  2165 00001C43 C9                  <1>  leave
  2166 00001C44 C22000                  	ret AND_KILL_FRAME(2)
  2167                                  
  2168                                  make_real:
  2169                                          ENTER
  2169 00001C47 C8000000            <1>  enter 0, 0
  2169 00001C4B 4883E4F0            <1>  and rsp, ~15
  2170 00001C4F BF09000000                      mov rdi, (1 + 8)
  2171 00001C54 E826EAFFFF                      call malloc
  2172 00001C59 C60012                          mov byte [rax], T_real
  2173 00001C5C F20F114001                      movsd qword [rax + 1], xmm0
  2174                                          LEAVE
  2174 00001C61 C9                  <1>  leave
  2175 00001C62 C3                              ret
  2176                                          
  2177                                  make_integer:
  2178                                          ENTER
  2178 00001C63 C8000000            <1>  enter 0, 0
  2178 00001C67 4883E4F0            <1>  and rsp, ~15
  2179 00001C6B 4889FE                          mov rsi, rdi
  2180 00001C6E BF11000000                      mov rdi, (1 + 8 + 8)
  2181 00001C73 E807EAFFFF                      call malloc
  2182 00001C78 C60011                          mov byte [rax], T_rational
  2183 00001C7B 48897001                        mov qword [rax + 1], rsi
  2184 00001C7F 48C7400901000000                mov qword [rax + 1 + 8], 1
  2185                                          LEAVE
  2185 00001C87 C9                  <1>  leave
  2186 00001C88 C3                              ret
  2187                                          
  2188                                  L_error_integer_range:
  2189 00001C89 488B3C25[00000000]              mov rdi, qword [stderr]
  2190 00001C91 48BE-                           mov rsi, fmt_integer_range
  2190 00001C93 [7B03000000000000] 
  2191 00001C9B B800000000                      mov rax, 0
  2192 00001CA0 E8(00000000)                    call fprintf
  2193 00001CA5 48C7C0FBFFFFFF                  mov rax, -5
  2194 00001CAC E8(00000000)                    call exit
  2195                                  
  2196                                  L_error_arg_count_0:
  2197 00001CB1 488B3C25[00000000]              mov rdi, qword [stderr]
  2198 00001CB9 48BE-                           mov rsi, fmt_arg_count_0
  2198 00001CBB [5C02000000000000] 
  2199 00001CC3 488B5518                        mov rdx, COUNT
  2200 00001CC7 B800000000                      mov rax, 0
  2201 00001CCC E8(00000000)                    call fprintf
  2202 00001CD1 48C7C0FDFFFFFF                  mov rax, -3
  2203 00001CD8 E8(00000000)                    call exit
  2204                                  
  2205                                  L_error_arg_count_1:
  2206 00001CDD 488B3C25[00000000]              mov rdi, qword [stderr]
  2207 00001CE5 48BE-                           mov rsi, fmt_arg_count_1
  2207 00001CE7 [8402000000000000] 
  2208 00001CEF 488B5518                        mov rdx, COUNT
  2209 00001CF3 B800000000                      mov rax, 0
  2210 00001CF8 E8(00000000)                    call fprintf
  2211 00001CFD 48C7C0FDFFFFFF                  mov rax, -3
  2212 00001D04 E8(00000000)                    call exit
  2213                                  
  2214                                  L_error_arg_count_2:
  2215 00001D09 488B3C25[00000000]              mov rdi, qword [stderr]
  2216 00001D11 48BE-                           mov rsi, fmt_arg_count_2
  2216 00001D13 [0703000000000000] 
  2217 00001D1B 488B5518                        mov rdx, COUNT
  2218 00001D1F B800000000                      mov rax, 0
  2219 00001D24 E8(00000000)                    call fprintf
  2220 00001D29 48C7C0FDFFFFFF                  mov rax, -3
  2221 00001D30 E8(00000000)                    call exit
  2222                                  
  2223                                  L_error_arg_count_12:
  2224 00001D35 488B3C25[00000000]              mov rdi, qword [stderr]
  2225 00001D3D 48BE-                           mov rsi, fmt_arg_count_12
  2225 00001D3F [AA02000000000000] 
  2226 00001D47 488B5518                        mov rdx, COUNT
  2227 00001D4B B800000000                      mov rax, 0
  2228 00001D50 E8(00000000)                    call fprintf
  2229 00001D55 48C7C0FDFFFFFF                  mov rax, -3
  2230 00001D5C E8(00000000)                    call exit
  2231                                  
  2232                                  L_sagy_debug:
  2233 00001D61 488B3C25[00000000]              mov rdi, qword [stderr]
  2234 00001D69 48BE-                           mov rsi, fmt_sagy_debug
  2234 00001D6B [EA02000000000000] 
  2235 00001D73 488B5518                        mov rdx, COUNT
  2236 00001D77 B800000000                      mov rax, 0
  2237 00001D7C E8(00000000)                    call fprintf
  2238 00001D81 48C7C0FDFFFFFF                  mov rax, -3
  2239 00001D88 E8(00000000)                    call exit
  2240                                  
  2241                                  L_error_arg_count_3:
  2242 00001D8D 488B3C25[00000000]              mov rdi, qword [stderr]
  2243 00001D95 48BE-                           mov rsi, fmt_arg_count_3
  2243 00001D97 [2E03000000000000] 
  2244 00001D9F 488B5518                        mov rdx, COUNT
  2245 00001DA3 B800000000                      mov rax, 0
  2246 00001DA8 E8(00000000)                    call fprintf
  2247 00001DAD 48C7C0FDFFFFFF                  mov rax, -3
  2248 00001DB4 E8(00000000)                    call exit
  2249                                          
  2250                                  L_error_incorrect_type:
  2251 00001DB9 488B3C25[00000000]              mov rdi, qword [stderr]
  2252 00001DC1 48BE-                           mov rsi, fmt_type
  2252 00001DC3 [5703000000000000] 
  2253 00001DCB B800000000                      mov rax, 0
  2254 00001DD0 E8(00000000)                    call fprintf
  2255 00001DD5 48C7C0FCFFFFFF                  mov rax, -4
  2256 00001DDC E8(00000000)                    call exit
  2257                                  
  2258                                  L_error_division_by_zero:
  2259 00001DE1 488B3C25[00000000]              mov rdi, qword [stderr]
  2260 00001DE9 48BE-                           mov rsi, fmt_division_by_zero
  2260 00001DEB [9803000000000000] 
  2261 00001DF3 B800000000                      mov rax, 0
  2262 00001DF8 E8(00000000)                    call fprintf
  2263 00001DFD 48C7C0F8FFFFFF                  mov rax, -8
  2264 00001E04 E8(00000000)                    call exit
  2265                                  
  2266                                  section .data
  2267                                  fmt_char:
  2268 00000259 256300                          db `%c\0`
  2269                                  fmt_arg_count_0:
  2270 0000025C 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2270 00000265 74696E67207A65726F-
  2270 0000026E 20617267756D656E74-
  2270 00000277 732E20466F756E6420-
  2270 00000280 25640A00           
  2271                                  fmt_arg_count_1:
  2272 00000284 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2272 0000028D 74696E67206F6E6520-
  2272 00000296 617267756D656E742E-
  2272 0000029F 20466F756E64202564-
  2272 000002A8 0A00               
  2273                                  fmt_arg_count_12:
  2274 000002AA 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2274 000002B3 74696E67206F6E6520-
  2274 000002BC 726571756972656420-
  2274 000002C5 616E64206F6E65206F-
  2274 000002CE 7074696F6E616C2061-
  2274 000002D7 7267756D656E742E20-
  2274 000002E0 466F756E642025640A-
  2274 000002E9 00                 
  2275                                  fmt_sagy_debug:
  2276 000002EA 212121202A2A2A2A20-             db `!!! **** SAGY DEBUG **** %d\n\0`
  2276 000002F3 534147592044454255-
  2276 000002FC 47202A2A2A2A202564-
  2276 00000305 0A00               
  2277                                  fmt_arg_count_2:
  2278 00000307 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2278 00000310 74696E672074776F20-
  2278 00000319 617267756D656E7473-
  2278 00000322 2E20466F756E642025-
  2278 0000032B 640A00             
  2279                                  fmt_arg_count_3:
  2280 0000032E 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2280 00000337 74696E672074687265-
  2280 00000340 6520617267756D656E-
  2280 00000349 74732E20466F756E64-
  2280 00000352 2025640A00         
  2281                                  fmt_type:
  2282 00000357 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2282 00000360 696F6E207061737365-
  2282 00000369 6420696E636F727265-
  2282 00000372 637420747970650A00 
  2283                                  fmt_integer_range:
  2284 0000037B 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2284 00000384 7265637420696E7465-
  2284 0000038D 6765722072616E6765-
  2284 00000396 0A00               
  2285                                  fmt_division_by_zero:
  2286 00000398 212121204469766973-             db `!!! Division by zero\n\0`
  2286 000003A1 696F6E206279207A65-
  2286 000003AA 726F0A00           
  2287                                  fmt_scheme_error_part_1:
  2288 000003AE 0A2121212054686520-             db `\n!!! The procedure \0`
  2288 000003B7 70726F636564757265-
  2288 000003C0 2000               
  2289                                  fmt_scheme_error_part_2:
  2290 000003C2 2061736B656420746F-             db ` asked to terminate the program\n`
  2290 000003CB 207465726D696E6174-
  2290 000003D4 65207468652070726F-
  2290 000003DD 6772616D0A         
  2291 000003E2 202020207769746820-             db `    with the following message:\n\n\0`
  2291 000003EB 74686520666F6C6C6F-
  2291 000003F4 77696E67206D657373-
  2291 000003FD 6167653A0A0A00     
  2292                                  fmt_scheme_error_part_3:
  2293 00000404 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2293 0000040D 210A0A00           
