     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 03                      	db T_string	; "a"
    84 00000007 0100000000000000        	dq 1
    85 0000000F 61                      	db 0x61
    86 00000010 04                      	db T_symbol	; a
    87 00000011 [0600000000000000]      	dq L_constants + 6
    88 00000019 03                      	db T_string	; "b"
    89 0000001A 0100000000000000        	dq 1
    90 00000022 62                      	db 0x62
    91 00000023 04                      	db T_symbol	; b
    92 00000024 [1900000000000000]      	dq L_constants + 25
    93 0000002C 03                      	db T_string	; "c"
    94 0000002D 0100000000000000        	dq 1
    95 00000035 63                      	db 0x63
    96 00000036 04                      	db T_symbol	; c
    97 00000037 [2C00000000000000]      	dq L_constants + 44
    98 0000003F 21                      	db T_pair	; (c)
    99 00000040 [3600000000000000]-     	dq L_constants + 54, L_constants + 1
    99 00000048 [0100000000000000] 
   100 00000050 21                      	db T_pair	; (b c)
   101 00000051 [2300000000000000]-     	dq L_constants + 35, L_constants + 63
   101 00000059 [3F00000000000000] 
   102 00000061 21                      	db T_pair	; (a b c)
   103 00000062 [1000000000000000]-     	dq L_constants + 16, L_constants + 80
   103 0000006A [5000000000000000] 
   104 00000072 21                      	db T_pair	; ((a b c))
   105 00000073 [6100000000000000]-     	dq L_constants + 97, L_constants + 1
   105 0000007B [0100000000000000] 
   106                                  
   107                                  section .bss
   108                                  free_var_0:	; location of null?
   109 00000000 <res 00000008>          	resq 1
   110                                  free_var_1:	; location of pair?
   111 00000008 <res 00000008>          	resq 1
   112                                  free_var_2:	; location of void?
   113 00000010 <res 00000008>          	resq 1
   114                                  free_var_3:	; location of char?
   115 00000018 <res 00000008>          	resq 1
   116                                  free_var_4:	; location of string?
   117 00000020 <res 00000008>          	resq 1
   118                                  free_var_5:	; location of symbol?
   119 00000028 <res 00000008>          	resq 1
   120                                  free_var_6:	; location of vector?
   121 00000030 <res 00000008>          	resq 1
   122                                  free_var_7:	; location of procedure?
   123 00000038 <res 00000008>          	resq 1
   124                                  free_var_8:	; location of real?
   125 00000040 <res 00000008>          	resq 1
   126                                  free_var_9:	; location of rational?
   127 00000048 <res 00000008>          	resq 1
   128                                  free_var_10:	; location of boolean?
   129 00000050 <res 00000008>          	resq 1
   130                                  free_var_11:	; location of number?
   131 00000058 <res 00000008>          	resq 1
   132                                  free_var_12:	; location of collection?
   133 00000060 <res 00000008>          	resq 1
   134                                  free_var_13:	; location of cons
   135 00000068 <res 00000008>          	resq 1
   136                                  free_var_14:	; location of display-sexpr
   137 00000070 <res 00000008>          	resq 1
   138                                  free_var_15:	; location of write-char
   139 00000078 <res 00000008>          	resq 1
   140                                  free_var_16:	; location of car
   141 00000080 <res 00000008>          	resq 1
   142                                  free_var_17:	; location of cdr
   143 00000088 <res 00000008>          	resq 1
   144                                  free_var_18:	; location of string-length
   145 00000090 <res 00000008>          	resq 1
   146                                  free_var_19:	; location of vector-length
   147 00000098 <res 00000008>          	resq 1
   148                                  free_var_20:	; location of real->integer
   149 000000A0 <res 00000008>          	resq 1
   150                                  free_var_21:	; location of exit
   151 000000A8 <res 00000008>          	resq 1
   152                                  free_var_22:	; location of integer->real
   153 000000B0 <res 00000008>          	resq 1
   154                                  free_var_23:	; location of rational->real
   155 000000B8 <res 00000008>          	resq 1
   156                                  free_var_24:	; location of char->integer
   157 000000C0 <res 00000008>          	resq 1
   158                                  free_var_25:	; location of integer->char
   159 000000C8 <res 00000008>          	resq 1
   160                                  free_var_26:	; location of trng
   161 000000D0 <res 00000008>          	resq 1
   162                                  free_var_27:	; location of zero?
   163 000000D8 <res 00000008>          	resq 1
   164                                  free_var_28:	; location of integer?
   165 000000E0 <res 00000008>          	resq 1
   166                                  free_var_29:	; location of __bin-apply
   167 000000E8 <res 00000008>          	resq 1
   168                                  free_var_30:	; location of __bin-add-rr
   169 000000F0 <res 00000008>          	resq 1
   170                                  free_var_31:	; location of __bin-sub-rr
   171 000000F8 <res 00000008>          	resq 1
   172                                  free_var_32:	; location of __bin-mul-rr
   173 00000100 <res 00000008>          	resq 1
   174                                  free_var_33:	; location of __bin-div-rr
   175 00000108 <res 00000008>          	resq 1
   176                                  free_var_34:	; location of __bin-add-qq
   177 00000110 <res 00000008>          	resq 1
   178                                  free_var_35:	; location of __bin-sub-qq
   179 00000118 <res 00000008>          	resq 1
   180                                  free_var_36:	; location of __bin-mul-qq
   181 00000120 <res 00000008>          	resq 1
   182                                  free_var_37:	; location of __bin-div-qq
   183 00000128 <res 00000008>          	resq 1
   184                                  free_var_38:	; location of error
   185 00000130 <res 00000008>          	resq 1
   186                                  free_var_39:	; location of __bin-less-than-rr
   187 00000138 <res 00000008>          	resq 1
   188                                  free_var_40:	; location of __bin-less-than-qq
   189 00000140 <res 00000008>          	resq 1
   190                                  free_var_41:	; location of __bin-equal-rr
   191 00000148 <res 00000008>          	resq 1
   192                                  free_var_42:	; location of __bin-equal-qq
   193 00000150 <res 00000008>          	resq 1
   194                                  free_var_43:	; location of quotient
   195 00000158 <res 00000008>          	resq 1
   196                                  free_var_44:	; location of remainder
   197 00000160 <res 00000008>          	resq 1
   198                                  free_var_45:	; location of set-car!
   199 00000168 <res 00000008>          	resq 1
   200                                  free_var_46:	; location of set-cdr!
   201 00000170 <res 00000008>          	resq 1
   202                                  free_var_47:	; location of string-ref
   203 00000178 <res 00000008>          	resq 1
   204                                  free_var_48:	; location of vector-ref
   205 00000180 <res 00000008>          	resq 1
   206                                  free_var_49:	; location of vector-set!
   207 00000188 <res 00000008>          	resq 1
   208                                  free_var_50:	; location of string-set!
   209 00000190 <res 00000008>          	resq 1
   210                                  free_var_51:	; location of make-vector
   211 00000198 <res 00000008>          	resq 1
   212                                  free_var_52:	; location of make-string
   213 000001A0 <res 00000008>          	resq 1
   214                                  free_var_53:	; location of numerator
   215 000001A8 <res 00000008>          	resq 1
   216                                  free_var_54:	; location of denominator
   217 000001B0 <res 00000008>          	resq 1
   218                                  free_var_55:	; location of eq?
   219 000001B8 <res 00000008>          	resq 1
   220                                  free_var_56:	; location of apply
   221 000001C0 <res 00000008>          	resq 1
   222                                  
   223                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   224                                  global main
   225                                  section .text
   226                                  main:
   227 00000000 C8000000                        enter 0, 0
   228                                          
   229                                  	; building closure for null?
   230 00000004 48BF-                   	mov rdi, free_var_0
   230 00000006 [0000000000000000] 
   231 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   231 00000010 [C60C000000000000] 
   232 00000018 E8A40B0000              	call bind_primitive
   233                                  
   234                                  	; building closure for pair?
   235 0000001D 48BF-                   	mov rdi, free_var_1
   235 0000001F [0800000000000000] 
   236 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   236 00000029 [FC0C000000000000] 
   237 00000031 E88B0B0000              	call bind_primitive
   238                                  
   239                                  	; building closure for void?
   240 00000036 48BF-                   	mov rdi, free_var_2
   240 00000038 [1000000000000000] 
   241 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   241 00000042 [320D000000000000] 
   242 0000004A E8720B0000              	call bind_primitive
   243                                  
   244                                  	; building closure for char?
   245 0000004F 48BF-                   	mov rdi, free_var_3
   245 00000051 [1800000000000000] 
   246 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   246 0000005B [680D000000000000] 
   247 00000063 E8590B0000              	call bind_primitive
   248                                  
   249                                  	; building closure for string?
   250 00000068 48BF-                   	mov rdi, free_var_4
   250 0000006A [2000000000000000] 
   251 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   251 00000074 [9E0D000000000000] 
   252 0000007C E8400B0000              	call bind_primitive
   253                                  
   254                                  	; building closure for symbol?
   255 00000081 48BF-                   	mov rdi, free_var_5
   255 00000083 [2800000000000000] 
   256 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   256 0000008D [D40D000000000000] 
   257 00000095 E8270B0000              	call bind_primitive
   258                                  
   259                                  	; building closure for vector?
   260 0000009A 48BF-                   	mov rdi, free_var_6
   260 0000009C [3000000000000000] 
   261 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   261 000000A6 [0A0E000000000000] 
   262 000000AE E80E0B0000              	call bind_primitive
   263                                  
   264                                  	; building closure for procedure?
   265 000000B3 48BF-                   	mov rdi, free_var_7
   265 000000B5 [3800000000000000] 
   266 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   266 000000BF [400E000000000000] 
   267 000000C7 E8F50A0000              	call bind_primitive
   268                                  
   269                                  	; building closure for real?
   270 000000CC 48BF-                   	mov rdi, free_var_8
   270 000000CE [4000000000000000] 
   271 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   271 000000D8 [760E000000000000] 
   272 000000E0 E8DC0A0000              	call bind_primitive
   273                                  
   274                                  	; building closure for rational?
   275 000000E5 48BF-                   	mov rdi, free_var_9
   275 000000E7 [4800000000000000] 
   276 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   276 000000F1 [AC0E000000000000] 
   277 000000F9 E8C30A0000              	call bind_primitive
   278                                  
   279                                  	; building closure for boolean?
   280 000000FE 48BF-                   	mov rdi, free_var_10
   280 00000100 [5000000000000000] 
   281 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   281 0000010A [E20E000000000000] 
   282 00000112 E8AA0A0000              	call bind_primitive
   283                                  
   284                                  	; building closure for number?
   285 00000117 48BF-                   	mov rdi, free_var_11
   285 00000119 [5800000000000000] 
   286 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   286 00000123 [1A0F000000000000] 
   287 0000012B E8910A0000              	call bind_primitive
   288                                  
   289                                  	; building closure for collection?
   290 00000130 48BF-                   	mov rdi, free_var_12
   290 00000132 [6000000000000000] 
   291 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   291 0000013C [520F000000000000] 
   292 00000144 E8780A0000              	call bind_primitive
   293                                  
   294                                  	; building closure for cons
   295 00000149 48BF-                   	mov rdi, free_var_13
   295 0000014B [6800000000000000] 
   296 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   296 00000155 [8A0F000000000000] 
   297 0000015D E85F0A0000              	call bind_primitive
   298                                  
   299                                  	; building closure for display-sexpr
   300 00000162 48BF-                   	mov rdi, free_var_14
   300 00000164 [7000000000000000] 
   301 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   301 0000016E [BE0F000000000000] 
   302 00000176 E8460A0000              	call bind_primitive
   303                                  
   304                                  	; building closure for write-char
   305 0000017B 48BF-                   	mov rdi, free_var_15
   305 0000017D [7800000000000000] 
   306 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   306 00000187 [E80F000000000000] 
   307 0000018F E82D0A0000              	call bind_primitive
   308                                  
   309                                  	; building closure for car
   310 00000194 48BF-                   	mov rdi, free_var_16
   310 00000196 [8000000000000000] 
   311 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   311 000001A0 [3610000000000000] 
   312 000001A8 E8140A0000              	call bind_primitive
   313                                  
   314                                  	; building closure for cdr
   315 000001AD 48BF-                   	mov rdi, free_var_17
   315 000001AF [8800000000000000] 
   316 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   316 000001B9 [5E10000000000000] 
   317 000001C1 E8FB090000              	call bind_primitive
   318                                  
   319                                  	; building closure for string-length
   320 000001C6 48BF-                   	mov rdi, free_var_18
   320 000001C8 [9000000000000000] 
   321 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   321 000001D2 [8610000000000000] 
   322 000001DA E8E2090000              	call bind_primitive
   323                                  
   324                                  	; building closure for vector-length
   325 000001DF 48BF-                   	mov rdi, free_var_19
   325 000001E1 [9800000000000000] 
   326 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   326 000001EB [B310000000000000] 
   327 000001F3 E8C9090000              	call bind_primitive
   328                                  
   329                                  	; building closure for real->integer
   330 000001F8 48BF-                   	mov rdi, free_var_20
   330 000001FA [A000000000000000] 
   331 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   331 00000204 [E010000000000000] 
   332 0000020C E8B0090000              	call bind_primitive
   333                                  
   334                                  	; building closure for exit
   335 00000211 48BF-                   	mov rdi, free_var_21
   335 00000213 [A800000000000000] 
   336 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   336 0000021D [1311000000000000] 
   337 00000225 E897090000              	call bind_primitive
   338                                  
   339                                  	; building closure for integer->real
   340 0000022A 48BF-                   	mov rdi, free_var_22
   340 0000022C [B000000000000000] 
   341 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   341 00000236 [3011000000000000] 
   342 0000023E E87E090000              	call bind_primitive
   343                                  
   344                                  	; building closure for rational->real
   345 00000243 48BF-                   	mov rdi, free_var_23
   345 00000245 [B800000000000000] 
   346 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   346 0000024F [6D11000000000000] 
   347 00000257 E865090000              	call bind_primitive
   348                                  
   349                                  	; building closure for char->integer
   350 0000025C 48BF-                   	mov rdi, free_var_24
   350 0000025E [C000000000000000] 
   351 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   351 00000268 [AC11000000000000] 
   352 00000270 E84C090000              	call bind_primitive
   353                                  
   354                                  	; building closure for integer->char
   355 00000275 48BF-                   	mov rdi, free_var_25
   355 00000277 [C800000000000000] 
   356 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   356 00000281 [E111000000000000] 
   357 00000289 E833090000              	call bind_primitive
   358                                  
   359                                  	; building closure for trng
   360 0000028E 48BF-                   	mov rdi, free_var_26
   360 00000290 [D000000000000000] 
   361 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   361 0000029A [3B12000000000000] 
   362 000002A2 E81A090000              	call bind_primitive
   363                                  
   364                                  	; building closure for zero?
   365 000002A7 48BF-                   	mov rdi, free_var_27
   365 000002A9 [D800000000000000] 
   366 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   366 000002B3 [5E12000000000000] 
   367 000002BB E801090000              	call bind_primitive
   368                                  
   369                                  	; building closure for integer?
   370 000002C0 48BF-                   	mov rdi, free_var_28
   370 000002C2 [E000000000000000] 
   371 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   371 000002CC [B912000000000000] 
   372 000002D4 E8E8080000              	call bind_primitive
   373                                  
   374                                  	; building closure for __bin-apply
   375 000002D9 48BF-                   	mov rdi, free_var_29
   375 000002DB [E800000000000000] 
   376 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   376 000002E5 [E90B000000000000] 
   377 000002ED E8CF080000              	call bind_primitive
   378                                  
   379                                  	; building closure for __bin-add-rr
   380 000002F2 48BF-                   	mov rdi, free_var_30
   380 000002F4 [F000000000000000] 
   381 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   381 000002FE [F612000000000000] 
   382 00000306 E8B6080000              	call bind_primitive
   383                                  
   384                                  	; building closure for __bin-sub-rr
   385 0000030B 48BF-                   	mov rdi, free_var_31
   385 0000030D [F800000000000000] 
   386 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   386 00000317 [3A13000000000000] 
   387 0000031F E89D080000              	call bind_primitive
   388                                  
   389                                  	; building closure for __bin-mul-rr
   390 00000324 48BF-                   	mov rdi, free_var_32
   390 00000326 [0001000000000000] 
   391 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   391 00000330 [7E13000000000000] 
   392 00000338 E884080000              	call bind_primitive
   393                                  
   394                                  	; building closure for __bin-div-rr
   395 0000033D 48BF-                   	mov rdi, free_var_33
   395 0000033F [0801000000000000] 
   396 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   396 00000349 [C213000000000000] 
   397 00000351 E86B080000              	call bind_primitive
   398                                  
   399                                  	; building closure for __bin-add-qq
   400 00000356 48BF-                   	mov rdi, free_var_34
   400 00000358 [1001000000000000] 
   401 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   401 00000362 [1414000000000000] 
   402 0000036A E852080000              	call bind_primitive
   403                                  
   404                                  	; building closure for __bin-sub-qq
   405 0000036F 48BF-                   	mov rdi, free_var_35
   405 00000371 [1801000000000000] 
   406 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   406 0000037B [7C14000000000000] 
   407 00000383 E839080000              	call bind_primitive
   408                                  
   409                                  	; building closure for __bin-mul-qq
   410 00000388 48BF-                   	mov rdi, free_var_36
   410 0000038A [2001000000000000] 
   411 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   411 00000394 [E414000000000000] 
   412 0000039C E820080000              	call bind_primitive
   413                                  
   414                                  	; building closure for __bin-div-qq
   415 000003A1 48BF-                   	mov rdi, free_var_37
   415 000003A3 [2801000000000000] 
   416 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   416 000003AD [3C15000000000000] 
   417 000003B5 E807080000              	call bind_primitive
   418                                  
   419                                  	; building closure for error
   420 000003BA 48BF-                   	mov rdi, free_var_38
   420 000003BC [3001000000000000] 
   421 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   421 000003C6 [0A16000000000000] 
   422 000003CE E8EE070000              	call bind_primitive
   423                                  
   424                                  	; building closure for __bin-less-than-rr
   425 000003D3 48BF-                   	mov rdi, free_var_39
   425 000003D5 [3801000000000000] 
   426 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   426 000003DF [A616000000000000] 
   427 000003E7 E8D5070000              	call bind_primitive
   428                                  
   429                                  	; building closure for __bin-less-than-qq
   430 000003EC 48BF-                   	mov rdi, free_var_40
   430 000003EE [4001000000000000] 
   431 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   431 000003F8 [FD16000000000000] 
   432 00000400 E8BC070000              	call bind_primitive
   433                                  
   434                                  	; building closure for __bin-equal-rr
   435 00000405 48BF-                   	mov rdi, free_var_41
   435 00000407 [4801000000000000] 
   436 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   436 00000411 [6017000000000000] 
   437 00000419 E8A3070000              	call bind_primitive
   438                                  
   439                                  	; building closure for __bin-equal-qq
   440 0000041E 48BF-                   	mov rdi, free_var_42
   440 00000420 [5001000000000000] 
   441 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   441 0000042A [B717000000000000] 
   442 00000432 E88A070000              	call bind_primitive
   443                                  
   444                                  	; building closure for quotient
   445 00000437 48BF-                   	mov rdi, free_var_43
   445 00000439 [5801000000000000] 
   446 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   446 00000443 [1A18000000000000] 
   447 0000044B E871070000              	call bind_primitive
   448                                  
   449                                  	; building closure for remainder
   450 00000450 48BF-                   	mov rdi, free_var_44
   450 00000452 [6001000000000000] 
   451 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   451 0000045C [8018000000000000] 
   452 00000464 E858070000              	call bind_primitive
   453                                  
   454                                  	; building closure for set-car!
   455 00000469 48BF-                   	mov rdi, free_var_45
   455 0000046B [6801000000000000] 
   456 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   456 00000475 [E618000000000000] 
   457 0000047D E83F070000              	call bind_primitive
   458                                  
   459                                  	; building closure for set-cdr!
   460 00000482 48BF-                   	mov rdi, free_var_46
   460 00000484 [7001000000000000] 
   461 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   461 0000048E [1C19000000000000] 
   462 00000496 E826070000              	call bind_primitive
   463                                  
   464                                  	; building closure for string-ref
   465 0000049B 48BF-                   	mov rdi, free_var_47
   465 0000049D [7801000000000000] 
   466 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   466 000004A7 [5219000000000000] 
   467 000004AF E80D070000              	call bind_primitive
   468                                  
   469                                  	; building closure for vector-ref
   470 000004B4 48BF-                   	mov rdi, free_var_48
   470 000004B6 [8001000000000000] 
   471 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   471 000004C0 [BD19000000000000] 
   472 000004C8 E8F4060000              	call bind_primitive
   473                                  
   474                                  	; building closure for vector-set!
   475 000004CD 48BF-                   	mov rdi, free_var_49
   475 000004CF [8801000000000000] 
   476 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   476 000004D9 [191A000000000000] 
   477 000004E1 E8DB060000              	call bind_primitive
   478                                  
   479                                  	; building closure for string-set!
   480 000004E6 48BF-                   	mov rdi, free_var_50
   480 000004E8 [9001000000000000] 
   481 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   481 000004F2 [831A000000000000] 
   482 000004FA E8C2060000              	call bind_primitive
   483                                  
   484                                  	; building closure for make-vector
   485 000004FF 48BF-                   	mov rdi, free_var_51
   485 00000501 [9801000000000000] 
   486 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   486 0000050B [F81A000000000000] 
   487 00000513 E8A9060000              	call bind_primitive
   488                                  
   489                                  	; building closure for make-string
   490 00000518 48BF-                   	mov rdi, free_var_52
   490 0000051A [A001000000000000] 
   491 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   491 00000524 [621B000000000000] 
   492 0000052C E890060000              	call bind_primitive
   493                                  
   494                                  	; building closure for numerator
   495 00000531 48BF-                   	mov rdi, free_var_53
   495 00000533 [A801000000000000] 
   496 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   496 0000053D [D41B000000000000] 
   497 00000545 E877060000              	call bind_primitive
   498                                  
   499                                  	; building closure for denominator
   500 0000054A 48BF-                   	mov rdi, free_var_54
   500 0000054C [B001000000000000] 
   501 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   501 00000556 [011C000000000000] 
   502 0000055E E85E060000              	call bind_primitive
   503                                  
   504                                  	; building closure for eq?
   505 00000563 48BF-                   	mov rdi, free_var_55
   505 00000565 [B801000000000000] 
   506 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   506 0000056F [2E1C000000000000] 
   507 00000577 E845060000              	call bind_primitive
   508                                  
   509                                  	; building closure for apply
   510 0000057C 48BF-                   	mov rdi, free_var_56
   510 0000057E [C001000000000000] 
   511 00000586 48BE-                   	mov rsi, L_code_ptr_bin_apply
   511 00000588 [E90B000000000000] 
   512 00000590 E82C060000              	call bind_primitive
   513                                  
   514 00000595 48B8-                   	mov rax, qword (L_constants + 114)
   514 00000597 [7200000000000000] 
   515 0000059F 50                      	push rax
   516 000005A0 488B0425[80000000]      	mov rax, qword [free_var_16]
   517 000005A8 50                      	push rax
   518 000005A9 6A02                    	push 2
   519 000005AB 488B0425[C0010000]      	mov rax, qword [free_var_56]
   520 000005B3 803805                  	cmp byte [rax], T_closure 
   521 000005B6 0F854E100000                    jne L_code_ptr_error
   522                                  
   523 000005BC 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
   524                                  
   525 000005C0 53                              push rbx
   526                                  
   527 000005C1 FF5009                          call SOB_CLOSURE_CODE(rax)
   528                                  
   529                                          
   530 000005C4 4889C7                  	mov rdi, rax
   531 000005C7 E8C4000000              	call print_sexpr_if_not_void
   532                                  
   533 000005CC 48BF-                           mov rdi, fmt_memory_usage
   533 000005CE [E200000000000000] 
   534 000005D6 488B3425[69010000]              mov rsi, qword [top_of_memory]
   535 000005DE 4881EE[C8010000]                sub rsi, memory
   536 000005E5 B800000000                      mov rax, 0
   537 000005EA E8(00000000)                    call printf
   538 000005EF C9                      	leave
   539 000005F0 C3                      	ret
   540                                  
   541                                  L_error_non_closure:
   542 000005F1 488B3C25[00000000]              mov rdi, qword [stderr]
   543 000005F9 48BE-                           mov rsi, fmt_non_closure
   543 000005FB [1901000000000000] 
   544 00000603 B800000000                      mov rax, 0
   545 00000608 E8(00000000)                    call fprintf
   546 0000060D 48C7C0FEFFFFFF                  mov rax, -2
   547 00000614 E8(00000000)                    call exit
   548                                  
   549                                  L_error_improper_list:
   550 00000619 488B3C25[00000000]      	mov rdi, qword [stderr]
   551 00000621 48BE-                   	mov rsi, fmt_error_improper_list
   551 00000623 [4101000000000000] 
   552 0000062B B800000000              	mov rax, 0
   553 00000630 E8(00000000)            	call fprintf
   554 00000635 48C7C0F9FFFFFF          	mov rax, -7
   555 0000063C E8(00000000)            	call exit
   556                                  
   557                                  L_error_incorrect_arity_simple:
   558 00000641 488B3C25[00000000]              mov rdi, qword [stderr]
   559 00000649 48BE-                           mov rsi, fmt_incorrect_arity_simple
   559 0000064B [8300000000000000] 
   560 00000653 EB12                            jmp L_error_incorrect_arity_common
   561                                  L_error_incorrect_arity_opt:
   562 00000655 488B3C25[00000000]              mov rdi, qword [stderr]
   563 0000065D 48BE-                           mov rsi, fmt_incorrect_arity_opt
   563 0000065F [AE00000000000000] 
   564                                  L_error_incorrect_arity_common:
   565 00000667 5A                              pop rdx
   566 00000668 59                              pop rcx
   567 00000669 B800000000                      mov rax, 0
   568 0000066E E8(00000000)                    call fprintf
   569 00000673 48C7C0FAFFFFFF                  mov rax, -6
   570 0000067A E8(00000000)                    call exit
   571                                  
   572                                  section .data
   573                                  fmt_incorrect_arity_simple:
   574 00000083 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   574 0000008C 74656420256C642061-
   574 00000095 7267756D656E74732C-
   574 0000009E 206275742067697665-
   574 000000A7 6E20256C640A00     
   575                                  fmt_incorrect_arity_opt:
   576 000000AE 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   576 000000B7 746564206174206C65-
   576 000000C0 61737420256C642061-
   576 000000C9 7267756D656E74732C-
   576 000000D2 206275742067697665-
   576 000000DB 6E20256C640A00     
   577                                  fmt_memory_usage:
   578 000000E2 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   578 000000EB 6420256C6420627974-
   578 000000F4 6573206F662064796E-
   578 000000FD 616D6963616C6C792D-
   578 00000106 616C6C6F6361746564-
   578 0000010F 206D656D6F72790A0A-
   578 00000118 00                 
   579                                  fmt_non_closure:
   580 00000119 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   580 00000122 7074696E6720746F20-
   580 0000012B 6170706C792061206E-
   580 00000134 6F6E2D636C6F737572-
   580 0000013D 65210A00           
   581                                  fmt_error_improper_list:
   582 00000141 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   582 0000014A 7267756D656E742069-
   582 00000153 73206E6F7420612070-
   582 0000015C 726F706572206C6973-
   582 00000165 74210A00           
   583                                  
   584                                  section .bss
   585                                  memory:
   586 000001C8 <res 40000000>          	resb gbytes(1)
   587                                  
   588                                  section .data
   589                                  top_of_memory:
   590 00000169 [C801000000000000]              dq memory
   591                                  
   592                                  section .text
   593                                  malloc:
   594 0000067F 488B0425[69010000]              mov rax, qword [top_of_memory]
   595 00000687 48013C25[69010000]              add qword [top_of_memory], rdi
   596 0000068F C3                              ret
   597                                          
   598                                  print_sexpr_if_not_void:
   599 00000690 4881FF[00000000]        	cmp rdi, sob_void
   600 00000697 7501                    	jne print_sexpr
   601 00000699 C3                      	ret
   602                                  
   603                                  section .data
   604                                  fmt_void:
   605 00000171 233C766F69643E00        	db `#<void>\0`
   606                                  fmt_nil:
   607 00000179 282900                  	db `()\0`
   608                                  fmt_boolean_false:
   609 0000017C 236600                  	db `#f\0`
   610                                  fmt_boolean_true:
   611 0000017F 237400                  	db `#t\0`
   612                                  fmt_char_backslash:
   613 00000182 235C5C00                	db `#\\\\\0`
   614                                  fmt_char_dquote:
   615 00000186 235C2200                	db `#\\"\0`
   616                                  fmt_char_simple:
   617 0000018A 235C256300              	db `#\\%c\0`
   618                                  fmt_char_null:
   619 0000018F 235C6E756C00            	db `#\\nul\0`
   620                                  fmt_char_bell:
   621 00000195 235C62656C6C00          	db `#\\bell\0`
   622                                  fmt_char_backspace:
   623 0000019C 235C6261636B737061-     	db `#\\backspace\0`
   623 000001A5 636500             
   624                                  fmt_char_tab:
   625 000001A8 235C74616200            	db `#\\tab\0`
   626                                  fmt_char_newline:
   627 000001AE 235C6E65776C696E65-     	db `#\\newline\0`
   627 000001B7 00                 
   628                                  fmt_char_formfeed:
   629 000001B8 235C7061676500          	db `#\\page\0`
   630                                  fmt_char_return:
   631 000001BF 235C72657475726E00      	db `#\\return\0`
   632                                  fmt_char_escape:
   633 000001C8 235C65736300            	db `#\\esc\0`
   634                                  fmt_char_space:
   635 000001CE 235C737061636500        	db `#\\space\0`
   636                                  fmt_char_hex:
   637 000001D6 235C782530325800        	db `#\\x%02X\0`
   638                                  fmt_closure:
   639 000001DE 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   639 000001E7 206174203078253038-
   639 000001F0 5820656E763D307825-
   639 000001F9 30385820636F64653D-
   639 00000202 3078253038583E00   
   640                                  fmt_lparen:
   641 0000020A 2800                    	db `(\0`
   642                                  fmt_dotted_pair:
   643 0000020C 202E2000                	db ` . \0`
   644                                  fmt_rparen:
   645 00000210 2900                    	db `)\0`
   646                                  fmt_space:
   647 00000212 2000                    	db ` \0`
   648                                  fmt_empty_vector:
   649 00000214 23282900                	db `#()\0`
   650                                  fmt_vector:
   651 00000218 232800                  	db `#(\0`
   652                                  fmt_real:
   653 0000021B 256600                  	db `%f\0`
   654                                  fmt_fraction:
   655 0000021E 256C642F256C6400        	db `%ld/%ld\0`
   656                                  fmt_zero:
   657 00000226 3000                    	db `0\0`
   658                                  fmt_int:
   659 00000228 256C6400                	db `%ld\0`
   660                                  fmt_unknown_sexpr_error:
   661 0000022C 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   661 00000235 6F723A20556E6B6E6F-
   661 0000023E 776E2074797065206F-
   661 00000247 662073657870722028-
   661 00000250 3078253032582920   
   662 00000258 617420616464726573-     	db `at address 0x%08X\n\n\0`
   662 00000261 73203078253038580A-
   662 0000026A 0A00               
   663                                  fmt_dquote:
   664 0000026C 2200                    	db `\"\0`
   665                                  fmt_string_char:
   666 0000026E 256300                          db `%c\0`
   667                                  fmt_string_char_7:
   668 00000271 5C6100                          db `\\a\0`
   669                                  fmt_string_char_8:
   670 00000274 5C6200                          db `\\b\0`
   671                                  fmt_string_char_9:
   672 00000277 5C7400                          db `\\t\0`
   673                                  fmt_string_char_10:
   674 0000027A 5C6E00                          db `\\n\0`
   675                                  fmt_string_char_11:
   676 0000027D 5C7600                          db `\\v\0`
   677                                  fmt_string_char_12:
   678 00000280 5C6600                          db `\\f\0`
   679                                  fmt_string_char_13:
   680 00000283 5C7200                          db `\\r\0`
   681                                  fmt_string_char_34:
   682 00000286 5C2200                          db `\\"\0`
   683                                  fmt_string_char_92:
   684 00000289 5C5C00                          db `\\\\\0`
   685                                  fmt_string_char_hex:
   686 0000028C 5C7825583B00                    db `\\x%X;\0`
   687                                  
   688                                  section .text
   689                                  
   690                                  print_sexpr:
   691                                  	ENTER
   691 0000069A C8000000            <1>  enter 0, 0
   691 0000069E 4883E4F0            <1>  and rsp, ~15
   692 000006A2 8A07                    	mov al, byte [rdi]
   693 000006A4 3C00                    	cmp al, T_void
   694 000006A6 744D                    	je .Lvoid
   695 000006A8 3C01                    	cmp al, T_nil
   696 000006AA 7458                    	je .Lnil
   697 000006AC 3C09                    	cmp al, T_boolean_false
   698 000006AE 7463                    	je .Lboolean_false
   699 000006B0 3C0A                    	cmp al, T_boolean_true
   700 000006B2 746E                    	je .Lboolean_true
   701 000006B4 3C02                    	cmp al, T_char
   702 000006B6 7479                    	je .Lchar
   703 000006B8 3C04                    	cmp al, T_symbol
   704 000006BA 0F84BB010000            	je .Lsymbol
   705 000006C0 3C21                    	cmp al, T_pair
   706 000006C2 0F84D6010000            	je .Lpair
   707 000006C8 3C22                    	cmp al, T_vector
   708 000006CA 0F8478020000            	je .Lvector
   709 000006D0 3C05                    	cmp al, T_closure
   710 000006D2 0F8489010000            	je .Lclosure
   711 000006D8 3C12                    	cmp al, T_real
   712 000006DA 0F84F3020000            	je .Lreal
   713 000006E0 3C11                    	cmp al, T_rational
   714 000006E2 0F8419030000            	je .Lrational
   715 000006E8 3C03                    	cmp al, T_string
   716 000006EA 0F8452030000            	je .Lstring
   717                                  
   718 000006F0 E98A040000              	jmp .Lunknown_sexpr_type
   719                                  
   720                                  .Lvoid:
   721 000006F5 48BF-                   	mov rdi, fmt_void
   721 000006F7 [7101000000000000] 
   722 000006FF E9AF040000              	jmp .Lemit
   723                                  
   724                                  .Lnil:
   725 00000704 48BF-                   	mov rdi, fmt_nil
   725 00000706 [7901000000000000] 
   726 0000070E E9A0040000              	jmp .Lemit
   727                                  
   728                                  .Lboolean_false:
   729 00000713 48BF-                   	mov rdi, fmt_boolean_false
   729 00000715 [7C01000000000000] 
   730 0000071D E991040000              	jmp .Lemit
   731                                  
   732                                  .Lboolean_true:
   733 00000722 48BF-                   	mov rdi, fmt_boolean_true
   733 00000724 [7F01000000000000] 
   734 0000072C E982040000              	jmp .Lemit
   735                                  
   736                                  .Lchar:
   737 00000731 8A4701                  	mov al, byte [rdi + 1]
   738 00000734 3C20                    	cmp al, ' '
   739 00000736 7E28                    	jle .Lchar_whitespace
   740 00000738 3C5C                    	cmp al, 92 		; backslash
   741 0000073A 0F847C000000            	je .Lchar_backslash
   742 00000740 3C22                    	cmp al, '"'
   743 00000742 0F8483000000            	je .Lchar_dquote
   744 00000748 4825FF000000            	and rax, 255
   745 0000074E 48BF-                   	mov rdi, fmt_char_simple
   745 00000750 [8A01000000000000] 
   746 00000758 4889C6                  	mov rsi, rax
   747 0000075B E953040000              	jmp .Lemit
   748                                  
   749                                  .Lchar_whitespace:
   750 00000760 3C00                    	cmp al, 0
   751 00000762 7476                    	je .Lchar_null
   752 00000764 3C07                    	cmp al, 7
   753 00000766 0F847D000000            	je .Lchar_bell
   754 0000076C 3C08                    	cmp al, 8
   755 0000076E 0F8484000000            	je .Lchar_backspace
   756 00000774 3C09                    	cmp al, 9
   757 00000776 0F848B000000            	je .Lchar_tab
   758 0000077C 3C0A                    	cmp al, 10
   759 0000077E 0F8492000000            	je .Lchar_newline
   760 00000784 3C0C                    	cmp al, 12
   761 00000786 0F8499000000            	je .Lchar_formfeed
   762 0000078C 3C0D                    	cmp al, 13
   763 0000078E 0F84A0000000            	je .Lchar_return
   764 00000794 3C1B                    	cmp al, 27
   765 00000796 0F84A7000000            	je .Lchar_escape
   766 0000079C 4825FF000000            	and rax, 255
   767 000007A2 3C20                    	cmp al, ' '
   768 000007A4 0F84A8000000            	je .Lchar_space
   769 000007AA 48BF-                   	mov rdi, fmt_char_hex
   769 000007AC [D601000000000000] 
   770 000007B4 4889C6                  	mov rsi, rax
   771 000007B7 E9F7030000              	jmp .Lemit	
   772                                  
   773                                  .Lchar_backslash:
   774 000007BC 48BF-                   	mov rdi, fmt_char_backslash
   774 000007BE [8201000000000000] 
   775 000007C6 E9E8030000              	jmp .Lemit
   776                                  
   777                                  .Lchar_dquote:
   778 000007CB 48BF-                   	mov rdi, fmt_char_dquote
   778 000007CD [8601000000000000] 
   779 000007D5 E9D9030000              	jmp .Lemit
   780                                  
   781                                  .Lchar_null:
   782 000007DA 48BF-                   	mov rdi, fmt_char_null
   782 000007DC [8F01000000000000] 
   783 000007E4 E9CA030000              	jmp .Lemit
   784                                  
   785                                  .Lchar_bell:
   786 000007E9 48BF-                   	mov rdi, fmt_char_bell
   786 000007EB [9501000000000000] 
   787 000007F3 E9BB030000              	jmp .Lemit
   788                                  
   789                                  .Lchar_backspace:
   790 000007F8 48BF-                   	mov rdi, fmt_char_backspace
   790 000007FA [9C01000000000000] 
   791 00000802 E9AC030000              	jmp .Lemit
   792                                  
   793                                  .Lchar_tab:
   794 00000807 48BF-                   	mov rdi, fmt_char_tab
   794 00000809 [A801000000000000] 
   795 00000811 E99D030000              	jmp .Lemit
   796                                  
   797                                  .Lchar_newline:
   798 00000816 48BF-                   	mov rdi, fmt_char_newline
   798 00000818 [AE01000000000000] 
   799 00000820 E98E030000              	jmp .Lemit
   800                                  
   801                                  .Lchar_formfeed:
   802 00000825 48BF-                   	mov rdi, fmt_char_formfeed
   802 00000827 [B801000000000000] 
   803 0000082F E97F030000              	jmp .Lemit
   804                                  
   805                                  .Lchar_return:
   806 00000834 48BF-                   	mov rdi, fmt_char_return
   806 00000836 [BF01000000000000] 
   807 0000083E E970030000              	jmp .Lemit
   808                                  
   809                                  .Lchar_escape:
   810 00000843 48BF-                   	mov rdi, fmt_char_escape
   810 00000845 [C801000000000000] 
   811 0000084D E961030000              	jmp .Lemit
   812                                  
   813                                  .Lchar_space:
   814 00000852 48BF-                   	mov rdi, fmt_char_space
   814 00000854 [CE01000000000000] 
   815 0000085C E952030000              	jmp .Lemit
   816                                  
   817                                  .Lclosure:
   818 00000861 4889FE                  	mov rsi, qword rdi
   819 00000864 48BF-                   	mov rdi, fmt_closure
   819 00000866 [DE01000000000000] 
   820 0000086E 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   821 00000872 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   822 00000876 E938030000              	jmp .Lemit
   823                                  
   824                                  .Lsymbol:
   825 0000087B 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   826 0000087F BE01000000              	mov rsi, 1		 ; size = 1 byte
   827 00000884 488B5701                	mov rdx, qword [rdi + 1] ; length
   828 00000888 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   829 0000088C 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   830 00000894 E8(00000000)            	call fwrite
   831 00000899 E921030000              	jmp .Lend
   832                                  	
   833                                  .Lpair:
   834 0000089E 57                      	push rdi
   835 0000089F 48BF-                   	mov rdi, fmt_lparen
   835 000008A1 [0A02000000000000] 
   836 000008A9 B800000000              	mov rax, 0
   837                                          ENTER
   837 000008AE C8000000            <1>  enter 0, 0
   837 000008B2 4883E4F0            <1>  and rsp, ~15
   838 000008B6 E8(00000000)            	call printf
   839                                          LEAVE
   839 000008BB C9                  <1>  leave
   840 000008BC 488B3C24                	mov rdi, qword [rsp] 	; pair
   841 000008C0 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   842 000008C4 E8D1FDFFFF              	call print_sexpr
   843 000008C9 5F                      	pop rdi 		; pair
   844 000008CA 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   845                                  .Lcdr:
   846 000008CE 8A07                    	mov al, byte [rdi]
   847 000008D0 3C01                    	cmp al, T_nil
   848 000008D2 7435                    	je .Lcdr_nil
   849 000008D4 3C21                    	cmp al, T_pair
   850 000008D6 7447                    	je .Lcdr_pair
   851 000008D8 57                      	push rdi
   852 000008D9 48BF-                   	mov rdi, fmt_dotted_pair
   852 000008DB [0C02000000000000] 
   853 000008E3 B800000000              	mov rax, 0
   854 000008E8 E8(00000000)            	call printf
   855 000008ED 5F                      	pop rdi
   856 000008EE E8A7FDFFFF              	call print_sexpr
   857 000008F3 48BF-                   	mov rdi, fmt_rparen
   857 000008F5 [1002000000000000] 
   858 000008FD B800000000              	mov rax, 0
   859 00000902 E8(00000000)            	call printf
   860                                  	LEAVE
   860 00000907 C9                  <1>  leave
   861 00000908 C3                      	ret
   862                                  
   863                                  .Lcdr_nil:
   864 00000909 48BF-                   	mov rdi, fmt_rparen
   864 0000090B [1002000000000000] 
   865 00000913 B800000000              	mov rax, 0
   866 00000918 E8(00000000)            	call printf
   867                                  	LEAVE
   867 0000091D C9                  <1>  leave
   868 0000091E C3                      	ret
   869                                  
   870                                  .Lcdr_pair:
   871 0000091F 57                      	push rdi
   872 00000920 48BF-                   	mov rdi, fmt_space
   872 00000922 [1202000000000000] 
   873 0000092A B800000000              	mov rax, 0
   874 0000092F E8(00000000)            	call printf
   875 00000934 488B3C24                	mov rdi, qword [rsp]
   876 00000938 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   877 0000093C E859FDFFFF              	call print_sexpr
   878 00000941 5F                      	pop rdi
   879 00000942 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   880 00000946 EB86                    	jmp .Lcdr
   881                                  
   882                                  .Lvector:
   883 00000948 488B4701                	mov rax, qword [rdi + 1] ; length
   884 0000094C 4883F800                	cmp rax, 0
   885 00000950 7472                    	je .Lvector_empty
   886 00000952 57                      	push rdi
   887 00000953 48BF-                   	mov rdi, fmt_vector
   887 00000955 [1802000000000000] 
   888 0000095D B800000000              	mov rax, 0
   889 00000962 E8(00000000)            	call printf
   890 00000967 488B3C24                	mov rdi, qword [rsp]
   891 0000096B FF7701                  	push qword [rdi + 1]
   892 0000096E 6A01                    	push 1
   893 00000970 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   894 00000974 E821FDFFFF              	call print_sexpr
   895                                  .Lvector_loop:
   896                                  	; [rsp] index
   897                                  	; [rsp + 8*1] limit
   898                                  	; [rsp + 8*2] vector
   899 00000979 488B0424                	mov rax, qword [rsp]
   900 0000097D 483B442408              	cmp rax, qword [rsp + 8*1]
   901 00000982 742D                    	je .Lvector_end
   902 00000984 48BF-                   	mov rdi, fmt_space
   902 00000986 [1202000000000000] 
   903 0000098E B800000000              	mov rax, 0
   904 00000993 E8(00000000)            	call printf
   905 00000998 488B0424                	mov rax, qword [rsp]
   906 0000099C 488B5C2410              	mov rbx, qword [rsp + 8*2]
   907 000009A1 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   908 000009A6 E8EFFCFFFF              	call print_sexpr
   909 000009AB 48FF0424                	inc qword [rsp]
   910 000009AF EBC8                    	jmp .Lvector_loop
   911                                  
   912                                  .Lvector_end:
   913 000009B1 4883C418                	add rsp, 8*3
   914 000009B5 48BF-                   	mov rdi, fmt_rparen
   914 000009B7 [1002000000000000] 
   915 000009BF E9EF010000              	jmp .Lemit	
   916                                  
   917                                  .Lvector_empty:
   918 000009C4 48BF-                   	mov rdi, fmt_empty_vector
   918 000009C6 [1402000000000000] 
   919 000009CE E9E0010000              	jmp .Lemit
   920                                  
   921                                  .Lreal:
   922 000009D3 FF7701                  	push qword [rdi + 1]
   923 000009D6 F20F100424              	movsd xmm0, qword [rsp]
   924 000009DB 4883C408                	add rsp, 8*1
   925 000009DF 48BF-                   	mov rdi, fmt_real
   925 000009E1 [1B02000000000000] 
   926 000009E9 B801000000              	mov rax, 1
   927                                  	ENTER
   927 000009EE C8000000            <1>  enter 0, 0
   927 000009F2 4883E4F0            <1>  and rsp, ~15
   928 000009F6 E8(00000000)            	call printf
   929                                  	LEAVE
   929 000009FB C9                  <1>  leave
   930 000009FC E9BE010000              	jmp .Lend
   931                                  
   932                                  .Lrational:
   933 00000A01 488B7701                	mov rsi, qword [rdi + 1]
   934 00000A05 488B5709                	mov rdx, qword [rdi + 1 + 8]
   935 00000A09 4883FE00                	cmp rsi, 0
   936 00000A0D 7415                    	je .Lrat_zero
   937 00000A0F 4883FA01                	cmp rdx, 1
   938 00000A13 741E                    	je .Lrat_int
   939 00000A15 48BF-                   	mov rdi, fmt_fraction
   939 00000A17 [1E02000000000000] 
   940 00000A1F E98F010000              	jmp .Lemit
   941                                  
   942                                  .Lrat_zero:
   943 00000A24 48BF-                   	mov rdi, fmt_zero
   943 00000A26 [2602000000000000] 
   944 00000A2E E980010000              	jmp .Lemit
   945                                  
   946                                  .Lrat_int:
   947 00000A33 48BF-                   	mov rdi, fmt_int
   947 00000A35 [2802000000000000] 
   948 00000A3D E971010000              	jmp .Lemit
   949                                  
   950                                  .Lstring:
   951 00000A42 488D4709                	lea rax, [rdi + 1 + 8]
   952 00000A46 50                      	push rax
   953 00000A47 FF7701                  	push qword [rdi + 1]
   954 00000A4A 48BF-                   	mov rdi, fmt_dquote
   954 00000A4C [6C02000000000000] 
   955 00000A54 B800000000              	mov rax, 0
   956                                  	ENTER
   956 00000A59 C8000000            <1>  enter 0, 0
   956 00000A5D 4883E4F0            <1>  and rsp, ~15
   957 00000A61 E8(00000000)            	call printf
   958                                  	LEAVE
   958 00000A66 C9                  <1>  leave
   959                                  .Lstring_loop:
   960                                  	; qword [rsp]: limit
   961                                  	; qword [rsp + 8*1]: char *
   962 00000A67 48833C2400              	cmp qword [rsp], 0
   963 00000A6C 0F84FD000000            	je .Lstring_end
   964 00000A72 488B442408              	mov rax, qword [rsp + 8*1]
   965 00000A77 8A00                    	mov al, byte [rax]
   966 00000A79 4825FF000000            	and rax, 255
   967 00000A7F 3C07                    	cmp al, 7
   968 00000A81 7468                            je .Lstring_char_7
   969 00000A83 3C08                            cmp al, 8
   970 00000A85 7470                            je .Lstring_char_8
   971 00000A87 3C09                            cmp al, 9
   972 00000A89 7478                            je .Lstring_char_9
   973 00000A8B 3C0A                            cmp al, 10
   974 00000A8D 0F847C000000                    je .Lstring_char_10
   975 00000A93 3C0B                            cmp al, 11
   976 00000A95 0F8480000000                    je .Lstring_char_11
   977 00000A9B 3C0C                            cmp al, 12
   978 00000A9D 0F8484000000                    je .Lstring_char_12
   979 00000AA3 3C0D                            cmp al, 13
   980 00000AA5 0F8488000000                    je .Lstring_char_13
   981 00000AAB 3C22                            cmp al, 34
   982 00000AAD 0F848C000000                    je .Lstring_char_34
   984 00000AB3 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   985 00000AB5 3C20                            cmp al, ' '
   986 00000AB7 0F8CA0000000                    jl .Lstring_char_hex
   987 00000ABD 48BF-                           mov rdi, fmt_string_char
   987 00000ABF [6E02000000000000] 
   988 00000AC7 4889C6                          mov rsi, rax
   989                                  .Lstring_char_emit:
   990 00000ACA B800000000                      mov rax, 0
   991                                          ENTER
   991 00000ACF C8000000            <1>  enter 0, 0
   991 00000AD3 4883E4F0            <1>  and rsp, ~15
   992 00000AD7 E8(00000000)                    call printf
   993                                          LEAVE
   993 00000ADC C9                  <1>  leave
   994 00000ADD 48FF0C24                        dec qword [rsp]
   995 00000AE1 48FF442408                      inc qword [rsp + 8*1]
   996 00000AE6 E97CFFFFFF                      jmp .Lstring_loop
   997                                  
   998                                  .Lstring_char_7:
   999 00000AEB 48BF-                           mov rdi, fmt_string_char_7
   999 00000AED [7102000000000000] 
  1000 00000AF5 EBD3                            jmp .Lstring_char_emit
  1001                                  
  1002                                  .Lstring_char_8:
  1003 00000AF7 48BF-                           mov rdi, fmt_string_char_8
  1003 00000AF9 [7402000000000000] 
  1004 00000B01 EBC7                            jmp .Lstring_char_emit
  1005                                          
  1006                                  .Lstring_char_9:
  1007 00000B03 48BF-                           mov rdi, fmt_string_char_9
  1007 00000B05 [7702000000000000] 
  1008 00000B0D EBBB                            jmp .Lstring_char_emit
  1009                                  
  1010                                  .Lstring_char_10:
  1011 00000B0F 48BF-                           mov rdi, fmt_string_char_10
  1011 00000B11 [7A02000000000000] 
  1012 00000B19 EBAF                            jmp .Lstring_char_emit
  1013                                  
  1014                                  .Lstring_char_11:
  1015 00000B1B 48BF-                           mov rdi, fmt_string_char_11
  1015 00000B1D [7D02000000000000] 
  1016 00000B25 EBA3                            jmp .Lstring_char_emit
  1017                                  
  1018                                  .Lstring_char_12:
  1019 00000B27 48BF-                           mov rdi, fmt_string_char_12
  1019 00000B29 [8002000000000000] 
  1020 00000B31 EB97                            jmp .Lstring_char_emit
  1021                                  
  1022                                  .Lstring_char_13:
  1023 00000B33 48BF-                           mov rdi, fmt_string_char_13
  1023 00000B35 [8302000000000000] 
  1024 00000B3D EB8B                            jmp .Lstring_char_emit
  1025                                  
  1026                                  .Lstring_char_34:
  1027 00000B3F 48BF-                           mov rdi, fmt_string_char_34
  1027 00000B41 [8602000000000000] 
  1028 00000B49 E97CFFFFFF                      jmp .Lstring_char_emit
  1029                                  
  1030                                  .Lstring_char_92:
  1031 00000B4E 48BF-                           mov rdi, fmt_string_char_92
  1031 00000B50 [8902000000000000] 
  1032 00000B58 E96DFFFFFF                      jmp .Lstring_char_emit
  1033                                  
  1034                                  .Lstring_char_hex:
  1035 00000B5D 48BF-                           mov rdi, fmt_string_char_hex
  1035 00000B5F [8C02000000000000] 
  1036 00000B67 4889C6                          mov rsi, rax
  1037 00000B6A E95BFFFFFF                      jmp .Lstring_char_emit        
  1038                                  
  1039                                  .Lstring_end:
  1040 00000B6F 4883C410                	add rsp, 8 * 2
  1041 00000B73 48BF-                   	mov rdi, fmt_dquote
  1041 00000B75 [6C02000000000000] 
  1042 00000B7D EB34                    	jmp .Lemit
  1043                                  
  1044                                  .Lunknown_sexpr_type:
  1045 00000B7F 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1045 00000B81 [2C02000000000000] 
  1046 00000B89 4825FF000000            	and rax, 255
  1047 00000B8F 4889C2                  	mov rdx, rax
  1048 00000B92 4889F9                  	mov rcx, rdi
  1049 00000B95 488B3C25[00000000]      	mov rdi, qword [stderr]
  1050 00000B9D B800000000              	mov rax, 0
  1051 00000BA2 E8(00000000)            	call fprintf
  1052 00000BA7 48C7C0FFFFFFFF          	mov rax, -1
  1053 00000BAE E8(00000000)            	call exit
  1054                                  
  1055                                  .Lemit:
  1056 00000BB3 B800000000              	mov rax, 0
  1057 00000BB8 E8(00000000)            	call printf
  1058 00000BBD EB00                    	jmp .Lend
  1059                                  
  1060                                  .Lend:
  1061                                  	LEAVE
  1061 00000BBF C9                  <1>  leave
  1062 00000BC0 C3                      	ret
  1063                                  
  1064                                  ;;; rdi: address of free variable
  1065                                  ;;; rsi: address of code-pointer
  1066                                  bind_primitive:
  1067                                          ENTER
  1067 00000BC1 C8000000            <1>  enter 0, 0
  1067 00000BC5 4883E4F0            <1>  and rsp, ~15
  1068 00000BC9 57                              push rdi
  1069 00000BCA BF11000000                      mov rdi, (1 + 8 + 8)
  1070 00000BCF E8ABFAFFFF                      call malloc
  1071 00000BD4 5F                              pop rdi
  1072 00000BD5 C60005                          mov byte [rax], T_closure
  1073 00000BD8 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1074 00000BE0 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1075 00000BE4 488907                          mov qword [rdi], rax
  1076                                          LEAVE
  1076 00000BE7 C9                  <1>  leave
  1077 00000BE8 C3                              ret
  1078                                  
  1079                                  
  1080                                  ; L_code_ptr_bin_apply:
  1081                                          
  1082                                  ;         ENTER
  1083                                  ;         cmp COUNT, 2
  1084                                  ;         jne L_error_arg_count_2
  1085                                  
  1086                                  ;         mov rax, PARAM(0)       ; rax <- closure
  1087                                  ;         cmp byte [rax], T_closure ;  is it a closure? 
  1088                                  ;         jne L_error_non_closure ;; if not closure jmp kibinimat
  1089                                  
  1090                                          
  1091                                  ;         ; handle cdr
  1092                                  ;         mov r9, qword PARAM(1)
  1093                                  ;         assert_pair(r9)
  1094                                  ;         mov rcx, qword SOB_PAIR_CDR(r9)
  1095                                  ;         mov r10, qword rcx      ; r10 <- cdr
  1096                                  ;         assert_pair(r10)
  1097                                  ;         mov rcx, qword SOB_PAIR_CAR(r10)         ; rcx <- cadr
  1098                                  ;         ; push rcx                ; push rcx (cadr) ***
  1099                                  
  1100                                  ;         ; handle car
  1101                                  ;         mov r9, PARAM(1)   
  1102                                  ;         assert_pair(r9)
  1103                                  ;         mov rcx, qword SOB_PAIR_CAR(r9)
  1104                                  ;         push rcx                ; push car
  1105                                  
  1106                                  ;         ; handle  caddr (car (cdr (cdr list)))
  1107                                  ;         assert_pair(r10)
  1108                                  ;         mov rcx, qword SOB_PAIR_CDR(r10)
  1109                                  ;         mov r10, qword rcx      ; r10 <- cdr
  1110                                  ;         assert_pair(r10)
  1111                                  ;         mov rcx, qword SOB_PAIR_CAR(r10)
  1112                                  ;         push rcx
  1113                                          
  1114                                  
  1115                                  ;         mov rbx, 2
  1116                                  ;         push rbx
  1117                                  
  1118                                  ; 	cmp byte [rax], T_closure 
  1119                                  ;         jne L_code_ptr_error
  1120                                  
  1121                                  ;         mov rbx, SOB_CLOSURE_ENV(rax)
  1122                                  ;         push rbx
  1123                                  
  1124                                  ;         call SOB_CLOSURE_CODE(rax)
  1125                                  
  1126                                  ; 	; mov rdi, rax
  1127                                  ; 	; call print_sexpr_if_not_void
  1128                                  
  1129                                  ;         LEAVE
  1130                                  ;         ret AND_KILL_FRAME(2)
  1131                                  
  1132                                  
  1133                                  L_code_ptr_bin_apply:
  1134                                          
  1135                                          ENTER
  1135 00000BE9 C8000000            <1>  enter 0, 0
  1135 00000BED 4883E4F0            <1>  and rsp, ~15
  1136 00000BF1 48837D1802                      cmp COUNT, 2
  1137 00000BF6 0F8578110000                    jne L_error_arg_count_2
  1138                                  
  1139 00000BFC 488B4520                        mov rax, PARAM(0)       ; rax <- closure
  1140 00000C00 803805                          cmp byte [rax], T_closure ;  is it a closure? 
  1141 00000C03 0F85E8F9FFFF                    jne L_error_non_closure ;; if not closure jmp kibinimat
  1142                                  
  1143                                          
  1144                                          ; handle cdr
  1145 00000C09 4C8B5528                        mov r10, qword PARAM(1)
  1146                                          assert_pair(r10)
  1146 00000C0D 41803A21            <1>  cmp byte [%1], %2
  1146 00000C11 0F850D120000        <1>  jne L_error_incorrect_type
  1147 00000C17 498B4A09                        mov rcx, qword SOB_PAIR_CDR(r10)
  1148 00000C1B 4989CA                          mov r10, qword rcx      ; r10 <- cdr
  1149                                          assert_pair(r10)
  1149 00000C1E 41803A21            <1>  cmp byte [%1], %2
  1149 00000C22 0F85FC110000        <1>  jne L_error_incorrect_type
  1150 00000C28 498B4A01                        mov rcx, qword SOB_PAIR_CAR(r10)         ; r11 <- cadr
  1151 00000C2C 4989CB                          mov r11, qword rcx
  1152 00000C2F 51                              push rcx                ; push rcx (cadr) ***
  1153                                  
  1154                                          ; handle car
  1155 00000C30 4C8B4D28                        mov r9, PARAM(1)   
  1156                                          assert_pair(r9)
  1156 00000C34 41803921            <1>  cmp byte [%1], %2
  1156 00000C38 0F85E6110000        <1>  jne L_error_incorrect_type
  1157 00000C3E 498B4901                        mov rcx, qword SOB_PAIR_CAR(r9)
  1158 00000C42 4989C9                          mov r9, qword rcx
  1159 00000C45 51                              push rcx                ; push car
  1160                                  
  1161                                  
  1162                                          
  1163                                          
  1164 00000C46 BB02000000                      mov rbx, 2
  1165 00000C4B 53                              push rbx
  1166                                  
  1167 00000C4C 803805                  	cmp byte [rax], T_closure 
  1168 00000C4F 0F85B5090000                    jne L_code_ptr_error
  1169                                  
  1170 00000C55 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  1171 00000C59 53                              push rbx
  1172                                  
  1173 00000C5A FF5009                          call SOB_CLOSURE_CODE(rax)
  1174                                  
  1175 00000C5D 4989C1                          mov r9, qword rax
  1176                                  
  1177                                  	; mov rdi, rax
  1178                                  	; call print_sexpr_if_not_void
  1179                                  
  1180                                          ; if there are more args left in the list, go to list not done.
  1181                                          ; get rest of the list
  1182                                          ; r10 <- cdr already
  1183                                          assert_pair(r10)
  1183 00000C60 41803A21            <1>  cmp byte [%1], %2
  1183 00000C64 0F85BA110000        <1>  jne L_error_incorrect_type
  1184 00000C6A 498B4A09                        mov rcx, qword SOB_PAIR_CDR(r10)
  1185 00000C6E 4989CA                          mov r10, qword rcx
  1186 00000C71 41803A01                        cmp byte [r10], T_nil
  1187 00000C75 744B                            je .L_list_is_done
  1188                                  .L_list_not_done:
  1189                                          ; r9 <- result, r10 <- rest of the list, r11 <- not relevnt
  1190                                          assert_pair(r10)
  1190 00000C77 41803A21            <1>  cmp byte [%1], %2
  1190 00000C7B 0F85A3110000        <1>  jne L_error_incorrect_type
  1191 00000C81 498B4A01                        mov rcx, qword SOB_PAIR_CAR(r10)
  1192 00000C85 4989CB                          mov r11, qword rcx
  1193                                  
  1194                                          ; r9 <- result, r10 <- rest of the list, r11 <- car(rest of the list)
  1195 00000C88 51                              push rcx
  1196 00000C89 4C89C9                          mov rcx, qword r9
  1197 00000C8C 51                              push rcx
  1198 00000C8D BB02000000                      mov rbx, 2
  1199 00000C92 53                              push rbx
  1200                                  
  1201 00000C93 488B4520                        mov rax, PARAM(0)       ; rax <- closure
  1202 00000C97 803805                          cmp byte [rax], T_closure ;  is it a closure? 
  1203 00000C9A 0F8551F9FFFF                    jne L_error_non_closure ;; if not closure jmp kibinimat
  1204                                  
  1205 00000CA0 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  1206 00000CA4 53                              push rbx
  1207                                  
  1208 00000CA5 FF5009                          call SOB_CLOSURE_CODE(rax)  ; rax <- result
  1209                                                                          
  1210 00000CA8 4989C1                          mov r9, qword rax           ; r9 <- result
  1211                                  
  1212                                                                  ; set 10 to be the cdr of current list.
  1213                                          assert_pair(r10)
  1213 00000CAB 41803A21            <1>  cmp byte [%1], %2
  1213 00000CAF 0F856F110000        <1>  jne L_error_incorrect_type
  1214 00000CB5 498B4A09                        mov rcx, qword SOB_PAIR_CDR(r10)
  1215 00000CB9 4989CA                          mov r10, qword rcx
  1216 00000CBC 41803A01                        cmp byte [r10], T_nil   ; check if rest of the list is empty 
  1217 00000CC0 75B5                            jne .L_list_not_done
  1218                                  
  1219                                  
  1220                                  .L_list_is_done:                 ; salamat veyom tov neshama
  1221                                          LEAVE                    ; bye capara
  1221 00000CC2 C9                  <1>  leave
  1222 00000CC3 C22000                          ret AND_KILL_FRAME(2)    ; shelohim yishmor otcha amen
  1223                                  
  1224                                  
  1225                                  
  1226                                  
  1227                                  
  1228                                  L_code_ptr_is_null:
  1229                                          ENTER
  1229 00000CC6 C8000000            <1>  enter 0, 0
  1229 00000CCA 4883E4F0            <1>  and rsp, ~15
  1230 00000CCE 48837D1801                      cmp COUNT, 1
  1231 00000CD3 0F856F100000                    jne L_error_arg_count_1
  1232 00000CD9 488B4520                        mov rax, PARAM(0)
  1233 00000CDD 803801                          cmp byte [rax], T_nil
  1234 00000CE0 750C                            jne .L_false
  1235 00000CE2 48B8-                           mov rax, sob_boolean_true
  1235 00000CE4 [0300000000000000] 
  1236 00000CEC EB0A                            jmp .L_end
  1237                                  .L_false:
  1238 00000CEE 48B8-                           mov rax, sob_boolean_false
  1238 00000CF0 [0200000000000000] 
  1239                                  .L_end:
  1240                                          LEAVE
  1240 00000CF8 C9                  <1>  leave
  1241 00000CF9 C21800                          ret AND_KILL_FRAME(1)
  1242                                  
  1243                                  L_code_ptr_is_pair:
  1244                                          ENTER
  1244 00000CFC C8000000            <1>  enter 0, 0
  1244 00000D00 4883E4F0            <1>  and rsp, ~15
  1245 00000D04 48837D1801                      cmp COUNT, 1
  1246 00000D09 0F8539100000                    jne L_error_arg_count_1
  1247 00000D0F 488B4520                        mov rax, PARAM(0)
  1248 00000D13 803821                          cmp byte [rax], T_pair
  1249 00000D16 750C                            jne .L_false
  1250 00000D18 48B8-                           mov rax, sob_boolean_true
  1250 00000D1A [0300000000000000] 
  1251 00000D22 EB0A                            jmp .L_end
  1252                                  .L_false:
  1253 00000D24 48B8-                           mov rax, sob_boolean_false
  1253 00000D26 [0200000000000000] 
  1254                                  .L_end:
  1255                                          LEAVE
  1255 00000D2E C9                  <1>  leave
  1256 00000D2F C21800                          ret AND_KILL_FRAME(1)
  1257                                          
  1258                                  L_code_ptr_is_void:
  1259                                          ENTER
  1259 00000D32 C8000000            <1>  enter 0, 0
  1259 00000D36 4883E4F0            <1>  and rsp, ~15
  1260 00000D3A 48837D1801                      cmp COUNT, 1
  1261 00000D3F 0F8503100000                    jne L_error_arg_count_1
  1262 00000D45 488B4520                        mov rax, PARAM(0)
  1263 00000D49 803800                          cmp byte [rax], T_void
  1264 00000D4C 750C                            jne .L_false
  1265 00000D4E 48B8-                           mov rax, sob_boolean_true
  1265 00000D50 [0300000000000000] 
  1266 00000D58 EB0A                            jmp .L_end
  1267                                  .L_false:
  1268 00000D5A 48B8-                           mov rax, sob_boolean_false
  1268 00000D5C [0200000000000000] 
  1269                                  .L_end:
  1270                                          LEAVE
  1270 00000D64 C9                  <1>  leave
  1271 00000D65 C21800                          ret AND_KILL_FRAME(1)
  1272                                  
  1273                                  L_code_ptr_is_char:
  1274                                          ENTER
  1274 00000D68 C8000000            <1>  enter 0, 0
  1274 00000D6C 4883E4F0            <1>  and rsp, ~15
  1275 00000D70 48837D1801                      cmp COUNT, 1
  1276 00000D75 0F85CD0F0000                    jne L_error_arg_count_1
  1277 00000D7B 488B4520                        mov rax, PARAM(0)
  1278 00000D7F 803802                          cmp byte [rax], T_char
  1279 00000D82 750C                            jne .L_false
  1280 00000D84 48B8-                           mov rax, sob_boolean_true
  1280 00000D86 [0300000000000000] 
  1281 00000D8E EB0A                            jmp .L_end
  1282                                  .L_false:
  1283 00000D90 48B8-                           mov rax, sob_boolean_false
  1283 00000D92 [0200000000000000] 
  1284                                  .L_end:
  1285                                          LEAVE
  1285 00000D9A C9                  <1>  leave
  1286 00000D9B C21800                          ret AND_KILL_FRAME(1)
  1287                                  
  1288                                  L_code_ptr_is_string:
  1289                                          ENTER
  1289 00000D9E C8000000            <1>  enter 0, 0
  1289 00000DA2 4883E4F0            <1>  and rsp, ~15
  1290 00000DA6 48837D1801                      cmp COUNT, 1
  1291 00000DAB 0F85970F0000                    jne L_error_arg_count_1
  1292 00000DB1 488B4520                        mov rax, PARAM(0)
  1293 00000DB5 803803                          cmp byte [rax], T_string
  1294 00000DB8 750C                            jne .L_false
  1295 00000DBA 48B8-                           mov rax, sob_boolean_true
  1295 00000DBC [0300000000000000] 
  1296 00000DC4 EB0A                            jmp .L_end
  1297                                  .L_false:
  1298 00000DC6 48B8-                           mov rax, sob_boolean_false
  1298 00000DC8 [0200000000000000] 
  1299                                  .L_end:
  1300                                          LEAVE
  1300 00000DD0 C9                  <1>  leave
  1301 00000DD1 C21800                          ret AND_KILL_FRAME(1)
  1302                                  
  1303                                  L_code_ptr_is_symbol:
  1304                                          ENTER
  1304 00000DD4 C8000000            <1>  enter 0, 0
  1304 00000DD8 4883E4F0            <1>  and rsp, ~15
  1305 00000DDC 48837D1801                      cmp COUNT, 1
  1306 00000DE1 0F85610F0000                    jne L_error_arg_count_1
  1307 00000DE7 488B4520                        mov rax, PARAM(0)
  1308 00000DEB 803804                          cmp byte [rax], T_symbol
  1309 00000DEE 750C                            jne .L_false
  1310 00000DF0 48B8-                           mov rax, sob_boolean_true
  1310 00000DF2 [0300000000000000] 
  1311 00000DFA EB0A                            jmp .L_end
  1312                                  .L_false:
  1313 00000DFC 48B8-                           mov rax, sob_boolean_false
  1313 00000DFE [0200000000000000] 
  1314                                  .L_end:
  1315                                          LEAVE
  1315 00000E06 C9                  <1>  leave
  1316 00000E07 C21800                          ret AND_KILL_FRAME(1)
  1317                                  
  1318                                  L_code_ptr_is_vector:
  1319                                          ENTER
  1319 00000E0A C8000000            <1>  enter 0, 0
  1319 00000E0E 4883E4F0            <1>  and rsp, ~15
  1320 00000E12 48837D1801                      cmp COUNT, 1
  1321 00000E17 0F852B0F0000                    jne L_error_arg_count_1
  1322 00000E1D 488B4520                        mov rax, PARAM(0)
  1323 00000E21 803822                          cmp byte [rax], T_vector
  1324 00000E24 750C                            jne .L_false
  1325 00000E26 48B8-                           mov rax, sob_boolean_true
  1325 00000E28 [0300000000000000] 
  1326 00000E30 EB0A                            jmp .L_end
  1327                                  .L_false:
  1328 00000E32 48B8-                           mov rax, sob_boolean_false
  1328 00000E34 [0200000000000000] 
  1329                                  .L_end:
  1330                                          LEAVE
  1330 00000E3C C9                  <1>  leave
  1331 00000E3D C21800                          ret AND_KILL_FRAME(1)
  1332                                  
  1333                                  L_code_ptr_is_closure:
  1334                                          ENTER
  1334 00000E40 C8000000            <1>  enter 0, 0
  1334 00000E44 4883E4F0            <1>  and rsp, ~15
  1335 00000E48 48837D1801                      cmp COUNT, 1
  1336 00000E4D 0F85F50E0000                    jne L_error_arg_count_1
  1337 00000E53 488B4520                        mov rax, PARAM(0)
  1338 00000E57 803805                          cmp byte [rax], T_closure
  1339 00000E5A 750C                            jne .L_false
  1340 00000E5C 48B8-                           mov rax, sob_boolean_true
  1340 00000E5E [0300000000000000] 
  1341 00000E66 EB0A                            jmp .L_end
  1342                                  .L_false:
  1343 00000E68 48B8-                           mov rax, sob_boolean_false
  1343 00000E6A [0200000000000000] 
  1344                                  .L_end:
  1345                                          LEAVE
  1345 00000E72 C9                  <1>  leave
  1346 00000E73 C21800                          ret AND_KILL_FRAME(1)
  1347                                  
  1348                                  L_code_ptr_is_real:
  1349                                          ENTER
  1349 00000E76 C8000000            <1>  enter 0, 0
  1349 00000E7A 4883E4F0            <1>  and rsp, ~15
  1350 00000E7E 48837D1801                      cmp COUNT, 1
  1351 00000E83 0F85BF0E0000                    jne L_error_arg_count_1
  1352 00000E89 488B4520                        mov rax, PARAM(0)
  1353 00000E8D 803812                          cmp byte [rax], T_real
  1354 00000E90 750C                            jne .L_false
  1355 00000E92 48B8-                           mov rax, sob_boolean_true
  1355 00000E94 [0300000000000000] 
  1356 00000E9C EB0A                            jmp .L_end
  1357                                  .L_false:
  1358 00000E9E 48B8-                           mov rax, sob_boolean_false
  1358 00000EA0 [0200000000000000] 
  1359                                  .L_end:
  1360                                          LEAVE
  1360 00000EA8 C9                  <1>  leave
  1361 00000EA9 C21800                          ret AND_KILL_FRAME(1)
  1362                                  
  1363                                  L_code_ptr_is_rational:
  1364                                          ENTER
  1364 00000EAC C8000000            <1>  enter 0, 0
  1364 00000EB0 4883E4F0            <1>  and rsp, ~15
  1365 00000EB4 48837D1801                      cmp COUNT, 1
  1366 00000EB9 0F85890E0000                    jne L_error_arg_count_1
  1367 00000EBF 488B4520                        mov rax, PARAM(0)
  1368 00000EC3 803811                          cmp byte [rax], T_rational
  1369 00000EC6 750C                            jne .L_false
  1370 00000EC8 48B8-                           mov rax, sob_boolean_true
  1370 00000ECA [0300000000000000] 
  1371 00000ED2 EB0A                            jmp .L_end
  1372                                  .L_false:
  1373 00000ED4 48B8-                           mov rax, sob_boolean_false
  1373 00000ED6 [0200000000000000] 
  1374                                  .L_end:
  1375                                          LEAVE
  1375 00000EDE C9                  <1>  leave
  1376 00000EDF C21800                          ret AND_KILL_FRAME(1)
  1377                                  
  1378                                  L_code_ptr_is_boolean:
  1379                                          ENTER
  1379 00000EE2 C8000000            <1>  enter 0, 0
  1379 00000EE6 4883E4F0            <1>  and rsp, ~15
  1380 00000EEA 48837D1801                      cmp COUNT, 1
  1381 00000EEF 0F85530E0000                    jne L_error_arg_count_1
  1382 00000EF5 488B4520                        mov rax, PARAM(0)
  1383 00000EF9 8A18                            mov bl, byte [rax]
  1384 00000EFB 80E308                          and bl, T_boolean
  1385 00000EFE 740C                            je .L_false
  1386 00000F00 48B8-                           mov rax, sob_boolean_true
  1386 00000F02 [0300000000000000] 
  1387 00000F0A EB0A                            jmp .L_end
  1388                                  .L_false:
  1389 00000F0C 48B8-                           mov rax, sob_boolean_false
  1389 00000F0E [0200000000000000] 
  1390                                  .L_end:
  1391                                          LEAVE
  1391 00000F16 C9                  <1>  leave
  1392 00000F17 C21800                          ret AND_KILL_FRAME(1)
  1393                                          
  1394                                  L_code_ptr_is_number:
  1395                                          ENTER
  1395 00000F1A C8000000            <1>  enter 0, 0
  1395 00000F1E 4883E4F0            <1>  and rsp, ~15
  1396 00000F22 48837D1801                      cmp COUNT, 1
  1397 00000F27 0F851B0E0000                    jne L_error_arg_count_1
  1398 00000F2D 488B4520                        mov rax, PARAM(0)
  1399 00000F31 8A18                            mov bl, byte [rax]
  1400 00000F33 80E310                          and bl, T_number
  1401 00000F36 740C                            je .L_false
  1402 00000F38 48B8-                           mov rax, sob_boolean_true
  1402 00000F3A [0300000000000000] 
  1403 00000F42 EB0A                            jmp .L_end
  1404                                  .L_false:
  1405 00000F44 48B8-                           mov rax, sob_boolean_false
  1405 00000F46 [0200000000000000] 
  1406                                  .L_end:
  1407                                          LEAVE
  1407 00000F4E C9                  <1>  leave
  1408 00000F4F C21800                          ret AND_KILL_FRAME(1)
  1409                                          
  1410                                  L_code_ptr_is_collection:
  1411                                          ENTER
  1411 00000F52 C8000000            <1>  enter 0, 0
  1411 00000F56 4883E4F0            <1>  and rsp, ~15
  1412 00000F5A 48837D1801                      cmp COUNT, 1
  1413 00000F5F 0F85E30D0000                    jne L_error_arg_count_1
  1414 00000F65 488B4520                        mov rax, PARAM(0)
  1415 00000F69 8A18                            mov bl, byte [rax]
  1416 00000F6B 80E320                          and bl, T_collection
  1417 00000F6E 740C                            je .L_false
  1418 00000F70 48B8-                           mov rax, sob_boolean_true
  1418 00000F72 [0300000000000000] 
  1419 00000F7A EB0A                            jmp .L_end
  1420                                  .L_false:
  1421 00000F7C 48B8-                           mov rax, sob_boolean_false
  1421 00000F7E [0200000000000000] 
  1422                                  .L_end:
  1423                                          LEAVE
  1423 00000F86 C9                  <1>  leave
  1424 00000F87 C21800                          ret AND_KILL_FRAME(1)
  1425                                  
  1426                                  L_code_ptr_cons:
  1427                                          ENTER
  1427 00000F8A C8000000            <1>  enter 0, 0
  1427 00000F8E 4883E4F0            <1>  and rsp, ~15
  1428 00000F92 48837D1802                      cmp COUNT, 2
  1429 00000F97 0F85D70D0000                    jne L_error_arg_count_2
  1430 00000F9D BF11000000                      mov rdi, (1 + 8 + 8)
  1431 00000FA2 E8D8F6FFFF                      call malloc
  1432 00000FA7 C60021                          mov byte [rax], T_pair
  1433 00000FAA 488B5D20                        mov rbx, PARAM(0)
  1434 00000FAE 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1435 00000FB2 488B5D28                        mov rbx, PARAM(1)
  1436 00000FB6 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1437                                          LEAVE
  1437 00000FBA C9                  <1>  leave
  1438 00000FBB C22000                          ret AND_KILL_FRAME(2)
  1439                                  
  1440                                  L_code_ptr_display_sexpr:
  1441                                          ENTER
  1441 00000FBE C8000000            <1>  enter 0, 0
  1441 00000FC2 4883E4F0            <1>  and rsp, ~15
  1442 00000FC6 48837D1801                      cmp COUNT, 1
  1443 00000FCB 0F85770D0000                    jne L_error_arg_count_1
  1444 00000FD1 488B7D20                        mov rdi, PARAM(0)
  1445 00000FD5 E8C0F6FFFF                      call print_sexpr
  1446 00000FDA 48B8-                           mov rax, sob_void
  1446 00000FDC [0000000000000000] 
  1447                                          LEAVE
  1447 00000FE4 C9                  <1>  leave
  1448 00000FE5 C21800                          ret AND_KILL_FRAME(1)
  1449                                  
  1450                                  L_code_ptr_write_char:
  1451                                          ENTER
  1451 00000FE8 C8000000            <1>  enter 0, 0
  1451 00000FEC 4883E4F0            <1>  and rsp, ~15
  1452 00000FF0 48837D1801                      cmp COUNT, 1
  1453 00000FF5 0F854D0D0000                    jne L_error_arg_count_1
  1454 00000FFB 488B4520                        mov rax, PARAM(0)
  1455                                          assert_char(rax)
  1455 00000FFF 803802              <1>  cmp byte [%1], %2
  1455 00001002 0F851C0E0000        <1>  jne L_error_incorrect_type
  1456 00001008 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1457 0000100B 4825FF000000                    and rax, 255
  1458 00001011 48BF-                           mov rdi, fmt_char
  1458 00001013 [9202000000000000] 
  1459 0000101B 4889C6                          mov rsi, rax
  1460 0000101E B800000000                      mov rax, 0
  1461 00001023 E8(00000000)                    call printf
  1462 00001028 48B8-                           mov rax, sob_void
  1462 0000102A [0000000000000000] 
  1463                                          LEAVE
  1463 00001032 C9                  <1>  leave
  1464 00001033 C21800                          ret AND_KILL_FRAME(1)
  1465                                  
  1466                                  L_code_ptr_car:
  1467                                          ENTER
  1467 00001036 C8000000            <1>  enter 0, 0
  1467 0000103A 4883E4F0            <1>  and rsp, ~15
  1468 0000103E 48837D1801                      cmp COUNT, 1
  1469 00001043 0F85FF0C0000                    jne L_error_arg_count_1
  1470 00001049 488B4520                        mov rax, PARAM(0)
  1471                                          assert_pair(rax)
  1471 0000104D 803821              <1>  cmp byte [%1], %2
  1471 00001050 0F85CE0D0000        <1>  jne L_error_incorrect_type
  1472 00001056 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1473                                          LEAVE
  1473 0000105A C9                  <1>  leave
  1474 0000105B C21800                          ret AND_KILL_FRAME(1)
  1475                                          
  1476                                  L_code_ptr_cdr:
  1477                                          ENTER
  1477 0000105E C8000000            <1>  enter 0, 0
  1477 00001062 4883E4F0            <1>  and rsp, ~15
  1478 00001066 48837D1801                      cmp COUNT, 1
  1479 0000106B 0F85D70C0000                    jne L_error_arg_count_1
  1480 00001071 488B4520                        mov rax, PARAM(0)
  1481                                          assert_pair(rax)
  1481 00001075 803821              <1>  cmp byte [%1], %2
  1481 00001078 0F85A60D0000        <1>  jne L_error_incorrect_type
  1482 0000107E 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1483                                          LEAVE
  1483 00001082 C9                  <1>  leave
  1484 00001083 C21800                          ret AND_KILL_FRAME(1)
  1485                                          
  1486                                  L_code_ptr_string_length:
  1487                                          ENTER
  1487 00001086 C8000000            <1>  enter 0, 0
  1487 0000108A 4883E4F0            <1>  and rsp, ~15
  1488 0000108E 48837D1801                      cmp COUNT, 1
  1489 00001093 0F85AF0C0000                    jne L_error_arg_count_1
  1490 00001099 488B4520                        mov rax, PARAM(0)
  1491                                          assert_string(rax)
  1491 0000109D 803803              <1>  cmp byte [%1], %2
  1491 000010A0 0F857E0D0000        <1>  jne L_error_incorrect_type
  1492 000010A6 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1493 000010AA E81F0C0000                      call make_integer
  1494                                          LEAVE
  1494 000010AF C9                  <1>  leave
  1495 000010B0 C21800                          ret AND_KILL_FRAME(1)
  1496                                  
  1497                                  L_code_ptr_vector_length:
  1498                                          ENTER
  1498 000010B3 C8000000            <1>  enter 0, 0
  1498 000010B7 4883E4F0            <1>  and rsp, ~15
  1499 000010BB 48837D1801                      cmp COUNT, 1
  1500 000010C0 0F85820C0000                    jne L_error_arg_count_1
  1501 000010C6 488B4520                        mov rax, PARAM(0)
  1502                                          assert_vector(rax)
  1502 000010CA 803822              <1>  cmp byte [%1], %2
  1502 000010CD 0F85510D0000        <1>  jne L_error_incorrect_type
  1503 000010D3 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1504 000010D7 E8F20B0000                      call make_integer
  1505                                          LEAVE
  1505 000010DC C9                  <1>  leave
  1506 000010DD C21800                          ret AND_KILL_FRAME(1)
  1507                                  
  1508                                  L_code_ptr_real_to_integer:
  1509                                          ENTER
  1509 000010E0 C8000000            <1>  enter 0, 0
  1509 000010E4 4883E4F0            <1>  and rsp, ~15
  1510 000010E8 48837D1801                      cmp COUNT, 1
  1511 000010ED 0F85550C0000                    jne L_error_arg_count_1
  1512 000010F3 488B5D20                        mov rbx, PARAM(0)
  1513                                          assert_real(rbx)
  1513 000010F7 803B12              <1>  cmp byte [%1], %2
  1513 000010FA 0F85240D0000        <1>  jne L_error_incorrect_type
  1514 00001100 F20F104301                      movsd xmm0, qword [rbx + 1]
  1515 00001105 F2480F2CF8                      cvttsd2si rdi, xmm0
  1516 0000110A E8BF0B0000                      call make_integer
  1517                                          LEAVE
  1517 0000110F C9                  <1>  leave
  1518 00001110 C21800                          ret AND_KILL_FRAME(1)
  1519                                  
  1520                                  L_code_ptr_exit:
  1521                                          ENTER
  1521 00001113 C8000000            <1>  enter 0, 0
  1521 00001117 4883E4F0            <1>  and rsp, ~15
  1522 0000111B 48837D1800                      cmp COUNT, 0
  1523 00001120 0F85F60B0000                    jne L_error_arg_count_0
  1524 00001126 B800000000                      mov rax, 0
  1525 0000112B E8(00000000)                    call exit
  1526                                  
  1527                                  L_code_ptr_integer_to_real:
  1528                                          ENTER
  1528 00001130 C8000000            <1>  enter 0, 0
  1528 00001134 4883E4F0            <1>  and rsp, ~15
  1529 00001138 48837D1801                      cmp COUNT, 1
  1530 0000113D 0F85050C0000                    jne L_error_arg_count_1
  1531 00001143 488B4520                        mov rax, PARAM(0)
  1532                                          assert_integer(rax)
  1532                              <1>  assert_rational(%1)
  1532 00001147 803811              <2>  cmp byte [%1], %2
  1532 0000114A 0F85D40C0000        <2>  jne L_error_incorrect_type
  1532 00001150 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
  1532 00001155 0F85C90C0000        <1>  jne L_error_incorrect_type
  1533 0000115B FF7001                          push qword [rax + 1]
  1534 0000115E F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1535 00001164 E8490B0000                      call make_real
  1536                                          LEAVE
  1536 00001169 C9                  <1>  leave
  1537 0000116A C21800                          ret AND_KILL_FRAME(1)
  1538                                  
  1539                                  L_code_ptr_rational_to_real:
  1540                                          ENTER
  1540 0000116D C8000000            <1>  enter 0, 0
  1540 00001171 4883E4F0            <1>  and rsp, ~15
  1541 00001175 48837D1801                      cmp COUNT, 1
  1542 0000117A 0F85C80B0000                    jne L_error_arg_count_1
  1543 00001180 488B4520                        mov rax, PARAM(0)
  1544                                          assert_rational(rax)
  1544 00001184 803811              <1>  cmp byte [%1], %2
  1544 00001187 0F85970C0000        <1>  jne L_error_incorrect_type
  1545 0000118D FF7001                          push qword [rax + 1]
  1546 00001190 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1547 00001196 FF7009                          push qword [rax + 1 + 8]
  1548 00001199 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1549 0000119F F20F5EC1                        divsd xmm0, xmm1
  1550 000011A3 E80A0B0000                      call make_real
  1551                                          LEAVE
  1551 000011A8 C9                  <1>  leave
  1552 000011A9 C21800                          ret AND_KILL_FRAME(1)
  1553                                  
  1554                                  L_code_ptr_char_to_integer:
  1555                                          ENTER
  1555 000011AC C8000000            <1>  enter 0, 0
  1555 000011B0 4883E4F0            <1>  and rsp, ~15
  1556 000011B4 48837D1801                      cmp COUNT, 1
  1557 000011B9 0F85890B0000                    jne L_error_arg_count_1
  1558 000011BF 488B4520                        mov rax, PARAM(0)
  1559                                          assert_char(rax)
  1559 000011C3 803802              <1>  cmp byte [%1], %2
  1559 000011C6 0F85580C0000        <1>  jne L_error_incorrect_type
  1560 000011CC 8A4001                          mov al, byte [rax + 1]
  1561 000011CF 4825FF000000                    and rax, 255
  1562 000011D5 4889C7                          mov rdi, rax
  1563 000011D8 E8F10A0000                      call make_integer
  1564                                          LEAVE
  1564 000011DD C9                  <1>  leave
  1565 000011DE C21800                          ret AND_KILL_FRAME(1)
  1566                                  
  1567                                  L_code_ptr_integer_to_char:
  1568                                          ENTER
  1568 000011E1 C8000000            <1>  enter 0, 0
  1568 000011E5 4883E4F0            <1>  and rsp, ~15
  1569 000011E9 48837D1801                      cmp COUNT, 1
  1570 000011EE 0F85540B0000                    jne L_error_arg_count_1
  1571 000011F4 488B4520                        mov rax, PARAM(0)
  1572                                          assert_integer(rax)
  1572                              <1>  assert_rational(%1)
  1572 000011F8 803811              <2>  cmp byte [%1], %2
  1572 000011FB 0F85230C0000        <2>  jne L_error_incorrect_type
  1572 00001201 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
  1572 00001206 0F85180C0000        <1>  jne L_error_incorrect_type
  1573 0000120C 488B5801                        mov rbx, qword [rax + 1]
  1574 00001210 4883FB00                        cmp rbx, 0
  1575 00001214 0F8EDA0A0000                    jle L_error_integer_range
  1576 0000121A 4881FB00010000                  cmp rbx, 256
  1577 00001221 0F8DCD0A0000                    jge L_error_integer_range
  1578 00001227 BF02000000                      mov rdi, (1 + 1)
  1579 0000122C E84EF4FFFF                      call malloc
  1580 00001231 C60002                          mov byte [rax], T_char
  1581 00001234 885801                          mov byte [rax + 1], bl
  1582                                          LEAVE
  1582 00001237 C9                  <1>  leave
  1583 00001238 C21800                          ret AND_KILL_FRAME(1)
  1584                                  
  1585                                  L_code_ptr_trng:
  1586                                          ENTER
  1586 0000123B C8000000            <1>  enter 0, 0
  1586 0000123F 4883E4F0            <1>  and rsp, ~15
  1587 00001243 48837D1800                      cmp COUNT, 0
  1588 00001248 0F85CE0A0000                    jne L_error_arg_count_0
  1589 0000124E 480FC7F7                        rdrand rdi
  1590 00001252 48D1EF                          shr rdi, 1
  1591 00001255 E8740A0000                      call make_integer
  1592                                          LEAVE
  1592 0000125A C9                  <1>  leave
  1593 0000125B C21000                          ret AND_KILL_FRAME(0)
  1594                                  
  1595                                  L_code_ptr_is_zero:
  1596                                          ENTER
  1596 0000125E C8000000            <1>  enter 0, 0
  1596 00001262 4883E4F0            <1>  and rsp, ~15
  1597 00001266 48837D1801                      cmp COUNT, 1
  1598 0000126B 0F85D70A0000                    jne L_error_arg_count_1
  1599 00001271 488B4520                        mov rax, PARAM(0)
  1600 00001275 803811                          cmp byte [rax], T_rational
  1601 00001278 740A                            je .L_rational
  1602 0000127A 803812                          cmp byte [rax], T_real
  1603 0000127D 740E                            je .L_real
  1604 0000127F E9A00B0000                      jmp L_error_incorrect_type
  1605                                  .L_rational:
  1606 00001284 4883780100                      cmp qword [rax + 1], 0
  1607 00001289 7420                            je .L_zero
  1608 0000128B EB12                            jmp .L_not_zero
  1609                                  .L_real:
  1610 0000128D 660FEFC0                        pxor xmm0, xmm0
  1611 00001291 FF7001                          push qword [rax + 1]
  1612 00001294 F20F100C24                      movsd xmm1, qword [rsp]
  1613 00001299 660F2EC1                        ucomisd xmm0, xmm1
  1614 0000129D 740C                            je .L_zero
  1615                                  .L_not_zero:
  1616 0000129F 48B8-                           mov rax, sob_boolean_false
  1616 000012A1 [0200000000000000] 
  1617 000012A9 EB0A                            jmp .L_end
  1618                                  .L_zero:
  1619 000012AB 48B8-                           mov rax, sob_boolean_true
  1619 000012AD [0300000000000000] 
  1620                                  .L_end:
  1621                                          LEAVE
  1621 000012B5 C9                  <1>  leave
  1622 000012B6 C21800                          ret AND_KILL_FRAME(1)
  1623                                  
  1624                                  L_code_ptr_is_integer:
  1625                                          ENTER
  1625 000012B9 C8000000            <1>  enter 0, 0
  1625 000012BD 4883E4F0            <1>  and rsp, ~15
  1626 000012C1 48837D1801                      cmp COUNT, 1
  1627 000012C6 0F857C0A0000                    jne L_error_arg_count_1
  1628 000012CC 488B4520                        mov rax, PARAM(0)
  1629 000012D0 803811                          cmp byte [rax], T_rational
  1630 000012D3 7513                            jne .L_false
  1631 000012D5 4883780901                      cmp qword [rax + 1 + 8], 1
  1632 000012DA 750C                            jne .L_false
  1633 000012DC 48B8-                           mov rax, sob_boolean_true
  1633 000012DE [0300000000000000] 
  1634 000012E6 EB0A                            jmp .L_exit
  1635                                  .L_false:
  1636 000012E8 48B8-                           mov rax, sob_boolean_false
  1636 000012EA [0200000000000000] 
  1637                                  .L_exit:
  1638                                          LEAVE
  1638 000012F2 C9                  <1>  leave
  1639 000012F3 C21800                          ret AND_KILL_FRAME(1)
  1640                                  
  1641                                  L_code_ptr_raw_bin_add_rr:
  1642                                          ENTER
  1642 000012F6 C8000000            <1>  enter 0, 0
  1642 000012FA 4883E4F0            <1>  and rsp, ~15
  1643 000012FE 48837D1802                      cmp COUNT, 2
  1644 00001303 0F856B0A0000                    jne L_error_arg_count_2
  1645 00001309 488B5D20                        mov rbx, PARAM(0)
  1646                                          assert_real(rbx)
  1646 0000130D 803B12              <1>  cmp byte [%1], %2
  1646 00001310 0F850E0B0000        <1>  jne L_error_incorrect_type
  1647 00001316 488B4D28                        mov rcx, PARAM(1)
  1648                                          assert_real(rcx)
  1648 0000131A 803912              <1>  cmp byte [%1], %2
  1648 0000131D 0F85010B0000        <1>  jne L_error_incorrect_type
  1649 00001323 F20F104301                      movsd xmm0, qword [rbx + 1]
  1650 00001328 F20F104901                      movsd xmm1, qword [rcx + 1]
  1651 0000132D F20F58C1                        addsd xmm0, xmm1
  1652 00001331 E87C090000                      call make_real
  1653                                          LEAVE
  1653 00001336 C9                  <1>  leave
  1654 00001337 C22000                          ret AND_KILL_FRAME(2)
  1655                                  
  1656                                  L_code_ptr_raw_bin_sub_rr:
  1657                                          ENTER
  1657 0000133A C8000000            <1>  enter 0, 0
  1657 0000133E 4883E4F0            <1>  and rsp, ~15
  1658 00001342 48837D1802                      cmp COUNT, 2
  1659 00001347 0F85270A0000                    jne L_error_arg_count_2
  1660 0000134D 488B5D20                        mov rbx, PARAM(0)
  1661                                          assert_real(rbx)
  1661 00001351 803B12              <1>  cmp byte [%1], %2
  1661 00001354 0F85CA0A0000        <1>  jne L_error_incorrect_type
  1662 0000135A 488B4D28                        mov rcx, PARAM(1)
  1663                                          assert_real(rcx)
  1663 0000135E 803912              <1>  cmp byte [%1], %2
  1663 00001361 0F85BD0A0000        <1>  jne L_error_incorrect_type
  1664 00001367 F20F104301                      movsd xmm0, qword [rbx + 1]
  1665 0000136C F20F104901                      movsd xmm1, qword [rcx + 1]
  1666 00001371 F20F5CC1                        subsd xmm0, xmm1
  1667 00001375 E838090000                      call make_real
  1668                                          LEAVE
  1668 0000137A C9                  <1>  leave
  1669 0000137B C22000                          ret AND_KILL_FRAME(2)
  1670                                  
  1671                                  L_code_ptr_raw_bin_mul_rr:
  1672                                          ENTER
  1672 0000137E C8000000            <1>  enter 0, 0
  1672 00001382 4883E4F0            <1>  and rsp, ~15
  1673 00001386 48837D1802                      cmp COUNT, 2
  1674 0000138B 0F85E3090000                    jne L_error_arg_count_2
  1675 00001391 488B5D20                        mov rbx, PARAM(0)
  1676                                          assert_real(rbx)
  1676 00001395 803B12              <1>  cmp byte [%1], %2
  1676 00001398 0F85860A0000        <1>  jne L_error_incorrect_type
  1677 0000139E 488B4D28                        mov rcx, PARAM(1)
  1678                                          assert_real(rcx)
  1678 000013A2 803912              <1>  cmp byte [%1], %2
  1678 000013A5 0F85790A0000        <1>  jne L_error_incorrect_type
  1679 000013AB F20F104301                      movsd xmm0, qword [rbx + 1]
  1680 000013B0 F20F104901                      movsd xmm1, qword [rcx + 1]
  1681 000013B5 F20F59C1                        mulsd xmm0, xmm1
  1682 000013B9 E8F4080000                      call make_real
  1683                                          LEAVE
  1683 000013BE C9                  <1>  leave
  1684 000013BF C22000                          ret AND_KILL_FRAME(2)
  1685                                  
  1686                                  L_code_ptr_raw_bin_div_rr:
  1687                                          ENTER
  1687 000013C2 C8000000            <1>  enter 0, 0
  1687 000013C6 4883E4F0            <1>  and rsp, ~15
  1688 000013CA 48837D1802                      cmp COUNT, 2
  1689 000013CF 0F859F090000                    jne L_error_arg_count_2
  1690 000013D5 488B5D20                        mov rbx, PARAM(0)
  1691                                          assert_real(rbx)
  1691 000013D9 803B12              <1>  cmp byte [%1], %2
  1691 000013DC 0F85420A0000        <1>  jne L_error_incorrect_type
  1692 000013E2 488B4D28                        mov rcx, PARAM(1)
  1693                                          assert_real(rcx)
  1693 000013E6 803912              <1>  cmp byte [%1], %2
  1693 000013E9 0F85350A0000        <1>  jne L_error_incorrect_type
  1694 000013EF F20F104301                      movsd xmm0, qword [rbx + 1]
  1695 000013F4 F20F104901                      movsd xmm1, qword [rcx + 1]
  1696 000013F9 660FEFD2                        pxor xmm2, xmm2
  1697 000013FD 660F2ECA                        ucomisd xmm1, xmm2
  1698 00001401 0F84450A0000                    je L_error_division_by_zero
  1699 00001407 F20F5EC1                        divsd xmm0, xmm1
  1700 0000140B E8A2080000                      call make_real
  1701                                          LEAVE
  1701 00001410 C9                  <1>  leave
  1702 00001411 C22000                          ret AND_KILL_FRAME(2)
  1703                                  
  1704                                  L_code_ptr_raw_bin_add_qq:
  1705                                          ENTER
  1705 00001414 C8000000            <1>  enter 0, 0
  1705 00001418 4883E4F0            <1>  and rsp, ~15
  1706 0000141C 48837D1802                      cmp COUNT, 2
  1707 00001421 0F854D090000                    jne L_error_arg_count_2
  1708 00001427 4C8B4520                        mov r8, PARAM(0)
  1709                                          assert_rational(r8)
  1709 0000142B 41803811            <1>  cmp byte [%1], %2
  1709 0000142F 0F85EF090000        <1>  jne L_error_incorrect_type
  1710 00001435 4C8B4D28                        mov r9, PARAM(1)
  1711                                          assert_rational(r9)
  1711 00001439 41803911            <1>  cmp byte [%1], %2
  1711 0000143D 0F85E1090000        <1>  jne L_error_incorrect_type
  1712 00001443 498B4001                        mov rax, qword [r8 + 1] ; num1
  1713 00001447 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1714 0000144B 4899                            cqo
  1715 0000144D 48F7EB                          imul rbx
  1716 00001450 4889C6                          mov rsi, rax
  1717 00001453 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1718 00001457 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1719 0000145B 4899                            cqo
  1720 0000145D 48F7EB                          imul rbx
  1721 00001460 4801C6                          add rsi, rax
  1722 00001463 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1723 00001467 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1724 0000146B 4899                            cqo
  1725 0000146D 48F7EB                          imul rbx
  1726 00001470 4889C7                          mov rdi, rax
  1727 00001473 E827010000                      call normalize_rational
  1728                                          LEAVE
  1728 00001478 C9                  <1>  leave
  1729 00001479 C22000                          ret AND_KILL_FRAME(2)
  1730                                  
  1731                                  L_code_ptr_raw_bin_sub_qq:
  1732                                          ENTER
  1732 0000147C C8000000            <1>  enter 0, 0
  1732 00001480 4883E4F0            <1>  and rsp, ~15
  1733 00001484 48837D1802                      cmp COUNT, 2
  1734 00001489 0F85E5080000                    jne L_error_arg_count_2
  1735 0000148F 4C8B4520                        mov r8, PARAM(0)
  1736                                          assert_rational(r8)
  1736 00001493 41803811            <1>  cmp byte [%1], %2
  1736 00001497 0F8587090000        <1>  jne L_error_incorrect_type
  1737 0000149D 4C8B4D28                        mov r9, PARAM(1)
  1738                                          assert_rational(r9)
  1738 000014A1 41803911            <1>  cmp byte [%1], %2
  1738 000014A5 0F8579090000        <1>  jne L_error_incorrect_type
  1739 000014AB 498B4001                        mov rax, qword [r8 + 1] ; num1
  1740 000014AF 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1741 000014B3 4899                            cqo
  1742 000014B5 48F7EB                          imul rbx
  1743 000014B8 4889C6                          mov rsi, rax
  1744 000014BB 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1745 000014BF 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1746 000014C3 4899                            cqo
  1747 000014C5 48F7EB                          imul rbx
  1748 000014C8 4829C6                          sub rsi, rax
  1749 000014CB 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1750 000014CF 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1751 000014D3 4899                            cqo
  1752 000014D5 48F7EB                          imul rbx
  1753 000014D8 4889C7                          mov rdi, rax
  1754 000014DB E8BF000000                      call normalize_rational
  1755                                          LEAVE
  1755 000014E0 C9                  <1>  leave
  1756 000014E1 C22000                          ret AND_KILL_FRAME(2)
  1757                                  
  1758                                  L_code_ptr_raw_bin_mul_qq:
  1759                                          ENTER
  1759 000014E4 C8000000            <1>  enter 0, 0
  1759 000014E8 4883E4F0            <1>  and rsp, ~15
  1760 000014EC 48837D1802                      cmp COUNT, 2
  1761 000014F1 0F857D080000                    jne L_error_arg_count_2
  1762 000014F7 4C8B4520                        mov r8, PARAM(0)
  1763                                          assert_rational(r8)
  1763 000014FB 41803811            <1>  cmp byte [%1], %2
  1763 000014FF 0F851F090000        <1>  jne L_error_incorrect_type
  1764 00001505 4C8B4D28                        mov r9, PARAM(1)
  1765                                          assert_rational(r9)
  1765 00001509 41803911            <1>  cmp byte [%1], %2
  1765 0000150D 0F8511090000        <1>  jne L_error_incorrect_type
  1766 00001513 498B4001                        mov rax, qword [r8 + 1] ; num1
  1767 00001517 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1768 0000151B 4899                            cqo
  1769 0000151D 48F7EB                          imul rbx
  1770 00001520 4889C6                          mov rsi, rax
  1771 00001523 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1772 00001527 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1773 0000152B 4899                            cqo
  1774 0000152D 48F7EB                          imul rbx
  1775 00001530 4889C7                          mov rdi, rax
  1776 00001533 E867000000                      call normalize_rational
  1777                                          LEAVE
  1777 00001538 C9                  <1>  leave
  1778 00001539 C22000                          ret AND_KILL_FRAME(2)
  1779                                          
  1780                                  L_code_ptr_raw_bin_div_qq:
  1781                                          ENTER
  1781 0000153C C8000000            <1>  enter 0, 0
  1781 00001540 4883E4F0            <1>  and rsp, ~15
  1782 00001544 48837D1802                      cmp COUNT, 2
  1783 00001549 0F8525080000                    jne L_error_arg_count_2
  1784 0000154F 4C8B4520                        mov r8, PARAM(0)
  1785                                          assert_rational(r8)
  1785 00001553 41803811            <1>  cmp byte [%1], %2
  1785 00001557 0F85C7080000        <1>  jne L_error_incorrect_type
  1786 0000155D 4C8B4D28                        mov r9, PARAM(1)
  1787                                          assert_rational(r9)
  1787 00001561 41803911            <1>  cmp byte [%1], %2
  1787 00001565 0F85B9080000        <1>  jne L_error_incorrect_type
  1788 0000156B 4983790100                      cmp qword [r9 + 1], 0
  1789 00001570 0F84D6080000                    je L_error_division_by_zero
  1790 00001576 498B4001                        mov rax, qword [r8 + 1] ; num1
  1791 0000157A 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1792 0000157E 4899                            cqo
  1793 00001580 48F7EB                          imul rbx
  1794 00001583 4889C6                          mov rsi, rax
  1795 00001586 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1796 0000158A 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1797 0000158E 4899                            cqo
  1798 00001590 48F7EB                          imul rbx
  1799 00001593 4889C7                          mov rdi, rax
  1800 00001596 E804000000                      call normalize_rational
  1801                                          LEAVE
  1801 0000159B C9                  <1>  leave
  1802 0000159C C22000                          ret AND_KILL_FRAME(2)
  1803                                          
  1804                                  normalize_rational:
  1805 0000159F 56                              push rsi
  1806 000015A0 57                              push rdi
  1807 000015A1 E839000000                      call gcd
  1808 000015A6 4889C3                          mov rbx, rax
  1809 000015A9 58                              pop rax
  1810 000015AA 4899                            cqo
  1811 000015AC 48F7FB                          idiv rbx
  1812 000015AF 4989C0                          mov r8, rax
  1813 000015B2 58                              pop rax
  1814 000015B3 4899                            cqo
  1815 000015B5 48F7FB                          idiv rbx
  1816 000015B8 4989C1                          mov r9, rax
  1817 000015BB BF11000000                      mov rdi, (1 + 8 + 8)
  1818 000015C0 E8BAF0FFFF                      call malloc
  1819 000015C5 C60011                          mov byte [rax], T_rational
  1820 000015C8 4C894801                        mov qword [rax + 1], r9
  1821 000015CC 4C894009                        mov qword [rax + 1 + 8], r8
  1822 000015D0 C3                              ret
  1823                                  
  1824                                  iabs:
  1825 000015D1 4889F8                          mov rax, rdi
  1826 000015D4 4883F800                        cmp rax, 0
  1827 000015D8 7C01                            jl .Lneg
  1828 000015DA C3                              ret
  1829                                  .Lneg:
  1830 000015DB 48F7D8                          neg rax
  1831 000015DE C3                              ret
  1832                                  
  1833                                  gcd:
  1834 000015DF E8EDFFFFFF                      call iabs
  1835 000015E4 4889C3                          mov rbx, rax
  1836 000015E7 4889F7                          mov rdi, rsi
  1837 000015EA E8E2FFFFFF                      call iabs
  1838 000015EF 4883F800                        cmp rax, 0
  1839 000015F3 7502                            jne .L0
  1840 000015F5 4893                            xchg rax, rbx
  1841                                  .L0:
  1842 000015F7 4883FB00                        cmp rbx, 0
  1843 000015FB 740C                            je .L1
  1844 000015FD 4899                            cqo
  1845 000015FF 48F7F3                          div rbx
  1846 00001602 4889D0                          mov rax, rdx
  1847 00001605 4893                            xchg rax, rbx
  1848 00001607 EBEE                            jmp .L0
  1849                                  .L1:
  1850 00001609 C3                              ret
  1851                                  
  1852                                  L_code_ptr_error:
  1853                                          ENTER
  1853 0000160A C8000000            <1>  enter 0, 0
  1853 0000160E 4883E4F0            <1>  and rsp, ~15
  1854 00001612 48837D1802                      cmp COUNT, 2
  1855 00001617 0F8557070000                    jne L_error_arg_count_2
  1856 0000161D 488B7520                        mov rsi, PARAM(0)
  1857                                          assert_symbol(rsi)
  1857 00001621 803E04              <1>  cmp byte [%1], %2
  1857 00001624 0F85FA070000        <1>  jne L_error_incorrect_type
  1858 0000162A 488B7528                        mov rsi, PARAM(1)
  1859                                          assert_string(rsi)
  1859 0000162E 803E03              <1>  cmp byte [%1], %2
  1859 00001631 0F85ED070000        <1>  jne L_error_incorrect_type
  1860 00001637 48BF-                           mov rdi, fmt_scheme_error_part_1
  1860 00001639 [E703000000000000] 
  1861 00001641 B800000000                      mov rax, 0
  1862 00001646 E8(00000000)                    call printf
  1863 0000164B 488B7D20                        mov rdi, PARAM(0)
  1864 0000164F E846F0FFFF                      call print_sexpr
  1865 00001654 48BF-                           mov rdi, fmt_scheme_error_part_2
  1865 00001656 [FB03000000000000] 
  1866 0000165E B800000000                      mov rax, 0
  1867 00001663 E8(00000000)                    call printf
  1868 00001668 488B4528                        mov rax, PARAM(1)       ; sob_string
  1869 0000166C BE01000000                      mov rsi, 1              ; size = 1 byte
  1870 00001671 488B5001                        mov rdx, qword [rax + 1] ; length
  1871 00001675 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1872 00001679 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1873 00001681 E8(00000000)                    call fwrite
  1874 00001686 48BF-                           mov rdi, fmt_scheme_error_part_3
  1874 00001688 [3D04000000000000] 
  1875 00001690 B800000000                      mov rax, 0
  1876 00001695 E8(00000000)                    call printf
  1877 0000169A 48C7C0F7FFFFFF                  mov rax, -9
  1878 000016A1 E8(00000000)                    call exit
  1879                                  
  1880                                  L_code_ptr_raw_less_than_rr:
  1881                                          ENTER
  1881 000016A6 C8000000            <1>  enter 0, 0
  1881 000016AA 4883E4F0            <1>  and rsp, ~15
  1882 000016AE 48837D1802                      cmp COUNT, 2
  1883 000016B3 0F85BB060000                    jne L_error_arg_count_2
  1884 000016B9 488B7520                        mov rsi, PARAM(0)
  1885                                          assert_real(rsi)
  1885 000016BD 803E12              <1>  cmp byte [%1], %2
  1885 000016C0 0F855E070000        <1>  jne L_error_incorrect_type
  1886 000016C6 488B7D28                        mov rdi, PARAM(1)
  1887                                          assert_real(rdi)
  1887 000016CA 803F12              <1>  cmp byte [%1], %2
  1887 000016CD 0F8551070000        <1>  jne L_error_incorrect_type
  1888 000016D3 F20F104601                      movsd xmm0, qword [rsi + 1]
  1889 000016D8 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1890 000016DD 660F2FC1                        comisd xmm0, xmm1
  1891 000016E1 730C                            jae .L_false
  1892 000016E3 48B8-                           mov rax, sob_boolean_true
  1892 000016E5 [0300000000000000] 
  1893 000016ED EB0A                            jmp .L_exit
  1894                                  .L_false:
  1895 000016EF 48B8-                           mov rax, sob_boolean_false
  1895 000016F1 [0200000000000000] 
  1896                                  .L_exit:
  1897                                          LEAVE
  1897 000016F9 C9                  <1>  leave
  1898 000016FA C22000                          ret AND_KILL_FRAME(2)
  1899                                          
  1900                                  L_code_ptr_raw_less_than_qq:
  1901                                          ENTER
  1901 000016FD C8000000            <1>  enter 0, 0
  1901 00001701 4883E4F0            <1>  and rsp, ~15
  1902 00001705 48837D1802                      cmp COUNT, 2
  1903 0000170A 0F8564060000                    jne L_error_arg_count_2
  1904 00001710 488B7520                        mov rsi, PARAM(0)
  1905                                          assert_rational(rsi)
  1905 00001714 803E11              <1>  cmp byte [%1], %2
  1905 00001717 0F8507070000        <1>  jne L_error_incorrect_type
  1906 0000171D 488B7D28                        mov rdi, PARAM(1)
  1907                                          assert_rational(rdi)
  1907 00001721 803F11              <1>  cmp byte [%1], %2
  1907 00001724 0F85FA060000        <1>  jne L_error_incorrect_type
  1908 0000172A 488B4601                        mov rax, qword [rsi + 1] ; num1
  1909 0000172E 4899                            cqo
  1910 00001730 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1911 00001734 4889C1                          mov rcx, rax
  1912 00001737 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1913 0000173B 4899                            cqo
  1914 0000173D 48F76F01                        imul qword [rdi + 1]          ; num2
  1915 00001741 4829C1                          sub rcx, rax
  1916 00001744 7D0C                            jge .L_false
  1917 00001746 48B8-                           mov rax, sob_boolean_true
  1917 00001748 [0300000000000000] 
  1918 00001750 EB0A                            jmp .L_exit
  1919                                  .L_false:
  1920 00001752 48B8-                           mov rax, sob_boolean_false
  1920 00001754 [0200000000000000] 
  1921                                  .L_exit:
  1922                                          LEAVE
  1922 0000175C C9                  <1>  leave
  1923 0000175D C22000                          ret AND_KILL_FRAME(2)
  1924                                  
  1925                                  L_code_ptr_raw_equal_rr:
  1926                                          ENTER
  1926 00001760 C8000000            <1>  enter 0, 0
  1926 00001764 4883E4F0            <1>  and rsp, ~15
  1927 00001768 48837D1802                      cmp COUNT, 2
  1928 0000176D 0F8501060000                    jne L_error_arg_count_2
  1929 00001773 488B7520                        mov rsi, PARAM(0)
  1930                                          assert_real(rsi)
  1930 00001777 803E12              <1>  cmp byte [%1], %2
  1930 0000177A 0F85A4060000        <1>  jne L_error_incorrect_type
  1931 00001780 488B7D28                        mov rdi, PARAM(1)
  1932                                          assert_real(rdi)
  1932 00001784 803F12              <1>  cmp byte [%1], %2
  1932 00001787 0F8597060000        <1>  jne L_error_incorrect_type
  1933 0000178D F20F104601                      movsd xmm0, qword [rsi + 1]
  1934 00001792 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1935 00001797 660F2FC1                        comisd xmm0, xmm1
  1936 0000179B 750C                            jne .L_false
  1937 0000179D 48B8-                           mov rax, sob_boolean_true
  1937 0000179F [0300000000000000] 
  1938 000017A7 EB0A                            jmp .L_exit
  1939                                  .L_false:
  1940 000017A9 48B8-                           mov rax, sob_boolean_false
  1940 000017AB [0200000000000000] 
  1941                                  .L_exit:
  1942                                          LEAVE
  1942 000017B3 C9                  <1>  leave
  1943 000017B4 C22000                          ret AND_KILL_FRAME(2)
  1944                                          
  1945                                  L_code_ptr_raw_equal_qq:
  1946                                          ENTER
  1946 000017B7 C8000000            <1>  enter 0, 0
  1946 000017BB 4883E4F0            <1>  and rsp, ~15
  1947 000017BF 48837D1802                      cmp COUNT, 2
  1948 000017C4 0F85AA050000                    jne L_error_arg_count_2
  1949 000017CA 488B7520                        mov rsi, PARAM(0)
  1950                                          assert_rational(rsi)
  1950 000017CE 803E11              <1>  cmp byte [%1], %2
  1950 000017D1 0F854D060000        <1>  jne L_error_incorrect_type
  1951 000017D7 488B7D28                        mov rdi, PARAM(1)
  1952                                          assert_rational(rdi)
  1952 000017DB 803F11              <1>  cmp byte [%1], %2
  1952 000017DE 0F8540060000        <1>  jne L_error_incorrect_type
  1953 000017E4 488B4601                        mov rax, qword [rsi + 1] ; num1
  1954 000017E8 4899                            cqo
  1955 000017EA 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1956 000017EE 4889C1                          mov rcx, rax
  1957 000017F1 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1958 000017F5 4899                            cqo
  1959 000017F7 48F76F01                        imul qword [rdi + 1]          ; num2
  1960 000017FB 4829C1                          sub rcx, rax
  1961 000017FE 750C                            jne .L_false
  1962 00001800 48B8-                           mov rax, sob_boolean_true
  1962 00001802 [0300000000000000] 
  1963 0000180A EB0A                            jmp .L_exit
  1964                                  .L_false:
  1965 0000180C 48B8-                           mov rax, sob_boolean_false
  1965 0000180E [0200000000000000] 
  1966                                  .L_exit:
  1967                                          LEAVE
  1967 00001816 C9                  <1>  leave
  1968 00001817 C22000                          ret AND_KILL_FRAME(2)
  1969                                  
  1970                                  L_code_ptr_quotient:
  1971                                          ENTER
  1971 0000181A C8000000            <1>  enter 0, 0
  1971 0000181E 4883E4F0            <1>  and rsp, ~15
  1972 00001822 48837D1802                      cmp COUNT, 2
  1973 00001827 0F8547050000                    jne L_error_arg_count_2
  1974 0000182D 488B7520                        mov rsi, PARAM(0)
  1975                                          assert_integer(rsi)
  1975                              <1>  assert_rational(%1)
  1975 00001831 803E11              <2>  cmp byte [%1], %2
  1975 00001834 0F85EA050000        <2>  jne L_error_incorrect_type
  1975 0000183A 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  1975 0000183F 0F85DF050000        <1>  jne L_error_incorrect_type
  1976 00001845 488B7D28                        mov rdi, PARAM(1)
  1977                                          assert_integer(rdi)
  1977                              <1>  assert_rational(%1)
  1977 00001849 803F11              <2>  cmp byte [%1], %2
  1977 0000184C 0F85D2050000        <2>  jne L_error_incorrect_type
  1977 00001852 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
  1977 00001857 0F85C7050000        <1>  jne L_error_incorrect_type
  1978 0000185D 488B4601                        mov rax, qword [rsi + 1]
  1979 00001861 488B5F01                        mov rbx, qword [rdi + 1]
  1980 00001865 4883FB00                        cmp rbx, 0
  1981 00001869 0F84DD050000                    je L_error_division_by_zero
  1982 0000186F 4899                            cqo
  1983 00001871 48F7FB                          idiv rbx
  1984 00001874 4889C7                          mov rdi, rax
  1985 00001877 E852040000                      call make_integer
  1986                                          LEAVE
  1986 0000187C C9                  <1>  leave
  1987 0000187D C22000                          ret AND_KILL_FRAME(2)
  1988                                          
  1989                                  L_code_ptr_remainder:
  1990                                          ENTER
  1990 00001880 C8000000            <1>  enter 0, 0
  1990 00001884 4883E4F0            <1>  and rsp, ~15
  1991 00001888 48837D1802                      cmp COUNT, 2
  1992 0000188D 0F85E1040000                    jne L_error_arg_count_2
  1993 00001893 488B7520                        mov rsi, PARAM(0)
  1994                                          assert_integer(rsi)
  1994                              <1>  assert_rational(%1)
  1994 00001897 803E11              <2>  cmp byte [%1], %2
  1994 0000189A 0F8584050000        <2>  jne L_error_incorrect_type
  1994 000018A0 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  1994 000018A5 0F8579050000        <1>  jne L_error_incorrect_type
  1995 000018AB 488B7D28                        mov rdi, PARAM(1)
  1996                                          assert_integer(rdi)
  1996                              <1>  assert_rational(%1)
  1996 000018AF 803F11              <2>  cmp byte [%1], %2
  1996 000018B2 0F856C050000        <2>  jne L_error_incorrect_type
  1996 000018B8 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
  1996 000018BD 0F8561050000        <1>  jne L_error_incorrect_type
  1997 000018C3 488B4601                        mov rax, qword [rsi + 1]
  1998 000018C7 488B5F01                        mov rbx, qword [rdi + 1]
  1999 000018CB 4883FB00                        cmp rbx, 0
  2000 000018CF 0F8477050000                    je L_error_division_by_zero
  2001 000018D5 4899                            cqo
  2002 000018D7 48F7FB                          idiv rbx
  2003 000018DA 4889D7                          mov rdi, rdx
  2004 000018DD E8EC030000                      call make_integer
  2005                                          LEAVE
  2005 000018E2 C9                  <1>  leave
  2006 000018E3 C22000                          ret AND_KILL_FRAME(2)
  2007                                  
  2008                                  L_code_ptr_set_car:
  2009                                          ENTER
  2009 000018E6 C8000000            <1>  enter 0, 0
  2009 000018EA 4883E4F0            <1>  and rsp, ~15
  2010 000018EE 48837D1802                      cmp COUNT, 2
  2011 000018F3 0F857B040000                    jne L_error_arg_count_2
  2012 000018F9 488B4520                        mov rax, PARAM(0)
  2013                                          assert_pair(rax)
  2013 000018FD 803821              <1>  cmp byte [%1], %2
  2013 00001900 0F851E050000        <1>  jne L_error_incorrect_type
  2014 00001906 488B5D28                        mov rbx, PARAM(1)
  2015 0000190A 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2016 0000190E 48B8-                           mov rax, sob_void
  2016 00001910 [0000000000000000] 
  2017                                          LEAVE
  2017 00001918 C9                  <1>  leave
  2018 00001919 C22000                          ret AND_KILL_FRAME(2)
  2019                                  
  2020                                  L_code_ptr_set_cdr:
  2021                                          ENTER
  2021 0000191C C8000000            <1>  enter 0, 0
  2021 00001920 4883E4F0            <1>  and rsp, ~15
  2022 00001924 48837D1802                      cmp COUNT, 2
  2023 00001929 0F8545040000                    jne L_error_arg_count_2
  2024 0000192F 488B4520                        mov rax, PARAM(0)
  2025                                          assert_pair(rax)
  2025 00001933 803821              <1>  cmp byte [%1], %2
  2025 00001936 0F85E8040000        <1>  jne L_error_incorrect_type
  2026 0000193C 488B5D28                        mov rbx, PARAM(1)
  2027 00001940 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2028 00001944 48B8-                           mov rax, sob_void
  2028 00001946 [0000000000000000] 
  2029                                          LEAVE
  2029 0000194E C9                  <1>  leave
  2030 0000194F C22000                          ret AND_KILL_FRAME(2)
  2031                                  
  2032                                  L_code_ptr_string_ref:
  2033                                          ENTER
  2033 00001952 C8000000            <1>  enter 0, 0
  2033 00001956 4883E4F0            <1>  and rsp, ~15
  2034 0000195A 48837D1802                      cmp COUNT, 2
  2035 0000195F 0F850F040000                    jne L_error_arg_count_2
  2036 00001965 488B7D20                        mov rdi, PARAM(0)
  2037                                          assert_string(rdi)
  2037 00001969 803F03              <1>  cmp byte [%1], %2
  2037 0000196C 0F85B2040000        <1>  jne L_error_incorrect_type
  2038 00001972 488B7528                        mov rsi, PARAM(1)
  2039                                          assert_integer(rsi)
  2039                              <1>  assert_rational(%1)
  2039 00001976 803E11              <2>  cmp byte [%1], %2
  2039 00001979 0F85A5040000        <2>  jne L_error_incorrect_type
  2039 0000197F 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2039 00001984 0F859A040000        <1>  jne L_error_incorrect_type
  2040 0000198A 488B5701                        mov rdx, qword [rdi + 1]
  2041 0000198E 488B4E01                        mov rcx, qword [rsi + 1]
  2042 00001992 4839D1                          cmp rcx, rdx
  2043 00001995 0F8D59030000                    jge L_error_integer_range
  2044 0000199B 4883F900                        cmp rcx, 0
  2045 0000199F 0F8C4F030000                    jl L_error_integer_range
  2046 000019A5 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2047 000019A9 BF02000000                      mov rdi, 2
  2048 000019AE E8CCECFFFF                      call malloc
  2049 000019B3 C60002                          mov byte [rax], T_char
  2050 000019B6 885801                          mov byte [rax + 1], bl
  2051                                          LEAVE
  2051 000019B9 C9                  <1>  leave
  2052 000019BA C22000                          ret AND_KILL_FRAME(2)
  2053                                  
  2054                                  L_code_ptr_vector_ref:
  2055                                          ENTER
  2055 000019BD C8000000            <1>  enter 0, 0
  2055 000019C1 4883E4F0            <1>  and rsp, ~15
  2056 000019C5 48837D1802                      cmp COUNT, 2
  2057 000019CA 0F85A4030000                    jne L_error_arg_count_2
  2058 000019D0 488B7D20                        mov rdi, PARAM(0)
  2059                                          assert_vector(rdi)
  2059 000019D4 803F22              <1>  cmp byte [%1], %2
  2059 000019D7 0F8547040000        <1>  jne L_error_incorrect_type
  2060 000019DD 488B7528                        mov rsi, PARAM(1)
  2061                                          assert_integer(rsi)
  2061                              <1>  assert_rational(%1)
  2061 000019E1 803E11              <2>  cmp byte [%1], %2
  2061 000019E4 0F853A040000        <2>  jne L_error_incorrect_type
  2061 000019EA 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2061 000019EF 0F852F040000        <1>  jne L_error_incorrect_type
  2062 000019F5 488B5701                        mov rdx, qword [rdi + 1]
  2063 000019F9 488B4E01                        mov rcx, qword [rsi + 1]
  2064 000019FD 4839D1                          cmp rcx, rdx
  2065 00001A00 0F8DEE020000                    jge L_error_integer_range
  2066 00001A06 4883F900                        cmp rcx, 0
  2067 00001A0A 0F8CE4020000                    jl L_error_integer_range
  2068 00001A10 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2069                                          LEAVE
  2069 00001A15 C9                  <1>  leave
  2070 00001A16 C22000                          ret AND_KILL_FRAME(2)
  2071                                  
  2072                                  L_code_ptr_vector_set:
  2073                                          ENTER
  2073 00001A19 C8000000            <1>  enter 0, 0
  2073 00001A1D 4883E4F0            <1>  and rsp, ~15
  2074 00001A21 48837D1803                      cmp COUNT, 3
  2075 00001A26 0F85CC030000                    jne L_error_arg_count_3
  2076 00001A2C 488B7D20                        mov rdi, PARAM(0)
  2077                                          assert_vector(rdi)
  2077 00001A30 803F22              <1>  cmp byte [%1], %2
  2077 00001A33 0F85EB030000        <1>  jne L_error_incorrect_type
  2078 00001A39 488B7528                        mov rsi, PARAM(1)
  2079                                          assert_integer(rsi)
  2079                              <1>  assert_rational(%1)
  2079 00001A3D 803E11              <2>  cmp byte [%1], %2
  2079 00001A40 0F85DE030000        <2>  jne L_error_incorrect_type
  2079 00001A46 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2079 00001A4B 0F85D3030000        <1>  jne L_error_incorrect_type
  2080 00001A51 488B5701                        mov rdx, qword [rdi + 1]
  2081 00001A55 488B4E01                        mov rcx, qword [rsi + 1]
  2082 00001A59 4839D1                          cmp rcx, rdx
  2083 00001A5C 0F8D92020000                    jge L_error_integer_range
  2084 00001A62 4883F900                        cmp rcx, 0
  2085 00001A66 0F8C88020000                    jl L_error_integer_range
  2086 00001A6C 488B4530                        mov rax, PARAM(2)
  2087 00001A70 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2088 00001A75 48B8-                           mov rax, sob_void
  2088 00001A77 [0000000000000000] 
  2089                                          LEAVE
  2089 00001A7F C9                  <1>  leave
  2090 00001A80 C22800                          ret AND_KILL_FRAME(3)
  2091                                  
  2092                                  L_code_ptr_string_set:
  2093                                          ENTER
  2093 00001A83 C8000000            <1>  enter 0, 0
  2093 00001A87 4883E4F0            <1>  and rsp, ~15
  2094 00001A8B 48837D1803                      cmp COUNT, 3
  2095 00001A90 0F8562030000                    jne L_error_arg_count_3
  2096 00001A96 488B7D20                        mov rdi, PARAM(0)
  2097                                          assert_string(rdi)
  2097 00001A9A 803F03              <1>  cmp byte [%1], %2
  2097 00001A9D 0F8581030000        <1>  jne L_error_incorrect_type
  2098 00001AA3 488B7528                        mov rsi, PARAM(1)
  2099                                          assert_integer(rsi)
  2099                              <1>  assert_rational(%1)
  2099 00001AA7 803E11              <2>  cmp byte [%1], %2
  2099 00001AAA 0F8574030000        <2>  jne L_error_incorrect_type
  2099 00001AB0 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2099 00001AB5 0F8569030000        <1>  jne L_error_incorrect_type
  2100 00001ABB 488B5701                        mov rdx, qword [rdi + 1]
  2101 00001ABF 488B4E01                        mov rcx, qword [rsi + 1]
  2102 00001AC3 4839D1                          cmp rcx, rdx
  2103 00001AC6 0F8D28020000                    jge L_error_integer_range
  2104 00001ACC 4883F900                        cmp rcx, 0
  2105 00001AD0 0F8C1E020000                    jl L_error_integer_range
  2106 00001AD6 488B4530                        mov rax, PARAM(2)
  2107                                          assert_char(rax)
  2107 00001ADA 803802              <1>  cmp byte [%1], %2
  2107 00001ADD 0F8541030000        <1>  jne L_error_incorrect_type
  2108 00001AE3 8A4001                          mov al, byte [rax + 1]
  2109 00001AE6 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2110 00001AEA 48B8-                           mov rax, sob_void
  2110 00001AEC [0000000000000000] 
  2111                                          LEAVE
  2111 00001AF4 C9                  <1>  leave
  2112 00001AF5 C22800                          ret AND_KILL_FRAME(3)
  2113                                  
  2114                                  L_code_ptr_make_vector:
  2115                                          ENTER
  2115 00001AF8 C8000000            <1>  enter 0, 0
  2115 00001AFC 4883E4F0            <1>  and rsp, ~15
  2116 00001B00 48837D1802                      cmp COUNT, 2
  2117 00001B05 0F8569020000                    jne L_error_arg_count_2
  2118 00001B0B 488B4D20                        mov rcx, PARAM(0)
  2119                                          assert_integer(rcx)
  2119                              <1>  assert_rational(%1)
  2119 00001B0F 803911              <2>  cmp byte [%1], %2
  2119 00001B12 0F850C030000        <2>  jne L_error_incorrect_type
  2119 00001B18 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
  2119 00001B1D 0F8501030000        <1>  jne L_error_incorrect_type
  2120 00001B23 488B4901                        mov rcx, qword [rcx + 1]
  2121 00001B27 4883F900                        cmp rcx, 0
  2122 00001B2B 0F8CC3010000                    jl L_error_integer_range
  2123 00001B31 488B5528                        mov rdx, PARAM(1)
  2124 00001B35 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2125 00001B3D E83DEBFFFF                      call malloc
  2126 00001B42 C60022                          mov byte [rax], T_vector
  2127 00001B45 48894801                        mov qword [rax + 1], rcx
  2128 00001B49 41B800000000                    mov r8, 0
  2129                                  .L0:
  2130 00001B4F 4939C8                          cmp r8, rcx
  2131 00001B52 740A                            je .L1
  2132 00001B54 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2133 00001B59 49FFC0                          inc r8
  2134 00001B5C EBF1                            jmp .L0
  2135                                  .L1:
  2136                                          LEAVE
  2136 00001B5E C9                  <1>  leave
  2137 00001B5F C22000                          ret AND_KILL_FRAME(2)
  2138                                          
  2139                                  L_code_ptr_make_string:
  2140                                          ENTER
  2140 00001B62 C8000000            <1>  enter 0, 0
  2140 00001B66 4883E4F0            <1>  and rsp, ~15
  2141 00001B6A 48837D1802                      cmp COUNT, 2
  2142 00001B6F 0F85FF010000                    jne L_error_arg_count_2
  2143 00001B75 488B4D20                        mov rcx, PARAM(0)
  2144                                          assert_integer(rcx)
  2144                              <1>  assert_rational(%1)
  2144 00001B79 803911              <2>  cmp byte [%1], %2
  2144 00001B7C 0F85A2020000        <2>  jne L_error_incorrect_type
  2144 00001B82 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
  2144 00001B87 0F8597020000        <1>  jne L_error_incorrect_type
  2145 00001B8D 488B4901                        mov rcx, qword [rcx + 1]
  2146 00001B91 4883F900                        cmp rcx, 0
  2147 00001B95 0F8C59010000                    jl L_error_integer_range
  2148 00001B9B 488B5528                        mov rdx, PARAM(1)
  2149                                          assert_char(rdx)
  2149 00001B9F 803A02              <1>  cmp byte [%1], %2
  2149 00001BA2 0F857C020000        <1>  jne L_error_incorrect_type
  2150 00001BA8 8A5201                          mov dl, byte [rdx + 1]
  2151 00001BAB 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2152 00001BAF E8CBEAFFFF                      call malloc
  2153 00001BB4 C60003                          mov byte [rax], T_string
  2154 00001BB7 48894801                        mov qword [rax + 1], rcx
  2155 00001BBB 41B800000000                    mov r8, 0
  2156                                  .L0:
  2157 00001BC1 4939C8                          cmp r8, rcx
  2158 00001BC4 740A                            je .L1
  2159 00001BC6 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2160 00001BCB 49FFC0                          inc r8
  2161 00001BCE EBF1                            jmp .L0
  2162                                  .L1:
  2163                                          LEAVE
  2163 00001BD0 C9                  <1>  leave
  2164 00001BD1 C22000                          ret AND_KILL_FRAME(2)
  2165                                  
  2166                                  L_code_ptr_numerator:
  2167                                          ENTER
  2167 00001BD4 C8000000            <1>  enter 0, 0
  2167 00001BD8 4883E4F0            <1>  and rsp, ~15
  2168 00001BDC 48837D1801                      cmp COUNT, 1
  2169 00001BE1 0F8561010000                    jne L_error_arg_count_1
  2170 00001BE7 488B4520                        mov rax, PARAM(0)
  2171                                          assert_rational(rax)
  2171 00001BEB 803811              <1>  cmp byte [%1], %2
  2171 00001BEE 0F8530020000        <1>  jne L_error_incorrect_type
  2172 00001BF4 488B7801                        mov rdi, qword [rax + 1]
  2173 00001BF8 E8D1000000                      call make_integer
  2174                                          LEAVE
  2174 00001BFD C9                  <1>  leave
  2175 00001BFE C21800                          ret AND_KILL_FRAME(1)
  2176                                          
  2177                                  L_code_ptr_denominator:
  2178                                          ENTER
  2178 00001C01 C8000000            <1>  enter 0, 0
  2178 00001C05 4883E4F0            <1>  and rsp, ~15
  2179 00001C09 48837D1801                      cmp COUNT, 1
  2180 00001C0E 0F8534010000                    jne L_error_arg_count_1
  2181 00001C14 488B4520                        mov rax, PARAM(0)
  2182                                          assert_rational(rax)
  2182 00001C18 803811              <1>  cmp byte [%1], %2
  2182 00001C1B 0F8503020000        <1>  jne L_error_incorrect_type
  2183 00001C21 488B7809                        mov rdi, qword [rax + 1 + 8]
  2184 00001C25 E8A4000000                      call make_integer
  2185                                          LEAVE
  2185 00001C2A C9                  <1>  leave
  2186 00001C2B C21800                          ret AND_KILL_FRAME(1)
  2187                                  
  2188                                  L_code_ptr_eq:
  2189                                  	ENTER
  2189 00001C2E C8000000            <1>  enter 0, 0
  2189 00001C32 4883E4F0            <1>  and rsp, ~15
  2190 00001C36 48837D1802              	cmp COUNT, 2
  2191 00001C3B 0F8533010000            	jne L_error_arg_count_2
  2192 00001C41 488B7D20                	mov rdi, PARAM(0)
  2193 00001C45 488B7528                	mov rsi, PARAM(1)
  2194 00001C49 4839F7                  	cmp rdi, rsi
  2195 00001C4C 744A                    	je .L_eq_true
  2196 00001C4E 8A17                    	mov dl, byte [rdi]
  2197 00001C50 3A16                    	cmp dl, byte [rsi]
  2198 00001C52 7550                    	jne .L_eq_false
  2199 00001C54 80FA02                  	cmp dl, T_char
  2200 00001C57 7437                    	je .L_char
  2201 00001C59 80FA04                  	cmp dl, T_symbol
  2202 00001C5C 742A                    	je .L_symbol
  2203 00001C5E 80FA12                  	cmp dl, T_real
  2204 00001C61 741D                    	je .L_real
  2205 00001C63 80FA11                  	cmp dl, T_rational
  2206 00001C66 7402                    	je .L_rational
  2207 00001C68 EB3A                    	jmp .L_eq_false
  2208                                  .L_rational:
  2209 00001C6A 488B4601                	mov rax, qword [rsi + 1]
  2210 00001C6E 483B4701                	cmp rax, qword [rdi + 1]
  2211 00001C72 7530                    	jne .L_eq_false
  2212 00001C74 488B4609                	mov rax, qword [rsi + 1 + 8]
  2213 00001C78 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2214 00001C7C 7526                    	jne .L_eq_false
  2215 00001C7E EB18                    	jmp .L_eq_true
  2216                                  .L_real:
  2217 00001C80 488B4601                	mov rax, qword [rsi + 1]
  2218 00001C84 483B4701                	cmp rax, qword [rdi + 1]
  2219                                  .L_symbol:
  2220                                  	; never reached, because symbols are static!
  2221                                  	; but I'm keeping it in case, I'll ever change
  2222                                  	; the implementation
  2223 00001C88 488B4601                	mov rax, qword [rsi + 1]
  2224 00001C8C 483B4701                	cmp rax, qword [rdi + 1]
  2225                                  .L_char:
  2226 00001C90 8A5E01                  	mov bl, byte [rsi + 1]
  2227 00001C93 3A5F01                  	cmp bl, byte [rdi + 1]
  2228 00001C96 750C                    	jne .L_eq_false
  2229                                  .L_eq_true:
  2230 00001C98 48B8-                   	mov rax, sob_boolean_true
  2230 00001C9A [0300000000000000] 
  2231 00001CA2 EB0A                    	jmp .L_eq_exit
  2232                                  .L_eq_false:
  2233 00001CA4 48B8-                   	mov rax, sob_boolean_false
  2233 00001CA6 [0200000000000000] 
  2234                                  .L_eq_exit:
  2235                                  	LEAVE
  2235 00001CAE C9                  <1>  leave
  2236 00001CAF C22000                  	ret AND_KILL_FRAME(2)
  2237                                  
  2238                                  make_real:
  2239                                          ENTER
  2239 00001CB2 C8000000            <1>  enter 0, 0
  2239 00001CB6 4883E4F0            <1>  and rsp, ~15
  2240 00001CBA BF09000000                      mov rdi, (1 + 8)
  2241 00001CBF E8BBE9FFFF                      call malloc
  2242 00001CC4 C60012                          mov byte [rax], T_real
  2243 00001CC7 F20F114001                      movsd qword [rax + 1], xmm0
  2244                                          LEAVE
  2244 00001CCC C9                  <1>  leave
  2245 00001CCD C3                              ret
  2246                                          
  2247                                  make_integer:
  2248                                          ENTER
  2248 00001CCE C8000000            <1>  enter 0, 0
  2248 00001CD2 4883E4F0            <1>  and rsp, ~15
  2249 00001CD6 4889FE                          mov rsi, rdi
  2250 00001CD9 BF11000000                      mov rdi, (1 + 8 + 8)
  2251 00001CDE E89CE9FFFF                      call malloc
  2252 00001CE3 C60011                          mov byte [rax], T_rational
  2253 00001CE6 48897001                        mov qword [rax + 1], rsi
  2254 00001CEA 48C7400901000000                mov qword [rax + 1 + 8], 1
  2255                                          LEAVE
  2255 00001CF2 C9                  <1>  leave
  2256 00001CF3 C3                              ret
  2257                                          
  2258                                  L_error_integer_range:
  2259 00001CF4 488B3C25[00000000]              mov rdi, qword [stderr]
  2260 00001CFC 48BE-                           mov rsi, fmt_integer_range
  2260 00001CFE [B403000000000000] 
  2261 00001D06 B800000000                      mov rax, 0
  2262 00001D0B E8(00000000)                    call fprintf
  2263 00001D10 48C7C0FBFFFFFF                  mov rax, -5
  2264 00001D17 E8(00000000)                    call exit
  2265                                  
  2266                                  L_error_arg_count_0:
  2267 00001D1C 488B3C25[00000000]              mov rdi, qword [stderr]
  2268 00001D24 48BE-                           mov rsi, fmt_arg_count_0
  2268 00001D26 [9502000000000000] 
  2269 00001D2E 488B5518                        mov rdx, COUNT
  2270 00001D32 B800000000                      mov rax, 0
  2271 00001D37 E8(00000000)                    call fprintf
  2272 00001D3C 48C7C0FDFFFFFF                  mov rax, -3
  2273 00001D43 E8(00000000)                    call exit
  2274                                  
  2275                                  L_error_arg_count_1:
  2276 00001D48 488B3C25[00000000]              mov rdi, qword [stderr]
  2277 00001D50 48BE-                           mov rsi, fmt_arg_count_1
  2277 00001D52 [BD02000000000000] 
  2278 00001D5A 488B5518                        mov rdx, COUNT
  2279 00001D5E B800000000                      mov rax, 0
  2280 00001D63 E8(00000000)                    call fprintf
  2281 00001D68 48C7C0FDFFFFFF                  mov rax, -3
  2282 00001D6F E8(00000000)                    call exit
  2283                                  
  2284                                  L_error_arg_count_2:
  2285 00001D74 488B3C25[00000000]              mov rdi, qword [stderr]
  2286 00001D7C 48BE-                           mov rsi, fmt_arg_count_2
  2286 00001D7E [4003000000000000] 
  2287 00001D86 488B5518                        mov rdx, COUNT
  2288 00001D8A B800000000                      mov rax, 0
  2289 00001D8F E8(00000000)                    call fprintf
  2290 00001D94 48C7C0FDFFFFFF                  mov rax, -3
  2291 00001D9B E8(00000000)                    call exit
  2292                                  
  2293                                  L_error_arg_count_12:
  2294 00001DA0 488B3C25[00000000]              mov rdi, qword [stderr]
  2295 00001DA8 48BE-                           mov rsi, fmt_arg_count_12
  2295 00001DAA [E302000000000000] 
  2296 00001DB2 488B5518                        mov rdx, COUNT
  2297 00001DB6 B800000000                      mov rax, 0
  2298 00001DBB E8(00000000)                    call fprintf
  2299 00001DC0 48C7C0FDFFFFFF                  mov rax, -3
  2300 00001DC7 E8(00000000)                    call exit
  2301                                  
  2302                                  L_sagy_debug:
  2303 00001DCC 488B3C25[00000000]              mov rdi, qword [stderr]
  2304 00001DD4 48BE-                           mov rsi, fmt_sagy_debug
  2304 00001DD6 [2303000000000000] 
  2305 00001DDE 488B5518                        mov rdx, COUNT
  2306 00001DE2 B800000000                      mov rax, 0
  2307 00001DE7 E8(00000000)                    call fprintf
  2308 00001DEC 48C7C0FDFFFFFF                  mov rax, -3
  2309 00001DF3 E8(00000000)                    call exit
  2310                                  
  2311                                  L_error_arg_count_3:
  2312 00001DF8 488B3C25[00000000]              mov rdi, qword [stderr]
  2313 00001E00 48BE-                           mov rsi, fmt_arg_count_3
  2313 00001E02 [6703000000000000] 
  2314 00001E0A 488B5518                        mov rdx, COUNT
  2315 00001E0E B800000000                      mov rax, 0
  2316 00001E13 E8(00000000)                    call fprintf
  2317 00001E18 48C7C0FDFFFFFF                  mov rax, -3
  2318 00001E1F E8(00000000)                    call exit
  2319                                          
  2320                                  L_error_incorrect_type:
  2321 00001E24 488B3C25[00000000]              mov rdi, qword [stderr]
  2322 00001E2C 48BE-                           mov rsi, fmt_type
  2322 00001E2E [9003000000000000] 
  2323 00001E36 B800000000                      mov rax, 0
  2324 00001E3B E8(00000000)                    call fprintf
  2325 00001E40 48C7C0FCFFFFFF                  mov rax, -4
  2326 00001E47 E8(00000000)                    call exit
  2327                                  
  2328                                  L_error_division_by_zero:
  2329 00001E4C 488B3C25[00000000]              mov rdi, qword [stderr]
  2330 00001E54 48BE-                           mov rsi, fmt_division_by_zero
  2330 00001E56 [D103000000000000] 
  2331 00001E5E B800000000                      mov rax, 0
  2332 00001E63 E8(00000000)                    call fprintf
  2333 00001E68 48C7C0F8FFFFFF                  mov rax, -8
  2334 00001E6F E8(00000000)                    call exit
  2335                                  
  2336                                  section .data
  2337                                  fmt_char:
  2338 00000292 256300                          db `%c\0`
  2339                                  fmt_arg_count_0:
  2340 00000295 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2340 0000029E 74696E67207A65726F-
  2340 000002A7 20617267756D656E74-
  2340 000002B0 732E20466F756E6420-
  2340 000002B9 25640A00           
  2341                                  fmt_arg_count_1:
  2342 000002BD 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2342 000002C6 74696E67206F6E6520-
  2342 000002CF 617267756D656E742E-
  2342 000002D8 20466F756E64202564-
  2342 000002E1 0A00               
  2343                                  fmt_arg_count_12:
  2344 000002E3 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2344 000002EC 74696E67206F6E6520-
  2344 000002F5 726571756972656420-
  2344 000002FE 616E64206F6E65206F-
  2344 00000307 7074696F6E616C2061-
  2344 00000310 7267756D656E742E20-
  2344 00000319 466F756E642025640A-
  2344 00000322 00                 
  2345                                  fmt_sagy_debug:
  2346 00000323 212121202A2A2A2A20-             db `!!! **** SAGY DEBUG **** %d\n\0`
  2346 0000032C 534147592044454255-
  2346 00000335 47202A2A2A2A202564-
  2346 0000033E 0A00               
  2347                                  fmt_arg_count_2:
  2348 00000340 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2348 00000349 74696E672074776F20-
  2348 00000352 617267756D656E7473-
  2348 0000035B 2E20466F756E642025-
  2348 00000364 640A00             
  2349                                  fmt_arg_count_3:
  2350 00000367 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2350 00000370 74696E672074687265-
  2350 00000379 6520617267756D656E-
  2350 00000382 74732E20466F756E64-
  2350 0000038B 2025640A00         
  2351                                  fmt_type:
  2352 00000390 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2352 00000399 696F6E207061737365-
  2352 000003A2 6420696E636F727265-
  2352 000003AB 637420747970650A00 
  2353                                  fmt_integer_range:
  2354 000003B4 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2354 000003BD 7265637420696E7465-
  2354 000003C6 6765722072616E6765-
  2354 000003CF 0A00               
  2355                                  fmt_division_by_zero:
  2356 000003D1 212121204469766973-             db `!!! Division by zero\n\0`
  2356 000003DA 696F6E206279207A65-
  2356 000003E3 726F0A00           
  2357                                  fmt_scheme_error_part_1:
  2358 000003E7 0A2121212054686520-             db `\n!!! The procedure \0`
  2358 000003F0 70726F636564757265-
  2358 000003F9 2000               
  2359                                  fmt_scheme_error_part_2:
  2360 000003FB 2061736B656420746F-             db ` asked to terminate the program\n`
  2360 00000404 207465726D696E6174-
  2360 0000040D 65207468652070726F-
  2360 00000416 6772616D0A         
  2361 0000041B 202020207769746820-             db `    with the following message:\n\n\0`
  2361 00000424 74686520666F6C6C6F-
  2361 0000042D 77696E67206D657373-
  2361 00000436 6167653A0A0A00     
  2362                                  fmt_scheme_error_part_3:
  2363 0000043D 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2363 00000446 210A0A00           
