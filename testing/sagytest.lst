     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 11                      	db T_rational	; 1
    84 00000007 010000000000000001-     	dq 1, 1
    84 00000010 00000000000000     
    85 00000017 11                      	db T_rational	; 2
    86 00000018 020000000000000001-     	dq 2, 1
    86 00000021 00000000000000     
    87 00000028 11                      	db T_rational	; 3
    88 00000029 030000000000000001-     	dq 3, 1
    88 00000032 00000000000000     
    89 00000039 11                      	db T_rational	; 4
    90 0000003A 040000000000000001-     	dq 4, 1
    90 00000043 00000000000000     
    91 0000004A 11                      	db T_rational	; 5
    92 0000004B 050000000000000001-     	dq 5, 1
    92 00000054 00000000000000     
    93 0000005B 21                      	db T_pair	; (5)
    94 0000005C [4A00000000000000]-     	dq L_constants + 74, L_constants + 1
    94 00000064 [0100000000000000] 
    95 0000006C 21                      	db T_pair	; (4 5)
    96 0000006D [3900000000000000]-     	dq L_constants + 57, L_constants + 91
    96 00000075 [5B00000000000000] 
    97 0000007D 21                      	db T_pair	; (3 4 5)
    98 0000007E [2800000000000000]-     	dq L_constants + 40, L_constants + 108
    98 00000086 [6C00000000000000] 
    99 0000008E 21                      	db T_pair	; (2 3 4 5)
   100 0000008F [1700000000000000]-     	dq L_constants + 23, L_constants + 125
   100 00000097 [7D00000000000000] 
   101 0000009F 21                      	db T_pair	; (1 2 3 4 5)
   102 000000A0 [0600000000000000]-     	dq L_constants + 6, L_constants + 142
   102 000000A8 [8E00000000000000] 
   103                                  
   104                                  section .bss
   105                                  free_var_0:	; location of null?
   106 00000000 <res 00000008>          	resq 1
   107                                  free_var_1:	; location of pair?
   108 00000008 <res 00000008>          	resq 1
   109                                  free_var_2:	; location of void?
   110 00000010 <res 00000008>          	resq 1
   111                                  free_var_3:	; location of char?
   112 00000018 <res 00000008>          	resq 1
   113                                  free_var_4:	; location of string?
   114 00000020 <res 00000008>          	resq 1
   115                                  free_var_5:	; location of symbol?
   116 00000028 <res 00000008>          	resq 1
   117                                  free_var_6:	; location of vector?
   118 00000030 <res 00000008>          	resq 1
   119                                  free_var_7:	; location of procedure?
   120 00000038 <res 00000008>          	resq 1
   121                                  free_var_8:	; location of real?
   122 00000040 <res 00000008>          	resq 1
   123                                  free_var_9:	; location of rational?
   124 00000048 <res 00000008>          	resq 1
   125                                  free_var_10:	; location of boolean?
   126 00000050 <res 00000008>          	resq 1
   127                                  free_var_11:	; location of number?
   128 00000058 <res 00000008>          	resq 1
   129                                  free_var_12:	; location of collection?
   130 00000060 <res 00000008>          	resq 1
   131                                  free_var_13:	; location of cons
   132 00000068 <res 00000008>          	resq 1
   133                                  free_var_14:	; location of display-sexpr
   134 00000070 <res 00000008>          	resq 1
   135                                  free_var_15:	; location of write-char
   136 00000078 <res 00000008>          	resq 1
   137                                  free_var_16:	; location of car
   138 00000080 <res 00000008>          	resq 1
   139                                  free_var_17:	; location of cdr
   140 00000088 <res 00000008>          	resq 1
   141                                  free_var_18:	; location of string-length
   142 00000090 <res 00000008>          	resq 1
   143                                  free_var_19:	; location of vector-length
   144 00000098 <res 00000008>          	resq 1
   145                                  free_var_20:	; location of real->integer
   146 000000A0 <res 00000008>          	resq 1
   147                                  free_var_21:	; location of exit
   148 000000A8 <res 00000008>          	resq 1
   149                                  free_var_22:	; location of integer->real
   150 000000B0 <res 00000008>          	resq 1
   151                                  free_var_23:	; location of rational->real
   152 000000B8 <res 00000008>          	resq 1
   153                                  free_var_24:	; location of char->integer
   154 000000C0 <res 00000008>          	resq 1
   155                                  free_var_25:	; location of integer->char
   156 000000C8 <res 00000008>          	resq 1
   157                                  free_var_26:	; location of trng
   158 000000D0 <res 00000008>          	resq 1
   159                                  free_var_27:	; location of zero?
   160 000000D8 <res 00000008>          	resq 1
   161                                  free_var_28:	; location of integer?
   162 000000E0 <res 00000008>          	resq 1
   163                                  free_var_29:	; location of __bin-apply
   164 000000E8 <res 00000008>          	resq 1
   165                                  free_var_30:	; location of __bin-add-rr
   166 000000F0 <res 00000008>          	resq 1
   167                                  free_var_31:	; location of __bin-sub-rr
   168 000000F8 <res 00000008>          	resq 1
   169                                  free_var_32:	; location of __bin-mul-rr
   170 00000100 <res 00000008>          	resq 1
   171                                  free_var_33:	; location of __bin-div-rr
   172 00000108 <res 00000008>          	resq 1
   173                                  free_var_34:	; location of __bin-add-qq
   174 00000110 <res 00000008>          	resq 1
   175                                  free_var_35:	; location of __bin-sub-qq
   176 00000118 <res 00000008>          	resq 1
   177                                  free_var_36:	; location of __bin-mul-qq
   178 00000120 <res 00000008>          	resq 1
   179                                  free_var_37:	; location of __bin-div-qq
   180 00000128 <res 00000008>          	resq 1
   181                                  free_var_38:	; location of error
   182 00000130 <res 00000008>          	resq 1
   183                                  free_var_39:	; location of __bin-less-than-rr
   184 00000138 <res 00000008>          	resq 1
   185                                  free_var_40:	; location of __bin-less-than-qq
   186 00000140 <res 00000008>          	resq 1
   187                                  free_var_41:	; location of __bin-equal-rr
   188 00000148 <res 00000008>          	resq 1
   189                                  free_var_42:	; location of __bin-equal-qq
   190 00000150 <res 00000008>          	resq 1
   191                                  free_var_43:	; location of quotient
   192 00000158 <res 00000008>          	resq 1
   193                                  free_var_44:	; location of remainder
   194 00000160 <res 00000008>          	resq 1
   195                                  free_var_45:	; location of set-car!
   196 00000168 <res 00000008>          	resq 1
   197                                  free_var_46:	; location of set-cdr!
   198 00000170 <res 00000008>          	resq 1
   199                                  free_var_47:	; location of string-ref
   200 00000178 <res 00000008>          	resq 1
   201                                  free_var_48:	; location of vector-ref
   202 00000180 <res 00000008>          	resq 1
   203                                  free_var_49:	; location of vector-set!
   204 00000188 <res 00000008>          	resq 1
   205                                  free_var_50:	; location of string-set!
   206 00000190 <res 00000008>          	resq 1
   207                                  free_var_51:	; location of make-vector
   208 00000198 <res 00000008>          	resq 1
   209                                  free_var_52:	; location of make-string
   210 000001A0 <res 00000008>          	resq 1
   211                                  free_var_53:	; location of numerator
   212 000001A8 <res 00000008>          	resq 1
   213                                  free_var_54:	; location of denominator
   214 000001B0 <res 00000008>          	resq 1
   215                                  free_var_55:	; location of eq?
   216 000001B8 <res 00000008>          	resq 1
   217                                  free_var_56:	; location of apply
   218 000001C0 <res 00000008>          	resq 1
   219                                  
   220                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   221                                  global main
   222                                  section .text
   223                                  main:
   224 00000000 C8000000                        enter 0, 0
   225                                          
   226                                  	; building closure for null?
   227 00000004 48BF-                   	mov rdi, free_var_0
   227 00000006 [0000000000000000] 
   228 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   228 00000010 [C60C000000000000] 
   229 00000018 E8A40B0000              	call bind_primitive
   230                                  
   231                                  	; building closure for pair?
   232 0000001D 48BF-                   	mov rdi, free_var_1
   232 0000001F [0800000000000000] 
   233 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   233 00000029 [FC0C000000000000] 
   234 00000031 E88B0B0000              	call bind_primitive
   235                                  
   236                                  	; building closure for void?
   237 00000036 48BF-                   	mov rdi, free_var_2
   237 00000038 [1000000000000000] 
   238 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   238 00000042 [320D000000000000] 
   239 0000004A E8720B0000              	call bind_primitive
   240                                  
   241                                  	; building closure for char?
   242 0000004F 48BF-                   	mov rdi, free_var_3
   242 00000051 [1800000000000000] 
   243 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   243 0000005B [680D000000000000] 
   244 00000063 E8590B0000              	call bind_primitive
   245                                  
   246                                  	; building closure for string?
   247 00000068 48BF-                   	mov rdi, free_var_4
   247 0000006A [2000000000000000] 
   248 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   248 00000074 [9E0D000000000000] 
   249 0000007C E8400B0000              	call bind_primitive
   250                                  
   251                                  	; building closure for symbol?
   252 00000081 48BF-                   	mov rdi, free_var_5
   252 00000083 [2800000000000000] 
   253 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   253 0000008D [D40D000000000000] 
   254 00000095 E8270B0000              	call bind_primitive
   255                                  
   256                                  	; building closure for vector?
   257 0000009A 48BF-                   	mov rdi, free_var_6
   257 0000009C [3000000000000000] 
   258 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   258 000000A6 [0A0E000000000000] 
   259 000000AE E80E0B0000              	call bind_primitive
   260                                  
   261                                  	; building closure for procedure?
   262 000000B3 48BF-                   	mov rdi, free_var_7
   262 000000B5 [3800000000000000] 
   263 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   263 000000BF [400E000000000000] 
   264 000000C7 E8F50A0000              	call bind_primitive
   265                                  
   266                                  	; building closure for real?
   267 000000CC 48BF-                   	mov rdi, free_var_8
   267 000000CE [4000000000000000] 
   268 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   268 000000D8 [760E000000000000] 
   269 000000E0 E8DC0A0000              	call bind_primitive
   270                                  
   271                                  	; building closure for rational?
   272 000000E5 48BF-                   	mov rdi, free_var_9
   272 000000E7 [4800000000000000] 
   273 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   273 000000F1 [AC0E000000000000] 
   274 000000F9 E8C30A0000              	call bind_primitive
   275                                  
   276                                  	; building closure for boolean?
   277 000000FE 48BF-                   	mov rdi, free_var_10
   277 00000100 [5000000000000000] 
   278 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   278 0000010A [E20E000000000000] 
   279 00000112 E8AA0A0000              	call bind_primitive
   280                                  
   281                                  	; building closure for number?
   282 00000117 48BF-                   	mov rdi, free_var_11
   282 00000119 [5800000000000000] 
   283 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   283 00000123 [1A0F000000000000] 
   284 0000012B E8910A0000              	call bind_primitive
   285                                  
   286                                  	; building closure for collection?
   287 00000130 48BF-                   	mov rdi, free_var_12
   287 00000132 [6000000000000000] 
   288 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   288 0000013C [520F000000000000] 
   289 00000144 E8780A0000              	call bind_primitive
   290                                  
   291                                  	; building closure for cons
   292 00000149 48BF-                   	mov rdi, free_var_13
   292 0000014B [6800000000000000] 
   293 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   293 00000155 [8A0F000000000000] 
   294 0000015D E85F0A0000              	call bind_primitive
   295                                  
   296                                  	; building closure for display-sexpr
   297 00000162 48BF-                   	mov rdi, free_var_14
   297 00000164 [7000000000000000] 
   298 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   298 0000016E [BE0F000000000000] 
   299 00000176 E8460A0000              	call bind_primitive
   300                                  
   301                                  	; building closure for write-char
   302 0000017B 48BF-                   	mov rdi, free_var_15
   302 0000017D [7800000000000000] 
   303 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   303 00000187 [E80F000000000000] 
   304 0000018F E82D0A0000              	call bind_primitive
   305                                  
   306                                  	; building closure for car
   307 00000194 48BF-                   	mov rdi, free_var_16
   307 00000196 [8000000000000000] 
   308 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   308 000001A0 [3610000000000000] 
   309 000001A8 E8140A0000              	call bind_primitive
   310                                  
   311                                  	; building closure for cdr
   312 000001AD 48BF-                   	mov rdi, free_var_17
   312 000001AF [8800000000000000] 
   313 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   313 000001B9 [5E10000000000000] 
   314 000001C1 E8FB090000              	call bind_primitive
   315                                  
   316                                  	; building closure for string-length
   317 000001C6 48BF-                   	mov rdi, free_var_18
   317 000001C8 [9000000000000000] 
   318 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   318 000001D2 [8610000000000000] 
   319 000001DA E8E2090000              	call bind_primitive
   320                                  
   321                                  	; building closure for vector-length
   322 000001DF 48BF-                   	mov rdi, free_var_19
   322 000001E1 [9800000000000000] 
   323 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   323 000001EB [B310000000000000] 
   324 000001F3 E8C9090000              	call bind_primitive
   325                                  
   326                                  	; building closure for real->integer
   327 000001F8 48BF-                   	mov rdi, free_var_20
   327 000001FA [A000000000000000] 
   328 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   328 00000204 [E010000000000000] 
   329 0000020C E8B0090000              	call bind_primitive
   330                                  
   331                                  	; building closure for exit
   332 00000211 48BF-                   	mov rdi, free_var_21
   332 00000213 [A800000000000000] 
   333 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   333 0000021D [1311000000000000] 
   334 00000225 E897090000              	call bind_primitive
   335                                  
   336                                  	; building closure for integer->real
   337 0000022A 48BF-                   	mov rdi, free_var_22
   337 0000022C [B000000000000000] 
   338 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   338 00000236 [3011000000000000] 
   339 0000023E E87E090000              	call bind_primitive
   340                                  
   341                                  	; building closure for rational->real
   342 00000243 48BF-                   	mov rdi, free_var_23
   342 00000245 [B800000000000000] 
   343 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   343 0000024F [6D11000000000000] 
   344 00000257 E865090000              	call bind_primitive
   345                                  
   346                                  	; building closure for char->integer
   347 0000025C 48BF-                   	mov rdi, free_var_24
   347 0000025E [C000000000000000] 
   348 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   348 00000268 [AC11000000000000] 
   349 00000270 E84C090000              	call bind_primitive
   350                                  
   351                                  	; building closure for integer->char
   352 00000275 48BF-                   	mov rdi, free_var_25
   352 00000277 [C800000000000000] 
   353 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   353 00000281 [E111000000000000] 
   354 00000289 E833090000              	call bind_primitive
   355                                  
   356                                  	; building closure for trng
   357 0000028E 48BF-                   	mov rdi, free_var_26
   357 00000290 [D000000000000000] 
   358 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   358 0000029A [3B12000000000000] 
   359 000002A2 E81A090000              	call bind_primitive
   360                                  
   361                                  	; building closure for zero?
   362 000002A7 48BF-                   	mov rdi, free_var_27
   362 000002A9 [D800000000000000] 
   363 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   363 000002B3 [5E12000000000000] 
   364 000002BB E801090000              	call bind_primitive
   365                                  
   366                                  	; building closure for integer?
   367 000002C0 48BF-                   	mov rdi, free_var_28
   367 000002C2 [E000000000000000] 
   368 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   368 000002CC [B912000000000000] 
   369 000002D4 E8E8080000              	call bind_primitive
   370                                  
   371                                  	; building closure for __bin-apply
   372 000002D9 48BF-                   	mov rdi, free_var_29
   372 000002DB [E800000000000000] 
   373 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   373 000002E5 [E90B000000000000] 
   374 000002ED E8CF080000              	call bind_primitive
   375                                  
   376                                  	; building closure for __bin-add-rr
   377 000002F2 48BF-                   	mov rdi, free_var_30
   377 000002F4 [F000000000000000] 
   378 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   378 000002FE [F612000000000000] 
   379 00000306 E8B6080000              	call bind_primitive
   380                                  
   381                                  	; building closure for __bin-sub-rr
   382 0000030B 48BF-                   	mov rdi, free_var_31
   382 0000030D [F800000000000000] 
   383 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   383 00000317 [3A13000000000000] 
   384 0000031F E89D080000              	call bind_primitive
   385                                  
   386                                  	; building closure for __bin-mul-rr
   387 00000324 48BF-                   	mov rdi, free_var_32
   387 00000326 [0001000000000000] 
   388 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   388 00000330 [7E13000000000000] 
   389 00000338 E884080000              	call bind_primitive
   390                                  
   391                                  	; building closure for __bin-div-rr
   392 0000033D 48BF-                   	mov rdi, free_var_33
   392 0000033F [0801000000000000] 
   393 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   393 00000349 [C213000000000000] 
   394 00000351 E86B080000              	call bind_primitive
   395                                  
   396                                  	; building closure for __bin-add-qq
   397 00000356 48BF-                   	mov rdi, free_var_34
   397 00000358 [1001000000000000] 
   398 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   398 00000362 [1414000000000000] 
   399 0000036A E852080000              	call bind_primitive
   400                                  
   401                                  	; building closure for __bin-sub-qq
   402 0000036F 48BF-                   	mov rdi, free_var_35
   402 00000371 [1801000000000000] 
   403 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   403 0000037B [7C14000000000000] 
   404 00000383 E839080000              	call bind_primitive
   405                                  
   406                                  	; building closure for __bin-mul-qq
   407 00000388 48BF-                   	mov rdi, free_var_36
   407 0000038A [2001000000000000] 
   408 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   408 00000394 [E414000000000000] 
   409 0000039C E820080000              	call bind_primitive
   410                                  
   411                                  	; building closure for __bin-div-qq
   412 000003A1 48BF-                   	mov rdi, free_var_37
   412 000003A3 [2801000000000000] 
   413 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   413 000003AD [3C15000000000000] 
   414 000003B5 E807080000              	call bind_primitive
   415                                  
   416                                  	; building closure for error
   417 000003BA 48BF-                   	mov rdi, free_var_38
   417 000003BC [3001000000000000] 
   418 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   418 000003C6 [0A16000000000000] 
   419 000003CE E8EE070000              	call bind_primitive
   420                                  
   421                                  	; building closure for __bin-less-than-rr
   422 000003D3 48BF-                   	mov rdi, free_var_39
   422 000003D5 [3801000000000000] 
   423 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   423 000003DF [A616000000000000] 
   424 000003E7 E8D5070000              	call bind_primitive
   425                                  
   426                                  	; building closure for __bin-less-than-qq
   427 000003EC 48BF-                   	mov rdi, free_var_40
   427 000003EE [4001000000000000] 
   428 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   428 000003F8 [FD16000000000000] 
   429 00000400 E8BC070000              	call bind_primitive
   430                                  
   431                                  	; building closure for __bin-equal-rr
   432 00000405 48BF-                   	mov rdi, free_var_41
   432 00000407 [4801000000000000] 
   433 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   433 00000411 [6017000000000000] 
   434 00000419 E8A3070000              	call bind_primitive
   435                                  
   436                                  	; building closure for __bin-equal-qq
   437 0000041E 48BF-                   	mov rdi, free_var_42
   437 00000420 [5001000000000000] 
   438 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   438 0000042A [B717000000000000] 
   439 00000432 E88A070000              	call bind_primitive
   440                                  
   441                                  	; building closure for quotient
   442 00000437 48BF-                   	mov rdi, free_var_43
   442 00000439 [5801000000000000] 
   443 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   443 00000443 [1A18000000000000] 
   444 0000044B E871070000              	call bind_primitive
   445                                  
   446                                  	; building closure for remainder
   447 00000450 48BF-                   	mov rdi, free_var_44
   447 00000452 [6001000000000000] 
   448 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   448 0000045C [8018000000000000] 
   449 00000464 E858070000              	call bind_primitive
   450                                  
   451                                  	; building closure for set-car!
   452 00000469 48BF-                   	mov rdi, free_var_45
   452 0000046B [6801000000000000] 
   453 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   453 00000475 [E618000000000000] 
   454 0000047D E83F070000              	call bind_primitive
   455                                  
   456                                  	; building closure for set-cdr!
   457 00000482 48BF-                   	mov rdi, free_var_46
   457 00000484 [7001000000000000] 
   458 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   458 0000048E [1C19000000000000] 
   459 00000496 E826070000              	call bind_primitive
   460                                  
   461                                  	; building closure for string-ref
   462 0000049B 48BF-                   	mov rdi, free_var_47
   462 0000049D [7801000000000000] 
   463 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   463 000004A7 [5219000000000000] 
   464 000004AF E80D070000              	call bind_primitive
   465                                  
   466                                  	; building closure for vector-ref
   467 000004B4 48BF-                   	mov rdi, free_var_48
   467 000004B6 [8001000000000000] 
   468 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   468 000004C0 [BD19000000000000] 
   469 000004C8 E8F4060000              	call bind_primitive
   470                                  
   471                                  	; building closure for vector-set!
   472 000004CD 48BF-                   	mov rdi, free_var_49
   472 000004CF [8801000000000000] 
   473 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   473 000004D9 [191A000000000000] 
   474 000004E1 E8DB060000              	call bind_primitive
   475                                  
   476                                  	; building closure for string-set!
   477 000004E6 48BF-                   	mov rdi, free_var_50
   477 000004E8 [9001000000000000] 
   478 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   478 000004F2 [831A000000000000] 
   479 000004FA E8C2060000              	call bind_primitive
   480                                  
   481                                  	; building closure for make-vector
   482 000004FF 48BF-                   	mov rdi, free_var_51
   482 00000501 [9801000000000000] 
   483 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   483 0000050B [F81A000000000000] 
   484 00000513 E8A9060000              	call bind_primitive
   485                                  
   486                                  	; building closure for make-string
   487 00000518 48BF-                   	mov rdi, free_var_52
   487 0000051A [A001000000000000] 
   488 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   488 00000524 [621B000000000000] 
   489 0000052C E890060000              	call bind_primitive
   490                                  
   491                                  	; building closure for numerator
   492 00000531 48BF-                   	mov rdi, free_var_53
   492 00000533 [A801000000000000] 
   493 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   493 0000053D [D41B000000000000] 
   494 00000545 E877060000              	call bind_primitive
   495                                  
   496                                  	; building closure for denominator
   497 0000054A 48BF-                   	mov rdi, free_var_54
   497 0000054C [B001000000000000] 
   498 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   498 00000556 [011C000000000000] 
   499 0000055E E85E060000              	call bind_primitive
   500                                  
   501                                  	; building closure for eq?
   502 00000563 48BF-                   	mov rdi, free_var_55
   502 00000565 [B801000000000000] 
   503 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   503 0000056F [2E1C000000000000] 
   504 00000577 E845060000              	call bind_primitive
   505                                  
   506                                  	; building closure for apply
   507 0000057C 48BF-                   	mov rdi, free_var_56
   507 0000057E [C001000000000000] 
   508 00000586 48BE-                   	mov rsi, L_code_ptr_bin_apply
   508 00000588 [E90B000000000000] 
   509 00000590 E82C060000              	call bind_primitive
   510                                  
   511 00000595 48B8-                   	mov rax, qword (L_constants + 159)
   511 00000597 [9F00000000000000] 
   512 0000059F 50                      	push rax
   513 000005A0 488B0425[68000000]      	mov rax, qword [free_var_13]
   514 000005A8 50                      	push rax
   515 000005A9 6A02                    	push 2
   516 000005AB 488B0425[C0010000]      	mov rax, qword [free_var_56]
   517 000005B3 803805                  	cmp byte [rax], T_closure 
   518 000005B6 0F854E100000                    jne L_code_ptr_error
   519                                  
   520 000005BC 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
   521                                  
   522 000005C0 53                              push rbx
   523                                  
   524 000005C1 FF5009                          call SOB_CLOSURE_CODE(rax)
   525                                  
   526                                          
   527 000005C4 4889C7                  	mov rdi, rax
   528 000005C7 E8C4000000              	call print_sexpr_if_not_void
   529                                  
   530 000005CC 48BF-                           mov rdi, fmt_memory_usage
   530 000005CE [0F01000000000000] 
   531 000005D6 488B3425[96010000]              mov rsi, qword [top_of_memory]
   532 000005DE 4881EE[C8010000]                sub rsi, memory
   533 000005E5 B800000000                      mov rax, 0
   534 000005EA E8(00000000)                    call printf
   535 000005EF C9                      	leave
   536 000005F0 C3                      	ret
   537                                  
   538                                  L_error_non_closure:
   539 000005F1 488B3C25[00000000]              mov rdi, qword [stderr]
   540 000005F9 48BE-                           mov rsi, fmt_non_closure
   540 000005FB [4601000000000000] 
   541 00000603 B800000000                      mov rax, 0
   542 00000608 E8(00000000)                    call fprintf
   543 0000060D 48C7C0FEFFFFFF                  mov rax, -2
   544 00000614 E8(00000000)                    call exit
   545                                  
   546                                  L_error_improper_list:
   547 00000619 488B3C25[00000000]      	mov rdi, qword [stderr]
   548 00000621 48BE-                   	mov rsi, fmt_error_improper_list
   548 00000623 [6E01000000000000] 
   549 0000062B B800000000              	mov rax, 0
   550 00000630 E8(00000000)            	call fprintf
   551 00000635 48C7C0F9FFFFFF          	mov rax, -7
   552 0000063C E8(00000000)            	call exit
   553                                  
   554                                  L_error_incorrect_arity_simple:
   555 00000641 488B3C25[00000000]              mov rdi, qword [stderr]
   556 00000649 48BE-                           mov rsi, fmt_incorrect_arity_simple
   556 0000064B [B000000000000000] 
   557 00000653 EB12                            jmp L_error_incorrect_arity_common
   558                                  L_error_incorrect_arity_opt:
   559 00000655 488B3C25[00000000]              mov rdi, qword [stderr]
   560 0000065D 48BE-                           mov rsi, fmt_incorrect_arity_opt
   560 0000065F [DB00000000000000] 
   561                                  L_error_incorrect_arity_common:
   562 00000667 5A                              pop rdx
   563 00000668 59                              pop rcx
   564 00000669 B800000000                      mov rax, 0
   565 0000066E E8(00000000)                    call fprintf
   566 00000673 48C7C0FAFFFFFF                  mov rax, -6
   567 0000067A E8(00000000)                    call exit
   568                                  
   569                                  section .data
   570                                  fmt_incorrect_arity_simple:
   571 000000B0 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   571 000000B9 74656420256C642061-
   571 000000C2 7267756D656E74732C-
   571 000000CB 206275742067697665-
   571 000000D4 6E20256C640A00     
   572                                  fmt_incorrect_arity_opt:
   573 000000DB 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   573 000000E4 746564206174206C65-
   573 000000ED 61737420256C642061-
   573 000000F6 7267756D656E74732C-
   573 000000FF 206275742067697665-
   573 00000108 6E20256C640A00     
   574                                  fmt_memory_usage:
   575 0000010F 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   575 00000118 6420256C6420627974-
   575 00000121 6573206F662064796E-
   575 0000012A 616D6963616C6C792D-
   575 00000133 616C6C6F6361746564-
   575 0000013C 206D656D6F72790A0A-
   575 00000145 00                 
   576                                  fmt_non_closure:
   577 00000146 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   577 0000014F 7074696E6720746F20-
   577 00000158 6170706C792061206E-
   577 00000161 6F6E2D636C6F737572-
   577 0000016A 65210A00           
   578                                  fmt_error_improper_list:
   579 0000016E 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   579 00000177 7267756D656E742069-
   579 00000180 73206E6F7420612070-
   579 00000189 726F706572206C6973-
   579 00000192 74210A00           
   580                                  
   581                                  section .bss
   582                                  memory:
   583 000001C8 <res 40000000>          	resb gbytes(1)
   584                                  
   585                                  section .data
   586                                  top_of_memory:
   587 00000196 [C801000000000000]              dq memory
   588                                  
   589                                  section .text
   590                                  malloc:
   591 0000067F 488B0425[96010000]              mov rax, qword [top_of_memory]
   592 00000687 48013C25[96010000]              add qword [top_of_memory], rdi
   593 0000068F C3                              ret
   594                                          
   595                                  print_sexpr_if_not_void:
   596 00000690 4881FF[00000000]        	cmp rdi, sob_void
   597 00000697 7501                    	jne print_sexpr
   598 00000699 C3                      	ret
   599                                  
   600                                  section .data
   601                                  fmt_void:
   602 0000019E 233C766F69643E00        	db `#<void>\0`
   603                                  fmt_nil:
   604 000001A6 282900                  	db `()\0`
   605                                  fmt_boolean_false:
   606 000001A9 236600                  	db `#f\0`
   607                                  fmt_boolean_true:
   608 000001AC 237400                  	db `#t\0`
   609                                  fmt_char_backslash:
   610 000001AF 235C5C00                	db `#\\\\\0`
   611                                  fmt_char_dquote:
   612 000001B3 235C2200                	db `#\\"\0`
   613                                  fmt_char_simple:
   614 000001B7 235C256300              	db `#\\%c\0`
   615                                  fmt_char_null:
   616 000001BC 235C6E756C00            	db `#\\nul\0`
   617                                  fmt_char_bell:
   618 000001C2 235C62656C6C00          	db `#\\bell\0`
   619                                  fmt_char_backspace:
   620 000001C9 235C6261636B737061-     	db `#\\backspace\0`
   620 000001D2 636500             
   621                                  fmt_char_tab:
   622 000001D5 235C74616200            	db `#\\tab\0`
   623                                  fmt_char_newline:
   624 000001DB 235C6E65776C696E65-     	db `#\\newline\0`
   624 000001E4 00                 
   625                                  fmt_char_formfeed:
   626 000001E5 235C7061676500          	db `#\\page\0`
   627                                  fmt_char_return:
   628 000001EC 235C72657475726E00      	db `#\\return\0`
   629                                  fmt_char_escape:
   630 000001F5 235C65736300            	db `#\\esc\0`
   631                                  fmt_char_space:
   632 000001FB 235C737061636500        	db `#\\space\0`
   633                                  fmt_char_hex:
   634 00000203 235C782530325800        	db `#\\x%02X\0`
   635                                  fmt_closure:
   636 0000020B 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   636 00000214 206174203078253038-
   636 0000021D 5820656E763D307825-
   636 00000226 30385820636F64653D-
   636 0000022F 3078253038583E00   
   637                                  fmt_lparen:
   638 00000237 2800                    	db `(\0`
   639                                  fmt_dotted_pair:
   640 00000239 202E2000                	db ` . \0`
   641                                  fmt_rparen:
   642 0000023D 2900                    	db `)\0`
   643                                  fmt_space:
   644 0000023F 2000                    	db ` \0`
   645                                  fmt_empty_vector:
   646 00000241 23282900                	db `#()\0`
   647                                  fmt_vector:
   648 00000245 232800                  	db `#(\0`
   649                                  fmt_real:
   650 00000248 256600                  	db `%f\0`
   651                                  fmt_fraction:
   652 0000024B 256C642F256C6400        	db `%ld/%ld\0`
   653                                  fmt_zero:
   654 00000253 3000                    	db `0\0`
   655                                  fmt_int:
   656 00000255 256C6400                	db `%ld\0`
   657                                  fmt_unknown_sexpr_error:
   658 00000259 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   658 00000262 6F723A20556E6B6E6F-
   658 0000026B 776E2074797065206F-
   658 00000274 662073657870722028-
   658 0000027D 3078253032582920   
   659 00000285 617420616464726573-     	db `at address 0x%08X\n\n\0`
   659 0000028E 73203078253038580A-
   659 00000297 0A00               
   660                                  fmt_dquote:
   661 00000299 2200                    	db `\"\0`
   662                                  fmt_string_char:
   663 0000029B 256300                          db `%c\0`
   664                                  fmt_string_char_7:
   665 0000029E 5C6100                          db `\\a\0`
   666                                  fmt_string_char_8:
   667 000002A1 5C6200                          db `\\b\0`
   668                                  fmt_string_char_9:
   669 000002A4 5C7400                          db `\\t\0`
   670                                  fmt_string_char_10:
   671 000002A7 5C6E00                          db `\\n\0`
   672                                  fmt_string_char_11:
   673 000002AA 5C7600                          db `\\v\0`
   674                                  fmt_string_char_12:
   675 000002AD 5C6600                          db `\\f\0`
   676                                  fmt_string_char_13:
   677 000002B0 5C7200                          db `\\r\0`
   678                                  fmt_string_char_34:
   679 000002B3 5C2200                          db `\\"\0`
   680                                  fmt_string_char_92:
   681 000002B6 5C5C00                          db `\\\\\0`
   682                                  fmt_string_char_hex:
   683 000002B9 5C7825583B00                    db `\\x%X;\0`
   684                                  
   685                                  section .text
   686                                  
   687                                  print_sexpr:
   688                                  	ENTER
   688 0000069A C8000000            <1>  enter 0, 0
   688 0000069E 4883E4F0            <1>  and rsp, ~15
   689 000006A2 8A07                    	mov al, byte [rdi]
   690 000006A4 3C00                    	cmp al, T_void
   691 000006A6 744D                    	je .Lvoid
   692 000006A8 3C01                    	cmp al, T_nil
   693 000006AA 7458                    	je .Lnil
   694 000006AC 3C09                    	cmp al, T_boolean_false
   695 000006AE 7463                    	je .Lboolean_false
   696 000006B0 3C0A                    	cmp al, T_boolean_true
   697 000006B2 746E                    	je .Lboolean_true
   698 000006B4 3C02                    	cmp al, T_char
   699 000006B6 7479                    	je .Lchar
   700 000006B8 3C04                    	cmp al, T_symbol
   701 000006BA 0F84BB010000            	je .Lsymbol
   702 000006C0 3C21                    	cmp al, T_pair
   703 000006C2 0F84D6010000            	je .Lpair
   704 000006C8 3C22                    	cmp al, T_vector
   705 000006CA 0F8478020000            	je .Lvector
   706 000006D0 3C05                    	cmp al, T_closure
   707 000006D2 0F8489010000            	je .Lclosure
   708 000006D8 3C12                    	cmp al, T_real
   709 000006DA 0F84F3020000            	je .Lreal
   710 000006E0 3C11                    	cmp al, T_rational
   711 000006E2 0F8419030000            	je .Lrational
   712 000006E8 3C03                    	cmp al, T_string
   713 000006EA 0F8452030000            	je .Lstring
   714                                  
   715 000006F0 E98A040000              	jmp .Lunknown_sexpr_type
   716                                  
   717                                  .Lvoid:
   718 000006F5 48BF-                   	mov rdi, fmt_void
   718 000006F7 [9E01000000000000] 
   719 000006FF E9AF040000              	jmp .Lemit
   720                                  
   721                                  .Lnil:
   722 00000704 48BF-                   	mov rdi, fmt_nil
   722 00000706 [A601000000000000] 
   723 0000070E E9A0040000              	jmp .Lemit
   724                                  
   725                                  .Lboolean_false:
   726 00000713 48BF-                   	mov rdi, fmt_boolean_false
   726 00000715 [A901000000000000] 
   727 0000071D E991040000              	jmp .Lemit
   728                                  
   729                                  .Lboolean_true:
   730 00000722 48BF-                   	mov rdi, fmt_boolean_true
   730 00000724 [AC01000000000000] 
   731 0000072C E982040000              	jmp .Lemit
   732                                  
   733                                  .Lchar:
   734 00000731 8A4701                  	mov al, byte [rdi + 1]
   735 00000734 3C20                    	cmp al, ' '
   736 00000736 7E28                    	jle .Lchar_whitespace
   737 00000738 3C5C                    	cmp al, 92 		; backslash
   738 0000073A 0F847C000000            	je .Lchar_backslash
   739 00000740 3C22                    	cmp al, '"'
   740 00000742 0F8483000000            	je .Lchar_dquote
   741 00000748 4825FF000000            	and rax, 255
   742 0000074E 48BF-                   	mov rdi, fmt_char_simple
   742 00000750 [B701000000000000] 
   743 00000758 4889C6                  	mov rsi, rax
   744 0000075B E953040000              	jmp .Lemit
   745                                  
   746                                  .Lchar_whitespace:
   747 00000760 3C00                    	cmp al, 0
   748 00000762 7476                    	je .Lchar_null
   749 00000764 3C07                    	cmp al, 7
   750 00000766 0F847D000000            	je .Lchar_bell
   751 0000076C 3C08                    	cmp al, 8
   752 0000076E 0F8484000000            	je .Lchar_backspace
   753 00000774 3C09                    	cmp al, 9
   754 00000776 0F848B000000            	je .Lchar_tab
   755 0000077C 3C0A                    	cmp al, 10
   756 0000077E 0F8492000000            	je .Lchar_newline
   757 00000784 3C0C                    	cmp al, 12
   758 00000786 0F8499000000            	je .Lchar_formfeed
   759 0000078C 3C0D                    	cmp al, 13
   760 0000078E 0F84A0000000            	je .Lchar_return
   761 00000794 3C1B                    	cmp al, 27
   762 00000796 0F84A7000000            	je .Lchar_escape
   763 0000079C 4825FF000000            	and rax, 255
   764 000007A2 3C20                    	cmp al, ' '
   765 000007A4 0F84A8000000            	je .Lchar_space
   766 000007AA 48BF-                   	mov rdi, fmt_char_hex
   766 000007AC [0302000000000000] 
   767 000007B4 4889C6                  	mov rsi, rax
   768 000007B7 E9F7030000              	jmp .Lemit	
   769                                  
   770                                  .Lchar_backslash:
   771 000007BC 48BF-                   	mov rdi, fmt_char_backslash
   771 000007BE [AF01000000000000] 
   772 000007C6 E9E8030000              	jmp .Lemit
   773                                  
   774                                  .Lchar_dquote:
   775 000007CB 48BF-                   	mov rdi, fmt_char_dquote
   775 000007CD [B301000000000000] 
   776 000007D5 E9D9030000              	jmp .Lemit
   777                                  
   778                                  .Lchar_null:
   779 000007DA 48BF-                   	mov rdi, fmt_char_null
   779 000007DC [BC01000000000000] 
   780 000007E4 E9CA030000              	jmp .Lemit
   781                                  
   782                                  .Lchar_bell:
   783 000007E9 48BF-                   	mov rdi, fmt_char_bell
   783 000007EB [C201000000000000] 
   784 000007F3 E9BB030000              	jmp .Lemit
   785                                  
   786                                  .Lchar_backspace:
   787 000007F8 48BF-                   	mov rdi, fmt_char_backspace
   787 000007FA [C901000000000000] 
   788 00000802 E9AC030000              	jmp .Lemit
   789                                  
   790                                  .Lchar_tab:
   791 00000807 48BF-                   	mov rdi, fmt_char_tab
   791 00000809 [D501000000000000] 
   792 00000811 E99D030000              	jmp .Lemit
   793                                  
   794                                  .Lchar_newline:
   795 00000816 48BF-                   	mov rdi, fmt_char_newline
   795 00000818 [DB01000000000000] 
   796 00000820 E98E030000              	jmp .Lemit
   797                                  
   798                                  .Lchar_formfeed:
   799 00000825 48BF-                   	mov rdi, fmt_char_formfeed
   799 00000827 [E501000000000000] 
   800 0000082F E97F030000              	jmp .Lemit
   801                                  
   802                                  .Lchar_return:
   803 00000834 48BF-                   	mov rdi, fmt_char_return
   803 00000836 [EC01000000000000] 
   804 0000083E E970030000              	jmp .Lemit
   805                                  
   806                                  .Lchar_escape:
   807 00000843 48BF-                   	mov rdi, fmt_char_escape
   807 00000845 [F501000000000000] 
   808 0000084D E961030000              	jmp .Lemit
   809                                  
   810                                  .Lchar_space:
   811 00000852 48BF-                   	mov rdi, fmt_char_space
   811 00000854 [FB01000000000000] 
   812 0000085C E952030000              	jmp .Lemit
   813                                  
   814                                  .Lclosure:
   815 00000861 4889FE                  	mov rsi, qword rdi
   816 00000864 48BF-                   	mov rdi, fmt_closure
   816 00000866 [0B02000000000000] 
   817 0000086E 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   818 00000872 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   819 00000876 E938030000              	jmp .Lemit
   820                                  
   821                                  .Lsymbol:
   822 0000087B 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   823 0000087F BE01000000              	mov rsi, 1		 ; size = 1 byte
   824 00000884 488B5701                	mov rdx, qword [rdi + 1] ; length
   825 00000888 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   826 0000088C 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   827 00000894 E8(00000000)            	call fwrite
   828 00000899 E921030000              	jmp .Lend
   829                                  	
   830                                  .Lpair:
   831 0000089E 57                      	push rdi
   832 0000089F 48BF-                   	mov rdi, fmt_lparen
   832 000008A1 [3702000000000000] 
   833 000008A9 B800000000              	mov rax, 0
   834                                          ENTER
   834 000008AE C8000000            <1>  enter 0, 0
   834 000008B2 4883E4F0            <1>  and rsp, ~15
   835 000008B6 E8(00000000)            	call printf
   836                                          LEAVE
   836 000008BB C9                  <1>  leave
   837 000008BC 488B3C24                	mov rdi, qword [rsp] 	; pair
   838 000008C0 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   839 000008C4 E8D1FDFFFF              	call print_sexpr
   840 000008C9 5F                      	pop rdi 		; pair
   841 000008CA 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   842                                  .Lcdr:
   843 000008CE 8A07                    	mov al, byte [rdi]
   844 000008D0 3C01                    	cmp al, T_nil
   845 000008D2 7435                    	je .Lcdr_nil
   846 000008D4 3C21                    	cmp al, T_pair
   847 000008D6 7447                    	je .Lcdr_pair
   848 000008D8 57                      	push rdi
   849 000008D9 48BF-                   	mov rdi, fmt_dotted_pair
   849 000008DB [3902000000000000] 
   850 000008E3 B800000000              	mov rax, 0
   851 000008E8 E8(00000000)            	call printf
   852 000008ED 5F                      	pop rdi
   853 000008EE E8A7FDFFFF              	call print_sexpr
   854 000008F3 48BF-                   	mov rdi, fmt_rparen
   854 000008F5 [3D02000000000000] 
   855 000008FD B800000000              	mov rax, 0
   856 00000902 E8(00000000)            	call printf
   857                                  	LEAVE
   857 00000907 C9                  <1>  leave
   858 00000908 C3                      	ret
   859                                  
   860                                  .Lcdr_nil:
   861 00000909 48BF-                   	mov rdi, fmt_rparen
   861 0000090B [3D02000000000000] 
   862 00000913 B800000000              	mov rax, 0
   863 00000918 E8(00000000)            	call printf
   864                                  	LEAVE
   864 0000091D C9                  <1>  leave
   865 0000091E C3                      	ret
   866                                  
   867                                  .Lcdr_pair:
   868 0000091F 57                      	push rdi
   869 00000920 48BF-                   	mov rdi, fmt_space
   869 00000922 [3F02000000000000] 
   870 0000092A B800000000              	mov rax, 0
   871 0000092F E8(00000000)            	call printf
   872 00000934 488B3C24                	mov rdi, qword [rsp]
   873 00000938 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   874 0000093C E859FDFFFF              	call print_sexpr
   875 00000941 5F                      	pop rdi
   876 00000942 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   877 00000946 EB86                    	jmp .Lcdr
   878                                  
   879                                  .Lvector:
   880 00000948 488B4701                	mov rax, qword [rdi + 1] ; length
   881 0000094C 4883F800                	cmp rax, 0
   882 00000950 7472                    	je .Lvector_empty
   883 00000952 57                      	push rdi
   884 00000953 48BF-                   	mov rdi, fmt_vector
   884 00000955 [4502000000000000] 
   885 0000095D B800000000              	mov rax, 0
   886 00000962 E8(00000000)            	call printf
   887 00000967 488B3C24                	mov rdi, qword [rsp]
   888 0000096B FF7701                  	push qword [rdi + 1]
   889 0000096E 6A01                    	push 1
   890 00000970 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   891 00000974 E821FDFFFF              	call print_sexpr
   892                                  .Lvector_loop:
   893                                  	; [rsp] index
   894                                  	; [rsp + 8*1] limit
   895                                  	; [rsp + 8*2] vector
   896 00000979 488B0424                	mov rax, qword [rsp]
   897 0000097D 483B442408              	cmp rax, qword [rsp + 8*1]
   898 00000982 742D                    	je .Lvector_end
   899 00000984 48BF-                   	mov rdi, fmt_space
   899 00000986 [3F02000000000000] 
   900 0000098E B800000000              	mov rax, 0
   901 00000993 E8(00000000)            	call printf
   902 00000998 488B0424                	mov rax, qword [rsp]
   903 0000099C 488B5C2410              	mov rbx, qword [rsp + 8*2]
   904 000009A1 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   905 000009A6 E8EFFCFFFF              	call print_sexpr
   906 000009AB 48FF0424                	inc qword [rsp]
   907 000009AF EBC8                    	jmp .Lvector_loop
   908                                  
   909                                  .Lvector_end:
   910 000009B1 4883C418                	add rsp, 8*3
   911 000009B5 48BF-                   	mov rdi, fmt_rparen
   911 000009B7 [3D02000000000000] 
   912 000009BF E9EF010000              	jmp .Lemit	
   913                                  
   914                                  .Lvector_empty:
   915 000009C4 48BF-                   	mov rdi, fmt_empty_vector
   915 000009C6 [4102000000000000] 
   916 000009CE E9E0010000              	jmp .Lemit
   917                                  
   918                                  .Lreal:
   919 000009D3 FF7701                  	push qword [rdi + 1]
   920 000009D6 F20F100424              	movsd xmm0, qword [rsp]
   921 000009DB 4883C408                	add rsp, 8*1
   922 000009DF 48BF-                   	mov rdi, fmt_real
   922 000009E1 [4802000000000000] 
   923 000009E9 B801000000              	mov rax, 1
   924                                  	ENTER
   924 000009EE C8000000            <1>  enter 0, 0
   924 000009F2 4883E4F0            <1>  and rsp, ~15
   925 000009F6 E8(00000000)            	call printf
   926                                  	LEAVE
   926 000009FB C9                  <1>  leave
   927 000009FC E9BE010000              	jmp .Lend
   928                                  
   929                                  .Lrational:
   930 00000A01 488B7701                	mov rsi, qword [rdi + 1]
   931 00000A05 488B5709                	mov rdx, qword [rdi + 1 + 8]
   932 00000A09 4883FE00                	cmp rsi, 0
   933 00000A0D 7415                    	je .Lrat_zero
   934 00000A0F 4883FA01                	cmp rdx, 1
   935 00000A13 741E                    	je .Lrat_int
   936 00000A15 48BF-                   	mov rdi, fmt_fraction
   936 00000A17 [4B02000000000000] 
   937 00000A1F E98F010000              	jmp .Lemit
   938                                  
   939                                  .Lrat_zero:
   940 00000A24 48BF-                   	mov rdi, fmt_zero
   940 00000A26 [5302000000000000] 
   941 00000A2E E980010000              	jmp .Lemit
   942                                  
   943                                  .Lrat_int:
   944 00000A33 48BF-                   	mov rdi, fmt_int
   944 00000A35 [5502000000000000] 
   945 00000A3D E971010000              	jmp .Lemit
   946                                  
   947                                  .Lstring:
   948 00000A42 488D4709                	lea rax, [rdi + 1 + 8]
   949 00000A46 50                      	push rax
   950 00000A47 FF7701                  	push qword [rdi + 1]
   951 00000A4A 48BF-                   	mov rdi, fmt_dquote
   951 00000A4C [9902000000000000] 
   952 00000A54 B800000000              	mov rax, 0
   953                                  	ENTER
   953 00000A59 C8000000            <1>  enter 0, 0
   953 00000A5D 4883E4F0            <1>  and rsp, ~15
   954 00000A61 E8(00000000)            	call printf
   955                                  	LEAVE
   955 00000A66 C9                  <1>  leave
   956                                  .Lstring_loop:
   957                                  	; qword [rsp]: limit
   958                                  	; qword [rsp + 8*1]: char *
   959 00000A67 48833C2400              	cmp qword [rsp], 0
   960 00000A6C 0F84FD000000            	je .Lstring_end
   961 00000A72 488B442408              	mov rax, qword [rsp + 8*1]
   962 00000A77 8A00                    	mov al, byte [rax]
   963 00000A79 4825FF000000            	and rax, 255
   964 00000A7F 3C07                    	cmp al, 7
   965 00000A81 7468                            je .Lstring_char_7
   966 00000A83 3C08                            cmp al, 8
   967 00000A85 7470                            je .Lstring_char_8
   968 00000A87 3C09                            cmp al, 9
   969 00000A89 7478                            je .Lstring_char_9
   970 00000A8B 3C0A                            cmp al, 10
   971 00000A8D 0F847C000000                    je .Lstring_char_10
   972 00000A93 3C0B                            cmp al, 11
   973 00000A95 0F8480000000                    je .Lstring_char_11
   974 00000A9B 3C0C                            cmp al, 12
   975 00000A9D 0F8484000000                    je .Lstring_char_12
   976 00000AA3 3C0D                            cmp al, 13
   977 00000AA5 0F8488000000                    je .Lstring_char_13
   978 00000AAB 3C22                            cmp al, 34
   979 00000AAD 0F848C000000                    je .Lstring_char_34
   981 00000AB3 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   982 00000AB5 3C20                            cmp al, ' '
   983 00000AB7 0F8CA0000000                    jl .Lstring_char_hex
   984 00000ABD 48BF-                           mov rdi, fmt_string_char
   984 00000ABF [9B02000000000000] 
   985 00000AC7 4889C6                          mov rsi, rax
   986                                  .Lstring_char_emit:
   987 00000ACA B800000000                      mov rax, 0
   988                                          ENTER
   988 00000ACF C8000000            <1>  enter 0, 0
   988 00000AD3 4883E4F0            <1>  and rsp, ~15
   989 00000AD7 E8(00000000)                    call printf
   990                                          LEAVE
   990 00000ADC C9                  <1>  leave
   991 00000ADD 48FF0C24                        dec qword [rsp]
   992 00000AE1 48FF442408                      inc qword [rsp + 8*1]
   993 00000AE6 E97CFFFFFF                      jmp .Lstring_loop
   994                                  
   995                                  .Lstring_char_7:
   996 00000AEB 48BF-                           mov rdi, fmt_string_char_7
   996 00000AED [9E02000000000000] 
   997 00000AF5 EBD3                            jmp .Lstring_char_emit
   998                                  
   999                                  .Lstring_char_8:
  1000 00000AF7 48BF-                           mov rdi, fmt_string_char_8
  1000 00000AF9 [A102000000000000] 
  1001 00000B01 EBC7                            jmp .Lstring_char_emit
  1002                                          
  1003                                  .Lstring_char_9:
  1004 00000B03 48BF-                           mov rdi, fmt_string_char_9
  1004 00000B05 [A402000000000000] 
  1005 00000B0D EBBB                            jmp .Lstring_char_emit
  1006                                  
  1007                                  .Lstring_char_10:
  1008 00000B0F 48BF-                           mov rdi, fmt_string_char_10
  1008 00000B11 [A702000000000000] 
  1009 00000B19 EBAF                            jmp .Lstring_char_emit
  1010                                  
  1011                                  .Lstring_char_11:
  1012 00000B1B 48BF-                           mov rdi, fmt_string_char_11
  1012 00000B1D [AA02000000000000] 
  1013 00000B25 EBA3                            jmp .Lstring_char_emit
  1014                                  
  1015                                  .Lstring_char_12:
  1016 00000B27 48BF-                           mov rdi, fmt_string_char_12
  1016 00000B29 [AD02000000000000] 
  1017 00000B31 EB97                            jmp .Lstring_char_emit
  1018                                  
  1019                                  .Lstring_char_13:
  1020 00000B33 48BF-                           mov rdi, fmt_string_char_13
  1020 00000B35 [B002000000000000] 
  1021 00000B3D EB8B                            jmp .Lstring_char_emit
  1022                                  
  1023                                  .Lstring_char_34:
  1024 00000B3F 48BF-                           mov rdi, fmt_string_char_34
  1024 00000B41 [B302000000000000] 
  1025 00000B49 E97CFFFFFF                      jmp .Lstring_char_emit
  1026                                  
  1027                                  .Lstring_char_92:
  1028 00000B4E 48BF-                           mov rdi, fmt_string_char_92
  1028 00000B50 [B602000000000000] 
  1029 00000B58 E96DFFFFFF                      jmp .Lstring_char_emit
  1030                                  
  1031                                  .Lstring_char_hex:
  1032 00000B5D 48BF-                           mov rdi, fmt_string_char_hex
  1032 00000B5F [B902000000000000] 
  1033 00000B67 4889C6                          mov rsi, rax
  1034 00000B6A E95BFFFFFF                      jmp .Lstring_char_emit        
  1035                                  
  1036                                  .Lstring_end:
  1037 00000B6F 4883C410                	add rsp, 8 * 2
  1038 00000B73 48BF-                   	mov rdi, fmt_dquote
  1038 00000B75 [9902000000000000] 
  1039 00000B7D EB34                    	jmp .Lemit
  1040                                  
  1041                                  .Lunknown_sexpr_type:
  1042 00000B7F 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1042 00000B81 [5902000000000000] 
  1043 00000B89 4825FF000000            	and rax, 255
  1044 00000B8F 4889C2                  	mov rdx, rax
  1045 00000B92 4889F9                  	mov rcx, rdi
  1046 00000B95 488B3C25[00000000]      	mov rdi, qword [stderr]
  1047 00000B9D B800000000              	mov rax, 0
  1048 00000BA2 E8(00000000)            	call fprintf
  1049 00000BA7 48C7C0FFFFFFFF          	mov rax, -1
  1050 00000BAE E8(00000000)            	call exit
  1051                                  
  1052                                  .Lemit:
  1053 00000BB3 B800000000              	mov rax, 0
  1054 00000BB8 E8(00000000)            	call printf
  1055 00000BBD EB00                    	jmp .Lend
  1056                                  
  1057                                  .Lend:
  1058                                  	LEAVE
  1058 00000BBF C9                  <1>  leave
  1059 00000BC0 C3                      	ret
  1060                                  
  1061                                  ;;; rdi: address of free variable
  1062                                  ;;; rsi: address of code-pointer
  1063                                  bind_primitive:
  1064                                          ENTER
  1064 00000BC1 C8000000            <1>  enter 0, 0
  1064 00000BC5 4883E4F0            <1>  and rsp, ~15
  1065 00000BC9 57                              push rdi
  1066 00000BCA BF11000000                      mov rdi, (1 + 8 + 8)
  1067 00000BCF E8ABFAFFFF                      call malloc
  1068 00000BD4 5F                              pop rdi
  1069 00000BD5 C60005                          mov byte [rax], T_closure
  1070 00000BD8 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1071 00000BE0 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1072 00000BE4 488907                          mov qword [rdi], rax
  1073                                          LEAVE
  1073 00000BE7 C9                  <1>  leave
  1074 00000BE8 C3                              ret
  1075                                  
  1076                                  
  1077                                  ; L_code_ptr_bin_apply:
  1078                                          
  1079                                  ;         ENTER
  1080                                  ;         cmp COUNT, 2
  1081                                  ;         jne L_error_arg_count_2
  1082                                  
  1083                                  ;         mov rax, PARAM(0)       ; rax <- closure
  1084                                  ;         cmp byte [rax], T_closure ;  is it a closure? 
  1085                                  ;         jne L_error_non_closure ;; if not closure jmp kibinimat
  1086                                  
  1087                                          
  1088                                  ;         ; handle cdr
  1089                                  ;         mov r9, qword PARAM(1)
  1090                                  ;         assert_pair(r9)
  1091                                  ;         mov rcx, qword SOB_PAIR_CDR(r9)
  1092                                  ;         mov r10, qword rcx      ; r10 <- cdr
  1093                                  ;         assert_pair(r10)
  1094                                  ;         mov rcx, qword SOB_PAIR_CAR(r10)         ; rcx <- cadr
  1095                                  ;         ; push rcx                ; push rcx (cadr) ***
  1096                                  
  1097                                  ;         ; handle car
  1098                                  ;         mov r9, PARAM(1)   
  1099                                  ;         assert_pair(r9)
  1100                                  ;         mov rcx, qword SOB_PAIR_CAR(r9)
  1101                                  ;         push rcx                ; push car
  1102                                  
  1103                                  ;         ; handle  caddr (car (cdr (cdr list)))
  1104                                  ;         assert_pair(r10)
  1105                                  ;         mov rcx, qword SOB_PAIR_CDR(r10)
  1106                                  ;         mov r10, qword rcx      ; r10 <- cdr
  1107                                  ;         assert_pair(r10)
  1108                                  ;         mov rcx, qword SOB_PAIR_CAR(r10)
  1109                                  ;         push rcx
  1110                                          
  1111                                  
  1112                                  ;         mov rbx, 2
  1113                                  ;         push rbx
  1114                                  
  1115                                  ; 	cmp byte [rax], T_closure 
  1116                                  ;         jne L_code_ptr_error
  1117                                  
  1118                                  ;         mov rbx, SOB_CLOSURE_ENV(rax)
  1119                                  ;         push rbx
  1120                                  
  1121                                  ;         call SOB_CLOSURE_CODE(rax)
  1122                                  
  1123                                  ; 	; mov rdi, rax
  1124                                  ; 	; call print_sexpr_if_not_void
  1125                                  
  1126                                  ;         LEAVE
  1127                                  ;         ret AND_KILL_FRAME(2)
  1128                                  
  1129                                  
  1130                                  L_code_ptr_bin_apply:
  1131                                          
  1132                                          ENTER
  1132 00000BE9 C8000000            <1>  enter 0, 0
  1132 00000BED 4883E4F0            <1>  and rsp, ~15
  1133 00000BF1 48837D1802                      cmp COUNT, 2
  1134 00000BF6 0F8578110000                    jne L_error_arg_count_2
  1135                                  
  1136 00000BFC 488B4520                        mov rax, PARAM(0)       ; rax <- closure
  1137 00000C00 803805                          cmp byte [rax], T_closure ;  is it a closure? 
  1138 00000C03 0F85E8F9FFFF                    jne L_error_non_closure ;; if not closure jmp kibinimat
  1139                                  
  1140                                          
  1141                                          ; handle cdr
  1142 00000C09 4C8B5528                        mov r10, qword PARAM(1)
  1143                                          assert_pair(r10)
  1143 00000C0D 41803A21            <1>  cmp byte [%1], %2
  1143 00000C11 0F850D120000        <1>  jne L_error_incorrect_type
  1144 00000C17 498B4A09                        mov rcx, qword SOB_PAIR_CDR(r10)
  1145 00000C1B 4989CA                          mov r10, qword rcx      ; r10 <- cdr
  1146                                          assert_pair(r10)
  1146 00000C1E 41803A21            <1>  cmp byte [%1], %2
  1146 00000C22 0F85FC110000        <1>  jne L_error_incorrect_type
  1147 00000C28 498B4A01                        mov rcx, qword SOB_PAIR_CAR(r10)         ; r11 <- cadr
  1148 00000C2C 4989CB                          mov r11, qword rcx
  1149 00000C2F 51                              push rcx                ; push rcx (cadr) ***
  1150                                  
  1151                                          ; handle car
  1152 00000C30 4C8B4D28                        mov r9, PARAM(1)   
  1153                                          assert_pair(r9)
  1153 00000C34 41803921            <1>  cmp byte [%1], %2
  1153 00000C38 0F85E6110000        <1>  jne L_error_incorrect_type
  1154 00000C3E 498B4901                        mov rcx, qword SOB_PAIR_CAR(r9)
  1155 00000C42 4989C9                          mov r9, qword rcx
  1156 00000C45 51                              push rcx                ; push car
  1157                                  
  1158                                  
  1159                                          
  1160                                          
  1161 00000C46 BB02000000                      mov rbx, 2
  1162 00000C4B 53                              push rbx
  1163                                  
  1164 00000C4C 803805                  	cmp byte [rax], T_closure 
  1165 00000C4F 0F85B5090000                    jne L_code_ptr_error
  1166                                  
  1167 00000C55 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  1168 00000C59 53                              push rbx
  1169                                  
  1170 00000C5A FF5009                          call SOB_CLOSURE_CODE(rax)
  1171                                  
  1172 00000C5D 4989C1                          mov r9, qword rax
  1173                                  
  1174                                  	; mov rdi, rax
  1175                                  	; call print_sexpr_if_not_void
  1176                                  
  1177                                          ; if there are more args left in the list, go to list not done.
  1178                                          ; get rest of the list
  1179                                          ; r10 <- cdr already
  1180                                          assert_pair(r10)
  1180 00000C60 41803A21            <1>  cmp byte [%1], %2
  1180 00000C64 0F85BA110000        <1>  jne L_error_incorrect_type
  1181 00000C6A 498B4A09                        mov rcx, qword SOB_PAIR_CDR(r10)
  1182 00000C6E 4989CA                          mov r10, qword rcx
  1183 00000C71 41803A01                        cmp byte [r10], T_nil
  1184 00000C75 744B                            je .L_list_is_done
  1185                                  .L_list_not_done:
  1186                                          ; r9 <- result, r10 <- rest of the list, r11 <- not relevnt
  1187                                          assert_pair(r10)
  1187 00000C77 41803A21            <1>  cmp byte [%1], %2
  1187 00000C7B 0F85A3110000        <1>  jne L_error_incorrect_type
  1188 00000C81 498B4A01                        mov rcx, qword SOB_PAIR_CAR(r10)
  1189 00000C85 4989CB                          mov r11, qword rcx
  1190                                  
  1191                                          ; r9 <- result, r10 <- rest of the list, r11 <- car(rest of the list)
  1192 00000C88 51                              push rcx
  1193 00000C89 4C89C9                          mov rcx, qword r9
  1194 00000C8C 51                              push rcx
  1195 00000C8D BB02000000                      mov rbx, 2
  1196 00000C92 53                              push rbx
  1197                                  
  1198 00000C93 488B4520                        mov rax, PARAM(0)       ; rax <- closure
  1199 00000C97 803805                          cmp byte [rax], T_closure ;  is it a closure? 
  1200 00000C9A 0F8551F9FFFF                    jne L_error_non_closure ;; if not closure jmp kibinimat
  1201                                  
  1202 00000CA0 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  1203 00000CA4 53                              push rbx
  1204                                  
  1205 00000CA5 FF5009                          call SOB_CLOSURE_CODE(rax)
  1206                                  
  1207 00000CA8 4989C1                          mov r9, qword rax
  1208                                  
  1209                                  
  1210                                          ; supposed to do 3 args
  1211                                  
  1212                                          assert_pair(r10)
  1212 00000CAB 41803A21            <1>  cmp byte [%1], %2
  1212 00000CAF 0F856F110000        <1>  jne L_error_incorrect_type
  1213 00000CB5 498B4A09                        mov rcx, qword SOB_PAIR_CDR(r10)
  1214 00000CB9 4989CA                          mov r10, qword rcx
  1215 00000CBC 41803A01                        cmp byte [r10], T_nil
  1216 00000CC0 75B5                            jne .L_list_not_done
  1217                                  
  1218                                  
  1219                                  
  1220                                  
  1221                                  
  1222                                  .L_list_is_done:
  1223                                          LEAVE
  1223 00000CC2 C9                  <1>  leave
  1224 00000CC3 C22000                          ret AND_KILL_FRAME(2)
  1225                                  
  1226                                  
  1227                                  
  1228                                  
  1229                                  
  1230                                  L_code_ptr_is_null:
  1231                                          ENTER
  1231 00000CC6 C8000000            <1>  enter 0, 0
  1231 00000CCA 4883E4F0            <1>  and rsp, ~15
  1232 00000CCE 48837D1801                      cmp COUNT, 1
  1233 00000CD3 0F856F100000                    jne L_error_arg_count_1
  1234 00000CD9 488B4520                        mov rax, PARAM(0)
  1235 00000CDD 803801                          cmp byte [rax], T_nil
  1236 00000CE0 750C                            jne .L_false
  1237 00000CE2 48B8-                           mov rax, sob_boolean_true
  1237 00000CE4 [0300000000000000] 
  1238 00000CEC EB0A                            jmp .L_end
  1239                                  .L_false:
  1240 00000CEE 48B8-                           mov rax, sob_boolean_false
  1240 00000CF0 [0200000000000000] 
  1241                                  .L_end:
  1242                                          LEAVE
  1242 00000CF8 C9                  <1>  leave
  1243 00000CF9 C21800                          ret AND_KILL_FRAME(1)
  1244                                  
  1245                                  L_code_ptr_is_pair:
  1246                                          ENTER
  1246 00000CFC C8000000            <1>  enter 0, 0
  1246 00000D00 4883E4F0            <1>  and rsp, ~15
  1247 00000D04 48837D1801                      cmp COUNT, 1
  1248 00000D09 0F8539100000                    jne L_error_arg_count_1
  1249 00000D0F 488B4520                        mov rax, PARAM(0)
  1250 00000D13 803821                          cmp byte [rax], T_pair
  1251 00000D16 750C                            jne .L_false
  1252 00000D18 48B8-                           mov rax, sob_boolean_true
  1252 00000D1A [0300000000000000] 
  1253 00000D22 EB0A                            jmp .L_end
  1254                                  .L_false:
  1255 00000D24 48B8-                           mov rax, sob_boolean_false
  1255 00000D26 [0200000000000000] 
  1256                                  .L_end:
  1257                                          LEAVE
  1257 00000D2E C9                  <1>  leave
  1258 00000D2F C21800                          ret AND_KILL_FRAME(1)
  1259                                          
  1260                                  L_code_ptr_is_void:
  1261                                          ENTER
  1261 00000D32 C8000000            <1>  enter 0, 0
  1261 00000D36 4883E4F0            <1>  and rsp, ~15
  1262 00000D3A 48837D1801                      cmp COUNT, 1
  1263 00000D3F 0F8503100000                    jne L_error_arg_count_1
  1264 00000D45 488B4520                        mov rax, PARAM(0)
  1265 00000D49 803800                          cmp byte [rax], T_void
  1266 00000D4C 750C                            jne .L_false
  1267 00000D4E 48B8-                           mov rax, sob_boolean_true
  1267 00000D50 [0300000000000000] 
  1268 00000D58 EB0A                            jmp .L_end
  1269                                  .L_false:
  1270 00000D5A 48B8-                           mov rax, sob_boolean_false
  1270 00000D5C [0200000000000000] 
  1271                                  .L_end:
  1272                                          LEAVE
  1272 00000D64 C9                  <1>  leave
  1273 00000D65 C21800                          ret AND_KILL_FRAME(1)
  1274                                  
  1275                                  L_code_ptr_is_char:
  1276                                          ENTER
  1276 00000D68 C8000000            <1>  enter 0, 0
  1276 00000D6C 4883E4F0            <1>  and rsp, ~15
  1277 00000D70 48837D1801                      cmp COUNT, 1
  1278 00000D75 0F85CD0F0000                    jne L_error_arg_count_1
  1279 00000D7B 488B4520                        mov rax, PARAM(0)
  1280 00000D7F 803802                          cmp byte [rax], T_char
  1281 00000D82 750C                            jne .L_false
  1282 00000D84 48B8-                           mov rax, sob_boolean_true
  1282 00000D86 [0300000000000000] 
  1283 00000D8E EB0A                            jmp .L_end
  1284                                  .L_false:
  1285 00000D90 48B8-                           mov rax, sob_boolean_false
  1285 00000D92 [0200000000000000] 
  1286                                  .L_end:
  1287                                          LEAVE
  1287 00000D9A C9                  <1>  leave
  1288 00000D9B C21800                          ret AND_KILL_FRAME(1)
  1289                                  
  1290                                  L_code_ptr_is_string:
  1291                                          ENTER
  1291 00000D9E C8000000            <1>  enter 0, 0
  1291 00000DA2 4883E4F0            <1>  and rsp, ~15
  1292 00000DA6 48837D1801                      cmp COUNT, 1
  1293 00000DAB 0F85970F0000                    jne L_error_arg_count_1
  1294 00000DB1 488B4520                        mov rax, PARAM(0)
  1295 00000DB5 803803                          cmp byte [rax], T_string
  1296 00000DB8 750C                            jne .L_false
  1297 00000DBA 48B8-                           mov rax, sob_boolean_true
  1297 00000DBC [0300000000000000] 
  1298 00000DC4 EB0A                            jmp .L_end
  1299                                  .L_false:
  1300 00000DC6 48B8-                           mov rax, sob_boolean_false
  1300 00000DC8 [0200000000000000] 
  1301                                  .L_end:
  1302                                          LEAVE
  1302 00000DD0 C9                  <1>  leave
  1303 00000DD1 C21800                          ret AND_KILL_FRAME(1)
  1304                                  
  1305                                  L_code_ptr_is_symbol:
  1306                                          ENTER
  1306 00000DD4 C8000000            <1>  enter 0, 0
  1306 00000DD8 4883E4F0            <1>  and rsp, ~15
  1307 00000DDC 48837D1801                      cmp COUNT, 1
  1308 00000DE1 0F85610F0000                    jne L_error_arg_count_1
  1309 00000DE7 488B4520                        mov rax, PARAM(0)
  1310 00000DEB 803804                          cmp byte [rax], T_symbol
  1311 00000DEE 750C                            jne .L_false
  1312 00000DF0 48B8-                           mov rax, sob_boolean_true
  1312 00000DF2 [0300000000000000] 
  1313 00000DFA EB0A                            jmp .L_end
  1314                                  .L_false:
  1315 00000DFC 48B8-                           mov rax, sob_boolean_false
  1315 00000DFE [0200000000000000] 
  1316                                  .L_end:
  1317                                          LEAVE
  1317 00000E06 C9                  <1>  leave
  1318 00000E07 C21800                          ret AND_KILL_FRAME(1)
  1319                                  
  1320                                  L_code_ptr_is_vector:
  1321                                          ENTER
  1321 00000E0A C8000000            <1>  enter 0, 0
  1321 00000E0E 4883E4F0            <1>  and rsp, ~15
  1322 00000E12 48837D1801                      cmp COUNT, 1
  1323 00000E17 0F852B0F0000                    jne L_error_arg_count_1
  1324 00000E1D 488B4520                        mov rax, PARAM(0)
  1325 00000E21 803822                          cmp byte [rax], T_vector
  1326 00000E24 750C                            jne .L_false
  1327 00000E26 48B8-                           mov rax, sob_boolean_true
  1327 00000E28 [0300000000000000] 
  1328 00000E30 EB0A                            jmp .L_end
  1329                                  .L_false:
  1330 00000E32 48B8-                           mov rax, sob_boolean_false
  1330 00000E34 [0200000000000000] 
  1331                                  .L_end:
  1332                                          LEAVE
  1332 00000E3C C9                  <1>  leave
  1333 00000E3D C21800                          ret AND_KILL_FRAME(1)
  1334                                  
  1335                                  L_code_ptr_is_closure:
  1336                                          ENTER
  1336 00000E40 C8000000            <1>  enter 0, 0
  1336 00000E44 4883E4F0            <1>  and rsp, ~15
  1337 00000E48 48837D1801                      cmp COUNT, 1
  1338 00000E4D 0F85F50E0000                    jne L_error_arg_count_1
  1339 00000E53 488B4520                        mov rax, PARAM(0)
  1340 00000E57 803805                          cmp byte [rax], T_closure
  1341 00000E5A 750C                            jne .L_false
  1342 00000E5C 48B8-                           mov rax, sob_boolean_true
  1342 00000E5E [0300000000000000] 
  1343 00000E66 EB0A                            jmp .L_end
  1344                                  .L_false:
  1345 00000E68 48B8-                           mov rax, sob_boolean_false
  1345 00000E6A [0200000000000000] 
  1346                                  .L_end:
  1347                                          LEAVE
  1347 00000E72 C9                  <1>  leave
  1348 00000E73 C21800                          ret AND_KILL_FRAME(1)
  1349                                  
  1350                                  L_code_ptr_is_real:
  1351                                          ENTER
  1351 00000E76 C8000000            <1>  enter 0, 0
  1351 00000E7A 4883E4F0            <1>  and rsp, ~15
  1352 00000E7E 48837D1801                      cmp COUNT, 1
  1353 00000E83 0F85BF0E0000                    jne L_error_arg_count_1
  1354 00000E89 488B4520                        mov rax, PARAM(0)
  1355 00000E8D 803812                          cmp byte [rax], T_real
  1356 00000E90 750C                            jne .L_false
  1357 00000E92 48B8-                           mov rax, sob_boolean_true
  1357 00000E94 [0300000000000000] 
  1358 00000E9C EB0A                            jmp .L_end
  1359                                  .L_false:
  1360 00000E9E 48B8-                           mov rax, sob_boolean_false
  1360 00000EA0 [0200000000000000] 
  1361                                  .L_end:
  1362                                          LEAVE
  1362 00000EA8 C9                  <1>  leave
  1363 00000EA9 C21800                          ret AND_KILL_FRAME(1)
  1364                                  
  1365                                  L_code_ptr_is_rational:
  1366                                          ENTER
  1366 00000EAC C8000000            <1>  enter 0, 0
  1366 00000EB0 4883E4F0            <1>  and rsp, ~15
  1367 00000EB4 48837D1801                      cmp COUNT, 1
  1368 00000EB9 0F85890E0000                    jne L_error_arg_count_1
  1369 00000EBF 488B4520                        mov rax, PARAM(0)
  1370 00000EC3 803811                          cmp byte [rax], T_rational
  1371 00000EC6 750C                            jne .L_false
  1372 00000EC8 48B8-                           mov rax, sob_boolean_true
  1372 00000ECA [0300000000000000] 
  1373 00000ED2 EB0A                            jmp .L_end
  1374                                  .L_false:
  1375 00000ED4 48B8-                           mov rax, sob_boolean_false
  1375 00000ED6 [0200000000000000] 
  1376                                  .L_end:
  1377                                          LEAVE
  1377 00000EDE C9                  <1>  leave
  1378 00000EDF C21800                          ret AND_KILL_FRAME(1)
  1379                                  
  1380                                  L_code_ptr_is_boolean:
  1381                                          ENTER
  1381 00000EE2 C8000000            <1>  enter 0, 0
  1381 00000EE6 4883E4F0            <1>  and rsp, ~15
  1382 00000EEA 48837D1801                      cmp COUNT, 1
  1383 00000EEF 0F85530E0000                    jne L_error_arg_count_1
  1384 00000EF5 488B4520                        mov rax, PARAM(0)
  1385 00000EF9 8A18                            mov bl, byte [rax]
  1386 00000EFB 80E308                          and bl, T_boolean
  1387 00000EFE 740C                            je .L_false
  1388 00000F00 48B8-                           mov rax, sob_boolean_true
  1388 00000F02 [0300000000000000] 
  1389 00000F0A EB0A                            jmp .L_end
  1390                                  .L_false:
  1391 00000F0C 48B8-                           mov rax, sob_boolean_false
  1391 00000F0E [0200000000000000] 
  1392                                  .L_end:
  1393                                          LEAVE
  1393 00000F16 C9                  <1>  leave
  1394 00000F17 C21800                          ret AND_KILL_FRAME(1)
  1395                                          
  1396                                  L_code_ptr_is_number:
  1397                                          ENTER
  1397 00000F1A C8000000            <1>  enter 0, 0
  1397 00000F1E 4883E4F0            <1>  and rsp, ~15
  1398 00000F22 48837D1801                      cmp COUNT, 1
  1399 00000F27 0F851B0E0000                    jne L_error_arg_count_1
  1400 00000F2D 488B4520                        mov rax, PARAM(0)
  1401 00000F31 8A18                            mov bl, byte [rax]
  1402 00000F33 80E310                          and bl, T_number
  1403 00000F36 740C                            je .L_false
  1404 00000F38 48B8-                           mov rax, sob_boolean_true
  1404 00000F3A [0300000000000000] 
  1405 00000F42 EB0A                            jmp .L_end
  1406                                  .L_false:
  1407 00000F44 48B8-                           mov rax, sob_boolean_false
  1407 00000F46 [0200000000000000] 
  1408                                  .L_end:
  1409                                          LEAVE
  1409 00000F4E C9                  <1>  leave
  1410 00000F4F C21800                          ret AND_KILL_FRAME(1)
  1411                                          
  1412                                  L_code_ptr_is_collection:
  1413                                          ENTER
  1413 00000F52 C8000000            <1>  enter 0, 0
  1413 00000F56 4883E4F0            <1>  and rsp, ~15
  1414 00000F5A 48837D1801                      cmp COUNT, 1
  1415 00000F5F 0F85E30D0000                    jne L_error_arg_count_1
  1416 00000F65 488B4520                        mov rax, PARAM(0)
  1417 00000F69 8A18                            mov bl, byte [rax]
  1418 00000F6B 80E320                          and bl, T_collection
  1419 00000F6E 740C                            je .L_false
  1420 00000F70 48B8-                           mov rax, sob_boolean_true
  1420 00000F72 [0300000000000000] 
  1421 00000F7A EB0A                            jmp .L_end
  1422                                  .L_false:
  1423 00000F7C 48B8-                           mov rax, sob_boolean_false
  1423 00000F7E [0200000000000000] 
  1424                                  .L_end:
  1425                                          LEAVE
  1425 00000F86 C9                  <1>  leave
  1426 00000F87 C21800                          ret AND_KILL_FRAME(1)
  1427                                  
  1428                                  L_code_ptr_cons:
  1429                                          ENTER
  1429 00000F8A C8000000            <1>  enter 0, 0
  1429 00000F8E 4883E4F0            <1>  and rsp, ~15
  1430 00000F92 48837D1802                      cmp COUNT, 2
  1431 00000F97 0F85D70D0000                    jne L_error_arg_count_2
  1432 00000F9D BF11000000                      mov rdi, (1 + 8 + 8)
  1433 00000FA2 E8D8F6FFFF                      call malloc
  1434 00000FA7 C60021                          mov byte [rax], T_pair
  1435 00000FAA 488B5D20                        mov rbx, PARAM(0)
  1436 00000FAE 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1437 00000FB2 488B5D28                        mov rbx, PARAM(1)
  1438 00000FB6 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1439                                          LEAVE
  1439 00000FBA C9                  <1>  leave
  1440 00000FBB C22000                          ret AND_KILL_FRAME(2)
  1441                                  
  1442                                  L_code_ptr_display_sexpr:
  1443                                          ENTER
  1443 00000FBE C8000000            <1>  enter 0, 0
  1443 00000FC2 4883E4F0            <1>  and rsp, ~15
  1444 00000FC6 48837D1801                      cmp COUNT, 1
  1445 00000FCB 0F85770D0000                    jne L_error_arg_count_1
  1446 00000FD1 488B7D20                        mov rdi, PARAM(0)
  1447 00000FD5 E8C0F6FFFF                      call print_sexpr
  1448 00000FDA 48B8-                           mov rax, sob_void
  1448 00000FDC [0000000000000000] 
  1449                                          LEAVE
  1449 00000FE4 C9                  <1>  leave
  1450 00000FE5 C21800                          ret AND_KILL_FRAME(1)
  1451                                  
  1452                                  L_code_ptr_write_char:
  1453                                          ENTER
  1453 00000FE8 C8000000            <1>  enter 0, 0
  1453 00000FEC 4883E4F0            <1>  and rsp, ~15
  1454 00000FF0 48837D1801                      cmp COUNT, 1
  1455 00000FF5 0F854D0D0000                    jne L_error_arg_count_1
  1456 00000FFB 488B4520                        mov rax, PARAM(0)
  1457                                          assert_char(rax)
  1457 00000FFF 803802              <1>  cmp byte [%1], %2
  1457 00001002 0F851C0E0000        <1>  jne L_error_incorrect_type
  1458 00001008 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1459 0000100B 4825FF000000                    and rax, 255
  1460 00001011 48BF-                           mov rdi, fmt_char
  1460 00001013 [BF02000000000000] 
  1461 0000101B 4889C6                          mov rsi, rax
  1462 0000101E B800000000                      mov rax, 0
  1463 00001023 E8(00000000)                    call printf
  1464 00001028 48B8-                           mov rax, sob_void
  1464 0000102A [0000000000000000] 
  1465                                          LEAVE
  1465 00001032 C9                  <1>  leave
  1466 00001033 C21800                          ret AND_KILL_FRAME(1)
  1467                                  
  1468                                  L_code_ptr_car:
  1469                                          ENTER
  1469 00001036 C8000000            <1>  enter 0, 0
  1469 0000103A 4883E4F0            <1>  and rsp, ~15
  1470 0000103E 48837D1801                      cmp COUNT, 1
  1471 00001043 0F85FF0C0000                    jne L_error_arg_count_1
  1472 00001049 488B4520                        mov rax, PARAM(0)
  1473                                          assert_pair(rax)
  1473 0000104D 803821              <1>  cmp byte [%1], %2
  1473 00001050 0F85CE0D0000        <1>  jne L_error_incorrect_type
  1474 00001056 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1475                                          LEAVE
  1475 0000105A C9                  <1>  leave
  1476 0000105B C21800                          ret AND_KILL_FRAME(1)
  1477                                          
  1478                                  L_code_ptr_cdr:
  1479                                          ENTER
  1479 0000105E C8000000            <1>  enter 0, 0
  1479 00001062 4883E4F0            <1>  and rsp, ~15
  1480 00001066 48837D1801                      cmp COUNT, 1
  1481 0000106B 0F85D70C0000                    jne L_error_arg_count_1
  1482 00001071 488B4520                        mov rax, PARAM(0)
  1483                                          assert_pair(rax)
  1483 00001075 803821              <1>  cmp byte [%1], %2
  1483 00001078 0F85A60D0000        <1>  jne L_error_incorrect_type
  1484 0000107E 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1485                                          LEAVE
  1485 00001082 C9                  <1>  leave
  1486 00001083 C21800                          ret AND_KILL_FRAME(1)
  1487                                          
  1488                                  L_code_ptr_string_length:
  1489                                          ENTER
  1489 00001086 C8000000            <1>  enter 0, 0
  1489 0000108A 4883E4F0            <1>  and rsp, ~15
  1490 0000108E 48837D1801                      cmp COUNT, 1
  1491 00001093 0F85AF0C0000                    jne L_error_arg_count_1
  1492 00001099 488B4520                        mov rax, PARAM(0)
  1493                                          assert_string(rax)
  1493 0000109D 803803              <1>  cmp byte [%1], %2
  1493 000010A0 0F857E0D0000        <1>  jne L_error_incorrect_type
  1494 000010A6 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1495 000010AA E81F0C0000                      call make_integer
  1496                                          LEAVE
  1496 000010AF C9                  <1>  leave
  1497 000010B0 C21800                          ret AND_KILL_FRAME(1)
  1498                                  
  1499                                  L_code_ptr_vector_length:
  1500                                          ENTER
  1500 000010B3 C8000000            <1>  enter 0, 0
  1500 000010B7 4883E4F0            <1>  and rsp, ~15
  1501 000010BB 48837D1801                      cmp COUNT, 1
  1502 000010C0 0F85820C0000                    jne L_error_arg_count_1
  1503 000010C6 488B4520                        mov rax, PARAM(0)
  1504                                          assert_vector(rax)
  1504 000010CA 803822              <1>  cmp byte [%1], %2
  1504 000010CD 0F85510D0000        <1>  jne L_error_incorrect_type
  1505 000010D3 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1506 000010D7 E8F20B0000                      call make_integer
  1507                                          LEAVE
  1507 000010DC C9                  <1>  leave
  1508 000010DD C21800                          ret AND_KILL_FRAME(1)
  1509                                  
  1510                                  L_code_ptr_real_to_integer:
  1511                                          ENTER
  1511 000010E0 C8000000            <1>  enter 0, 0
  1511 000010E4 4883E4F0            <1>  and rsp, ~15
  1512 000010E8 48837D1801                      cmp COUNT, 1
  1513 000010ED 0F85550C0000                    jne L_error_arg_count_1
  1514 000010F3 488B5D20                        mov rbx, PARAM(0)
  1515                                          assert_real(rbx)
  1515 000010F7 803B12              <1>  cmp byte [%1], %2
  1515 000010FA 0F85240D0000        <1>  jne L_error_incorrect_type
  1516 00001100 F20F104301                      movsd xmm0, qword [rbx + 1]
  1517 00001105 F2480F2CF8                      cvttsd2si rdi, xmm0
  1518 0000110A E8BF0B0000                      call make_integer
  1519                                          LEAVE
  1519 0000110F C9                  <1>  leave
  1520 00001110 C21800                          ret AND_KILL_FRAME(1)
  1521                                  
  1522                                  L_code_ptr_exit:
  1523                                          ENTER
  1523 00001113 C8000000            <1>  enter 0, 0
  1523 00001117 4883E4F0            <1>  and rsp, ~15
  1524 0000111B 48837D1800                      cmp COUNT, 0
  1525 00001120 0F85F60B0000                    jne L_error_arg_count_0
  1526 00001126 B800000000                      mov rax, 0
  1527 0000112B E8(00000000)                    call exit
  1528                                  
  1529                                  L_code_ptr_integer_to_real:
  1530                                          ENTER
  1530 00001130 C8000000            <1>  enter 0, 0
  1530 00001134 4883E4F0            <1>  and rsp, ~15
  1531 00001138 48837D1801                      cmp COUNT, 1
  1532 0000113D 0F85050C0000                    jne L_error_arg_count_1
  1533 00001143 488B4520                        mov rax, PARAM(0)
  1534                                          assert_integer(rax)
  1534                              <1>  assert_rational(%1)
  1534 00001147 803811              <2>  cmp byte [%1], %2
  1534 0000114A 0F85D40C0000        <2>  jne L_error_incorrect_type
  1534 00001150 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
  1534 00001155 0F85C90C0000        <1>  jne L_error_incorrect_type
  1535 0000115B FF7001                          push qword [rax + 1]
  1536 0000115E F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1537 00001164 E8490B0000                      call make_real
  1538                                          LEAVE
  1538 00001169 C9                  <1>  leave
  1539 0000116A C21800                          ret AND_KILL_FRAME(1)
  1540                                  
  1541                                  L_code_ptr_rational_to_real:
  1542                                          ENTER
  1542 0000116D C8000000            <1>  enter 0, 0
  1542 00001171 4883E4F0            <1>  and rsp, ~15
  1543 00001175 48837D1801                      cmp COUNT, 1
  1544 0000117A 0F85C80B0000                    jne L_error_arg_count_1
  1545 00001180 488B4520                        mov rax, PARAM(0)
  1546                                          assert_rational(rax)
  1546 00001184 803811              <1>  cmp byte [%1], %2
  1546 00001187 0F85970C0000        <1>  jne L_error_incorrect_type
  1547 0000118D FF7001                          push qword [rax + 1]
  1548 00001190 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1549 00001196 FF7009                          push qword [rax + 1 + 8]
  1550 00001199 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1551 0000119F F20F5EC1                        divsd xmm0, xmm1
  1552 000011A3 E80A0B0000                      call make_real
  1553                                          LEAVE
  1553 000011A8 C9                  <1>  leave
  1554 000011A9 C21800                          ret AND_KILL_FRAME(1)
  1555                                  
  1556                                  L_code_ptr_char_to_integer:
  1557                                          ENTER
  1557 000011AC C8000000            <1>  enter 0, 0
  1557 000011B0 4883E4F0            <1>  and rsp, ~15
  1558 000011B4 48837D1801                      cmp COUNT, 1
  1559 000011B9 0F85890B0000                    jne L_error_arg_count_1
  1560 000011BF 488B4520                        mov rax, PARAM(0)
  1561                                          assert_char(rax)
  1561 000011C3 803802              <1>  cmp byte [%1], %2
  1561 000011C6 0F85580C0000        <1>  jne L_error_incorrect_type
  1562 000011CC 8A4001                          mov al, byte [rax + 1]
  1563 000011CF 4825FF000000                    and rax, 255
  1564 000011D5 4889C7                          mov rdi, rax
  1565 000011D8 E8F10A0000                      call make_integer
  1566                                          LEAVE
  1566 000011DD C9                  <1>  leave
  1567 000011DE C21800                          ret AND_KILL_FRAME(1)
  1568                                  
  1569                                  L_code_ptr_integer_to_char:
  1570                                          ENTER
  1570 000011E1 C8000000            <1>  enter 0, 0
  1570 000011E5 4883E4F0            <1>  and rsp, ~15
  1571 000011E9 48837D1801                      cmp COUNT, 1
  1572 000011EE 0F85540B0000                    jne L_error_arg_count_1
  1573 000011F4 488B4520                        mov rax, PARAM(0)
  1574                                          assert_integer(rax)
  1574                              <1>  assert_rational(%1)
  1574 000011F8 803811              <2>  cmp byte [%1], %2
  1574 000011FB 0F85230C0000        <2>  jne L_error_incorrect_type
  1574 00001201 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
  1574 00001206 0F85180C0000        <1>  jne L_error_incorrect_type
  1575 0000120C 488B5801                        mov rbx, qword [rax + 1]
  1576 00001210 4883FB00                        cmp rbx, 0
  1577 00001214 0F8EDA0A0000                    jle L_error_integer_range
  1578 0000121A 4881FB00010000                  cmp rbx, 256
  1579 00001221 0F8DCD0A0000                    jge L_error_integer_range
  1580 00001227 BF02000000                      mov rdi, (1 + 1)
  1581 0000122C E84EF4FFFF                      call malloc
  1582 00001231 C60002                          mov byte [rax], T_char
  1583 00001234 885801                          mov byte [rax + 1], bl
  1584                                          LEAVE
  1584 00001237 C9                  <1>  leave
  1585 00001238 C21800                          ret AND_KILL_FRAME(1)
  1586                                  
  1587                                  L_code_ptr_trng:
  1588                                          ENTER
  1588 0000123B C8000000            <1>  enter 0, 0
  1588 0000123F 4883E4F0            <1>  and rsp, ~15
  1589 00001243 48837D1800                      cmp COUNT, 0
  1590 00001248 0F85CE0A0000                    jne L_error_arg_count_0
  1591 0000124E 480FC7F7                        rdrand rdi
  1592 00001252 48D1EF                          shr rdi, 1
  1593 00001255 E8740A0000                      call make_integer
  1594                                          LEAVE
  1594 0000125A C9                  <1>  leave
  1595 0000125B C21000                          ret AND_KILL_FRAME(0)
  1596                                  
  1597                                  L_code_ptr_is_zero:
  1598                                          ENTER
  1598 0000125E C8000000            <1>  enter 0, 0
  1598 00001262 4883E4F0            <1>  and rsp, ~15
  1599 00001266 48837D1801                      cmp COUNT, 1
  1600 0000126B 0F85D70A0000                    jne L_error_arg_count_1
  1601 00001271 488B4520                        mov rax, PARAM(0)
  1602 00001275 803811                          cmp byte [rax], T_rational
  1603 00001278 740A                            je .L_rational
  1604 0000127A 803812                          cmp byte [rax], T_real
  1605 0000127D 740E                            je .L_real
  1606 0000127F E9A00B0000                      jmp L_error_incorrect_type
  1607                                  .L_rational:
  1608 00001284 4883780100                      cmp qword [rax + 1], 0
  1609 00001289 7420                            je .L_zero
  1610 0000128B EB12                            jmp .L_not_zero
  1611                                  .L_real:
  1612 0000128D 660FEFC0                        pxor xmm0, xmm0
  1613 00001291 FF7001                          push qword [rax + 1]
  1614 00001294 F20F100C24                      movsd xmm1, qword [rsp]
  1615 00001299 660F2EC1                        ucomisd xmm0, xmm1
  1616 0000129D 740C                            je .L_zero
  1617                                  .L_not_zero:
  1618 0000129F 48B8-                           mov rax, sob_boolean_false
  1618 000012A1 [0200000000000000] 
  1619 000012A9 EB0A                            jmp .L_end
  1620                                  .L_zero:
  1621 000012AB 48B8-                           mov rax, sob_boolean_true
  1621 000012AD [0300000000000000] 
  1622                                  .L_end:
  1623                                          LEAVE
  1623 000012B5 C9                  <1>  leave
  1624 000012B6 C21800                          ret AND_KILL_FRAME(1)
  1625                                  
  1626                                  L_code_ptr_is_integer:
  1627                                          ENTER
  1627 000012B9 C8000000            <1>  enter 0, 0
  1627 000012BD 4883E4F0            <1>  and rsp, ~15
  1628 000012C1 48837D1801                      cmp COUNT, 1
  1629 000012C6 0F857C0A0000                    jne L_error_arg_count_1
  1630 000012CC 488B4520                        mov rax, PARAM(0)
  1631 000012D0 803811                          cmp byte [rax], T_rational
  1632 000012D3 7513                            jne .L_false
  1633 000012D5 4883780901                      cmp qword [rax + 1 + 8], 1
  1634 000012DA 750C                            jne .L_false
  1635 000012DC 48B8-                           mov rax, sob_boolean_true
  1635 000012DE [0300000000000000] 
  1636 000012E6 EB0A                            jmp .L_exit
  1637                                  .L_false:
  1638 000012E8 48B8-                           mov rax, sob_boolean_false
  1638 000012EA [0200000000000000] 
  1639                                  .L_exit:
  1640                                          LEAVE
  1640 000012F2 C9                  <1>  leave
  1641 000012F3 C21800                          ret AND_KILL_FRAME(1)
  1642                                  
  1643                                  L_code_ptr_raw_bin_add_rr:
  1644                                          ENTER
  1644 000012F6 C8000000            <1>  enter 0, 0
  1644 000012FA 4883E4F0            <1>  and rsp, ~15
  1645 000012FE 48837D1802                      cmp COUNT, 2
  1646 00001303 0F856B0A0000                    jne L_error_arg_count_2
  1647 00001309 488B5D20                        mov rbx, PARAM(0)
  1648                                          assert_real(rbx)
  1648 0000130D 803B12              <1>  cmp byte [%1], %2
  1648 00001310 0F850E0B0000        <1>  jne L_error_incorrect_type
  1649 00001316 488B4D28                        mov rcx, PARAM(1)
  1650                                          assert_real(rcx)
  1650 0000131A 803912              <1>  cmp byte [%1], %2
  1650 0000131D 0F85010B0000        <1>  jne L_error_incorrect_type
  1651 00001323 F20F104301                      movsd xmm0, qword [rbx + 1]
  1652 00001328 F20F104901                      movsd xmm1, qword [rcx + 1]
  1653 0000132D F20F58C1                        addsd xmm0, xmm1
  1654 00001331 E87C090000                      call make_real
  1655                                          LEAVE
  1655 00001336 C9                  <1>  leave
  1656 00001337 C22000                          ret AND_KILL_FRAME(2)
  1657                                  
  1658                                  L_code_ptr_raw_bin_sub_rr:
  1659                                          ENTER
  1659 0000133A C8000000            <1>  enter 0, 0
  1659 0000133E 4883E4F0            <1>  and rsp, ~15
  1660 00001342 48837D1802                      cmp COUNT, 2
  1661 00001347 0F85270A0000                    jne L_error_arg_count_2
  1662 0000134D 488B5D20                        mov rbx, PARAM(0)
  1663                                          assert_real(rbx)
  1663 00001351 803B12              <1>  cmp byte [%1], %2
  1663 00001354 0F85CA0A0000        <1>  jne L_error_incorrect_type
  1664 0000135A 488B4D28                        mov rcx, PARAM(1)
  1665                                          assert_real(rcx)
  1665 0000135E 803912              <1>  cmp byte [%1], %2
  1665 00001361 0F85BD0A0000        <1>  jne L_error_incorrect_type
  1666 00001367 F20F104301                      movsd xmm0, qword [rbx + 1]
  1667 0000136C F20F104901                      movsd xmm1, qword [rcx + 1]
  1668 00001371 F20F5CC1                        subsd xmm0, xmm1
  1669 00001375 E838090000                      call make_real
  1670                                          LEAVE
  1670 0000137A C9                  <1>  leave
  1671 0000137B C22000                          ret AND_KILL_FRAME(2)
  1672                                  
  1673                                  L_code_ptr_raw_bin_mul_rr:
  1674                                          ENTER
  1674 0000137E C8000000            <1>  enter 0, 0
  1674 00001382 4883E4F0            <1>  and rsp, ~15
  1675 00001386 48837D1802                      cmp COUNT, 2
  1676 0000138B 0F85E3090000                    jne L_error_arg_count_2
  1677 00001391 488B5D20                        mov rbx, PARAM(0)
  1678                                          assert_real(rbx)
  1678 00001395 803B12              <1>  cmp byte [%1], %2
  1678 00001398 0F85860A0000        <1>  jne L_error_incorrect_type
  1679 0000139E 488B4D28                        mov rcx, PARAM(1)
  1680                                          assert_real(rcx)
  1680 000013A2 803912              <1>  cmp byte [%1], %2
  1680 000013A5 0F85790A0000        <1>  jne L_error_incorrect_type
  1681 000013AB F20F104301                      movsd xmm0, qword [rbx + 1]
  1682 000013B0 F20F104901                      movsd xmm1, qword [rcx + 1]
  1683 000013B5 F20F59C1                        mulsd xmm0, xmm1
  1684 000013B9 E8F4080000                      call make_real
  1685                                          LEAVE
  1685 000013BE C9                  <1>  leave
  1686 000013BF C22000                          ret AND_KILL_FRAME(2)
  1687                                  
  1688                                  L_code_ptr_raw_bin_div_rr:
  1689                                          ENTER
  1689 000013C2 C8000000            <1>  enter 0, 0
  1689 000013C6 4883E4F0            <1>  and rsp, ~15
  1690 000013CA 48837D1802                      cmp COUNT, 2
  1691 000013CF 0F859F090000                    jne L_error_arg_count_2
  1692 000013D5 488B5D20                        mov rbx, PARAM(0)
  1693                                          assert_real(rbx)
  1693 000013D9 803B12              <1>  cmp byte [%1], %2
  1693 000013DC 0F85420A0000        <1>  jne L_error_incorrect_type
  1694 000013E2 488B4D28                        mov rcx, PARAM(1)
  1695                                          assert_real(rcx)
  1695 000013E6 803912              <1>  cmp byte [%1], %2
  1695 000013E9 0F85350A0000        <1>  jne L_error_incorrect_type
  1696 000013EF F20F104301                      movsd xmm0, qword [rbx + 1]
  1697 000013F4 F20F104901                      movsd xmm1, qword [rcx + 1]
  1698 000013F9 660FEFD2                        pxor xmm2, xmm2
  1699 000013FD 660F2ECA                        ucomisd xmm1, xmm2
  1700 00001401 0F84450A0000                    je L_error_division_by_zero
  1701 00001407 F20F5EC1                        divsd xmm0, xmm1
  1702 0000140B E8A2080000                      call make_real
  1703                                          LEAVE
  1703 00001410 C9                  <1>  leave
  1704 00001411 C22000                          ret AND_KILL_FRAME(2)
  1705                                  
  1706                                  L_code_ptr_raw_bin_add_qq:
  1707                                          ENTER
  1707 00001414 C8000000            <1>  enter 0, 0
  1707 00001418 4883E4F0            <1>  and rsp, ~15
  1708 0000141C 48837D1802                      cmp COUNT, 2
  1709 00001421 0F854D090000                    jne L_error_arg_count_2
  1710 00001427 4C8B4520                        mov r8, PARAM(0)
  1711                                          assert_rational(r8)
  1711 0000142B 41803811            <1>  cmp byte [%1], %2
  1711 0000142F 0F85EF090000        <1>  jne L_error_incorrect_type
  1712 00001435 4C8B4D28                        mov r9, PARAM(1)
  1713                                          assert_rational(r9)
  1713 00001439 41803911            <1>  cmp byte [%1], %2
  1713 0000143D 0F85E1090000        <1>  jne L_error_incorrect_type
  1714 00001443 498B4001                        mov rax, qword [r8 + 1] ; num1
  1715 00001447 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1716 0000144B 4899                            cqo
  1717 0000144D 48F7EB                          imul rbx
  1718 00001450 4889C6                          mov rsi, rax
  1719 00001453 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1720 00001457 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1721 0000145B 4899                            cqo
  1722 0000145D 48F7EB                          imul rbx
  1723 00001460 4801C6                          add rsi, rax
  1724 00001463 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1725 00001467 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1726 0000146B 4899                            cqo
  1727 0000146D 48F7EB                          imul rbx
  1728 00001470 4889C7                          mov rdi, rax
  1729 00001473 E827010000                      call normalize_rational
  1730                                          LEAVE
  1730 00001478 C9                  <1>  leave
  1731 00001479 C22000                          ret AND_KILL_FRAME(2)
  1732                                  
  1733                                  L_code_ptr_raw_bin_sub_qq:
  1734                                          ENTER
  1734 0000147C C8000000            <1>  enter 0, 0
  1734 00001480 4883E4F0            <1>  and rsp, ~15
  1735 00001484 48837D1802                      cmp COUNT, 2
  1736 00001489 0F85E5080000                    jne L_error_arg_count_2
  1737 0000148F 4C8B4520                        mov r8, PARAM(0)
  1738                                          assert_rational(r8)
  1738 00001493 41803811            <1>  cmp byte [%1], %2
  1738 00001497 0F8587090000        <1>  jne L_error_incorrect_type
  1739 0000149D 4C8B4D28                        mov r9, PARAM(1)
  1740                                          assert_rational(r9)
  1740 000014A1 41803911            <1>  cmp byte [%1], %2
  1740 000014A5 0F8579090000        <1>  jne L_error_incorrect_type
  1741 000014AB 498B4001                        mov rax, qword [r8 + 1] ; num1
  1742 000014AF 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1743 000014B3 4899                            cqo
  1744 000014B5 48F7EB                          imul rbx
  1745 000014B8 4889C6                          mov rsi, rax
  1746 000014BB 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1747 000014BF 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1748 000014C3 4899                            cqo
  1749 000014C5 48F7EB                          imul rbx
  1750 000014C8 4829C6                          sub rsi, rax
  1751 000014CB 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1752 000014CF 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1753 000014D3 4899                            cqo
  1754 000014D5 48F7EB                          imul rbx
  1755 000014D8 4889C7                          mov rdi, rax
  1756 000014DB E8BF000000                      call normalize_rational
  1757                                          LEAVE
  1757 000014E0 C9                  <1>  leave
  1758 000014E1 C22000                          ret AND_KILL_FRAME(2)
  1759                                  
  1760                                  L_code_ptr_raw_bin_mul_qq:
  1761                                          ENTER
  1761 000014E4 C8000000            <1>  enter 0, 0
  1761 000014E8 4883E4F0            <1>  and rsp, ~15
  1762 000014EC 48837D1802                      cmp COUNT, 2
  1763 000014F1 0F857D080000                    jne L_error_arg_count_2
  1764 000014F7 4C8B4520                        mov r8, PARAM(0)
  1765                                          assert_rational(r8)
  1765 000014FB 41803811            <1>  cmp byte [%1], %2
  1765 000014FF 0F851F090000        <1>  jne L_error_incorrect_type
  1766 00001505 4C8B4D28                        mov r9, PARAM(1)
  1767                                          assert_rational(r9)
  1767 00001509 41803911            <1>  cmp byte [%1], %2
  1767 0000150D 0F8511090000        <1>  jne L_error_incorrect_type
  1768 00001513 498B4001                        mov rax, qword [r8 + 1] ; num1
  1769 00001517 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1770 0000151B 4899                            cqo
  1771 0000151D 48F7EB                          imul rbx
  1772 00001520 4889C6                          mov rsi, rax
  1773 00001523 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1774 00001527 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1775 0000152B 4899                            cqo
  1776 0000152D 48F7EB                          imul rbx
  1777 00001530 4889C7                          mov rdi, rax
  1778 00001533 E867000000                      call normalize_rational
  1779                                          LEAVE
  1779 00001538 C9                  <1>  leave
  1780 00001539 C22000                          ret AND_KILL_FRAME(2)
  1781                                          
  1782                                  L_code_ptr_raw_bin_div_qq:
  1783                                          ENTER
  1783 0000153C C8000000            <1>  enter 0, 0
  1783 00001540 4883E4F0            <1>  and rsp, ~15
  1784 00001544 48837D1802                      cmp COUNT, 2
  1785 00001549 0F8525080000                    jne L_error_arg_count_2
  1786 0000154F 4C8B4520                        mov r8, PARAM(0)
  1787                                          assert_rational(r8)
  1787 00001553 41803811            <1>  cmp byte [%1], %2
  1787 00001557 0F85C7080000        <1>  jne L_error_incorrect_type
  1788 0000155D 4C8B4D28                        mov r9, PARAM(1)
  1789                                          assert_rational(r9)
  1789 00001561 41803911            <1>  cmp byte [%1], %2
  1789 00001565 0F85B9080000        <1>  jne L_error_incorrect_type
  1790 0000156B 4983790100                      cmp qword [r9 + 1], 0
  1791 00001570 0F84D6080000                    je L_error_division_by_zero
  1792 00001576 498B4001                        mov rax, qword [r8 + 1] ; num1
  1793 0000157A 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1794 0000157E 4899                            cqo
  1795 00001580 48F7EB                          imul rbx
  1796 00001583 4889C6                          mov rsi, rax
  1797 00001586 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1798 0000158A 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1799 0000158E 4899                            cqo
  1800 00001590 48F7EB                          imul rbx
  1801 00001593 4889C7                          mov rdi, rax
  1802 00001596 E804000000                      call normalize_rational
  1803                                          LEAVE
  1803 0000159B C9                  <1>  leave
  1804 0000159C C22000                          ret AND_KILL_FRAME(2)
  1805                                          
  1806                                  normalize_rational:
  1807 0000159F 56                              push rsi
  1808 000015A0 57                              push rdi
  1809 000015A1 E839000000                      call gcd
  1810 000015A6 4889C3                          mov rbx, rax
  1811 000015A9 58                              pop rax
  1812 000015AA 4899                            cqo
  1813 000015AC 48F7FB                          idiv rbx
  1814 000015AF 4989C0                          mov r8, rax
  1815 000015B2 58                              pop rax
  1816 000015B3 4899                            cqo
  1817 000015B5 48F7FB                          idiv rbx
  1818 000015B8 4989C1                          mov r9, rax
  1819 000015BB BF11000000                      mov rdi, (1 + 8 + 8)
  1820 000015C0 E8BAF0FFFF                      call malloc
  1821 000015C5 C60011                          mov byte [rax], T_rational
  1822 000015C8 4C894801                        mov qword [rax + 1], r9
  1823 000015CC 4C894009                        mov qword [rax + 1 + 8], r8
  1824 000015D0 C3                              ret
  1825                                  
  1826                                  iabs:
  1827 000015D1 4889F8                          mov rax, rdi
  1828 000015D4 4883F800                        cmp rax, 0
  1829 000015D8 7C01                            jl .Lneg
  1830 000015DA C3                              ret
  1831                                  .Lneg:
  1832 000015DB 48F7D8                          neg rax
  1833 000015DE C3                              ret
  1834                                  
  1835                                  gcd:
  1836 000015DF E8EDFFFFFF                      call iabs
  1837 000015E4 4889C3                          mov rbx, rax
  1838 000015E7 4889F7                          mov rdi, rsi
  1839 000015EA E8E2FFFFFF                      call iabs
  1840 000015EF 4883F800                        cmp rax, 0
  1841 000015F3 7502                            jne .L0
  1842 000015F5 4893                            xchg rax, rbx
  1843                                  .L0:
  1844 000015F7 4883FB00                        cmp rbx, 0
  1845 000015FB 740C                            je .L1
  1846 000015FD 4899                            cqo
  1847 000015FF 48F7F3                          div rbx
  1848 00001602 4889D0                          mov rax, rdx
  1849 00001605 4893                            xchg rax, rbx
  1850 00001607 EBEE                            jmp .L0
  1851                                  .L1:
  1852 00001609 C3                              ret
  1853                                  
  1854                                  L_code_ptr_error:
  1855                                          ENTER
  1855 0000160A C8000000            <1>  enter 0, 0
  1855 0000160E 4883E4F0            <1>  and rsp, ~15
  1856 00001612 48837D1802                      cmp COUNT, 2
  1857 00001617 0F8557070000                    jne L_error_arg_count_2
  1858 0000161D 488B7520                        mov rsi, PARAM(0)
  1859                                          assert_symbol(rsi)
  1859 00001621 803E04              <1>  cmp byte [%1], %2
  1859 00001624 0F85FA070000        <1>  jne L_error_incorrect_type
  1860 0000162A 488B7528                        mov rsi, PARAM(1)
  1861                                          assert_string(rsi)
  1861 0000162E 803E03              <1>  cmp byte [%1], %2
  1861 00001631 0F85ED070000        <1>  jne L_error_incorrect_type
  1862 00001637 48BF-                           mov rdi, fmt_scheme_error_part_1
  1862 00001639 [1404000000000000] 
  1863 00001641 B800000000                      mov rax, 0
  1864 00001646 E8(00000000)                    call printf
  1865 0000164B 488B7D20                        mov rdi, PARAM(0)
  1866 0000164F E846F0FFFF                      call print_sexpr
  1867 00001654 48BF-                           mov rdi, fmt_scheme_error_part_2
  1867 00001656 [2804000000000000] 
  1868 0000165E B800000000                      mov rax, 0
  1869 00001663 E8(00000000)                    call printf
  1870 00001668 488B4528                        mov rax, PARAM(1)       ; sob_string
  1871 0000166C BE01000000                      mov rsi, 1              ; size = 1 byte
  1872 00001671 488B5001                        mov rdx, qword [rax + 1] ; length
  1873 00001675 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1874 00001679 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1875 00001681 E8(00000000)                    call fwrite
  1876 00001686 48BF-                           mov rdi, fmt_scheme_error_part_3
  1876 00001688 [6A04000000000000] 
  1877 00001690 B800000000                      mov rax, 0
  1878 00001695 E8(00000000)                    call printf
  1879 0000169A 48C7C0F7FFFFFF                  mov rax, -9
  1880 000016A1 E8(00000000)                    call exit
  1881                                  
  1882                                  L_code_ptr_raw_less_than_rr:
  1883                                          ENTER
  1883 000016A6 C8000000            <1>  enter 0, 0
  1883 000016AA 4883E4F0            <1>  and rsp, ~15
  1884 000016AE 48837D1802                      cmp COUNT, 2
  1885 000016B3 0F85BB060000                    jne L_error_arg_count_2
  1886 000016B9 488B7520                        mov rsi, PARAM(0)
  1887                                          assert_real(rsi)
  1887 000016BD 803E12              <1>  cmp byte [%1], %2
  1887 000016C0 0F855E070000        <1>  jne L_error_incorrect_type
  1888 000016C6 488B7D28                        mov rdi, PARAM(1)
  1889                                          assert_real(rdi)
  1889 000016CA 803F12              <1>  cmp byte [%1], %2
  1889 000016CD 0F8551070000        <1>  jne L_error_incorrect_type
  1890 000016D3 F20F104601                      movsd xmm0, qword [rsi + 1]
  1891 000016D8 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1892 000016DD 660F2FC1                        comisd xmm0, xmm1
  1893 000016E1 730C                            jae .L_false
  1894 000016E3 48B8-                           mov rax, sob_boolean_true
  1894 000016E5 [0300000000000000] 
  1895 000016ED EB0A                            jmp .L_exit
  1896                                  .L_false:
  1897 000016EF 48B8-                           mov rax, sob_boolean_false
  1897 000016F1 [0200000000000000] 
  1898                                  .L_exit:
  1899                                          LEAVE
  1899 000016F9 C9                  <1>  leave
  1900 000016FA C22000                          ret AND_KILL_FRAME(2)
  1901                                          
  1902                                  L_code_ptr_raw_less_than_qq:
  1903                                          ENTER
  1903 000016FD C8000000            <1>  enter 0, 0
  1903 00001701 4883E4F0            <1>  and rsp, ~15
  1904 00001705 48837D1802                      cmp COUNT, 2
  1905 0000170A 0F8564060000                    jne L_error_arg_count_2
  1906 00001710 488B7520                        mov rsi, PARAM(0)
  1907                                          assert_rational(rsi)
  1907 00001714 803E11              <1>  cmp byte [%1], %2
  1907 00001717 0F8507070000        <1>  jne L_error_incorrect_type
  1908 0000171D 488B7D28                        mov rdi, PARAM(1)
  1909                                          assert_rational(rdi)
  1909 00001721 803F11              <1>  cmp byte [%1], %2
  1909 00001724 0F85FA060000        <1>  jne L_error_incorrect_type
  1910 0000172A 488B4601                        mov rax, qword [rsi + 1] ; num1
  1911 0000172E 4899                            cqo
  1912 00001730 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1913 00001734 4889C1                          mov rcx, rax
  1914 00001737 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1915 0000173B 4899                            cqo
  1916 0000173D 48F76F01                        imul qword [rdi + 1]          ; num2
  1917 00001741 4829C1                          sub rcx, rax
  1918 00001744 7D0C                            jge .L_false
  1919 00001746 48B8-                           mov rax, sob_boolean_true
  1919 00001748 [0300000000000000] 
  1920 00001750 EB0A                            jmp .L_exit
  1921                                  .L_false:
  1922 00001752 48B8-                           mov rax, sob_boolean_false
  1922 00001754 [0200000000000000] 
  1923                                  .L_exit:
  1924                                          LEAVE
  1924 0000175C C9                  <1>  leave
  1925 0000175D C22000                          ret AND_KILL_FRAME(2)
  1926                                  
  1927                                  L_code_ptr_raw_equal_rr:
  1928                                          ENTER
  1928 00001760 C8000000            <1>  enter 0, 0
  1928 00001764 4883E4F0            <1>  and rsp, ~15
  1929 00001768 48837D1802                      cmp COUNT, 2
  1930 0000176D 0F8501060000                    jne L_error_arg_count_2
  1931 00001773 488B7520                        mov rsi, PARAM(0)
  1932                                          assert_real(rsi)
  1932 00001777 803E12              <1>  cmp byte [%1], %2
  1932 0000177A 0F85A4060000        <1>  jne L_error_incorrect_type
  1933 00001780 488B7D28                        mov rdi, PARAM(1)
  1934                                          assert_real(rdi)
  1934 00001784 803F12              <1>  cmp byte [%1], %2
  1934 00001787 0F8597060000        <1>  jne L_error_incorrect_type
  1935 0000178D F20F104601                      movsd xmm0, qword [rsi + 1]
  1936 00001792 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1937 00001797 660F2FC1                        comisd xmm0, xmm1
  1938 0000179B 750C                            jne .L_false
  1939 0000179D 48B8-                           mov rax, sob_boolean_true
  1939 0000179F [0300000000000000] 
  1940 000017A7 EB0A                            jmp .L_exit
  1941                                  .L_false:
  1942 000017A9 48B8-                           mov rax, sob_boolean_false
  1942 000017AB [0200000000000000] 
  1943                                  .L_exit:
  1944                                          LEAVE
  1944 000017B3 C9                  <1>  leave
  1945 000017B4 C22000                          ret AND_KILL_FRAME(2)
  1946                                          
  1947                                  L_code_ptr_raw_equal_qq:
  1948                                          ENTER
  1948 000017B7 C8000000            <1>  enter 0, 0
  1948 000017BB 4883E4F0            <1>  and rsp, ~15
  1949 000017BF 48837D1802                      cmp COUNT, 2
  1950 000017C4 0F85AA050000                    jne L_error_arg_count_2
  1951 000017CA 488B7520                        mov rsi, PARAM(0)
  1952                                          assert_rational(rsi)
  1952 000017CE 803E11              <1>  cmp byte [%1], %2
  1952 000017D1 0F854D060000        <1>  jne L_error_incorrect_type
  1953 000017D7 488B7D28                        mov rdi, PARAM(1)
  1954                                          assert_rational(rdi)
  1954 000017DB 803F11              <1>  cmp byte [%1], %2
  1954 000017DE 0F8540060000        <1>  jne L_error_incorrect_type
  1955 000017E4 488B4601                        mov rax, qword [rsi + 1] ; num1
  1956 000017E8 4899                            cqo
  1957 000017EA 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1958 000017EE 4889C1                          mov rcx, rax
  1959 000017F1 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1960 000017F5 4899                            cqo
  1961 000017F7 48F76F01                        imul qword [rdi + 1]          ; num2
  1962 000017FB 4829C1                          sub rcx, rax
  1963 000017FE 750C                            jne .L_false
  1964 00001800 48B8-                           mov rax, sob_boolean_true
  1964 00001802 [0300000000000000] 
  1965 0000180A EB0A                            jmp .L_exit
  1966                                  .L_false:
  1967 0000180C 48B8-                           mov rax, sob_boolean_false
  1967 0000180E [0200000000000000] 
  1968                                  .L_exit:
  1969                                          LEAVE
  1969 00001816 C9                  <1>  leave
  1970 00001817 C22000                          ret AND_KILL_FRAME(2)
  1971                                  
  1972                                  L_code_ptr_quotient:
  1973                                          ENTER
  1973 0000181A C8000000            <1>  enter 0, 0
  1973 0000181E 4883E4F0            <1>  and rsp, ~15
  1974 00001822 48837D1802                      cmp COUNT, 2
  1975 00001827 0F8547050000                    jne L_error_arg_count_2
  1976 0000182D 488B7520                        mov rsi, PARAM(0)
  1977                                          assert_integer(rsi)
  1977                              <1>  assert_rational(%1)
  1977 00001831 803E11              <2>  cmp byte [%1], %2
  1977 00001834 0F85EA050000        <2>  jne L_error_incorrect_type
  1977 0000183A 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  1977 0000183F 0F85DF050000        <1>  jne L_error_incorrect_type
  1978 00001845 488B7D28                        mov rdi, PARAM(1)
  1979                                          assert_integer(rdi)
  1979                              <1>  assert_rational(%1)
  1979 00001849 803F11              <2>  cmp byte [%1], %2
  1979 0000184C 0F85D2050000        <2>  jne L_error_incorrect_type
  1979 00001852 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
  1979 00001857 0F85C7050000        <1>  jne L_error_incorrect_type
  1980 0000185D 488B4601                        mov rax, qword [rsi + 1]
  1981 00001861 488B5F01                        mov rbx, qword [rdi + 1]
  1982 00001865 4883FB00                        cmp rbx, 0
  1983 00001869 0F84DD050000                    je L_error_division_by_zero
  1984 0000186F 4899                            cqo
  1985 00001871 48F7FB                          idiv rbx
  1986 00001874 4889C7                          mov rdi, rax
  1987 00001877 E852040000                      call make_integer
  1988                                          LEAVE
  1988 0000187C C9                  <1>  leave
  1989 0000187D C22000                          ret AND_KILL_FRAME(2)
  1990                                          
  1991                                  L_code_ptr_remainder:
  1992                                          ENTER
  1992 00001880 C8000000            <1>  enter 0, 0
  1992 00001884 4883E4F0            <1>  and rsp, ~15
  1993 00001888 48837D1802                      cmp COUNT, 2
  1994 0000188D 0F85E1040000                    jne L_error_arg_count_2
  1995 00001893 488B7520                        mov rsi, PARAM(0)
  1996                                          assert_integer(rsi)
  1996                              <1>  assert_rational(%1)
  1996 00001897 803E11              <2>  cmp byte [%1], %2
  1996 0000189A 0F8584050000        <2>  jne L_error_incorrect_type
  1996 000018A0 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  1996 000018A5 0F8579050000        <1>  jne L_error_incorrect_type
  1997 000018AB 488B7D28                        mov rdi, PARAM(1)
  1998                                          assert_integer(rdi)
  1998                              <1>  assert_rational(%1)
  1998 000018AF 803F11              <2>  cmp byte [%1], %2
  1998 000018B2 0F856C050000        <2>  jne L_error_incorrect_type
  1998 000018B8 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
  1998 000018BD 0F8561050000        <1>  jne L_error_incorrect_type
  1999 000018C3 488B4601                        mov rax, qword [rsi + 1]
  2000 000018C7 488B5F01                        mov rbx, qword [rdi + 1]
  2001 000018CB 4883FB00                        cmp rbx, 0
  2002 000018CF 0F8477050000                    je L_error_division_by_zero
  2003 000018D5 4899                            cqo
  2004 000018D7 48F7FB                          idiv rbx
  2005 000018DA 4889D7                          mov rdi, rdx
  2006 000018DD E8EC030000                      call make_integer
  2007                                          LEAVE
  2007 000018E2 C9                  <1>  leave
  2008 000018E3 C22000                          ret AND_KILL_FRAME(2)
  2009                                  
  2010                                  L_code_ptr_set_car:
  2011                                          ENTER
  2011 000018E6 C8000000            <1>  enter 0, 0
  2011 000018EA 4883E4F0            <1>  and rsp, ~15
  2012 000018EE 48837D1802                      cmp COUNT, 2
  2013 000018F3 0F857B040000                    jne L_error_arg_count_2
  2014 000018F9 488B4520                        mov rax, PARAM(0)
  2015                                          assert_pair(rax)
  2015 000018FD 803821              <1>  cmp byte [%1], %2
  2015 00001900 0F851E050000        <1>  jne L_error_incorrect_type
  2016 00001906 488B5D28                        mov rbx, PARAM(1)
  2017 0000190A 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2018 0000190E 48B8-                           mov rax, sob_void
  2018 00001910 [0000000000000000] 
  2019                                          LEAVE
  2019 00001918 C9                  <1>  leave
  2020 00001919 C22000                          ret AND_KILL_FRAME(2)
  2021                                  
  2022                                  L_code_ptr_set_cdr:
  2023                                          ENTER
  2023 0000191C C8000000            <1>  enter 0, 0
  2023 00001920 4883E4F0            <1>  and rsp, ~15
  2024 00001924 48837D1802                      cmp COUNT, 2
  2025 00001929 0F8545040000                    jne L_error_arg_count_2
  2026 0000192F 488B4520                        mov rax, PARAM(0)
  2027                                          assert_pair(rax)
  2027 00001933 803821              <1>  cmp byte [%1], %2
  2027 00001936 0F85E8040000        <1>  jne L_error_incorrect_type
  2028 0000193C 488B5D28                        mov rbx, PARAM(1)
  2029 00001940 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2030 00001944 48B8-                           mov rax, sob_void
  2030 00001946 [0000000000000000] 
  2031                                          LEAVE
  2031 0000194E C9                  <1>  leave
  2032 0000194F C22000                          ret AND_KILL_FRAME(2)
  2033                                  
  2034                                  L_code_ptr_string_ref:
  2035                                          ENTER
  2035 00001952 C8000000            <1>  enter 0, 0
  2035 00001956 4883E4F0            <1>  and rsp, ~15
  2036 0000195A 48837D1802                      cmp COUNT, 2
  2037 0000195F 0F850F040000                    jne L_error_arg_count_2
  2038 00001965 488B7D20                        mov rdi, PARAM(0)
  2039                                          assert_string(rdi)
  2039 00001969 803F03              <1>  cmp byte [%1], %2
  2039 0000196C 0F85B2040000        <1>  jne L_error_incorrect_type
  2040 00001972 488B7528                        mov rsi, PARAM(1)
  2041                                          assert_integer(rsi)
  2041                              <1>  assert_rational(%1)
  2041 00001976 803E11              <2>  cmp byte [%1], %2
  2041 00001979 0F85A5040000        <2>  jne L_error_incorrect_type
  2041 0000197F 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2041 00001984 0F859A040000        <1>  jne L_error_incorrect_type
  2042 0000198A 488B5701                        mov rdx, qword [rdi + 1]
  2043 0000198E 488B4E01                        mov rcx, qword [rsi + 1]
  2044 00001992 4839D1                          cmp rcx, rdx
  2045 00001995 0F8D59030000                    jge L_error_integer_range
  2046 0000199B 4883F900                        cmp rcx, 0
  2047 0000199F 0F8C4F030000                    jl L_error_integer_range
  2048 000019A5 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2049 000019A9 BF02000000                      mov rdi, 2
  2050 000019AE E8CCECFFFF                      call malloc
  2051 000019B3 C60002                          mov byte [rax], T_char
  2052 000019B6 885801                          mov byte [rax + 1], bl
  2053                                          LEAVE
  2053 000019B9 C9                  <1>  leave
  2054 000019BA C22000                          ret AND_KILL_FRAME(2)
  2055                                  
  2056                                  L_code_ptr_vector_ref:
  2057                                          ENTER
  2057 000019BD C8000000            <1>  enter 0, 0
  2057 000019C1 4883E4F0            <1>  and rsp, ~15
  2058 000019C5 48837D1802                      cmp COUNT, 2
  2059 000019CA 0F85A4030000                    jne L_error_arg_count_2
  2060 000019D0 488B7D20                        mov rdi, PARAM(0)
  2061                                          assert_vector(rdi)
  2061 000019D4 803F22              <1>  cmp byte [%1], %2
  2061 000019D7 0F8547040000        <1>  jne L_error_incorrect_type
  2062 000019DD 488B7528                        mov rsi, PARAM(1)
  2063                                          assert_integer(rsi)
  2063                              <1>  assert_rational(%1)
  2063 000019E1 803E11              <2>  cmp byte [%1], %2
  2063 000019E4 0F853A040000        <2>  jne L_error_incorrect_type
  2063 000019EA 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2063 000019EF 0F852F040000        <1>  jne L_error_incorrect_type
  2064 000019F5 488B5701                        mov rdx, qword [rdi + 1]
  2065 000019F9 488B4E01                        mov rcx, qword [rsi + 1]
  2066 000019FD 4839D1                          cmp rcx, rdx
  2067 00001A00 0F8DEE020000                    jge L_error_integer_range
  2068 00001A06 4883F900                        cmp rcx, 0
  2069 00001A0A 0F8CE4020000                    jl L_error_integer_range
  2070 00001A10 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2071                                          LEAVE
  2071 00001A15 C9                  <1>  leave
  2072 00001A16 C22000                          ret AND_KILL_FRAME(2)
  2073                                  
  2074                                  L_code_ptr_vector_set:
  2075                                          ENTER
  2075 00001A19 C8000000            <1>  enter 0, 0
  2075 00001A1D 4883E4F0            <1>  and rsp, ~15
  2076 00001A21 48837D1803                      cmp COUNT, 3
  2077 00001A26 0F85CC030000                    jne L_error_arg_count_3
  2078 00001A2C 488B7D20                        mov rdi, PARAM(0)
  2079                                          assert_vector(rdi)
  2079 00001A30 803F22              <1>  cmp byte [%1], %2
  2079 00001A33 0F85EB030000        <1>  jne L_error_incorrect_type
  2080 00001A39 488B7528                        mov rsi, PARAM(1)
  2081                                          assert_integer(rsi)
  2081                              <1>  assert_rational(%1)
  2081 00001A3D 803E11              <2>  cmp byte [%1], %2
  2081 00001A40 0F85DE030000        <2>  jne L_error_incorrect_type
  2081 00001A46 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2081 00001A4B 0F85D3030000        <1>  jne L_error_incorrect_type
  2082 00001A51 488B5701                        mov rdx, qword [rdi + 1]
  2083 00001A55 488B4E01                        mov rcx, qword [rsi + 1]
  2084 00001A59 4839D1                          cmp rcx, rdx
  2085 00001A5C 0F8D92020000                    jge L_error_integer_range
  2086 00001A62 4883F900                        cmp rcx, 0
  2087 00001A66 0F8C88020000                    jl L_error_integer_range
  2088 00001A6C 488B4530                        mov rax, PARAM(2)
  2089 00001A70 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2090 00001A75 48B8-                           mov rax, sob_void
  2090 00001A77 [0000000000000000] 
  2091                                          LEAVE
  2091 00001A7F C9                  <1>  leave
  2092 00001A80 C22800                          ret AND_KILL_FRAME(3)
  2093                                  
  2094                                  L_code_ptr_string_set:
  2095                                          ENTER
  2095 00001A83 C8000000            <1>  enter 0, 0
  2095 00001A87 4883E4F0            <1>  and rsp, ~15
  2096 00001A8B 48837D1803                      cmp COUNT, 3
  2097 00001A90 0F8562030000                    jne L_error_arg_count_3
  2098 00001A96 488B7D20                        mov rdi, PARAM(0)
  2099                                          assert_string(rdi)
  2099 00001A9A 803F03              <1>  cmp byte [%1], %2
  2099 00001A9D 0F8581030000        <1>  jne L_error_incorrect_type
  2100 00001AA3 488B7528                        mov rsi, PARAM(1)
  2101                                          assert_integer(rsi)
  2101                              <1>  assert_rational(%1)
  2101 00001AA7 803E11              <2>  cmp byte [%1], %2
  2101 00001AAA 0F8574030000        <2>  jne L_error_incorrect_type
  2101 00001AB0 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
  2101 00001AB5 0F8569030000        <1>  jne L_error_incorrect_type
  2102 00001ABB 488B5701                        mov rdx, qword [rdi + 1]
  2103 00001ABF 488B4E01                        mov rcx, qword [rsi + 1]
  2104 00001AC3 4839D1                          cmp rcx, rdx
  2105 00001AC6 0F8D28020000                    jge L_error_integer_range
  2106 00001ACC 4883F900                        cmp rcx, 0
  2107 00001AD0 0F8C1E020000                    jl L_error_integer_range
  2108 00001AD6 488B4530                        mov rax, PARAM(2)
  2109                                          assert_char(rax)
  2109 00001ADA 803802              <1>  cmp byte [%1], %2
  2109 00001ADD 0F8541030000        <1>  jne L_error_incorrect_type
  2110 00001AE3 8A4001                          mov al, byte [rax + 1]
  2111 00001AE6 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2112 00001AEA 48B8-                           mov rax, sob_void
  2112 00001AEC [0000000000000000] 
  2113                                          LEAVE
  2113 00001AF4 C9                  <1>  leave
  2114 00001AF5 C22800                          ret AND_KILL_FRAME(3)
  2115                                  
  2116                                  L_code_ptr_make_vector:
  2117                                          ENTER
  2117 00001AF8 C8000000            <1>  enter 0, 0
  2117 00001AFC 4883E4F0            <1>  and rsp, ~15
  2118 00001B00 48837D1802                      cmp COUNT, 2
  2119 00001B05 0F8569020000                    jne L_error_arg_count_2
  2120 00001B0B 488B4D20                        mov rcx, PARAM(0)
  2121                                          assert_integer(rcx)
  2121                              <1>  assert_rational(%1)
  2121 00001B0F 803911              <2>  cmp byte [%1], %2
  2121 00001B12 0F850C030000        <2>  jne L_error_incorrect_type
  2121 00001B18 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
  2121 00001B1D 0F8501030000        <1>  jne L_error_incorrect_type
  2122 00001B23 488B4901                        mov rcx, qword [rcx + 1]
  2123 00001B27 4883F900                        cmp rcx, 0
  2124 00001B2B 0F8CC3010000                    jl L_error_integer_range
  2125 00001B31 488B5528                        mov rdx, PARAM(1)
  2126 00001B35 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2127 00001B3D E83DEBFFFF                      call malloc
  2128 00001B42 C60022                          mov byte [rax], T_vector
  2129 00001B45 48894801                        mov qword [rax + 1], rcx
  2130 00001B49 41B800000000                    mov r8, 0
  2131                                  .L0:
  2132 00001B4F 4939C8                          cmp r8, rcx
  2133 00001B52 740A                            je .L1
  2134 00001B54 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2135 00001B59 49FFC0                          inc r8
  2136 00001B5C EBF1                            jmp .L0
  2137                                  .L1:
  2138                                          LEAVE
  2138 00001B5E C9                  <1>  leave
  2139 00001B5F C22000                          ret AND_KILL_FRAME(2)
  2140                                          
  2141                                  L_code_ptr_make_string:
  2142                                          ENTER
  2142 00001B62 C8000000            <1>  enter 0, 0
  2142 00001B66 4883E4F0            <1>  and rsp, ~15
  2143 00001B6A 48837D1802                      cmp COUNT, 2
  2144 00001B6F 0F85FF010000                    jne L_error_arg_count_2
  2145 00001B75 488B4D20                        mov rcx, PARAM(0)
  2146                                          assert_integer(rcx)
  2146                              <1>  assert_rational(%1)
  2146 00001B79 803911              <2>  cmp byte [%1], %2
  2146 00001B7C 0F85A2020000        <2>  jne L_error_incorrect_type
  2146 00001B82 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
  2146 00001B87 0F8597020000        <1>  jne L_error_incorrect_type
  2147 00001B8D 488B4901                        mov rcx, qword [rcx + 1]
  2148 00001B91 4883F900                        cmp rcx, 0
  2149 00001B95 0F8C59010000                    jl L_error_integer_range
  2150 00001B9B 488B5528                        mov rdx, PARAM(1)
  2151                                          assert_char(rdx)
  2151 00001B9F 803A02              <1>  cmp byte [%1], %2
  2151 00001BA2 0F857C020000        <1>  jne L_error_incorrect_type
  2152 00001BA8 8A5201                          mov dl, byte [rdx + 1]
  2153 00001BAB 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2154 00001BAF E8CBEAFFFF                      call malloc
  2155 00001BB4 C60003                          mov byte [rax], T_string
  2156 00001BB7 48894801                        mov qword [rax + 1], rcx
  2157 00001BBB 41B800000000                    mov r8, 0
  2158                                  .L0:
  2159 00001BC1 4939C8                          cmp r8, rcx
  2160 00001BC4 740A                            je .L1
  2161 00001BC6 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2162 00001BCB 49FFC0                          inc r8
  2163 00001BCE EBF1                            jmp .L0
  2164                                  .L1:
  2165                                          LEAVE
  2165 00001BD0 C9                  <1>  leave
  2166 00001BD1 C22000                          ret AND_KILL_FRAME(2)
  2167                                  
  2168                                  L_code_ptr_numerator:
  2169                                          ENTER
  2169 00001BD4 C8000000            <1>  enter 0, 0
  2169 00001BD8 4883E4F0            <1>  and rsp, ~15
  2170 00001BDC 48837D1801                      cmp COUNT, 1
  2171 00001BE1 0F8561010000                    jne L_error_arg_count_1
  2172 00001BE7 488B4520                        mov rax, PARAM(0)
  2173                                          assert_rational(rax)
  2173 00001BEB 803811              <1>  cmp byte [%1], %2
  2173 00001BEE 0F8530020000        <1>  jne L_error_incorrect_type
  2174 00001BF4 488B7801                        mov rdi, qword [rax + 1]
  2175 00001BF8 E8D1000000                      call make_integer
  2176                                          LEAVE
  2176 00001BFD C9                  <1>  leave
  2177 00001BFE C21800                          ret AND_KILL_FRAME(1)
  2178                                          
  2179                                  L_code_ptr_denominator:
  2180                                          ENTER
  2180 00001C01 C8000000            <1>  enter 0, 0
  2180 00001C05 4883E4F0            <1>  and rsp, ~15
  2181 00001C09 48837D1801                      cmp COUNT, 1
  2182 00001C0E 0F8534010000                    jne L_error_arg_count_1
  2183 00001C14 488B4520                        mov rax, PARAM(0)
  2184                                          assert_rational(rax)
  2184 00001C18 803811              <1>  cmp byte [%1], %2
  2184 00001C1B 0F8503020000        <1>  jne L_error_incorrect_type
  2185 00001C21 488B7809                        mov rdi, qword [rax + 1 + 8]
  2186 00001C25 E8A4000000                      call make_integer
  2187                                          LEAVE
  2187 00001C2A C9                  <1>  leave
  2188 00001C2B C21800                          ret AND_KILL_FRAME(1)
  2189                                  
  2190                                  L_code_ptr_eq:
  2191                                  	ENTER
  2191 00001C2E C8000000            <1>  enter 0, 0
  2191 00001C32 4883E4F0            <1>  and rsp, ~15
  2192 00001C36 48837D1802              	cmp COUNT, 2
  2193 00001C3B 0F8533010000            	jne L_error_arg_count_2
  2194 00001C41 488B7D20                	mov rdi, PARAM(0)
  2195 00001C45 488B7528                	mov rsi, PARAM(1)
  2196 00001C49 4839F7                  	cmp rdi, rsi
  2197 00001C4C 744A                    	je .L_eq_true
  2198 00001C4E 8A17                    	mov dl, byte [rdi]
  2199 00001C50 3A16                    	cmp dl, byte [rsi]
  2200 00001C52 7550                    	jne .L_eq_false
  2201 00001C54 80FA02                  	cmp dl, T_char
  2202 00001C57 7437                    	je .L_char
  2203 00001C59 80FA04                  	cmp dl, T_symbol
  2204 00001C5C 742A                    	je .L_symbol
  2205 00001C5E 80FA12                  	cmp dl, T_real
  2206 00001C61 741D                    	je .L_real
  2207 00001C63 80FA11                  	cmp dl, T_rational
  2208 00001C66 7402                    	je .L_rational
  2209 00001C68 EB3A                    	jmp .L_eq_false
  2210                                  .L_rational:
  2211 00001C6A 488B4601                	mov rax, qword [rsi + 1]
  2212 00001C6E 483B4701                	cmp rax, qword [rdi + 1]
  2213 00001C72 7530                    	jne .L_eq_false
  2214 00001C74 488B4609                	mov rax, qword [rsi + 1 + 8]
  2215 00001C78 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2216 00001C7C 7526                    	jne .L_eq_false
  2217 00001C7E EB18                    	jmp .L_eq_true
  2218                                  .L_real:
  2219 00001C80 488B4601                	mov rax, qword [rsi + 1]
  2220 00001C84 483B4701                	cmp rax, qword [rdi + 1]
  2221                                  .L_symbol:
  2222                                  	; never reached, because symbols are static!
  2223                                  	; but I'm keeping it in case, I'll ever change
  2224                                  	; the implementation
  2225 00001C88 488B4601                	mov rax, qword [rsi + 1]
  2226 00001C8C 483B4701                	cmp rax, qword [rdi + 1]
  2227                                  .L_char:
  2228 00001C90 8A5E01                  	mov bl, byte [rsi + 1]
  2229 00001C93 3A5F01                  	cmp bl, byte [rdi + 1]
  2230 00001C96 750C                    	jne .L_eq_false
  2231                                  .L_eq_true:
  2232 00001C98 48B8-                   	mov rax, sob_boolean_true
  2232 00001C9A [0300000000000000] 
  2233 00001CA2 EB0A                    	jmp .L_eq_exit
  2234                                  .L_eq_false:
  2235 00001CA4 48B8-                   	mov rax, sob_boolean_false
  2235 00001CA6 [0200000000000000] 
  2236                                  .L_eq_exit:
  2237                                  	LEAVE
  2237 00001CAE C9                  <1>  leave
  2238 00001CAF C22000                  	ret AND_KILL_FRAME(2)
  2239                                  
  2240                                  make_real:
  2241                                          ENTER
  2241 00001CB2 C8000000            <1>  enter 0, 0
  2241 00001CB6 4883E4F0            <1>  and rsp, ~15
  2242 00001CBA BF09000000                      mov rdi, (1 + 8)
  2243 00001CBF E8BBE9FFFF                      call malloc
  2244 00001CC4 C60012                          mov byte [rax], T_real
  2245 00001CC7 F20F114001                      movsd qword [rax + 1], xmm0
  2246                                          LEAVE
  2246 00001CCC C9                  <1>  leave
  2247 00001CCD C3                              ret
  2248                                          
  2249                                  make_integer:
  2250                                          ENTER
  2250 00001CCE C8000000            <1>  enter 0, 0
  2250 00001CD2 4883E4F0            <1>  and rsp, ~15
  2251 00001CD6 4889FE                          mov rsi, rdi
  2252 00001CD9 BF11000000                      mov rdi, (1 + 8 + 8)
  2253 00001CDE E89CE9FFFF                      call malloc
  2254 00001CE3 C60011                          mov byte [rax], T_rational
  2255 00001CE6 48897001                        mov qword [rax + 1], rsi
  2256 00001CEA 48C7400901000000                mov qword [rax + 1 + 8], 1
  2257                                          LEAVE
  2257 00001CF2 C9                  <1>  leave
  2258 00001CF3 C3                              ret
  2259                                          
  2260                                  L_error_integer_range:
  2261 00001CF4 488B3C25[00000000]              mov rdi, qword [stderr]
  2262 00001CFC 48BE-                           mov rsi, fmt_integer_range
  2262 00001CFE [E103000000000000] 
  2263 00001D06 B800000000                      mov rax, 0
  2264 00001D0B E8(00000000)                    call fprintf
  2265 00001D10 48C7C0FBFFFFFF                  mov rax, -5
  2266 00001D17 E8(00000000)                    call exit
  2267                                  
  2268                                  L_error_arg_count_0:
  2269 00001D1C 488B3C25[00000000]              mov rdi, qword [stderr]
  2270 00001D24 48BE-                           mov rsi, fmt_arg_count_0
  2270 00001D26 [C202000000000000] 
  2271 00001D2E 488B5518                        mov rdx, COUNT
  2272 00001D32 B800000000                      mov rax, 0
  2273 00001D37 E8(00000000)                    call fprintf
  2274 00001D3C 48C7C0FDFFFFFF                  mov rax, -3
  2275 00001D43 E8(00000000)                    call exit
  2276                                  
  2277                                  L_error_arg_count_1:
  2278 00001D48 488B3C25[00000000]              mov rdi, qword [stderr]
  2279 00001D50 48BE-                           mov rsi, fmt_arg_count_1
  2279 00001D52 [EA02000000000000] 
  2280 00001D5A 488B5518                        mov rdx, COUNT
  2281 00001D5E B800000000                      mov rax, 0
  2282 00001D63 E8(00000000)                    call fprintf
  2283 00001D68 48C7C0FDFFFFFF                  mov rax, -3
  2284 00001D6F E8(00000000)                    call exit
  2285                                  
  2286                                  L_error_arg_count_2:
  2287 00001D74 488B3C25[00000000]              mov rdi, qword [stderr]
  2288 00001D7C 48BE-                           mov rsi, fmt_arg_count_2
  2288 00001D7E [6D03000000000000] 
  2289 00001D86 488B5518                        mov rdx, COUNT
  2290 00001D8A B800000000                      mov rax, 0
  2291 00001D8F E8(00000000)                    call fprintf
  2292 00001D94 48C7C0FDFFFFFF                  mov rax, -3
  2293 00001D9B E8(00000000)                    call exit
  2294                                  
  2295                                  L_error_arg_count_12:
  2296 00001DA0 488B3C25[00000000]              mov rdi, qword [stderr]
  2297 00001DA8 48BE-                           mov rsi, fmt_arg_count_12
  2297 00001DAA [1003000000000000] 
  2298 00001DB2 488B5518                        mov rdx, COUNT
  2299 00001DB6 B800000000                      mov rax, 0
  2300 00001DBB E8(00000000)                    call fprintf
  2301 00001DC0 48C7C0FDFFFFFF                  mov rax, -3
  2302 00001DC7 E8(00000000)                    call exit
  2303                                  
  2304                                  L_sagy_debug:
  2305 00001DCC 488B3C25[00000000]              mov rdi, qword [stderr]
  2306 00001DD4 48BE-                           mov rsi, fmt_sagy_debug
  2306 00001DD6 [5003000000000000] 
  2307 00001DDE 488B5518                        mov rdx, COUNT
  2308 00001DE2 B800000000                      mov rax, 0
  2309 00001DE7 E8(00000000)                    call fprintf
  2310 00001DEC 48C7C0FDFFFFFF                  mov rax, -3
  2311 00001DF3 E8(00000000)                    call exit
  2312                                  
  2313                                  L_error_arg_count_3:
  2314 00001DF8 488B3C25[00000000]              mov rdi, qword [stderr]
  2315 00001E00 48BE-                           mov rsi, fmt_arg_count_3
  2315 00001E02 [9403000000000000] 
  2316 00001E0A 488B5518                        mov rdx, COUNT
  2317 00001E0E B800000000                      mov rax, 0
  2318 00001E13 E8(00000000)                    call fprintf
  2319 00001E18 48C7C0FDFFFFFF                  mov rax, -3
  2320 00001E1F E8(00000000)                    call exit
  2321                                          
  2322                                  L_error_incorrect_type:
  2323 00001E24 488B3C25[00000000]              mov rdi, qword [stderr]
  2324 00001E2C 48BE-                           mov rsi, fmt_type
  2324 00001E2E [BD03000000000000] 
  2325 00001E36 B800000000                      mov rax, 0
  2326 00001E3B E8(00000000)                    call fprintf
  2327 00001E40 48C7C0FCFFFFFF                  mov rax, -4
  2328 00001E47 E8(00000000)                    call exit
  2329                                  
  2330                                  L_error_division_by_zero:
  2331 00001E4C 488B3C25[00000000]              mov rdi, qword [stderr]
  2332 00001E54 48BE-                           mov rsi, fmt_division_by_zero
  2332 00001E56 [FE03000000000000] 
  2333 00001E5E B800000000                      mov rax, 0
  2334 00001E63 E8(00000000)                    call fprintf
  2335 00001E68 48C7C0F8FFFFFF                  mov rax, -8
  2336 00001E6F E8(00000000)                    call exit
  2337                                  
  2338                                  section .data
  2339                                  fmt_char:
  2340 000002BF 256300                          db `%c\0`
  2341                                  fmt_arg_count_0:
  2342 000002C2 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2342 000002CB 74696E67207A65726F-
  2342 000002D4 20617267756D656E74-
  2342 000002DD 732E20466F756E6420-
  2342 000002E6 25640A00           
  2343                                  fmt_arg_count_1:
  2344 000002EA 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2344 000002F3 74696E67206F6E6520-
  2344 000002FC 617267756D656E742E-
  2344 00000305 20466F756E64202564-
  2344 0000030E 0A00               
  2345                                  fmt_arg_count_12:
  2346 00000310 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2346 00000319 74696E67206F6E6520-
  2346 00000322 726571756972656420-
  2346 0000032B 616E64206F6E65206F-
  2346 00000334 7074696F6E616C2061-
  2346 0000033D 7267756D656E742E20-
  2346 00000346 466F756E642025640A-
  2346 0000034F 00                 
  2347                                  fmt_sagy_debug:
  2348 00000350 212121202A2A2A2A20-             db `!!! **** SAGY DEBUG **** %d\n\0`
  2348 00000359 534147592044454255-
  2348 00000362 47202A2A2A2A202564-
  2348 0000036B 0A00               
  2349                                  fmt_arg_count_2:
  2350 0000036D 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2350 00000376 74696E672074776F20-
  2350 0000037F 617267756D656E7473-
  2350 00000388 2E20466F756E642025-
  2350 00000391 640A00             
  2351                                  fmt_arg_count_3:
  2352 00000394 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2352 0000039D 74696E672074687265-
  2352 000003A6 6520617267756D656E-
  2352 000003AF 74732E20466F756E64-
  2352 000003B8 2025640A00         
  2353                                  fmt_type:
  2354 000003BD 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2354 000003C6 696F6E207061737365-
  2354 000003CF 6420696E636F727265-
  2354 000003D8 637420747970650A00 
  2355                                  fmt_integer_range:
  2356 000003E1 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2356 000003EA 7265637420696E7465-
  2356 000003F3 6765722072616E6765-
  2356 000003FC 0A00               
  2357                                  fmt_division_by_zero:
  2358 000003FE 212121204469766973-             db `!!! Division by zero\n\0`
  2358 00000407 696F6E206279207A65-
  2358 00000410 726F0A00           
  2359                                  fmt_scheme_error_part_1:
  2360 00000414 0A2121212054686520-             db `\n!!! The procedure \0`
  2360 0000041D 70726F636564757265-
  2360 00000426 2000               
  2361                                  fmt_scheme_error_part_2:
  2362 00000428 2061736B656420746F-             db ` asked to terminate the program\n`
  2362 00000431 207465726D696E6174-
  2362 0000043A 65207468652070726F-
  2362 00000443 6772616D0A         
  2363 00000448 202020207769746820-             db `    with the following message:\n\n\0`
  2363 00000451 74686520666F6C6C6F-
  2363 0000045A 77696E67206D657373-
  2363 00000463 6167653A0A0A00     
  2364                                  fmt_scheme_error_part_3:
  2365 0000046A 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2365 00000473 210A0A00           
